defpackage stz/infer :
   import core
   import collections
   import stz/utils
   import stz/tl-ir
   import stz/type-calculus
   import stz/algorithms
   import stz/primitives
   import stz/ids

;============================================================
;================= Constraint Language ======================
;============================================================
#use-overlay(stz/ast-lang, stz/printer-lang)

public defmulti n (c:Constraint) -> Int

public defast :
   deftype Constraint
   defnodes Constraint :
      FlowConstraint :
         n:Int with: (as-method => true)
         a:Type
         b:Type
      LSFlowConstraint :
         n:Int with: (as-method => true)
         a:LSType
         b:LSType
      SuperConstraint :
         n:Int with: (as-method => true)
         type:Type
      MixConstraint :
         n:Int with: (as-method => true)
         sel:Int
         xs:List<False|TArrow>         
      LSMixConstraint :
         n:Int with: (as-method => true)
         sel:Int
         xs:List<False|FnT>
      LSPickConstraint :
         n:Int with: (as-method => true)
         sel:Int
         xs:List<False|FnT>
      PartofConstraint :
         n:Int with: (as-method => true)
         xs:List<False|TArrow>
         y:Type         
      CallableConstraint :
         n: Int with: (as-method => true)
         xs:List<False|TArrow>
         args:List<List<Type>>
      LSCallableConstraint :
         n: Int with: (as-method => true)
         xs:List<False|FnT>
         args:List<List<LSType>>
      LSSelConstraint :
         n:Int with: (as-method => true)
         xs:List<False|FnT>
         y:LSType
      SelMultiConstraint :
         n:Int with: (as-method => true)
         x:TArrow
         ys:List<False|TArrow>
      SubConstraint :
         n:Int with: (as-method => true)
         x:Type
         env:List<KeyValue<Int, Type>>
      LSSubConstraint :
         n:Int with: (as-method => true)
         x:LSType
         env:List<KeyValue<Int, Type>>
      EqualConstraint :
         n:Int with: (as-method => true)
         type:Type
      LSEqualConstraint :
         n:Int with: (as-method => true)
         type:LSType
      DeptrConstraint :
         n:Int with: (as-method => true)
         type:LSType
      DerefConstraint :
         n:Int with: (as-method => true)
         type:LSType
      FieldConstraint :
         n:Int with: (as-method => true)
         type:LSType
         name:Symbol
      ArgConstraint :
         n:Int with: (as-method => true)
         type:LSType
         i:Int
         arity:Int
      RetConstraint :
         n:Int with: (as-method => true)
         type:LSType
      RefTypeConstraint :
         n:Int with: (as-method => true)
         type:LSType
      LSPrimConstraint :
         n:Int with: (as-method => true)
         op:LSPrimitive
         args:List<LSType>

   make-mapper(f: Type -> Type, c:Constraint)
   make-mapper(f: LSType -> LSType, c:Constraint)

   defmapper (f:Type -> Type) :
      (x:Type) : f(x)
      (x:TArrow) : f(x) as TArrow
      (xs:List<False|TArrow>) : for x in xs map : f(x as TArrow) as TArrow when x not-typeof False
      (x:List<List<Type>>) : for xs in x map : map(f, xs)
      (xs:List<KeyValue<Int,Type>>) : for x in xs map : key(x) => f(value(x))

   defmapper (f:LSType -> LSType) :
      (x:LSType) : f(x)
      (xs:List<LSType>) : map(f, xs)
      (xs:List<False|FnT>) : for x in xs map : f(x as FnT) as FnT when x not-typeof False
      (xs:List<List<LSType>>) : for x in xs map : map(f, x)

   ignore :
      Int
      Symbol
      LSPrimitive


defprinter (c:Constraint) :
   FlowConstraint :
      ($flow n a b)
   LSFlowConstraint :
      ($ls-flow n a b)
   SuperConstraint :
      ($super n type)
   MixConstraint :
      ($mix n sel (xs ...))
   LSMixConstraint :
      ($ls-mix n sel (xs ...))
   LSPickConstraint :
      ($ls-pick n sel (xs ...))
   PartofConstraint :
      ($partof n (xs ...) y)
   CallableConstraint :
      ($callable n (xs ...) (args ...))
   LSCallableConstraint :
      ($ls-callable n (xs ...) (args ...))
   LSSelConstraint :
      ($ls-sel n (xs ...) y)
   SelMultiConstraint :
      ($selmethod n x (ys ...))
   SubConstraint :
      ($sub n x env ...)
   LSSubConstraint :
      ($ls-sub n x env ...)
   EqualConstraint :
      ($equal n type)
   LSEqualConstraint :
      ($ls-equal n type)
   DeptrConstraint :
      ($deptr n type)
   DerefConstraint :
      ($deref n type)
   FieldConstraint :
      ($field n type name)
   ArgConstraint :
      ($arg n type i arity)
   RetConstraint :
      ($ret n type)
   RefTypeConstraint :
      ($ref-type n type)
   LSPrimConstraint :
      ($ls-prim n op args ...)

;============================================================
;====================== Solver ==============================
;============================================================

defstruct SolveError <: Exception

public defstruct SolveResults :
   types: HashTable<Int,Type>
   lstypes: HashTable<Int,LSType>
   sels: HashTable<Int,Selection>

defstruct SubException <: Exception :
   result: False|Unknown

public defn solve (constraints:Many<Constraint>) -> SolveResults :
   ;======== State ========   
   ;Type: Type is successfully substituted
   ;False: Type depends upon an invalid type.
   ;Unknown: Type depends upon a variable that will never be known.
   val solved = HashTable<Int,Type>()
   val lssolved = HashTable<Int,LSType>()

   ;SSel: Selection is possibly calculated (may contain unknowns)
   ;Unknown: Selection depends upon variables that will never be known.
   val selsolved = HashTable<Int,SSel>()

   ;Constraint queue.
   val cqueue = Queue<Constraint>()   
   do(add{cqueue, _}, constraints)

   ;======== Solving Utility Functions ========
   defn sub-known (t:Type) -> Type :
      defn save (n:Int, t:Type) :
         solved[n] = t
         t
      match(t) :
         (t:TUVar) :
            if key?(solved, n(t)) :
               save(n(t), sub-known(solved[n(t)]))
            else : t
         (t) : map(sub-known, t)

   defn sub-known (t:LSType) -> LSType :
      defn save (n:Int, t:LSType) :
         lssolved[n] = t
         t
      match(t) :
         (t:UVarT) :
            if key?(lssolved, n(t)) :
               save(n(t), sub-known(lssolved[n(t)]))
            else : t
         (t) : map(sub-known{_:LSType}, map(sub-known{_:Type}, t))   

   ;Retrieve the current settings of the selection variable n
   ;List<True|Possibly|False> : Selection is fully known
   ;Unknown : Selection is not yet known.
   defn get-sel (n:Int) :
      match(get?(selsolved, n, false)) :
         (s:SSel) :
            if none?(uk?, sels(s)) : sels(s) as List<True|Possibly|False>
            else : unknown
         (s:False) : unknown
   defn get-sel! (n:Int) :
      val s = selsolved[n] as SSel
      sels(s) as List<True|Possibly|False>

   ;Substitute variables in constraint
   defn sub-known (c:Constraint) :
      map(sub-known{_:LSType},
         map(sub-known{_:Type}, c))

   defn isolate (s:List) :
      if count({_ not-typeof False}, s) == 1 :
         map({_ not-typeof False}, s)
      else : s

   defn uk? (x) : x typeof Unknown

   defn rm-cycles (n*:Int, t:Type) -> Type :
      defn tor (a:Type, b:Type) :
         match(a, b) :
            (a:TBot, b) : b
            (a, b:TBot) : a
            (a, b) : TOr(a, b)
      match(t) :
         (t:TOr) : tor(rm-cycles(n*, a(t)), rm-cycles(n*, b(t)))
         (t:TUVar) : TBot() when n(t) == n* else t
         (t) : t

   defn occurs? (n*:Int, t:Type) :
      match(t) :
         (t:TUVar) : n(t) == n*
         (t) : any?(occurs?{n*, _}, children(t))

   defn occurs? (n*:Int, t:LSType) :
      match(t) :
         (t:UVarT) : n(t) == n*
         (t) : any?(occurs?{n*, _}, children(t))

   ;======== Phase 1: Removing super constraints ========
   remove-super-constraints() where :
      defn remove-super-constraints () :
         val vars = HashTable<Int,Type>()
         defn super (n:Int, b:Type) :
            vars[n] = match(get?(vars, n, false), b) :
               (a:False, b) : b
               (a:Type, b) : TOr(a, b)
         for i in 0 to length(cqueue) do :
            match(pop(cqueue)) :
               (c:SuperConstraint) : super(n(c), type(c))
               (c) : add(cqueue, c)
         for entry in vars do :
            val [n, t] = [key(entry), value(entry)]
            add(cqueue, EqualConstraint(n, t))

   ;======== Phase 2: Dataflow solver ========
   fixpoint $ fn (progress) :
      ;Note constraint was not solved on this iteration         
      defn unsolved (c:Constraint) :
         add(cqueue, c)
      ;Note solutions
      defn set-solved (n:Int, type:Type) :
         val t = rm-cycles(n, type)
         if not occurs?(n, t) :
            solved[n] = simplify(t)
            progress()
      defn set-ls-solved (n:Int, type:LSType) :
         if not occurs?(n, type) :
            lssolved[n] = simplify(type)
            progress()
      defn set-solved-sel (n:Int, xs:List) :
         defn update () :
            selsolved[n] = SSel(xs)
            progress()
         if key?(selsolved, n) :
            val s = selsolved[n] as SSel
            update() when sels(s) != xs
         else : update()
      ;Helper for updating selections   
      defn update-sel (c:Constraint, xs:List<False|TArrow>, f: TArrow -> True|False|Possibly|Unknown) :
         val sel = isolate $
            for x in xs map :
               f(x as TArrow) when x not-typeof False
         set-solved-sel(n(c), sel)
         unsolved(c) when any?(uk?, sel)
      defn update-sel (c:Constraint, xs:List<False|FnT>, f: FnT -> True|False|Possibly|Unknown) :
         val sel = isolate $
            for x in xs map :
               f(x as FnT) when x not-typeof False
         set-solved-sel(n(c), sel)
         unsolved(c) when any?(uk?, sel)

      for ci in 0 to length(cqueue) do :
         match(sub-known(pop(cqueue))) :
            (c:FlowConstraint) :
               match(flow(n(c), a(c), b(c))) :
                  (t:Type) : set-solved(n(c), t)
                  (t:False) : false
                  (t:Unknown) : unsolved(c)
            (c:LSFlowConstraint) :
               match(flow(n(c), a(c), b(c))) :
                  (t:Type) : set-solved(n(c), t)
                  (t:False) : false
                  (t:Unknown) : unsolved(c)
            (c:MixConstraint) :
               match(get-sel(sel(c))) :
                  (s:List<True|Possibly|False>) :
                     match(mix(s, xs(c))) :
                        (t:Type) : set-solved(n(c), t)
                        (t:False) : false                     
                  (s:Unknown) : unsolved(c)               
            (c:LSMixConstraint) :
               match(get-sel(sel(c))) :
                  (s:List<True|Possibly|False>) :
                     match(mix(s, xs(c))) :
                        (t:LSType) : set-ls-solved(n(c), t)
                        (t:False) : false
                  (s:Unknown) : unsolved(c)               
            (c:LSPickConstraint) :
               match(get-sel(sel(c))) :
                  (s:List<True|Possibly|False>) : 
                     if count({_ not-typeof False}, s) == 1 :
                        val x* = for (x in xs(c), si in s) find! : si not-typeof False
                        set-ls-solved(n(c), x* as FnT)
                  (s:Unknown) : unsolved(c)               
            (c:PartofConstraint) :
               update-sel(c, xs(c), partof?{_, y(c)})
            (c:CallableConstraint) :
               update-sel(c, xs(c), part-callable?{_, args(c)})
            (c:LSCallableConstraint) :
               update-sel(c, xs(c), part-callable?{_, args(c)})
            (c:LSSelConstraint) :
               update-sel(c, xs(c), subtype?{_, y(c)})
            (c:SelMultiConstraint) :
               update-sel(c, ys(c), submethod?{x(c), _})
            (c:SubConstraint) :
               if resolved?(x(c)) : set-solved(n(c), sub(x(c), env(c)))
               else : unsolved(c)
            (c:LSSubConstraint) :
               if resolved?(x(c)) : set-ls-solved(n(c), sub(x(c), env(c)))
               else : unsolved(c)
            (c:EqualConstraint) :
               set-solved(n(c), type(c))
            (c:LSEqualConstraint) :
               set-ls-solved(n(c), type(c))
            (c:DeptrConstraint) :
               match(deptr(type(c))) :
                  (t:LSType) : set-ls-solved(n(c), t)
                  (t:Unknown) : unsolved(c)
                  (t) : false
            (c:DerefConstraint) :
               match(deref(type(c))) :
                  (t:LSType) : set-ls-solved(n(c), t)
                  (t:False) : false
                  (t:Unknown) : unsolved(c)
            (c:FieldConstraint) :
               match(field(type(c), name(c))) :
                  (t:LSType) : set-ls-solved(n(c), t)
                  (t:False) : false
                  (t:Unknown) : unsolved(c)
            (c:ArgConstraint) :
               match(type(c)) :
                  (t:UVarT) :
                     unsolved(c)
                  (t:FnT) :
                     val len = length(a(t))
                     if r(t) typeof False :
                        if len == arity(c) :
                           set-ls-solved(n(c), a(t)[i(c)])
                     else :
                        if len <= arity(c) :
                           if i(c) < len : set-ls-solved(n(c), a(t)[i(c)])
                           else : set-ls-solved(n(c), r(t) as LSType)
                  (t) :
                     false
            (c:RetConstraint) :
               match(type(c)) :
                  (t:UVarT) : unsolved(c)
                  (t:FnT) : set-ls-solved(n(c), b(t))
                  (t) : false
            (c:RefTypeConstraint) :
               match(type(c)) :
                  (t:UVarT) : unsolved(c)
                  (t:RefT) : set-solved(n(c), type(t))
                  (t) : false
            (c:LSPrimConstraint) :
               attempt :
                  defn #R (t:LSType) :
                     fail() when t typeof UVarT
                     t
                  defn binop (f: (LSType, LSType) -> False|LSType) :
                     if length(args(c)) == 2 :
                        f(#R(args(c)[0]), #R(args(c)[1]))
                     else : false
                  defn max-num () :
                     binop $ fn (x, y) :
                        match(x, y) :
                           (x:ByteT|IntT|LongT|FloatT|DoubleT, y:ByteT|IntT|LongT|FloatT|DoubleT) :
                              y when implicit-upcast?(x, y) else x
                           (x, y) : false
                  defn max-int () :
                     binop $ fn (x, y) :
                        match(x, y) :
                           (x:ByteT|IntT|LongT, y:ByteT|IntT|LongT) :
                              y when implicit-upcast?(x, y) else x
                           (x, y) : false
                  defn same-num () :
                     if length(args(c)) == 1 :
                        val t = #R(args(c)[0])
                        t when t typeof ByteT|IntT|LongT|FloatT|DoubleT
                  defn same-int () :
                     if length(args(c)) == 1 :
                        val t = #R(args(c)[0])
                        t when t typeof ByteT|IntT|LongT
                  defn fnum-to-int () :
                     if length(args(c)) == 1 :
                        match(#R(args(c)[0])) :
                           (t:FloatT) : IntT()
                           (t:DoubleT) : LongT()
                           (t) : false
                  defn int-to-fnum () :
                     if length(args(c)) == 1 :
                        match(#R(args(c)[0])) :
                           (t:IntT) : FloatT()
                           (t:LongT) : DoubleT()
                           (t) : false

                  val t* = match(op(c)) :
                     (p:GetterPrimitive) :
                        type(p)
                     (p:SetterPrimitive) :
                        LongT()
                     (p) :
                        switch {p == _} :
                           LS-ADD-OP :
                              binop $ fn (x, y) :
                                 match(x, y) :
                                    (x:PtrT, y) : x
                                    (x, y) : max-num()
                           LS-SUB-OP :
                              binop $ fn (x, y) :
                                 match(x, y) :
                                    (x:PtrT, y:PtrT) : LongT()
                                    (x:PtrT, y) : x
                                    (x, y) : max-num()
                           LS-MUL-OP : max-num()
                           LS-DIV-OP : max-num()
                           LS-MOD-OP : max-int()
                           LS-AND-OP : max-int()
                           LS-OR-OP : max-int()
                           LS-XOR-OP : max-int()
                           LS-SHL-OP : max-int()
                           LS-SHR-OP : max-int()
                           LS-ASHR-OP : max-int()
                           LS-EQ-OP : LongT()
                           LS-NE-OP : LongT()
                           LS-LT-OP : LongT()
                           LS-GT-OP : LongT()
                           LS-LE-OP : LongT()
                           LS-GE-OP : LongT()
                           LS-ULT-OP : LongT()
                           LS-UGT-OP : LongT()
                           LS-ULE-OP : LongT()
                           LS-UGE-OP : LongT()
                           LS-NOT-OP : same-int()
                           LS-NEG-OP : same-num()
                           LS-BITS-OP : fnum-to-int()
                           LS-FNUM-OP : int-to-fnum()
                  set-ls-solved(n(c), t* as LSType) when t* not-typeof False
               else : unsolved(c)

   ;======== Return Solutions ========
   for entry in solved do :
      val [n, t] = [key(entry), value(entry)]
      solved[n] = sub-known(t)
   for entry in lssolved do :
      val [n, t] = [key(entry), value(entry)]
      lssolved[n] = sub-known(t)
   SolveResults(solved, lssolved, selsolved)