defpackage stz/main :
   import core
   import reader
   ;import stz/compiler
   import stz/arg-parser
   import stz/params

defsyntax stanza-config :
   defn ut (x) :
      unwrap-token(x)

   defn first-info (form) -> Maybe<FileInfo> :
      match(form) :
         (form:Token) : One(info(form))
         (form:List) : first(first-info, form)
         (form) : None()

   defn PE (form, msg) :
      throw $ match(value?(first-info(form))) :
         (info:FileInfo) : Exception("%_: %_" % [info, msg])
         (info:False) : Exception(msg)

   defrule :
      sym = (?x) when ut(x) typeof Symbol : ut(x)
      string = (?x) when ut(x) typeof String : ut(x)
      string! = (?s:#string) : s
      string! != () : PE(form, "Expected a string here.")

      platform! = (os-x) : `os-x
      platform! = (linux) : `linux
      platform! != (?x:#sym) : PE(form, "%_ is not a supported platform." % [x])
      platform! != () : PE(form, "Expected a platform here.")

      entry = (install-dir = ?path:#string!) :
         STANZA-INSTALL-DIR = path
      entry = (platform = ?p:#platform!) :
         OUTPUT-PLATFORM = p
      entry != () :
         PE(form, "Invalid configuration rule.")

defn read-configuration () :
   label break :
      defn extract-from-file (filename:String) :
         if file-exists?(filename) :
            val forms = read-file(filename)
            with-syntax(stanza-config) :
               match-syntax(forms) :
                  (?e:#entry ...) : false
            break(false)

      defn extract-from-env (name:String) :
         match(get-env(name)) :
            (path:String) : extract-from-file(to-string("%_/.stanza" % [path]))
            (path:False) : false

      extract-from-file(".stanza")
      extract-from-env("STANZA_CONFIG")
      extract-from-env("HOME")
      throw(Exception("Could not locate .stanza configuration file."))

defn compile (parsed:ParseResult) :
   read-configuration()
   println("STANZA-INSTALL-DIR = %~" % [STANZA-INSTALL-DIR])
   println("OUTPUT-PLATFORM = %~" % [OUTPUT-PLATFORM])
      
   val files = args(parsed)
   val output = single(parsed, "s")
   add-flag(`OPTIMIZE) when has-flag?(parsed, "optimize")
   ;compile(files, output)

defn main () :
   val compile-comm = Command("compile", [SingleFlag("s"), MarkerFlag("optimize")])
   val comms = [compile-comm]
   try :      
      val parsed = parse-args(comms, compile-comm, command-line-arguments()[1 to false])
      switch {command(parsed) == _} :
         "compile" : compile(parsed)
   catch (e:Exception) :
      println(e)
      false

main()