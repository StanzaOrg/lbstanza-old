defpackage stz/compiler :
   import core
   import reader
   import macro-utils
   import stz/utils
   import stz/algorithms
   import stz/parser
   import stz/input
   import stz/renamer
   import stz/resolver
   import stz/type
   import stz/kform
   import stz/tgt

defn macroexpand (forms:List) -> List :
   with-syntax(core) :
      match-syntax(forms) :
         (?es:#exp ...) :
            es

public defn compile (filenames:List<String>, output:String) -> True|False :
   try :
      val total-timer = MicrosecondTimer("Total")
      start(total-timer)

      header("Form")
      val forms = map(read-file, filenames)
      println(forms)

      header("Expanded")
      val expanded = cons(`$begin, seq-append(macroexpand, forms))
      println(expanded)      

      header("Input")
      val input = read-prog(expanded)
      ;println(input)

      header("Check")
      check(input)

      header("Renamer")
      val [namemap, renamed] = rename(input)
      ;println(renamed)

      header("Resolver")
      val resolved = resolve(namemap, renamed)
      ;println(resolved)

      header("Type System")
      val typed = type-program(namemap, resolved)
      ;println(typed)

      header("Compiled")
      val compiled = compile(typed, namemap)
      ;println(compiled)

      header("Assemble and Emit")      
      compile(compiled, output)

      stop(total-timer)
      println(total-timer)
      println(collections/TABLE-TIMER)
         
      true   
   catch (e:Exception) :
      println(e)
      false