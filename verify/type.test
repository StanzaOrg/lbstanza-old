($begin

($package a)

($deftype A () ($none))
($deftype B () ($none))
($deftype C () ($none))


;1. Demonstrating argument inference using body of called function
;($def a ($none) ($new A))
;($do
;   ($fn (($none)) ($none) (f)
;      ($do f a))
;
;   ($fn (($none)) ($none) (x)
;      x))


;2. Demonstrating ambiguity selection using body of function
;($defmulti A! () (A) ($none))
;($defmulti f () (($-> (A) A)) ($none))
;($defmulti f () (($-> (B) B)) ($none))
;
;($do f
;   ($fn (($none)) ($none) (a)
;      ($do A! a)))


;3. Demonstrating calling ambiguous function using ambiguous arguments
;($deftype List (T) ($none))
;($deftype Array (T) ($none))
;($deftype Box (T) ($none))
;($deftype Tree (T) ($none))
;($deftype Int () ($none))
;($deftype String () ($none))
;
;($defmulti map (($cap T) ($cap S)) (($-> (T) ($cap S)) ($of List ($cap T))) ($of List S))
;($defmulti map (($cap T) ($cap S)) (($-> (T) ($cap S)) ($of Array ($cap T))) ($of Array S))
;($defmulti value (($cap T)) (($of Box ($cap T))) T)
;($defmulti value (($cap T)) (($of Tree ($cap T))) String)
;
;($def xs ($?) ($new ($of List ($of Box String))))
;($def result ($none) ($do map value xs))


;4. Demonstrating calling ambiguous function using ambiguous arguments
;($defmulti f () (($-> (A) A)) ($none))
;($defmulti f () (($-> (B) B)) ($none))
;($defmulti g () (A) A)
;($defmulti g () (B) B)
;($def result ($none) ($do f g))

;5. Demonstrating refering to ambiguous functions from LoStanza
($defmulti f () (($-> (A) A)) ($none))
($defmulti f () (($-> (B) B)) ($none))
($defmulti g () (A) A)
($defmulti g () (B) B)
($ls-defn lf () (($ls-long)) ($ls-long) (x)
   ($begin
      ($ls-do f ($ls-func g))
      ($ls-return x)))

)