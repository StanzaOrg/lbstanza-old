#include<"core/stringeater.stanza">
#include<"core/macro-utils.stanza">
#include<"compiler/stz-algorithms.stanza">
#include<"compiler/stz-lexer.stanza">
#include<"compiler/stz-parser.stanza">
#include("compiler/stz-langs.stanza")
#include("compiler/lang-renamer.stanza")

defpackage stz/test-input :
   import core
   import verse
   import stz/lexer
   import stz/ast-lang

val STRUCTURE = `(
   IPublic (exp, info)
   IProtected (exp, info)
   IDefType (class, args, parent, info)
   IDef (name, type, value, info)
   IDefVar (name, type, value, info)
   IDefn (tail?, name, targs, a1, a2, args, body, info)
   IDefmulti (name, targs, a1, a2, info)
   IDefmethod (tail?, multi, thisn, targs, a1, a2, args, body, info)
   IFn (tail?, a1, a2, args, body, info)
   IMulti (funcs, info)
   IBegin (exps, info)
   IMatch (args, branches, info)
   IBranch (types, args, body, info)
   INew (class, methods, info)
   IVar (name, info)
   ICast (exp, type, info)
   ISet (name, value, info)
   IDo (func, args, info)
   IPrim (function, args, info)
   ICallLS (function, args, info)
   ILiteral (value, info)
   ITuple (exps, info)
   IOf (class, args, info)
   IAnd (a, b, , info)
   IOr (a, b, info)
   IArrow (a1, a2, info)
   ICap (name, info)
   IGradual (info)
   IVoid (info)
   INone (info)
   ILSVar (name, info)
   ILSRef (name, args, info)
   ILSRefArray (name, length, args, info)
   ILSStruct (name, args, info)
   ILSPtr (exp, info)
   ILSDeref (exp, info)
   ILSSlot (exp, index, info)
   ILSField (exp, name, info)
   ILSDo (func, args, info)
   ILSCallC (func, args, info)
   ILSPrim (op, args, info)
   ILSSizeof (type, info)
   ILSTagof (name, info)
   ILSAs (exp, type, info)
   ILSSignedCast (exp, type, info)
   ILSUnsignedCast (exp, type, info)
   ILSValue (value, type, info)
   ILSAnd (a, b, info)
   ILSOr (a, b, info)
   ILSTCall (exp, info)
   ILSSet (exp, value, info)
   ILSLabel (name, info)
   ILSGoto (name, info)
   ILSReturn (exp, info)
   ILSLet (comm, info)
   ILSIf (pred, conseq, alt, info)
   ILSBegin (comms, info)
   ILSMatch (exp, branches, info)
   ILSBranch (exp, type, body, info)
   ILSDef (name, type, exp, info)
   ILSDefStruct (name, parents, types, rtype, fields, rfield, info)
   ILSExtern (name, type, info)
   ILSExternFn (name, type, info)
   ILSDefn (name, a1, a2, args, body, info)
   ILSByteT (info)
   ILSIntT (info)
   ILSLongT (info)
   ILSFloatT (info)
   ILSDoubleT (info)
   ILSUnknownT (info)
   ILSPtrT (type, info)
   ILSRefT (type, info)
   ILSFnT (a1, ar, a2, info)
   ILSIntrinsic (name, args, info)
   VarN (n, info)
   LSVarN (n, info)
   Let (def, body, info)
   LetRec (defns, body, info)
   LetPackage (name, imports, body, info))

defsyntax core :
   defrule :
      exp = (?x(?ys ...)) : qquote(~ x(~@ ys))
      exp = (?x) : x
      type = (?x) : x

defn main () -> ? :
   val filename = commandline-arguments()[1]
   val lexed:List = unwrap-token(lex-file(filename))

   ;Print Lexed
   println("=== Lexed ===")
   println(lexed)

   ;Populate AST-TABLE
   let :
      val str = to-stream(STRUCTURE)
      var nodes = List()
      while more?(str) :
         nodes = List(next(str) => next(str), nodes)
      AST-TABLE[`IExp] = ASTStructure(nodes)   
   
   println("=== RENAMER ===")         
   with-syntax(core, stz/renamer-lang) :
      match-syntax(lexed) :
         (?e:#prefix-op) :
            println(e)

main()
