program callc :
   ($externfn 0 ($fn (int) int) _print_int)
   ($init
      ($call-c int ($var 0) ($int 42)))

program callc2 :
   ($externfn 0 ($fn (int int int int int int int int
                      int int int int int int int int) int) _print_ints)
   ($init
      ($call-c int ($var 0)
                   ($int 1) ($int 2) ($int 3) ($int 4) ($int 5)
                   ($int 6) ($int 7) ($int 8) ($int 9) ($int 10) ($int 11)
                   ($int 12) ($int 13) ($int 14) ($int 15) ($int 16)))

program callc-float :
   ($externfn 0 ($fn (float) int) _print_float)
   ($init
      ($call-c int ($var 0) ($float 42.2)))


program callc-floats :
   ($externfn 0 ($fn (float float float float float float float float
                      float float float float float float float float) int) _print_floats)
   ($init
      ($call-c int ($var 0)
                   ($float 1.42) ($float 2.42) ($float 3.42) ($float 4.42) ($float 5.42)
                   ($float 6.42) ($float 7.42) ($float 8.42) ($float 9.42) ($float 10.42) ($float 11.42)
                   ($float 12.42) ($float 13.42) ($float 14.42) ($float 15.42) ($float 16.42)))

program callc-ints-floats :
   ($externfn 0 ($fn (int float int float int float int float
                      int float int float int float int float) int) _print_ints_floats)
   ($init
      ($call-c int ($var 0)
                   ($int 1) ($float 2.42) ($int 3) ($float 4.42) ($int 5)
                   ($float 6.42) ($int 7) ($float 8.42) ($int 9) ($float 10.42) ($int 11)
                   ($float 12.42) ($int 13) ($float 14.42) ($int 15) ($float 16.42)))

program retc-int :
   ($externfn 0 ($fn (int) int) _print_int)
   ($externfn 1 ($fn () int) _ret_int)
   ($init
      ($call-c int ($var 0)
         ($call-c int ($var 1))))

program retc-float :
   ($externfn 0 ($fn (float) int) _print_float)
   ($externfn 1 ($fn () float) _ret_float)
   ($init
      ($call-c int ($var 0)
         ($call-c float ($var 1))))

program printf :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($init
      ($call-c int ($var 0)
                   ($string "The %dth world in this system is %f units long and is called %s.\n")
                   ($int 13)
                   ($double 42.2)
                   ($string "Earth")))

program function :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($lsdefn 1 () (2, 3)
        (int int) int
        ($call-c int ($var 0) ($string "x = %d\n") ($var 2))
        ($call-c int ($var 0) ($string "y = %d\n") ($var 3))
        ($return ($int 0)))
   ($init
      ($do int ($var 1) () ($int 10) ($int 42))
      ($do int ($var 1) () ($int 42) ($int 10)))

program conv :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($init
      ($call-c int ($var 0) ($string "res = %d\n")
         ($conv ($byte 16) int))
      ($call-c int ($var 0) ($string "res = %d\n")
         ($conv ($byte 255) int))
      ($call-c int ($var 0) ($string "res = %d\n")
         ($conv ($float 13.4) int))
      ($call-c int ($var 0) ($string "res = %f\n")
         ($conv ($int 13) double))
      ($call-c int ($var 0) ($string "res = %f\n")
         ($conv ($float 13.0) double))
      ($call-c int ($var 0) ($string "res = %d\n")
         ($conv ($double 13.4) int))
      ($call-c int ($var 0) ($string "res = %d\n")
         ($conv ($double -13.6) int))
      ($call-c int ($var 0) ($string "res = %f\n")
         ($conv ($byte 255) double))
      ($call-c int ($var 0) ($string "res = %d\n")         
         ($conv ($conv ($int 341) byte) int)))

program primops :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($init
      ($call-c int ($var 0) ($string "res = %d\n")
         ($add int ($int 10) ($int 32)))
      ($call-c int ($var 0) ($string "res = %d\n")
         ($mul int ($int 10) ($int 32)))
      ($call-c int ($var 0) ($string "res = %ld\n")
         ($add long ($long 10) ($long 32)))
      ($call-c int ($var 0) ($string "res = %ld\n")
         ($mul long ($long 10) ($long 32)))

      ($call-c int ($var 0) ($string "res = %d\n")
         ($conv ($mul byte ($byte 10) ($byte 20)) int))

      ($call-c int ($var 0) ($string "res = %d\n")
         ($sub int ($int 32) ($int 10)))
      ($call-c int ($var 0) ($string "res = %d\n")
         ($sub int ($int 10) ($int 32)))

      ($call-c int ($var 0) ($string "res = %ld\n")
         ($sub long ($long 32) ($long 10)))
      ($call-c int ($var 0) ($string "res = %ld\n")
         ($sub long ($long 10) ($long 32)))

      ($call-c int ($var 0) ($string "res = %ld\n")
         ($div long ($long 30488) ($long 74)))
      ($call-c int ($var 0) ($string "res = %ld\n")
         ($conv ($div byte ($byte 123) ($byte 6)) long))

      ($call-c int ($var 0) ($string "res = %ld\n")
         ($and long ($long 123) ($long -8)))

      ($call-c int ($var 0) ($string "res = %ld\n")
         ($le long ($long 123) ($long -8)))
      ($call-c int ($var 0) ($string "res = %ld\n")
         ($ge long ($long 123) ($long -8)))

      ($call-c int ($var 0) ($string "res = %ld\n")
         ($shl long ($long 123) ($long 1)))
         
      ($call-c int ($var 0) ($string "res = %ld\n")
         ($shr long ($long -123) ($long 1)))

      ($call-c int ($var 0) ($string "res = %ld\n")
         ($ashr long ($long -123) ($long 1)))

      ($call-c int ($var 0) ($string "res = %ld\n")
         ($conv ($shl byte ($byte 18) ($byte 1)) long))

      ($call-c int ($var 0) ($string "res = %ld\n")
         ($conv ($shr byte ($byte 18) ($byte 1)) long)))

program if :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($init
      ($if ($long 0)
         ($call-c int ($var 0) ($string "A. True Clause\n"))
         ($call-c int ($var 0) ($string "A. False Clause\n")))
      ($if ($long 1)
         ($call-c int ($var 0) ($string "B. True Clause\n"))
         ($call-c int ($var 0) ($string "B. False Clause\n"))))

program tcall :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($lsdefn 1 () (2)
        (int) int
        ($if ($lt long ($var 2) ($int 100))
           ($begin
              ($call-c int ($var 0) ($string "x = %d\n") ($var 2))
              ($jump ($do int ($var 1) () ($add int ($var 2) ($int 1)))))
           ($return ($int 0))))
   ($init
      ($do int ($var 1) () ($int 0)))
      
program loop :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($init
      ($let 1 ($int 0)
         ($label 2)
         ($if ($lt long ($var 1) ($int 10))
            ($begin
               ($call-c int ($var 0) ($string "x = %d\n") ($var 1))
               ($set ($var 1) ($add int ($var 1) ($int 1)))
               ($goto 2)))
         ($call-c int ($var 0) ($string "Done.\n"))))

program globals :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($lsdef 1 long)
   ($init ($set ($var 1) ($long 100)))
   ($init ($call-c int ($var 0) ($string "Global x = %ld\n") ($var 1)))

program global-ptr :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($lsdef 1 long)
   ($init ($set ($var 1) ($long 100)))
   ($init ($call-c int ($var 0) ($string "Global x = %ld\n") ($var 1)))
   ($init
      ($let 10 ($ptr ($var 1))
      ($call-c int ($var 0) ($string "Pointer to x = %p\n") ($var 10))
      ($set ($deptr ($var 10) long) ($long 50))
      ($call-c int ($var 0) ($string "Global x = %ld\n") ($var 1))))

program structs :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($lsdeftype 100
     ((101 int)
      (102 long)
      (103 byte)
      (104 int)))
   ($init
      ($let 10 ($struct 100 ($int 1) ($long 2) ($byte 3) ($int 4))
      ($call-c int ($var 0) ($string "Field 0 = %d\n") ($read ($field ($var 10) 101)))
      ($call-c int ($var 0) ($string "Field 1 = %ld\n") ($read ($field ($var 10) 102)))
      ($call-c int ($var 0) ($string "Field 2 = %d\n") ($conv ($read ($field ($var 10) 103)) int))
      ($call-c int ($var 0) ($string "Field 3 = %d\n") ($read ($field ($var 10) 104)))))
      
program structs-set :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($lsdeftype 100
     ((101 int)
      (102 long)
      (103 byte)
      (104 int)))
   ($init
      ($let 10 ($struct 100 ($int 1) ($long 2) ($byte 3) ($int 4))
      ($call-c int ($var 0) ($string "Field 3 = %d\n") ($read ($field ($var 10) 104)))
      ($set ($field ($var 10) 104) ($int 42))
      ($call-c int ($var 0) ($string "Field 3 = %d\n") ($read ($field ($var 10) 104)))))

program structs-in-structs :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($lsdeftype 100
     ((101 int)
      (102 long)
      (103 byte)
      (104 int)))
   ($lsdeftype 110
     ((111 ($struct 100))
      (112 ($struct 100))))
   ($init
      ($letvar 10 ($struct 110)
      ($call-c int ($var 0) ($string "Field 3 = %d\n")
         ($read ($field ($field ($var 10) 111) 104)))
      ($set ($field ($field ($var 10) 111) 104) ($int 42))
      ($call-c int ($var 0) ($string "Field 3 = %d\n")
         ($read ($field ($field ($var 10) 111) 104)))))

program global-structs :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($lsdef 1 ($struct 100))   
   ($lsdeftype 100
     ((101 int)
      (102 long)
      (103 byte)
      (104 int)
      (105 byte)))
   ($init
      ($set ($var 1) ($struct 100 ($int 1) ($long 2) ($byte 3) ($int 4) ($byte 5)))
      ($call-c int ($var 0) ($string "Field 3 = %d\n") ($read ($field ($var 1) 104)))
      ($set ($field ($var 1) 104) ($int 42))
      ($call-c int ($var 0) ($string "Field 3 = %d\n") ($read ($field ($var 1) 104))))

program global-struct-ptr :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($lsdef 1 ($struct 100))   
   ($lsdeftype 100
     ((101 int)
      (102 long)
      (103 byte)
      (104 int)
      (105 byte)))
   ($init
      ($let 10 ($ptr ($field ($var 1) 104))
      ($call-c int ($var 0) ($string "Field 3 = %d\n") ($read ($field ($var 1) 104)))
      ($set ($deptr ($var 10) int) ($int 42))
      ($call-c int ($var 0) ($string "Field 3 = %d\n") ($read ($field ($var 1) 104)))))

program struct-arg :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($lsdeftype 100
     ((101 int)
      (102 int)))
      
   ($lsdefn 1 () (2)
        (($struct 100)) int
        ($call-c int ($var 0) ($string "s.x = %d\n") ($read ($field ($var 2) 101)))
        ($call-c int ($var 0) ($string "s.y = %d\n") ($read ($field ($var 2) 102)))
        ($return ($add int ($read ($field ($var 2) 101)) ($read ($field ($var 2) 101)))))
        
   ($init
      ($do int ($var 1) () ($struct 100 ($int 10) ($int 32))))


program struct-ret :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($lsdeftype 100
     ((101 int)
      (102 int)))
      
   ($lsdefn 1 () (2 3)
      (int int) ($struct 100)
      ($return ($struct 100 ($var 2) ($var 3))))
        
   ($init
      ($let 4 ($do ($struct 100) ($var 1) () ($int 10) ($int 32))
      ($call-c int ($var 0) ($string "x = %d\n") ($read ($field ($var 4) 101)))
      ($call-c int ($var 0) ($string "y = %d\n") ($read ($field ($var 4) 102)))))

program struct-stats :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($lsdeftype 100
     ((101 int)
      (102 int)
      (103 byte)))        
   ($init
      ($call-c int ($var 0) ($string "Size = %ld\n") ($sizeof ($struct 100)))
      ($call-c int ($var 0) ($string "Tag = %ld\n") ($tagof 100)))
      
program intrinsics :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($init
      ($call-c int ($var 0) ($string "Heap Ptr = %ld\n")
         ($heap-ptr))
      ($call-c int ($var 0) ($string "Heap Lim = %ld\n")
         ($heap-lim))
      ($set-heap-ptr ($long 42))
      ($set-heap-lim ($long 42))
      ($call-c int ($var 0) ($string "Heap Ptr = %ld\n")
         ($heap-ptr))
      ($call-c int ($var 0) ($string "Heap Lim = %ld\n")
         ($heap-lim)))

program refs :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($externfn 200 ($fn (long) ($ptr ?)) _malloc)
   
   ($lsdeftype 100
     ((101 int)
      (102 int)
      (103 byte)))
      
   ($lsdefn 10 () (11)
      (long) long
      ($return ($long 0)))
      
   ($init
      ($let 300 ($call-c long ($var 200) ($long 1048576))
         ($set-heap-ptr ($var 300))
         ($set-heap-lim ($add long ($var 300) ($long 1048576))))

      ($let 1 ($ref 100 ($int 42) ($int -13) ($byte 10))
      ($let 2 ($ref 100 ($int -42) ($int 13) ($byte 13))
      ($call-c int ($var 0) ($string "a.Field 2 = %d\n")
         ($read ($field ($deref ($var 1) ($struct 100)) 102)))
      ($call-c int ($var 0) ($string "b.Field 2 = %d\n")
         ($read ($field ($deref ($var 2) ($struct 100)) 102))))))


program ref-ptr :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($externfn 200 ($fn (long) ($ptr ?)) _malloc)
   
   ($lsdeftype 100
     ((101 int)
      (102 int)
      (103 byte)))
      
   ($lsdefn 10 () (11)
      (long) long
      ($return ($long 0)))
      
   ($init
      ($let 300 ($call-c long ($var 200) ($long 1048576))
         ($set-heap-ptr ($var 300))
         ($set-heap-lim ($add long ($var 300) ($long 1048576))))

      ($let 1 ($ref 100 ($int 42) ($int -13) ($byte 10))
      ($let 2 ($ptr ($deref ($var 1) ($struct 100)))
      ($call-c int ($var 0) ($string "b.Field 2 = %d\n")
         ($read ($field ($deptr ($var 2) ($struct 100)) 102)))
      ($set ($deptr ($var 2) ($struct 100)) ($struct 100 ($int 893) ($int 892) ($byte 11)))
      ($call-c int ($var 0) ($string "b.Field 2 = %d\n")
         ($read ($field ($deref ($var 1) ($struct 100)) 102)))
      ($call-c int ($var 0) ($string "b.Field 2 = %d\n")
         ($read ($field ($deref ($var 1) ($struct 100)) 101))))))


program extend-heap :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($externfn 200 ($fn (long) ($ptr ?)) _malloc)
   ($externfn 201 ($fn (long) int) _exit)
   
   ($lsdeftype 100
     ((101 int)
      (102 int)
      (103 byte)))
      
   ($lsdefn 10 () (11)
      (long) long
      ($call-c int ($var 0) ($string "Run Garbage Collector.\n"))
      ($call-c int ($var 201))
      ($return ($long 0)))
      
   ($init
      ($let 300 ($call-c long ($var 200) ($long 256))
         ($set-heap-ptr ($var 300))
         ($set-heap-lim ($add long ($var 300) ($long 256))))

      ($label 400)
      ($let 1 ($ref 100 ($int 42) ($int -13) ($byte 10))
      ($let 2 ($ref 100 ($int -42) ($int 13) ($byte 13))
      ($call-c int ($var 0) ($string "a.Field 2 = %d\n")
         ($read ($field ($deref ($var 1) ($struct 100)) 102)))
      ($call-c int ($var 0) ($string "b.Field 2 = %d\n")
         ($read ($field ($deref ($var 2) ($struct 100)) 102)))))
      ($goto 400))
      


program refarray :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($externfn 200 ($fn (long) ($ptr ?)) _malloc)
   
   ($lsdeftype 100
     ((101 int)
      (102 int)
      (103 byte))
     (104 int))
      
   ($lsdefn 10 () (11)
      (long) long
      ($return ($long 0)))
      
   ($init
      ($let 300 ($call-c long ($var 200) ($long 1048576))
         ($set-heap-ptr ($var 300))
         ($set-heap-lim ($add long ($var 300) ($long 1048576))))

      ($let 1 ($refarray 100 ($int 17) ($int 42) ($byte 10))
      ($let 2 ($ptr ($field ($deref ($var 1) ($struct 100)) 104))
      ($call-c int ($var 0) ($string "element 13 = %d\n")
         ($read ($slot ($var 2) int ($long 13))))
      ($set ($slot ($var 2) int ($long 13)) ($int 13))
      ($call-c int ($var 0) ($string "element 13 = %d\n")
         ($read ($slot ($var 2) int ($long 13))))
      ($call-c int ($var 0) ($string "Size = %ld\n")
         ($sizeof ($struct 100))))))

program stanza-print-int :
   ($externfn 0 ($fn (($ptr byte)) ? int) _printf)
   ($lsdefn 10 () (11)
      (($ref top)) ($ref top)
      ($call-c int ($var 0) ($string "X = %d\n") ($var 11))
      ($return ($long 0)))
      
   ($do ($var 10) () ($value 42))