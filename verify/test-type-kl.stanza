#include<"core/stringeater.stanza">
#include<"compiler/stz-lexer.stanza">
#include<"compiler/stz-parser.stanza">
#include<"compiler/stz-algorithms.stanza">
#include("compiler/stz-il-ir.stanza")
#include("compiler/stz-utils.stanza")
#include("compiler/stz-ids.stanza")
#include("compiler/stz-input.stanza")
#include("compiler/lang-read.stanza")
#include("compiler/lang-check.stanza")
#include("compiler/stz-namemap.stanza")
#include("compiler/stz-renamer.stanza")
#include("compiler/stz-resolver.stanza")
#include("compiler/stz-tl-ir.stanza")
#include("compiler/stz-type.stanza")
#include("compiler/stz-infer.stanza")
#include("compiler/stz-type-calculus.stanza")

;KType onwards
#include("compiler/stz-kl-ir.stanza")
#include("compiler/stz-kform.stanza")
#include("compiler/stz-padder.stanza")
#include("compiler/stz-tgt-ir.stanza")
#include("compiler/stz-tgt.stanza")
#include("compiler/stz-bb-ir.stanza")
#include("compiler/stz-bb.stanza")
#include("compiler/stz-backend.stanza")
#include("compiler/stz-asm-ir.stanza")
#include("compiler/stz-asm-emitter.stanza")


defpackage stz/test-type-kl :
   import core
   import verse
   import stz/il-ir
   import stz/input
   import stz/lexer
   import stz/renamer
   import stz/resolver
   import stz/type
   import stz/kform

defn parse-programs (file:String) -> List<KeyValue<Symbol,List>> :
   val lexed = lex-file(file)
   match-syntax(lexed) :
      ((program ?ns:_ :
           ?exps ...) @...) :
         for (n in ns, es in exps) map :
            to-symbol(n) => List(`$begin, es)

defn main () -> ? :
   val filename = commandline-arguments()[1]
   val name = to-symbol(commandline-arguments()[2])
   val form = lookup!(parse-programs(filename), name)
   
   println("Reading:")
   println(form)
   println("Result:")
   try :
      val f = read(form)
      println(f)
      check(f)
      val [namemap renamed] = rename(f)
      println(renamed)
      val resolved = resolve(namemap, renamed)
      println(resolved)
      val typed = type-program(namemap, resolved)
      println(typed)
      compile(typed, namemap, "test.s")
   catch (e) :
      false
   println("\n")

main()
