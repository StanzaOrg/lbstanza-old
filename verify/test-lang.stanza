defpackage stz/test-lang :
   import core
   import verse

#use-overlay(stz/ast-lang)

public defast :
   deftype Exp
   defnodes Exp :
      Value: (v:Int)
      Plus: (a:Exp, b:Exp)
      Minus: (a:Exp, b:Exp)
      Print: (exp:Exp)
      Repeat: (a:Exp, n:Int)

   defmapper (f:Exp -> Exp) :
      (x:Exp) : f(x)
      ignore(Int)
   defdoer (f:Exp -> ?) :
      (x:Exp) : f(x)
      ignore(Int)
   make-mapper(f:Exp -> Exp, e:Exp)
   make-doer(f:Exp -> ?, e:Exp)

defn test1 () :
   Print(
      Minus(
         Plus(
            Value(42)
            Value(10))
         Minus(
            Value(-10)
            Value(42))))

defn mul10 (e:Exp) :
   match(e) :
      (e:Value) : Value(v(e) * 10)
      (e) : map(mul10, e)

defn all-values (e:Exp) :
   match(e) :
      (e:Value) : println("v = ~" << [v(e)])
      (e) : do(all-values, e)

defn eval (e:Exp) -> Int :
   match(e) :
      (e:Value) : v(e)
      (e:Plus) : eval(a(e)) + eval(b(e))
      (e:Minus) : eval(a(e)) - eval(b(e))
      (e:Repeat) :
         defn* loop (i:Int, v:Int) :
            if i < n(e) :
               val r = eval(a(e))
               loop(i + 1, r)
            else : v
         loop(0, 0)               
      (e:Print) :
         val r = eval(exp(e))
         println(r)
         r         

defn main () :
   all-values(test1())
   eval(test1())
   eval(mul10(test1()))

main()