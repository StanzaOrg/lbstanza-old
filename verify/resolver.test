defresolver resolve-exp (e:IExp, eng:Engine) :
   resolve te :
      IBegin : (exps:te)
      IDefType : ({args:+, parent:t})
      IDef : (type:t, value:e)
      IDefVar : (type:t, value:e)
      IDefn : ({targs:+, args:+, a1:t, a2:t, body:e})
      IDefmulti : ({targs:+, a1:t, a2:t})
      IDefmethod : (multi:m, {targs:+, args:+, a1:t, a2:t, body:e})
      IPublic : (exp:te)
      IProtected : (exp:te)
      IExp : goto e

   resolve e :
      IDef : (value:e, type:t, name:+)
      IDefVar : (value:e, type:t, name:+)
      LetRec : {defns:f+, defns:f, body:e}
      IFn : (a1:t, a2:t, {args:+, body:e})
      IBranch : (types:t {args:+, body:e})
      INew : (class:t, methods:dm)
      ICast : (exp:e, type:t)
      ISet : (name:v, value:e)
      IDo : (func:fa, args:e)
;      ICallLS : (function:lfa, args:e)
      IPrim : (args:e)
      IVar : resolve var
      IExp : (_:e)

   resolve f :
      IDefn : ({targs:+, args:+, a1:t, a2:t, body:e})

   resolve fa :
      IOf : (class:e, args:t)
      IExp : goto e

   resolve dm :
      IDefmethod : (multi:m, {targs:+, args:+, a1:t, a2:t, thisn:this, body:e})

   resolve m :
      IVar : resolve multi

   resolve this ((Int|False)) :
      (Int|False) : resolve this

   resolve v :
      IVar : resolve mutable-var

;   resolve lfa :
;      IOf : (class:le, args:t)
;      + le

   define f+ :
      IDefn : (name:+)
      
   ;======== Resolving Types ========
   resolve t :
      IVar : resolve tvar
      ICap : (name:cap)
      IOf : (class:c, args:t)
      IExp : (_:t)

   resolve c :
      IVar : resolve class

   resolve cap :
      IVar : resolve capvar
     





