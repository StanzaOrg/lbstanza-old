#include<"core/stringeater.stanza">
#include<"compiler/stz-lexer.stanza">
#include<"compiler/stz-algorithms.stanza">
#include("compiler/stz-il-ir.stanza")
#include("compiler/stz-utils.stanza")
#include("compiler/stz-ids.stanza")
#include("compiler/stz-input.stanza")
#include("compiler/lang-read.stanza")
#include("compiler/lang-check.stanza")
#include("compiler/stz-namemap.stanza")
#include("compiler/stz-renamer.stanza")
#include("compiler/stz-resolver.stanza")
#include("compiler/stz-tl-ir.stanza")
#include("compiler/stz-type.stanza")

defpackage stz/test-type :
   import core
   import verse
   import stz/il-ir
   import stz/input
   import stz/lexer
   import stz/renamer
   import stz/resolver
   import stz/type

defn main () -> ? :
   val filename = commandline-arguments()[1]
   val lexed:List = unwrap-token(lex-file(filename))
   for form in lexed do :
      println("Reading:")
      println(form)
      println("Result:")
      try :
         val f = read(form)
         println(f)
         check(f)
         val [namemap renamed] = rename(f)
         println(renamed)
         val resolved = resolve(namemap, renamed)
         println(resolved)
         val typed = type-program(namemap, resolved)
         println(typed)
      catch (e) :
         false
      println("\n")

main()
