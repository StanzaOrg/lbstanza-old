defpackage parser/errors :
  import core
  import parser/patterns

;============================================================
;===================== Errors ===============================
;============================================================

public deftype ParserError <: Exception

public defstruct ParseErrors <: ParserError&ErrorBundle :
  errors:Tuple<Exception> with: (ensure => non-empty!, as-method => true)

defmethod print (o:OutputStream, e:ParseErrors) :
  val items = "%n" % [errors(e)]
  print(o, "Errors occurred during parsing:\n%_" % [Indented(items)])

public defstruct NoMatchError <: ParserError&ErrorBundle :
  errors:Tuple<Exception> with: (as-method => true)
with:
  constructor => #NoMatchError

public defn NoMatchError (e:Seqable<Exception>) :
  #NoMatchError(to-tuple(flatten-error-bundles(e)))

defmethod print (o:OutputStream, e:NoMatchError) :
  if empty?(errors(e)) :
    print(o, "Could not parse the given input. No match found.")
  else :
    val items = "%n " % [errors(e)]
    print(o, "Could not parse the given input:\n%_" % [Indented(items)])

public deftype PostProcessingError <: ParserError

public defstruct PostProcessingErrors <: PostProcessingError&ErrorBundle :
  errors:Tuple<Exception> with: (ensure => non-empty!, as-method => true)

defmethod print (o:OutputStream, e:PostProcessingErrors) :
  val items = "%n" % [errors(e)]
  print(o, "Errors occurred during pattern post-processing:\n%_" % [Indented(items)])

public defstruct MutualLeftRecursion <: PostProcessingError :
  names:Tuple<Symbol>

defmethod print (o:OutputStream, e:MutualLeftRecursion) :
  print(o, "The following productions are mutually left-recursive \
            and are not supported: %,." % [names(e)])

public defstruct NullableLeftRecursion <: PostProcessingError :
  name:Symbol

defmethod print (o:OutputStream, e:NullableLeftRecursion) :
  print(o, "The '%~' production is a nullable left-recursive production \
            and is not supported." % [name(e)])

public defstruct NonRemovableLeftRecursion <: PostProcessingError :
  name:Symbol

defmethod print (o:OutputStream, e:NonRemovableLeftRecursion) :
  print(o, "The '%~' production is a left-recursive production, but is not in a form \
            that is supported by left-recursion elimination." % [name(e)])

public deftype PatternError <: Exception

public defn PatternError (msg) :
   new PatternError :
      defmethod print (o:OutputStream, this) : print(o, msg)

public defn PatternErrorInPackage (package, msg) :
   new PatternError :
      defmethod print (o:OutputStream, this) :
         print(o, "In syntax package %_: %_" % [package, msg])

defn non-empty! (description:String, value:Tuple) :
  if empty?(value) :
    fatal("Tuple provided to %_ cannot be empty." % [description])

public defstruct NoSyntaxPackage <: PatternError :
  name: Symbol
defmethod print (o:OutputStream, e:NoSyntaxPackage) :
  print(o, "Could not resolve syntax package %~." % [name(e)])

public defstruct RemainingInput <: PatternError :
  info:FileInfo|False
defmethod print (o:OutputStream, e:RemainingInput) :
  val info-str = "." when info(e) is False
            else " at %_." % [info(e)]
  print(o, "Parse finished with unexpected remaining input%_" % [info-str])

public defstruct InvalidBindingPattern <: PatternError :
  pattern: Pattern
defmethod print (o:OutputStream, e:InvalidBindingPattern) :
  print(o, "Pattern contains invalid binders: %_." % [pattern(e)])

;============================================================
;==================== Error Bundles =========================
;============================================================

public deftype ErrorBundle
public defmulti errors (b:ErrorBundle) -> Tuple<Exception>

defn flatten-error-bundles (es:Seqable<Exception>) -> Seqable<Exception> :
  defn flatten (es:Seqable<Exception>) -> Seqable<Exception> :
    for e in es seq-cat :
      match(e:Exception&ErrorBundle) : flatten(errors(e))
      else : [e]
  flatten(es)