defpackage parser/syntax-packages :
  import core
  import collections
  import parser/patterns

;============================================================
;=================== API Definition =========================
;============================================================

public defstruct SyntaxPackage :
  name: Symbol
  imports: List<DefImport>
  productions: List<DefProduction>
  import-rules: List<ImportRules>
  rules: List<DefRule>

public defstruct DefImport :
  names: List<Symbol>
  package: Symbol

public defstruct ImportRules :
  name: Symbol
  new-name: Symbol

public defstruct DefProduction :
  name: Symbol
  public?: True|False

public defstruct DefRule :
  name: Symbol
  pattern: Pattern

;============================================================
;=================== Printers ===============================
;============================================================

defmethod print (o:OutputStream, p:SyntaxPackage) :
  println(o, "defsyntax %_ :" % [name(p)])
  for io in o do-indented :
    do(println{io, _}, imports(p))
    do(println{io, _}, productions(p))
    do(println{io, _}, import-rules(p))
    do(println{io, _}, rules(p))

defmethod print (o:OutputStream, i:ImportRules) :
  print(o, "import %_ rules as %_" % [name(i), new-name(i)])

defmethod print (o:OutputStream, i:DefImport) :
  print(o, "import %, from %_" % [names(i), package(i)])

defmethod print (o:OutputStream, p:DefProduction) :
  print(o, "%_defproduction %_" % [
    "public " when public?(p) else ""
    name(p)])

defmethod print (o:OutputStream, r:DefRule) :
  print(o, "defrule %_ = %_" % [name(r), pattern(r)])