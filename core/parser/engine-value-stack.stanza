defpackage parser/engine-value-stack :
  import core
  import collections

;============================================================
;==================== Stack Markers =========================
;============================================================

;A marker is pushed onto the value stack when collecting the
;binders necessary for evaluating actions.
public deftype ValueMarker

;Represents the end of the bound values for evaluating an action.
;- overlay?: True if it is an overlay action.
;- index: The index of the callback to evaluate to create the result
;  object.
;- info: The file information of the action. 
public defstruct ActionEndMarker <: ValueMarker :
  overlay?:True|False
  index:Int
  info:FileInfo|False
with: (printer => true)

;Represents the start of a list.
public defstruct ListMarker <: ValueMarker
with: (printer => true)  

;Represents the end of a list.
;- arity: The number of binders in the list pattern.
public defstruct ListEndMarker <: ValueMarker :
  arity:Int
with: (printer => true)

;============================================================
;================ Representation of Values ==================
;============================================================

;Simple binders are represented directly on the value stack.
;Values that need to be computed are represented as UnevaluatedResult
;objects.
public deftype UnevaluatedResult

;Represents an unevaluated result from an Action.
;- overlay?: True if the action is an overlay action.
;- action-index: The index of the action.
;- lazy?: True if the action evaluates its binders lazily.
;- info: The file position at the time the action was started.
;- args: The values of the bound arguments.
public defstruct ActionResult <: UnevaluatedResult :
  overlay?:True|False  
  action-index:Int
  info:FileInfo|False
  args:Array
with:
  printer => true

;Represents an unevaluated list of results.
public defstruct ListResult <: UnevaluatedResult :
  results:Vector

;============================================================
;===================== Parsing API ==========================
;============================================================

;Represents information that value-stack parser needs to have.
public deftype ParsingInfo

;Return the binding arity of the action with the given index.
public defmulti action-bind-arity (info:ParsingInfo, overlay?:True|False, index:Int) -> Int

;API for the parser.
public deftype ValueStackParser

;Return the last value in the stack.
;Ensure that it is an evaluated value.
;Used for implementation of immediate guard checks.
public defmulti get-last-evaluated-value (p:ValueStackParser) -> ?

;Return the last n values in the stack, where n is the
;binding arity of the given action.
;Used for implementation of guards.
public defmulti get-last-evaluated-values (p:ValueStackParser, overlay?:True|False, action-index:Int) -> Array

;Return the last value on the value stack.
public defmulti parse-last-value (p:ValueStackParser) -> ?

;Return the only value on the value stack.
public defmulti parse-only-value (p:ValueStackParser) -> ?

;============================================================
;=================== API Implementation =====================
;============================================================

;Create the value stack parser.
public defn ValueStackParser (values:Vector, info:ParsingInfo) -> ValueStackParser :
  new ValueStackParser :
    ;Return the last value in the stack.
    ;Ensure that it is an evaluated value.
    ;Used for implementation of immediate guard checks.
    defmethod get-last-evaluated-value (this) -> ? :
      match(peek(values)) :
        (v:UnevaluatedResult) :
          fatal("Expected evaluated value but received %_." % [v])
        (v) :
          v
          
    ;Return the last n values in the stack, where n is the
    ;binding arity of the given action.
    ;Used for implementation of guards.
    defmethod get-last-evaluated-values (this, overlay?:True|False, action-index:Int) -> Array :
      val arity = action-bind-arity(info, overlay?, action-index)
      val args = Array<?>(arity)
      val indices = to-seq(reverse(0 to length(values)))
      for i in reverse(0 to arity) do :
        args[i] = parse-value(values, indices, info)
      args

    ;Return the last value on the value stack.
    defmethod parse-last-value (this) -> ? :
      val indices = to-seq(reverse(0 to length(values)))
      parse-value(values, indices, info)
  
    ;Return the only value on the value stack.
    defmethod parse-only-value (this) -> ? :
      val indices = to-seq(reverse(0 to length(values)))
      val result = parse-value(values, indices, info)
      if not empty?(indices) :
        fatal("Unexpected remaining items on the value stack.")
      result      

;============================================================
;================= Parsing Algorithm ========================
;============================================================

;Parse the value.
;The given indices counter is used to count down the indices.
defn parse-value (values:Vector, index-counter:Seq<Int>, parse-info:ParsingInfo) -> ? :

  ;Parse the next value(s) ending at peek(index-counter).
  defn parse-next-value (return:? -> ?) -> False :
    match(values[next(index-counter)]) :
      ;Case: It's an action value.
      (v:ActionEndMarker) :
        ;Hold the arguments to the function.
        val args = Array<?>(action-bind-arity(parse-info, overlay?(v), index(v)))

        ;Fill the arguments array
        var i:Int = length(args) - 1
        while i >= 0 :
          within x = parse-next-value() :
            args[i] = x
            i = i - 1
          
        ;Return the result
        return(ActionResult(overlay?(v), index(v), info(v), args))

      ;Case: It's a list value.
      (v:ListEndMarker) :
        ;If arity is 1, then parse it specially.
        ;A single vector is enough.
        if arity(v) == 1 :
          val args = Vector<?>()
          while values[peek(index-counter)] is-not ListMarker :
            parse-next-value(add{args, _})
            
          ;Pop past the ListMarker
          next(index-counter)
          
          ;Reverse the arguments so that they are sorted by insertion order.
          reverse!(args)

          ;Return the list result.
          return(ListResult(args))

        ;Otherwise, we need to create N vectors,
        ;and add the items to each vector in turn.
        else :
          ;Create N vectors.
          val args = to-tuple $
            for i in 0 to arity(v) seq : Vector<?>()

          ;Fill all the arguments vectors.
          while values[peek(index-counter)] is-not ListMarker :
            var i:Int = arity(v) - 1
            while i >= 0 :
              within x = parse-next-value() :
                add(args[i], x)
                i = i - 1

          ;Pop past the ListMarker
          next(index-counter)

          ;Return list results
          for i in reverse(0 to arity(v)) do :
            ;Reverse the arguments so that they are sorted by insertion order.
            reverse!(args[i])
            
            ;Return the list result.
            return(ListResult(args[i]))
              
      ;Case: Unexpected marker.
      (v:ListMarker) :
        fatal("Unexpected list marker.")
        
      ;Case: Simple binder.
      (v) :
        return(v)

  ;Parse the last value.
  var value:Maybe = None()
  within x = parse-next-value() :
    if not empty?(value) :
      fatal("Received more than a single value!")
    value = One(x)
  value!(value)

