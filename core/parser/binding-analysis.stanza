defpackage parser/binding-analysis :
  import core
  import collections
  import parser/errors
  import parser/patterns
  import parser/pattern-parser

;============================================================
;================ Representation of a Type ==================
;============================================================

;Represents the type of a binder.
public deftype BindingType

;Represents a list type.
public defstruct ListBinding <: BindingType : (type:BindingType)

;Represents some ground type.
;- name: The fully-qualified name of the core deftype.
public defstruct TerminalBinding <: BindingType : (name:Symbol)

;Represents the type of some production.
public defstruct ProductionBinding <: BindingType : (name:Symbol)

;Represents the union of two bindings.
public defstruct UnionBinding <: BindingType : (a:BindingType, b:BindingType)

;============================================================
;================ Binder Representation =====================
;============================================================

;Represents a binding and its type.
;- name: The name of the binder.
;- index: The index of the binder within the pattern.
;  This will match up against the slot in the context to retrieve the binder.
;- type: The type of the binder.
;- pattern: The pattern that the binder binds against.
public defstruct Binding :
  name: Symbol
  index: Int
  type: BindingType

;============================================================
;====================== Driver ==============================
;============================================================

;Return the list of binders in the given pattern.
public defn get-bindings (p:List) -> List<Binding> :
  ;First parse the pattern.
  get-bindings(parse-pattern(p, true))

;Return the list of binders in the given pattern.
public defn get-bindings (pat:Pattern) -> List<Binding> :

  ;If the binders are not wellformed, then error.
  if not wellformed-binders?(pat) :
    throw(InvalidBindingPattern(pat))

  ;Compute the bindings, and add indices.
  to-list $ for (b in get-unindexed-bindings(pat), i in 0 to false) seq :
    Binding(name(b), i, type(b))    

;Return the binding arity of the given pattern.
public defn get-num-binders (p:Pattern) -> Int :
  var total:Int = 0
  let loop (p:Pattern = p) :
    match(p) :
      (p:Choice) :
        loop(a(p))
      (p:Binder) :
        total = total + 1
        loop(pattern(p))
      (p) :
        do(loop, p)
  total      

;<doc>=======================================================
;=================== Compute Binders ========================
;============================================================

# Within a rule action, here are the patterns to consider #

  SeqPat
  Choice
  Empty
  Terminal
  NotPat
  Form
  Production
  Repeat
  ListPat
  Binder

# Is a pattern a bindable pattern? #

These are "easily bindable":

  Terminal
  Form
  Production
  ListPat

Otherwise:

  Choice: is bindable if all nested patterns are bindable.
  Repeat: is bindable if the nested pattern is bindable.
  SeqPat: is not bindable.
  Empty: is not bindable.
  NotPat: is not bindable.
  Binder: is not bindable.

# Does a pattern contain wellformed binders? #

Ground patterns are trivially wellformed.

  Empty
  Terminal
  Form
  Production

Otherwise, these patterns are wellformed if all of their
nested patterns are wellformed.

  SeqPat
  Repeat
  ListPat

Choice is special.

  Choice: A choice pattern is wellformed if all nested
  patterns are wellformed, and all nested patterns have
  identical binders. 

NotPat is special.

  NotPat: This pattern is not allowed to contain any
  binders at all.

Binder is special.

  Binder: This is wellformed if its pattern is wellformed,
  and if the pattern is bindable.

;============================================================
;=======================================================<doc>

;Returns true if the pattern p is allowed to bound.
;(Assuming that the pattern is wellformed.)
defn bindable? (p:Pattern) -> True|False :
  match(p) :
    (p:Terminal|Form|Production|ListPat) : true
    (p:Choice) : bindable?(a(p)) and bindable?(b(p))
    (p:Repeat) : bindable?(pattern(p))
    (p:SeqPat) : false
    (p:Empty) : false
    (p:NotPat) : false
    (p:Binder) : false
    (p) : fatal("Unexpected pattern: %_" % [p])

;Returns true if the given pattern contains binders.
defn contains-binders? (p:Pattern) -> True|False :
  label<True|False> return :
    let loop (p:Pattern = p) :
      match(p:Binder) : return(true)
      else : do(loop, p)

;Returns true if the pattern contains wellformed binders.
defn wellformed-binders? (p:Pattern) -> True|False :
  match(p) :
    (p:Empty|Terminal|Form|Production) : true
    (p:SeqPat) : wellformed-binders?(a(p)) and wellformed-binders?(b(p))
    (p:Repeat) : wellformed-binders?(pattern(p))
    (p:ListPat) : wellformed-binders?(pattern(p))
    (p:Choice) : wellformed-binders?(a(p)) and
                 wellformed-binders?(b(p)) and
                 same-structure?(get-unindexed-bindings(a(p)), get-unindexed-bindings(b(p)))
    (p:NotPat) : not contains-binders?(pattern(p))
    (p:Binder) : bindable?(pattern(p)) and wellformed-binders?(pattern(p))

;Return the list of bindings in the pattern.
;Assumes that the pattern has wellformed binders.
defn get-unindexed-bindings (p:Pattern) -> List<Binding> :
  match(p) :
    (p:Empty|Terminal|Form|Production) : List()
    (p:SeqPat) : append(get-unindexed-bindings(a(p)), get-unindexed-bindings(b(p)))
    (p:Repeat) : map(wrap-in-list,get-unindexed-bindings(pattern(p)))
    (p:ListPat) : get-unindexed-bindings(pattern(p))
    (p:Choice) : map(union-bindings,get-unindexed-bindings(a(p)),get-unindexed-bindings(b(p)))
    (p:NotPat) : List()
    (p:Binder) :
      val binding = Binding(name(p), -1, binding-type(pattern(p)))
      cons(binding, get-unindexed-bindings(pattern(p)))

;Create a new binding with the type wrapped in a list type.
defn wrap-in-list (b:Binding) -> Binding :
  Binding(name(b), index(b), ListBinding(type(b)))

;Create a new binding with the types of the two bindings unioned together.
defn union-bindings (a:Binding, b:Binding) -> Binding :
  fatal("Mismatched bindings") when name(a) != name(b)
  val new-type = UnionBinding(type(a), type(b))
  Binding(name(a), index(a), new-type)

;Returns true if xs has the same structure as bs.
defn same-structure? (xs:List<Binding>, bs:List<Binding>) -> True|False :
  length(xs) == length(bs) and
  map(name,xs) == map(name,bs)

;Return the type of the binder if it is bound to the given pattern.
defn binding-type (p:Pattern) -> BindingType :

  ;Helper: All literals can potentially be tokens so
  ;union the given terminal type with Token.
  defn literal-type (name:Symbol) -> UnionBinding :
    UnionBinding(TerminalBinding(name), TerminalBinding(`core/Token))

  ;Helper: Return the type of a literal.
  defn primitive-type (v) -> BindingType :
    match(v) :
      (v:Token) : primitive-type(item(v))
      (v:Char) : literal-type(`core/Char)
      (v:String) : literal-type(`core/String)
      (v:Byte) : literal-type(`core/Byte)
      (v:Int) : literal-type(`core/Int)
      (v:Long) : literal-type(`core/Long)
      (v:Float) : literal-type(`core/Float)
      (v:Double) : literal-type(`core/Double)
      (v:Symbol) : literal-type(`core/Symbol)
      (v:List) : literal-type(`core/List)
      (v:True) : literal-type(`core/True)
      (v:False) : literal-type(`core/False)
      (v) : TerminalBinding(`?)

  ;Compute case-by-case the type of the given pattern.
  match(p) :
    (p:Terminal) : primitive-type(value(p))
    (p:Form) : TerminalBinding(`?)
    (p:Production) : ProductionBinding(name(p))
    (p:ListPat) : literal-type(`core/List)
    (p:Choice) : UnionBinding(binding-type(a(p)), binding-type(b(p)))
    (p:Repeat) : ListBinding(binding-type(pattern(p)))

;============================================================
;================== Simple Binders ==========================
;============================================================

;Returns true if the binding is a simple binder.
;I.e. one that is pushed by the parsing engine directly
;onto the value stack.
defn simple? (t:BindingType) -> True|False :
  match(t) :
    (t:TerminalBinding) : true
    (t:UnionBinding) : simple?(a(t)) and simple?(b(t))
    (t) : false

;Returns all the simple bindings in the list.
public defn get-simple-bindings (p:List) -> List<Binding> :
  get-simple-bindings(parse-pattern(p, true))

public defn get-simple-bindings (p:Pattern) -> List<Binding> :
  to-list $ for b in get-bindings(p) filter :
    simple?(type(b))

;============================================================
;================ Stanza Type Expression ====================
;============================================================

;Returns the Stanza type expression representing the type
;of this binding.
;Note that only the type of simple bindings can be expressed
;this way.
public defn stanza-type-expression (t:BindingType) -> ? :
  match(t) :
    (t:TerminalBinding) :
      name(t)
    (t:UnionBinding) :
      val at = stanza-type-expression(a(t))
      val bt = stanza-type-expression(b(t))
      qquote(~ at | ~ bt)
    (t) :
      fatal("Binding type %_ cannot be represented directly \
             using a stanza type expression." % [t])