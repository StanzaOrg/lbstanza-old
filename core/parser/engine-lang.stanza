defpackage parser/engine-lang :
  import core
  import collections
  import parser/lookahead-tokens
  import parser/context

;<doc>=======================================================
;============================================================
;============================================================

# What is allowed inside a Binder? #

Easy Cases:
  Terminal
  Rest
  Any
  Production

Special case for Lists:

  ListPattern

Note that for ListPattern the binder binds to the raw s-expression
form.

Special case for Repeats:

  Repeat(pat)

The binder can bind to a Repeat, if and only if, the underlying pat
is an easy case. 

Special case for Choice:

  Choice(pats ...)

The binder can bind to a Choice, if and only if, all the underlying
pat is an easy case. 

;============================================================
;=======================================================<doc>

;============================================================
;==================== Language Definition ===================
;============================================================

public defstruct PatternPackage :
  productions:Tuple<DefProduction>
  actions:Tuple<ActionCallback>

;Represents a callback for an action.
;- lazy?: True if the binders are lazy and need to be
;  explicitly evaluated by the user.
;- bind-arity: The number of binders required by the callback.
public defstruct ActionCallback :
  callback: ? -> ?
  params: ActionParams

;Represents the parmameters of an action.
;- lazy?: True if the binders are lazy and need to be
;  explicitly evaluated by the user.
;- bind-arity: The number of binders required by the callback.
public defstruct ActionParams :
  lazy?: True|False
  bind-arity:Int

;Represents the definition of a production.
;- public?: True if the production can be referenced by
;  a parse-syntax or match-syntax call. False if the production
;  is only referenced internally.
;- id: The identifier of the production.
;- name: The name of the production.
;- pattern: The pattern for the production.
public defstruct DefProduction :
  public?:True|False
  id:Int
  name:Symbol
  pattern:Pattern with: (updater => sub-pattern)
with:
  printer => true

public deftype Pattern <: Hashable&Equalable

public defstruct Terminal <: Pattern :
  value
with:
  printer => true
  hashable => true
  equalable => true

public defstruct Rest <: Pattern
with:
  printer => true
  hashable => true
  equalable => true

public defstruct Any <: Pattern
with:
  printer => true
  hashable => true
  equalable => true

public defstruct NoMatch <: Pattern
with:
  printer => true
  hashable => true
  equalable => true

public defstruct NotPattern <: Pattern :
  pattern:Pattern  
with:
  printer => true
  hashable => true
  equalable => true

public defstruct Empty <: Pattern
with:
  printer => true
  hashable => true
  equalable => true

public defstruct Binder <: Pattern :
  pattern:Pattern
with:
  printer => true
  hashable => true
  equalable => true

public defstruct Sequence <: Pattern :
  patterns:Tuple<Pattern>
with:
  printer => true
  hashable => true
  equalable => true

public defstruct Choice <: Pattern :
  branches:Tuple<ChoiceBranch>
with:
  printer => true
  hashable => true
  equalable => true

public defstruct ChoiceBranch <: Hashable&Equalable :
  abandon-on-match?:True|False
  pattern: Pattern
with:
  printer => true
  hashable => true
  equalable => true

public defstruct ListPattern <: Pattern :
  pattern:Pattern
with:
  printer => true
  hashable => true
  equalable => true

public defstruct Production <: Pattern :
  id:Int
with:
  printer => true
  hashable => true
  equalable => true

public defstruct Repeat <: Pattern :
  pattern:Pattern
with:
  printer => true
  hashable => true
  equalable => true

public defstruct SingleBinderGuard <: Pattern :
  index:Int
  pattern:Pattern
with:
  printer => true
  hashable => true
  equalable => true

public defstruct Action <: Pattern :
  index:Int
  guard-index:Int|False
  fail?:True|False
  pattern:Pattern
with:
  printer => true
  hashable => true
  equalable => true

public defstruct Lookahead <: Pattern :
  entries:Tuple<LookaheadEntry>
  else-options:Tuple<Int>
  branches:Tuple<ChoiceBranch>
with:
  printer => true
  hashable => true
  equalable => true

public defstruct LookaheadEntry <: Hashable&Equalable :
  value: LookaheadToken
  options:Tuple<Int>
with:
  hashable => true
  equalable => true
  printer => true

;============================================================
;===================== Printers =============================
;============================================================

defmethod print (o:OutputStream, p:PatternPackage) :
  print(o, "PatternPackage%_" % [colon-items(productions(p))])

defn colon-items (xs:Seqable) :
  val xs-seq = to-seq(xs)
  if empty?(xs-seq) :
    ": ()"
  else :
    val items = Indented("%n" % [xs-seq])
    ":\n%_" % [items]

;============================================================
;=================== Convenience ============================
;============================================================

;Create a Choice if appropriate from the given input branches.
public defn Choice? (input-ps:Seqable<ChoiceBranch>) -> Pattern :
  val ps = to-vector<ChoiceBranch>(input-ps)
  while not empty?(ps) and abandon-on-match?(peek(ps)) :
    pop(ps)
  switch(length(ps)) :
    0 : NoMatch()
    1 : pattern(ps[0])
    else : Choice(to-tuple(ps))

;Create a Sequence if appropriate from the given input patterns.
public defn Sequence? (input-ps:Seqable<Pattern>) -> Pattern :
  val ps = to-tuple(input-ps)
  switch(length(ps)) :
    0 : Empty()
    1 : ps[0]
    else : Sequence(ps)

;============================================================
;==================== Mappers ===============================
;============================================================

public defn map (f:Pattern -> Pattern, p:PatternPackage) -> PatternPackage :
  defn g (p:DefProduction) : DefProduction(public?(p), id(p), name(p), f(pattern(p)))
  PatternPackage(map(g,productions(p)), actions(p))

public defn map (f:Pattern -> Pattern, p:Pattern) -> Pattern :
  defn g (ps:Tuple<Pattern>) : map(f,ps)
  defn g (b:ChoiceBranch) : ChoiceBranch(abandon-on-match?(b), f(pattern(b)))
  defn g (bs:Tuple<ChoiceBranch>) : map(g, bs)
  match(p) :
    (p:Terminal) : p
    (p:Rest) : p
    (p:Any) : p
    (p:NoMatch) : p
    (p:Empty) : p
    (p:Binder) : Binder(f(pattern(p)))
    (p:Sequence) : Sequence(g(patterns(p)))
    (p:Choice) : Choice(g(branches(p)))
    (p:ListPattern) : ListPattern(f(pattern(p)))
    (p:Production) : p
    (p:Repeat) : Repeat(f(pattern(p)))
    (p:Action) : Action(index(p), guard-index(p), fail?(p), f(pattern(p)))
    (p:NotPattern) : NotPattern(f(pattern(p)))
    (p:Lookahead) : Lookahead(entries(p), else-options(p), g(branches(p)))
    (p:SingleBinderGuard) : SingleBinderGuard(index(p), f(pattern(p)))

