defpackage parser/patterns :
  import core
  import collections
  import parser/context

public deftype Pattern

public defstruct SeqPat <: Pattern :
   a: Pattern
   b: Pattern
with :
   constructor => #SeqPat
   printer => true

public defstruct Choice <: Pattern :
   a: Pattern
   b: Pattern
with :
   printer => true

public defstruct Empty <: Pattern
with : (printer => true)

public defstruct Terminal <: Pattern :
   value
with : (printer => true)

public defstruct Action <: Pattern :
   action: Int|(Context -> ?)
   pattern: Pattern
   lazy?: True|False
with : (printer => true)

public defstruct FailPat <: Pattern :
   action: Int|(Context -> Exception)
   pattern: Pattern
   lazy?: True|False
with : (printer => true)

public defstruct NotPat <: Pattern :
   pattern: Pattern
with : (printer => true)

public defstruct Form <: Pattern
with : (printer => true)

public defstruct Production <: Pattern :
   name: Symbol
with : (printer => true)

public defstruct Repeat <: Pattern :
   pattern: Pattern
with : (printer => true)

public defstruct ListPat <: Pattern :
   pattern: Pattern
with : (printer => true)

public defstruct Binder <: Pattern :
   name: Symbol
   pattern: Pattern
with : (printer => true)

public defstruct Guard <: Pattern :
   predicate: Int|(? -> True|False)
   pattern: Pattern
with : (printer => true)

public defstruct Inlined <: Pattern :
   name: Symbol
with : (printer => true)   

public defstruct ProductionId <: Pattern :
  id:Int
with: (printer => true)

public defn SeqPat (a:Pattern, b:Pattern) :
   match(a, b) :
      (a:Empty, b) : b
      (a, b:Empty) : a
      (a, b) : #SeqPat(a, b)     
      
public defn Choice (ps:Seqable<Pattern>) :
   reduce-right(Choice, ps)

defmethod print (o:OutputStream, p:Pattern) :
  print{o, _} $ match(p) :
    (p:SeqPat) : "($seq %@)" % [flatten(p)]
    (p:Choice) : "($or %@)" % [flatten(p)]
    (p:Empty) : "eps"
    (p:Terminal) : value(p)
    (p:Action) : "A{%~}" % [pattern(p)]
    (p:FailPat) : "($fail %~)" % [pattern(p)]
    (p:NotPat) : "($not %~)" % [pattern(p)]
    (p:Form) : "_"
    (p:Production) : "#%_" % [name(p)]
    (p:ProductionId) : "#P%_" % [id(p)]
    (p:Repeat) : "($repeat %~)" % [pattern(p)]
    (p:ListPat) : "($list %~)" % [pattern(p)]
    (p:Binder) : "($bind %~ %~)" % [name(p), pattern(p)]
    (p:Guard) : "($when %~)" % [pattern(p)]
    (p:Inlined) : "inline #%_" % [name(p)]

;============================================================
;==================== Mappers ===============================
;============================================================

public defn map (f:Pattern -> Pattern, p:Pattern) :
  match(p) :
    (p:SeqPat) : SeqPat(f(a(p)), f(b(p)))
    (p:Choice) : Choice(f(a(p)), f(b(p)))
    (p:Empty) : p
    (p:Terminal) : p
    (p:Action) : Action(action(p), f(pattern(p)), lazy?(p))
    (p:FailPat) : FailPat(action(p), f(pattern(p)), lazy?(p))
    (p:NotPat) : NotPat(f(pattern(p)))
    (p:Form) : p
    (p:Production) : p
    (p:ProductionId) : p
    (p:Repeat) : Repeat(f(pattern(p)))
    (p:ListPat) : ListPat(f(pattern(p)))
    (p:Binder) : Binder(name(p), f(pattern(p)))
    (p:Guard) : Guard(predicate(p), f(pattern(p)))
    (p:Inlined) : p

public defn do (f:Pattern -> ?, p:Pattern) :
  defn f* (p:Pattern) : (f(p), p)
  map(f*, p)
  false

public defn children (p:Pattern) :
  generate<Pattern> : do(yield, p)

public defn any? (f:Pattern -> True|False, p:Pattern) :
  any?(f, children(p))

public defn all? (f:Pattern -> True|False, p:Pattern) :
  all?(f, children(p))

;============================================================
;================== Utilities ===============================
;============================================================

public defn flatten (p:SeqPat) -> Seq<Pattern> :
  generate<Pattern> :
    defn loop (p:Pattern) :
      match(p) :
        (p:SeqPat) : do(loop, p)
        (p) : yield(p)
    loop(p)

public defn flatten (p:Choice) -> Seq<Pattern> :
  generate<Pattern> :
    defn loop (p:Pattern) :
      match(p) :
        (p:Choice) : do(loop, p)
        (p) : yield(p)
    loop(p)