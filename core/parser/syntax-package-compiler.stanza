defpackage parser/syntax-package-compiler :
  import core
  import collections
  import parser/syntax-packages
  import parser/ops
  import parser/patterns
  import parser/syntax-package-merger
  import parser/translate
  import parser/postprocessing
  import parser/op-compiler
  import parser/engine-lang with:
    prefix(Pattern) => E

;The first package is assumed to be the base, and only productions
;in that package are accessible.
public defn compile-syntax-packages (packages:Tuple<SyntaxPackage>) -> OpPackage :
  if empty?(packages) :

    EmptyOpPackage()

  else :

    val merged-package = merge(packages)

    val translated-package = translate(merged-package)

    defn postprocess-pattern (p:EPattern) -> EPattern :
      p $> identify-rest-pattern
        $> push-binders-inwards
        $> flatten-choice-and-seqs

    val processed-package = translated-package
                         $> map{postprocess-pattern, _}
                         $> remove-left-recursion
                         $> lookahead-analysis

    compile(processed-package)

;Compile the given pattern to an OpMatchPattern.
public defn compile-pattern (package:OpPackage, p:Pattern) -> OpMatchPattern :
  val translated-p = translate(p, resolving-translator(package))
  val params = extract-action-params(p)

  val processed-pattern = translated-p
                       $> identify-rest-pattern
                       $> push-binders-inwards
                       $> flatten-choice-and-seqs

  compile-match(processed-pattern, params)

;Simple translator for resolving the id of a production.
defn resolving-translator (package:OpPackage) -> Translator :
  new Translator :
    defmethod resolve-production (this, name:Symbol) :
      match(production-id?(package, name)) :
        (id:Int) : id
        (f:False) : fatal("No production with name '%_'." % [name])