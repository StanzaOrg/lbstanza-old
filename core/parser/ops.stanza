defpackage parser/ops :
  import core
  import collections
  import parser/lookahead-tokens
  import parser/context

public defstruct OpPackage :
  productions:Tuple<ProductionOp>
  callbacks:Tuple<ActionCallback>
  ops:Tuple<Op>
  lookahead-table:HashTable<LookaheadKey,Int>

public defstruct OpMatchPattern :
  ops:Tuple<Op>
  params:Tuple<ActionParams>

;Represents a callback for an action.
;- lazy?: True if the binders are lazy and need to be
;  explicitly evaluated by the user.
;- bind-arity: The number of binders required by the callback.
public defstruct ActionCallback :
  callback: ? -> ?
  params: ActionParams

;Represents the parmameters of an action.
;- lazy?: True if the binders are lazy and need to be
;  explicitly evaluated by the user.
;- bind-arity: The number of binders required by the callback.
public defstruct ActionParams :
  lazy?: True|False
  bind-arity:Int

public defstruct ProductionOp :
  id:Int
  name:Symbol|False
  address:Int
with:
  printer => true

public deftype Op

;Use to match against an expected terminal.
public defstruct Terminal <: Op :
  value
  bind?:True|False
with:
  printer => true

;Use to match against the rest of the list.
public defstruct Rest <: Op :
  bind?:True|False
with: (printer => true)

;Use to match against anything.
public defstruct Any <: Op :
  bind?:True|False
with: (printer => true)

;Used to represent a pattern that does not match
;anything.
public defstruct NoMatch <: Op
with: (printer => true)

;Force an unconditional jump to another instruction
;address.
public defstruct Goto <: Op :
  address:Int
with: (printer => true)

;Used to indicate that a branch has succeeded,
;and to skip the other alternatives.
public defstruct Commit <: Op
with: (printer => true)

;Used to indicate that the entire Choice pattern
;being parsed cannot succeed.
public defstruct CommitNoMatch <: Op
with: (printer => true)

;Start a branch with multiple possible
;choices.
public defstruct Branch <: Op :
  alts:List<Int>
  conseq:Int
with: (printer => true)

;Lookahead one token in the input stream
;and decide what branch to take.
public defstruct Lookahead <: Op :
  branches: Tuple<LookaheadBranch>
  alt:Int|False
with:
  printer => true

public defstruct LookaheadBranch :
  token:LookaheadToken
  address:Int

;Start an inverted branch. 
public defstruct InvBranch <: Op :
  end-address:Int
with: (printer => true)

;Use to match the start of a list.
public defstruct LParen <: Op :
  end-address:Int
  bind?:True|False
with: (printer => true)

;Use to match the end of a list.
public defstruct RParen <: Op
with: (printer => true)

;Use to parse another production.
public defstruct Call <: Op :
  production:Int
  address:Int
  bind?:True|False
with: (printer => true)

;Used to call a production from a match-syntax
;pattern. Notice that there is no address field.
;The address must be dynamically looked up from
;the OpPackage.
public defstruct CallProduction <: Op :
  production:Int
  bind?:True|False
with: (printer => true)

;Use to return from parsing the production.
public defstruct Return <: Op
with: (printer => true)

;Use to signal that an action will be called
;on the parsed results.
public defstruct Action <: Op
with: (printer => true)

;Used to signal that all the binders for a rule has successfully
;finished parsing. The result is created using the action
;with the given index.
public defstruct Succeed <: Op :
  index:Int
with: (printer => true)

;Use to signal that a parse has failed, and immediately halt.
;The error is constructed using the action callback with the
;given index.
public defstruct Fail <: Op :
  index:Int
with: (printer => true)

;Used to check the final guard and fail if it doesn't pass.
public defstruct GuardCheck <: Op :
  index:Int
with: (printer => true)

;Used to check whether the previously bound value passes
;the given guard.
public defstruct ImmediateGuardCheck <: Op :
  index:Int
with: (printer => true)

;Use to signal that a repeated pattern
;is starting.
public defstruct Loop <: Op :
  end-address:Int
  bind-arity:Int
with: (printer => true)

;Use to signal that a repeated pattern
;is ending.
public defstruct LoopEnd <: Op
with: (printer => true)

;============================================================
;================== Convenience =============================
;============================================================

;Create an empty package. 
public defn EmptyOpPackage () -> OpPackage :
  OpPackage([], [], [], HashTable<LookaheadKey,Int>())

;Retrieve the identifier of the public production with the given name.
public defn production-id? (p:OpPackage, name:Symbol) -> Int|False :
  val prod = for prod in productions(p) find :
    /name(prod) == name
  match(prod:ProductionOp) :
    id(prod)

;============================================================
;=================== Printers ===============================
;============================================================

defmethod print (o:OutputStream, p:OpPackage) :
  print(o, "OpPackage:")
  val prods = Indented("%n" % [productions(p)])
  lnprint(o, prods)
  print(o, '\n')
  for (op in ops(p), i in 0 to false) do :
    lnprint(o, Indented("%_) %_" % [i, op]))