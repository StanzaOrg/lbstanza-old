defpackage parser/lookahead-tokens :
  import core
  import collections
  import parser/ops

;============================================================
;================== Lookahead Tokens ========================
;============================================================

public deftype LookaheadToken <: Hashable&Equalable

public defstruct TerminalToken <: LookaheadToken :
  value
with:
  hashable => true
  equalable => true
  printer => true

public defstruct ListToken <: LookaheadToken
with:
  hashable => true
  equalable => true
  printer => true

public defstruct EndToken <: LookaheadToken
with:
  hashable => true
  equalable => true
  printer => true

;============================================================
;================== Lookahead Table =========================
;============================================================

;Represents the lookup key for the lookahead table.
;- pc: The integer instruction pointer for the Lookahead instruction.
;- type: The integer type denoting the type of LookaheadToken.
;- value: The value of the TerminalToken.
public lostanza deftype LookaheadKey <: Hashable&Equalable :
  pc:int
  type:int
  value:ref<?>

;Encode the given arguments as a LookaheadKey.
public lostanza defn LookaheadKey (pc:ref<Int>,
                                   token:ref<LookaheadToken>) ->
                                   ref<LookaheadKey> :
  match(token) :
    (token:ref<TerminalToken>) :
      return new LookaheadKey{pc.value, 0, value(token)}
    (token:ref<ListToken>) :
      return new LookaheadKey{pc.value, 1, false}
    (token:ref<EndToken>) :
      return new LookaheadKey{pc.value, 2, false}

;Compute a hash for the lookahead key.
lostanza defmethod hash (k:ref<LookaheadKey>) -> ref<Int> :
  return new Int{k.pc + 37 * k.type + 193 * hash(k.value).value}

;Check whether two keys are equal.
lostanza defmethod equal? (a:ref<LookaheadKey>, b:ref<LookaheadKey>) -> ref<True|False> :
  if a.pc == b.pc and a.type == b.type :
    return equal?(a.value, b.value)
  return false

;============================================================
;=================== Lookahead Table ========================
;============================================================

;Create a lookahead table 
public defn LookaheadTable (ops:Tuple<Op>) -> HashTable<LookaheadKey,Int> :
  val table = HashTable<LookaheadKey,Int>()
  for (op in ops, i in 0 to false) do :
    match(op:Lookahead) :
      for b in branches(op) do :
        table[LookaheadKey(i, token(b))] = address(b)
  table