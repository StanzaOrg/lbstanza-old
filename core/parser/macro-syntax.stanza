defpackage parser/macro-syntax :
  import core
  import collections
  import macro-utils
  import stz/core-macros
  import parser/macro-compiler
  import parser/syntax-package-registry

defsyntax defsyntax-syntax :
  import (exp, exp!, exp$, exp4, id, id!, ids!, type!, :!) from core

  ;Implementations of defsyntax, match-syntax, parse-syntax, #use-syntax,
  ;#with-syntax, #use-added-syntax, #with-added-syntax.
  public defproduction syntax-exp  
  
  ;Definition of a rule within a syntax package.
  defproduction rule : ExpRule
  
  ;Import rule
  defrule rule = (import (?names:#ids!) from ?package:#id!) : ImportRule(names, package)
  defrule rule = (import ?name:#id! from ?package:#id!) : ImportRule(List(name), package)

  ;Forwarding Rule
  defrule rule = (import ?name:#id! rules as ?new-name:#id!) : ImportRulesRule(name, new-name)

  ;Failed import rule
  fail-if rule = (import _ ?rest ...) : SyntaxError(closest-info(rest), "Expected either 'from' keyword or 'rules as' keywords here.")

  ;Defproduction rule
  defproduction public? : True|False
  defrule public? = (public) : true
  defrule public? = () : false
  defrule rule = (?p:#public? defproduction ?name:#id! : ?type:#type!) : DefProductionRule(name, type, p)
  defrule rule = (?p:#public? defproduction ?name:#id!) : DefProductionRule(name, `?, p)

  ;Defrule rule
  defn prod? (x) :
     match(unwrap-token(x)) :
        (x:Symbol) : prefix?(x, "#")
        (x) : false
  defproduction prod! : Symbol|Token
  defrule prod! = (?x) when prod?(x)
  fail-if prod! = () : SyntaxError(closest-info(), "Expected a production pattern here.")

  defproduction guard : Maybe
  defrule guard = (when ?guard:#exp!) : One(guard)
  defrule guard = () : None()
  
  defproduction lazy-binders : True|False
  defrule lazy-binders = (with lazy-binders) : true
  defrule lazy-binders = () : false

  ;Helper: An optional body used for action rules.
  defproduction body?: Maybe
  defrule body? = (: ?body:#exp!) : One(body)
  defrule body? = () : None()

  ;Rule: Syntax for declaring new rules.
  defrule rule = (defrule ?e:#id! = (?pat ...) ?guard:#guard ?lb:#lazy-binders ?body:#body?) : DefActionRule(e, pat, guard, body, lb)
  defrule rule = (defrule ?e:#id! != (?pat ...) ?guard:#guard) : DefNotRule(e, pat, guard)   
  defrule rule = (defrule ?e:#id! = inline ?ie:#prod!) : DefInlineRule(e, ie)
  fail-if rule = (defrule ?e:#id! (!= | =)) : SyntaxError(closest-info(), "Expected a pattern definition for rule.")
  fail-if rule = (defrule ?e:#id!) : SyntaxError(closest-info(), "Expected either = or != operator after defrule.")

  ;Failif rule
  defproduction =!
  defrule =! = (=) : false
  fail-if =! = () : SyntaxError(closest-info(), "Expected the = operator here.")
  defrule rule = (fail-if ?e:#id! #=! (?pat ...) ?guard:#guard ?lb:#lazy-binders #:! ?body:#exp!) : DefFailRule(e, pat, guard, body, lb)
  fail-if rule = (fail-if ?e:#id! #=!) : SyntaxError(closest-info(), "Expected a pattern definition for fail-if rule.")

  ;Stanza expression rule
  defrule rule = (?e:#exp) : StanzaExpressionRule(e)

  ;Rule!
  defproduction rule! : ExpRule
  defrule rule! = (?r:#rule)
  fail-if rule! = () : SyntaxError(closest-info(), "Expected either rule definition or expression.")

  ;Defsyntax rule
  defrule syntax-exp = (defsyntax ?name:#id! #:! (?rs:#rule! ...)) :
     parse-syntax[core / #exp](compile(DefSyntaxRule(name, rs)))

  defrule id != (defsyntax)

  ;                      MatchSyntax
  ;                      ===========
  ;Match pattern
  defproduction match-pat! : MatchPattern
  defrule match-pat! = ((?pat ...) when ?guard:#exp! #:! ?body:#exp!) : MatchPattern(pat, One(guard), body)
  defrule match-pat! = ((?pat ...) #:! ?body:#exp!) : MatchPattern(pat, None(), body)
  fail-if match-pat! = () : SyntaxError(closest-info(), "Expected match pattern here.")
  
  ;Match packages
  defproduction match-pkg! : [Symbol|Token List<Symbol|Token>]
  defrule match-pkg! = (?base:#id! + ?overlays:#ids!) : [base, overlays]
  fail-if match-pkg! = (?base:#id! _) : SyntaxError(closest-info(), "Expected + operator following base package.")
  defrule match-pkg! = (?base:#id!) : [base, List()]

  defrule syntax-exp = (match-syntax[?pkgs:#match-pkg!](?arg:#exp$) #:! (?ps:#match-pat! ...)) :
     val [base, overlays] = pkgs
     parse-syntax[core / #exp](
        compile(MatchSyntaxRule(closest-info(), base, overlays, arg, ps)))
  defrule syntax-exp = (match-syntax(?arg:#exp$) #:! (?ps:#match-pat! ...)) :
     parse-syntax[core / #exp](
        compile(MatchSyntaxRule(closest-info(), `empty, List(), arg, ps)))
  fail-if syntax-exp = (match-syntax) :
     SyntaxError(closest-info(), "match-syntax must be followed by form to match upon in parenthesis.")

  defrule id != (match-syntax)

  ;                      ParseSyntax
  ;                      ===========  
  defproduction ellipsis?: True|False
  defrule ellipsis? = (~ ...) : true
  defrule ellipsis? = () : false

  defproduction parse-props : ParseParams
  defrule parse-props = (?base:#id + ((! /) ?overlays:#id) @... / ?prod:#prod! ?repeat?:#ellipsis?) :
     ParseParams(base, overlays, prod, repeat?)
  fail-if parse-props = (?base:#id + ((! /) ?overlays:#id) @...) :
     SyntaxError(closest-info(), "parse-syntax is missing specified pattern.")
  defrule parse-props = (?base:#id / ?prod:#prod! ?repeat?:#ellipsis?) :
     ParseParams(base, List(), prod, repeat?)
  fail-if parse-props = () :
     SyntaxError(closest-info(), "parse-syntax requires packages followed by pattern.")

  defrule syntax-exp = (parse-syntax[?props:#parse-props](?arg:#exp$)) :
    val compiled = compile(ParseSyntax(base(props), overlays(props), arg, prod(props), repeat?(props)))
    parse-syntax[core / #exp](compiled)
           
  defrule id != (parse-syntax)

  ;                      #use-syntax
  ;                      #==========

  defn parse-exp-with-syntax (form:List, overlays:List, info:FileInfo|False) :
    try :
      syntax-parse(`core, unwrap-all(overlays), form, `exp, false)
    catch (e:parser/errors/NoSyntaxPackage) :
      throw(SyntaxError(info, e))
  
  defproduction body-in-list!: List
  defrule body-in-list! = ((?body ...))
  fail-if body-in-list! = () : SyntaxError(closest-info(), "Expected a code block within parentheses.")

  defrule syntax-exp = (~ #use-syntax(?names:#ids!) ?rest ...) :
    parse-exp-with-syntax(List(rest), names, closest-info())
  defrule syntax-exp = (~ #use-added-syntax(?names:#ids!) ?rest ...) :
    parse-exp-with-syntax(List(rest), cons(`current-overlays,names), closest-info())
  defrule syntax-exp = (~ #with-syntax(?names:#ids!) #:! ?body:#body-in-list!) :
    parse-exp-with-syntax(body, names, closest-info())
  defrule syntax-exp = (~ #with-added-syntax(?names:#ids!) #:! ?body:#body-in-list!) :
    parse-exp-with-syntax(body, cons(`current-overlays,names), closest-info())

  defrule id != (~ #use-syntax)
  defrule id != (~ #use-added-syntax)
  defrule id != (~ #with-syntax)
  defrule id != (~ #with-added-syntax)

;============================================================
;============================================================
;============================================================

defstruct ParseParams :
  base:Symbol|Token
  overlays:List<Symbol|Token>
  prod:Symbol|Token
  repeat?:True|False

;============================================================
;===================== Syntax Error =========================
;============================================================

defstruct SyntaxError <: Exception :
  info:FileInfo|False
  msg

defmethod print (o:OutputStream, e:SyntaxError) :
  val info-str = "" when info(e) is False
            else "%_: " % [info(e)]
  print(o, "%_%_" % [info-str, msg(e)])