defpackage parser/merged-syntax-package :
  import core
  import collections
  import parser/patterns

;============================================================
;=============== Datastructure Definition ===================
;============================================================

public defstruct MergedSyntaxPackage :
  base: Symbol
  productions: Tuple<MergedProduction>
  
public defstruct MergedProduction :
  public?: True|False
  id:Int
  package: Symbol
  name: Symbol  
  patterns: Tuple<Pattern>

;============================================================
;==================== Printer ===============================
;============================================================

defmethod print (o:OutputStream, p:MergedProduction) :
  val items = [
    "package: %_" % [package(p)]
    "name: %_" % [name(p)]
    "patterns:\n%_" % [indented-items(patterns(p))]]
  val public-str = "public " when public?(p) else ""
  print(o, "%_prod %_\n%_" % [public-str, id(p), indented-items(items)])

defmethod print (o:OutputStream, p:MergedSyntaxPackage) :
  val items = cat-all $ [
    ["base: %_" % [base(p)]]
    productions(p)]
  print(o, "merged-syntax-package:\n%_" % [indented-items(items)])

defn indented-items (xs:Seqable) :
  Indented("%n" % [xs])