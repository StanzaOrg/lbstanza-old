defpackage core/safepoints :
  import core
  import collections

;============================================================
;=================== Binary Layout ==========================
;============================================================

public lostanza deftype SafepointTable :
  num-files:long
  files:ptr<FileSafepoints> ...

public lostanza deftype FileSafepoints :
  num-entries:long
  filename:ptr<byte>
  entries:SafepointEntry ...

public lostanza deftype SafepointEntry :
  line:long
  address-list:ptr<AddressList>

public lostanza deftype AddressList :
  length:long
  addresses:SafepointAddress ...

public lostanza deftype SafepointAddress :
  address:ptr<?>
  group:long

;============================================================
;==================== Retriever =============================
;============================================================

public lostanza defn safepoint-table () -> ptr<SafepointTable> :
  val vms:ptr<core/VMState> = call-prim flush-vm()
  return vms.safepoint-table

;============================================================
;==================== Dumping ===============================
;============================================================
;For development purposes, the following function
;prints out the entire contents of the safepoint table
;to the standard output stream.

public lostanza defn dump-safepoint-table () -> ref<False> :
  dump-safepoint-table(safepoint-table())
  return false

public lostanza defn dump-safepoint-table (table:ptr<SafepointTable>) -> ref<False> :
  call-c clib/printf("Safepoint Table:\n")
  for (var i:long = 0, i < table.num-files, i = i + 1) :
    dump-file-safepoints(table.files[i])
  return false

lostanza defn dump-file-safepoints (safepoints:ptr<FileSafepoints>) -> ref<False> :
  call-c clib/printf("  File: %s\n", safepoints.filename)
  for (var i:long = 0, i < safepoints.num-entries, i = i + 1) :
    dump-line(safepoints.entries[i])
  return false

lostanza defn dump-line (entry:SafepointEntry) -> ref<False> :
  call-c clib/printf("    line %ld: ", entry.line)
  for (var i:long = 0, i < entry.address-list.length, i = i + 1) :
    val address = entry.address-list.addresses[i]
    call-c clib/printf("%p (group %ld) ", address.address, address.group)
  call-c clib/printf("\n")
  return false

;============================================================
;================= Retrieval ================================
;============================================================

public lostanza defn safepoint-addresses (safepoints:ptr<SafepointTable>, filename:ptr<byte>, line:long) -> ptr<AddressList> :
  val file-safepoints = file-safepoints(safepoints, filename)
  if file-safepoints != null :
    return safepoint-addresses(file-safepoints, line)
  return null

public lostanza defn file-safepoints (safepoints:ptr<SafepointTable>, filename:ptr<byte>) -> ptr<FileSafepoints> :
  call-c clib/printf("Look for safepoints for file %s\n", filename)
  print-working-dir()
  for (var i:long = 0, i < safepoints.num-files, i = i + 1) :
    call-c clib/printf("Look inside file %s\n", safepoints.files[i].filename)
    if same-file?(String(filename), String(safepoints.files[i].filename)) == true :
      call-c clib/printf("Successfully found breakpoints for file %s\n", filename)
    ;if chars-equal?(filename, safepoints.files[i].filename) :
      return safepoints.files[i]
  return null

defn print-working-dir () :
  println("Current working directory: %_" % [resolve-path!(".")])

defn same-file? (a:String, b:String) -> True|False :
  try :
    val afull = resolve-path(a)
    val bfull = resolve-path(b)
    match(afull:String, bfull:String) :
      afull == bfull
  catch (e:Exception) :
    false

public lostanza defn safepoint-addresses (safepoints:ptr<FileSafepoints>, line:long) -> ptr<AddressList> :
  for (var i:long = 0, i < safepoints.num-entries, i = i + 1) :
    val entry = safepoints.entries[i]
    if entry.line == line :
      return entry.address-list
  return null

lostanza defn chars-equal? (a:ptr<byte>, b:ptr<byte>) -> long :
  return call-c clib/strcmp(a, b) == 0