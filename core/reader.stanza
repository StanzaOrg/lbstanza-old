;See License.txt for details about licensing.
defpackage reader :
   import core with :
      prefix(digit?, get-char, get-chars, peek?) => core-
   import collections
   import stz/algorithms

;============================================================
;================== Public Interface ========================
;============================================================

public defn read (s:StringInputStream) :
  val info = info(s)
  match(parse-1(input-stream-parser(s,false))) :
    (t:Token) : t
    (t:False) : throw(NoForm(info))

public defn read-all (s:StringInputStream) -> List<Token> :
  parse-list(input-stream-parser(s,false))

public defn read-all (text:String) -> List<Token> :
   read-all(StringInputStream(text))

public defn read-file (filename:String) -> List<Token> :
   read-all(StringInputStream(slurp(filename), filename))

public defn read-line (s:InputStream) -> List<Token>|False :
   val stream = LineInputStream(s)
   if peek?(stream) is-not False :
     parse-list(input-stream-parser(stream, true))

public defn read-line (p:Prompter) -> List<Token>|False :
   val stream = PromptInputStream(p)
   if peek?(stream) is-not False :
     parse-list(input-stream-parser(stream, true))

defn input-stream-parser (s:ParseStream, reluctant?:True|False) :
  val tokens = tokenize(s, reluctant?)
  val tokens-without-indents = convert-indentations-to-structural-tokens(tokens)
  Parser(tokens-without-indents)  

;============================================================
;==================== Line Counter ==========================
;============================================================

deftype LineCounter
defmulti inc (lc:LineCounter, c:Char) -> False
defmulti line (lc:LineCounter) -> Int
defmulti column (lc:LineCounter) -> Int

defn LineCounter () :
  var line:Int = 1
  var column:Int = 0
  new LineCounter :
    defmethod inc (this, c:Char) :
      if c == '\n' :
        line = line + 1
        column = 0
      else :
        column = column + 1
    defmethod line (this) : line
    defmethod column (this) : column

;============================================================
;==================== ParseStream ===========================
;============================================================

;Parsing abstraction used by tokenizer
deftype ParseStream :
  StringInputStream <: ParseStream
defmulti peek? (s:ParseStream, i:Int) -> Char|False
defmulti get-char (s:ParseStream) -> Char|False
defmulti get-chars (s:ParseStream, n:Int) -> String
defmulti line-info (s:ParseStream) -> FileInfo

;Convenience functions
defn peek? (s:ParseStream) : peek?(s, 0)
defn get-char! (s:ParseStream) : get-char(s) as Char

;Forward implementation for StringInputStream
defmethod peek? (s:StringInputStream, i:Int) : core-peek?(s, i)
defmethod get-char (s:StringInputStream) : core-get-char(s)
defmethod get-chars (s:StringInputStream, n:Int) : core-get-chars(s, n)
defmethod line-info (s:StringInputStream) : info(s)

;Implementation of LineInputStream
defn LineInputStream (s:InputStream) :
  val buffer = StringBuffer()
  var start:Int = 0
  val line-counter = LineCounter()

  ;Return true if we make progress
  defn read-line () -> True|False :
    defn* loop () :
      val c = core-get-char(s)
      match(c:Char) :
        add(buffer, c)
        loop() when c != '\n'
    val n1 = length(buffer)
    loop()
    length(buffer) > n1

  ;Fill buffer to satisfy at least n chars
  defn* fill-buffer (n:Int) -> True|False :
    if length(buffer) - start < n :
      fill-buffer(n) when read-line()
    else :
      true            
     
  new ParseStream :
    defmethod peek? (this, i:Int) :
      if fill-buffer(i + 1) :
        buffer[start + i]
    defmethod line-info (this) :
      FileInfo("NoFile", line(line-counter), column(line-counter))
    defmethod get-char (this) :
      val c = peek?(this, 0)
      match(c:Char) :        
        start = start + 1
        inc(line-counter,c)
      c
    defmethod get-chars (this, n:Int) :
      if n > 0 :
        val c = peek?(this, n - 1)
        fatal("Less than %_ chars in buffer." % [n]) when c is-not Char
        val str = buffer[start to start + n]
        do(inc{line-counter, _}, str)
        start = start + n
        str as String
      else :
        ""

;Implementation of PromptInputStream
public deftype Prompter
public defmulti get-line (p:Prompter) -> String|False

defn PromptInputStream (prompter:Prompter) :
  val buffer = StringBuffer()
  var start:Int = 0
  val line-counter = LineCounter()

  ;Return true if we make progress
  defn read-line () -> True|False :
    match(get-line(prompter)) :
      (l:String) :
        add-all(buffer, l)
        add(buffer, '\n')
        true
      (_:False) :
        false

  ;Fill buffer to satisfy at least n chars
  defn* fill-buffer (n:Int) -> True|False :
    if length(buffer) - start < n :
      fill-buffer(n) when read-line()
    else :
      true            
     
  new ParseStream :
    defmethod peek? (this, i:Int) :
      if fill-buffer(i + 1) :
        buffer[start + i]
    defmethod line-info (this) :
      FileInfo("NoFile", line(line-counter), column(line-counter))
    defmethod get-char (this) :
      val c = peek?(this, 0)
      match(c:Char) :
        start = start + 1
        inc(line-counter,c)
      c
    defmethod get-chars (this, n:Int) :
      if n > 0 :
        val c = peek?(this, n - 1)
        fatal("Less than %_ chars in buffer." % [n]) when c is-not Char
        val str = buffer[start to start + n]
        do(inc{line-counter, _}, str)
        start = start + n
        str as String
      else :
        ""

;============================================================
;================= Character Classes ========================
;============================================================

defn CharMap (s:String) : 
  val map = BitArray(256,false)
  for c in s do : map[to-int(c)] = true
  map
defn CharMap (s:Seqable<String>) :
  CharMap(append-all(s))
defn get (m:BitArray, c:Char|False) :
  match(c) :
    (c:Char) : m[to-int(c)]
    (c:False) : false

val digits = "0123456789"
val letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
val id-punc = "~!@#$%^*+-=/"
val operator-punc = ".:<&|"
val DIGIT-CHARS = CharMap(digits)
val NECESSARY-ID-CHARS = CharMap([letters, "_?"])
val ID-CHARS = CharMap([letters "_?" digits id-punc])
val OPERATOR-CHARS = CharMap([id-punc operator-punc])
val OPEN-BRACE-CHARS = CharMap("([{<")
val CLOSE-BRACE-CHARS = CharMap(")]}>")
val WHITESPACE-CHARS = CharMap(" ,\r")
val NUMBER-CHARS = CharMap([letters "_?" digits id-punc "."])

defn whitespace? (c:Char|False) : WHITESPACE-CHARS[c]
defn necessary-id-char? (c:Char|False) : NECESSARY-ID-CHARS[c]
defn open-brace? (c:Char|False) : OPEN-BRACE-CHARS[c]
defn close-brace? (c:Char|False) : CLOSE-BRACE-CHARS[c]
defn id-char? (c:Char|False) : ID-CHARS[c]
defn number-char? (c:Char|False) : NUMBER-CHARS[c]
defn digit? (c:Char|False) : DIGIT-CHARS[c]

;============================================================
;================== Token Classes ===========================
;============================================================

defstruct Indentation :
  indent:Int
defmethod print (o:OutputStream, i:Indentation) :
  print(o, "Indentation(%_)" % [indent(i)])

defstruct OpenToken :
  char:Char
  star?:True|False
defmethod print (o:OutputStream, t:OpenToken) :
  val star-str = "*" when star?(t) else ""
  print(o, "Open%_(%~)" % [star-str, char(t)])

defstruct CloseToken :
  char:Char
defmethod print (o:OutputStream, t:CloseToken) :
  print(o, "Close(%~)" % [char(t)])

defstruct QuoteToken
defmethod print (o:OutputStream, t:QuoteToken) :
  print(o, "Quote")

defstruct CaptureToken :
  symbol: Symbol
defmethod print (o:OutputStream, t:CaptureToken) :
  print(o, "Cap(%~)" % [symbol(t)])

defstruct Identifier :
  symbol: Symbol
defmethod print (o:OutputStream, t:Identifier) :
  print(o, "Ident(%~)" % [symbol(t)])

defstruct Operator :
  symbol: Symbol
defmethod print (o:OutputStream, t:Operator) :
  print(o, "Operator(%~)" % [symbol(t)])

defstruct StreamEnd

;============================================================
;=================== Escaped Characters =====================
;============================================================

;Create escape character table
val ESCAPE-TABLE = Array<Char|False>(256, false)
ESCAPE-TABLE[to-int('t')] = '\t'
ESCAPE-TABLE[to-int('b')] = '\b'
ESCAPE-TABLE[to-int('r')] = '\r'
ESCAPE-TABLE[to-int('n')] = '\n'
ESCAPE-TABLE[to-int('\\')] = '\\'
ESCAPE-TABLE[to-int('\"')] = '\"'
ESCAPE-TABLE[to-int('\'')] = '\''
ESCAPE-TABLE[to-int('|')] = '|'

;Convert escape specifier to character
defn escape-char (s:ParseStream, c:Char) -> Char :
  match(ESCAPE-TABLE[to-int(c)]) :
    (c2:Char) : c2
    (c2:False) : throw(InvalidEscapeChar(line-info(s), c))

;Eat paired characters
;Has form |asdf \t \n asdfkj |.
;The first character is assumed to be the bracketing character.
defn eat-escaped-chars (s:ParseStream, buf:StringBuffer) -> String|False :
  ;Clear the buffer and retrieve the bracketing character
  clear(buf)
  val end-char = get-char!(s)

  ;Process the next character in the stream
  defn* process-next-char () :
    match(get-char(s)) :
      (c1:Char) :
        if c1 == end-char :
          to-string(buf)
        else if c1 == '\\' :
          match(get-char(s)) :
            (c2:Char) :
              if c2 == '\n' : eat-whitespace()
              else : add(buf, escape-char(s,c2))
            (c2:False) :
              throw(NoEscapeSpecifier(line-info(s)))
          process-next-char()
        else :
          add(buf, c1)
          process-next-char()
      ;End of stream. Read failure.
      (c1:False) :
        false

  ;Eat all the leading whitespace
  defn* eat-whitespace () :
    while peek?(s) == ' ' :
      get-char!(s)

  ;Launch
  process-next-char()

;============================================================
;==================== Tokenizer =============================
;============================================================

defn tokenize (s:ParseStream, reluctant?:True|False) :
  ;Generate tokens
  generate<Token> :
    ;Eat until next non-ignored character.
    ;Whitespace and comments are ignored.
    defn eat-ignored-chars () :
      defn eat-whitespace () :
        while whitespace?(peek?(s)) :
          get-char!(s)
      defn eat-comment () :
        if peek?(s) == ';' :
          ;Multiline comment
          if peek?(s,1) == '<' :
            get-char!(s) ;Eat semicolon
            val [tag-len, com-len] = tagged-block("multiline comment")
            get-chars(s, tag-len + com-len + tag-len)
          ;Regular comment   
          else :
            let loop () :
              val c = peek?(s)
              if c is Char and c != '\n' :
                get-char!(s)
                loop()
          ;Comment successfully read
          true
      let loop () :
        eat-whitespace()
        loop() when eat-comment()

    ;Tagged Properties
    ;Returns [tag-length, block-length]
    defn tagged-block (description:String) -> [Int Int]:
      ;Returns a sequence of remaining characters after and including start
      defn remaining-chars (start:Int) :
        val idx = to-seq(start to false)
        repeat-while $ fn () :
          match(peek?(s, next(idx))) :
            (c:Char) : One(c)
            (c:False) : None()
      ;Find the length of the tag
      val info = line-info(s)
      val tag-len =
        match(index-of(remaining-chars(0), '>')) :
          (i:Int) : i + 1
          (n:False) : throw(InvalidTag(info))
      ;Does position i contain the tag?
      defn tag? (i:Int) :
        for j in 0 to tag-len all? :
          peek?(s, i + j) == peek?(s, j)
      ;Search for the next occurrence of the tag
      defn* index-of-tag (start:Int) -> Int :
        match(index-of(remaining-chars(start), '<')) :
          (i:Int) : (start + i) when tag?(start + i) else index-of-tag(start + i + 1)
          (i:False) : throw(NoEndTagFound(info, description))
      ;Driver
      val end-tag-pos = index-of-tag(tag-len)
      [tag-len, end-tag-pos - tag-len]

    ;Keep track of which line the last indentation token was
    ;issued at.
    var last-indented-line:Int = -1
    defn issue-indentation? () :
      val info = line-info(s)
      if line(info) > last-indented-line :        
        last-indented-line = line(info)
        yield(Token(Indentation(column(info)), info))

    ;Keep track of scopes
    val scopes = Vector<Char>()
        
    ;Compute the ending index of a symbol
    defn identifier-end (start:Int) -> False|Int :
      val i = find!({not id-char?(peek?(s,_))}, start to false)
      i when any?(necessary-id-char?{peek?(s,_)}, start to i)

    ;Compute the ending index of a number
    defn* number-end (start:Int) -> Int :
      find!({not number-char?(peek?(s,_))}, start to false)

    ;Buffer for escaped characters
    val escape-buf = StringBuffer()

    ;e.g. 'c'
    defn* eat-char () :
      val info = line-info(s)
      if peek?(s) == '\'' :
        match(eat-escaped-chars(s,escape-buf)) :
          (s:String) :
            if length(s) == 1 : Token(s[0], info)
            else : throw(InvalidCharString(info))
          (s:False) : throw(UnclosedCharString(info))

    ;e.g. "This is their\'s."
    defn* eat-string () :
      val info = line-info(s)
      if peek?(s) == '\"' :
        match(eat-escaped-chars(s,escape-buf)) :
          (s:String) : Token(s, info)
          (s:False) : throw(UnclosedString(info))

    ;e.g. \|My house|
    defn* eat-escaped-symbol () :
      val info = line-info(s)
      if peek?(s) == '\\' and peek?(s, 1) == '|' :
        get-char!(s)
        match(eat-escaped-chars(s,escape-buf)) :
          (s:String) : Token(Identifier(to-symbol(s)), info)
          (s:False) : throw(UnclosedSymbol(info))

    ;An identifier is a string of SYMBOL characters that contains at
    ;least one alpha character. Some special symbols represent values.
    ;e.g. my/identifier
    defn* eat-identifier () :
       match(identifier-end(0)) :
          (len:Int) :
             val info = line-info(s)
             val str = get-chars(s, len)
             switch {str == _} :
                "true" : Token(true, info)
                "false" : Token(false, info)
                else : Token(Identifier(to-symbol(str)), info)
          (len:False) :
             false

    ;Determine if character is operator character
    defn operator-char? (c:Char|False) :
      if c == '>' : empty?(scopes) or peek(scopes) != '<'
      else : OPERATOR-CHARS[c]

    ;An operator is a reluctant string of OPERATOR characters.
    ;e.g. <:
    defn eat-operator () :
      val len = look-forward(0) where :
        defn* look-forward (i:Int) :
          if operator-char?(peek?(s,i)) : look-forward(i + 1)
          else if necessary-id-char?(peek?(s,i)) : look-back(i - 1)
          else : i
        defn* look-back (i:Int) :
          if id-char?(peek?(s,i)) : look-back(i - 1)
          else : i + 1
      if len > 0 :
        val info = line-info(s)
        val sym = to-symbol(get-chars(s, len))
        Token(Operator(sym), info)

    ;Eat a number
    ;e.g. 103L
    defn eat-number () :
      if digit?(peek?(s,0)) or
        (peek?(s) == '-' and digit?(peek?(s,1))) :
        val info = line-info(s)
        val str = get-chars(s, number-end(0))
        defn number? (x) :
          match(x) :
            (x:False) : throw(InvalidNumber(info))
            (x) : Token(x, info)
        if contains?(str, '.') :
          if suffix?(str, "f") or suffix?(str, "F") :
            number?(to-float(but-last(str)))
          else : number?(to-double(str))
        else :
          if suffix?(str, "y") or suffix?(str, "Y") :
            number?(to-byte(but-last(str)))
          else if suffix?(str, "l") or suffix?(str, "L") :
            number?(to-long(but-last(str)))
          else : number?(to-int(str))

    ;Eat a here string
    ;e.g. \<STR>This is my String<STR>
    defn eat-here-string () :
      if peek?(s) == '\\' and peek?(s,1) == '<' :
        val info = line-info(s)
        get-char!(s) ;Eat \
        val [tag-len, str-len] = tagged-block("here string")
        get-chars(s, tag-len)
        val str = get-chars(s, str-len)
        get-chars(s, tag-len)
        Token(str, info)

    ;e.g. [
    defn eat-structural-token () :
      val info = line-info(s)
      if open-brace?(peek?(s)) :
        Token(OpenToken(get-char!(s), false), info)
      else if close-brace?(peek?(s)) :
        Token(CloseToken(get-char!(s)), info)
      else if peek?(s) == '`' :
        get-char!(s)
        Token(QuoteToken(), info)

    ;Eat starred structural token
    ;e.g. myname[
    defn eat-starred-structural-token (prev:Token) :
      if item(prev) is-not OpenToken|QuoteToken|Operator :
        if open-brace?(peek?(s)) :
          val info = line-info(s)
          Token(OpenToken(get-char!(s), true), info)

    ;e.g. ?x
    defn eat-capture () :
      if (peek?(s) == '?') :
        match(identifier-end(1)) :
          (end:Int) :
            val info = line-info(s)
            get-char!(s)
            val sym = to-symbol(get-chars(s, end - 1))
            Token(CaptureToken(sym), info)
          (end:False) :
            false    

    ;Update the scope stack
    defn update-stack (info:FileInfo, c:Char) :
      defn pop-stack (opening:Char) :
        if empty?(scopes) :
          throw(ExtraClosingToken(info, c))
        else if peek(scopes) != opening :
          throw(WrongClosingToken(info, peek(scopes), c))
        else :
          pop(scopes)
      switch(c) :
        '<' : add(scopes, c)
        '[' : add(scopes, c)
        '{' : add(scopes, c)
        '(' : add(scopes, c)
        '>' : pop-stack('<')
        ']' : pop-stack('[')
        '}' : pop-stack('{')
        ')' : pop-stack('(')
        else : fatal("Invalid stack char: %~" % [c])

    val eaters:Tuple<(() -> Token|False)> = [
      eat-capture,
      eat-here-string,
      eat-escaped-symbol,
      eat-char,
      eat-string,
      eat-number,
      eat-identifier,
      eat-operator,
      eat-structural-token]
    defn eat-lexeme! () :
      ;Eat a token
      val token? = for eater in eaters first :
        match(eater()) :
          (t:Token) : One(t)
          (t:False) : None()
      if empty?(token?) :
        throw(InvalidChar(line-info(s), peek?(s) as Char))

      ;Emitting a token
      defn emit-and-update-stack (t:Token) :
        val item = item(t)
        match(item:OpenToken|CloseToken) :
          update-stack(info(t), char(item))
        yield(t)

      ;Emit the token
      val token = value!(token?)
      emit-and-update-stack(token)

      ;Emit the next starred token
      val star-token = eat-starred-structural-token(token)
      match(star-token:Token) :
        emit-and-update-stack(star-token)

    defn* eat-lexemes () :
      eat-ignored-chars()
      if peek?(s) is-not False :
        ;Case: End of line
        if peek?(s) == '\n' :          
          get-char!(s)
          if not (reluctant? and empty?(scopes)) :
            eat-lexemes()
        ;Case: Lexeme ahead.
        else :
          issue-indentation?()
          eat-lexeme!()
          eat-lexemes()

    ;Launch
    eat-lexemes()
    yield(Token(StreamEnd(), line-info(s)))

;============================================================
;================ Indentation Structuring ===================
;============================================================

deftype StackCtxt :
  OpenToken <: StackCtxt
  Indentation <: StackCtxt

defstruct IndentedBlock <: StackCtxt :
  indent: Int
with:
  printer => true

defstruct StackBottom <: StackCtxt

defn convert-indentations-to-structural-tokens (tokens:Seq<Token>) -> Seq<Token> :
  generate<Token> :
    ;Initialize stack
    val stack = Vector<Token>()
    add(stack, Token(StackBottom(), FileInfo("NoFile", 0, 0)))
    add(stack, Token(IndentedBlock(0), FileInfo("NoFile", 0, 0)))

    ;Test whether the given token is a line-ending colon.
    ;If it is, then we pop the next indentation from the token stream and pass
    ;it to the 'yes' result.
    defn* line-ending-colon?<?T> (x:Operator, yes:(Int, FileInfo) -> ?T, no:() -> ?T) :
      if symbol(x) == `: :
        match(item(peek(tokens))) :
          (item:Indentation) : yes(indent(item), info(next(tokens)))
          (item:StreamEnd) : yes(0, info(next(tokens)))
          (item) : no()
      else : no()

    ;Retrieve the current base indent.
    ;New blocks must be indented farther than this value.
    defn base-indent () -> [Int|False, FileInfo|False] :
      val items = in-reverse(stack)
      let loop () :
        val token = next(items)
        match(item(token)) :
          (item:IndentedBlock) : [indent(item), info(token)]
          (item:Indentation) : loop()
          (item:OpenToken) : [false, false]

    ;The next token is an deindentation token
    defn deindent (t:Token) :
      val item-t = item(t) as Indentation
      match(item(peek(stack))) :
        (top:Indentation) :          
          if indent(item-t) > indent(top) :
            throw(InvalidDeindent(info(t), indent(item-t), indent(top)))
          else if indent(item-t) == indent(top) :
            set-top(stack,t)
          else :
            pop(stack)
            deindent(t)
        (top:OpenToken) :
          add(stack,t)
        (top:IndentedBlock) :
          if indent(item-t) > indent(top) :
            throw(InvalidDeindent(info(t), indent(item-t), indent(top)))
          else if indent(item-t) == indent(top) :
            false
          else :
            yield(Token(CloseToken(')'), info(t)))
            pop(stack)
            deindent(t)
            
    ;Update the stack with the given token
    defn update-stack (t:Token) :
      match(item(t)) :
        (item:Indentation) :
          match(/item(peek(stack))) :
            (top:Indentation) :
              if indent(item) > indent(top) :
                add(stack,t)
              else if indent(item) == indent(top) :
                set-top(stack, t)
              else :
                pop(stack)
                update-stack(t)
            (top:OpenToken) :
              add(stack, t)
            (top:IndentedBlock) :
              if indent(item) > indent(top) : add(stack, t)
              else : deindent(t)
        (item:CloseToken) :
          match(/item(peek(stack))) :
            (top:Indentation) :
              pop(stack)
              update-stack(t)
            (top:OpenToken) :
              yield(t)
              pop(stack)
              false
            (top:IndentedBlock) :
              yield(Token(CloseToken(')'), info(t)))
              pop(stack)
              update-stack(t)
        (item:StreamEnd) :
          match(/item(peek(stack))) :
            (top:Indentation) :
              pop(stack)
              update-stack(t)
            (top:OpenToken) :
              throw(NoClosingToken(info(peek(stack)), char(top)))
            (top:IndentedBlock) :
              yield(Token(CloseToken(')'), info(t)))
              pop(stack)
              update-stack(t)
            (top:StackBottom) :
              ;Done
              false
        (item:OpenToken) :
          add(stack, t)
        (item:IndentedBlock) :
          val [prev-base, base-info] = base-indent()
          match(prev-base:Int) :
            if indent(item) <= prev-base :
              throw(InvalidBlock(info(t), indent(item), base-info as FileInfo, prev-base))
          add(stack, t)

    ;Process a given token
    defn* process (t:Token) :
      match(item(t)) :
        (item:Indentation|CloseToken|StreamEnd) :
          update-stack(t)
        (item:OpenToken) :
          yield(t)
          update-stack(t)
        (item:Operator) :
          line-ending-colon?(item,
            fn* (next-indent, indent-info) :
              ;Yield : (
              yield(t)
              yield(Token(OpenToken('(', false), indent-info))
              ;Push new context onto stack
              update-stack(Token(IndentedBlock(next-indent), indent-info))
            fn* () :
              yield(t))
        (item) :
          yield(t)            

    ;Process all tokens in stream
    do(process, tokens)


;============================================================
;===================== Parsing ==============================
;============================================================

deftype Parser
defmulti parse-list (p:Parser) -> List<Token>
defmulti parse-1 (p:Parser) -> False|Token

defn Parser (s:Seq<Token>) -> Parser :
  ;Create shorthands
  defn shorthand (t:Token, v:List<Token>) :
    val item = item(t) as OpenToken
    switch([char(item), star?(item)]) :
      ['(', false] : Token(v, info(t))
      ['(', true] : Token(cons(`@do, v), info(t))
      ['[', false] : Token(cons(`@tuple, v), info(t))
      ['[', true] : Token(cons(`@get, v), info(t))
      ['{', false] : Token(cons(`@afn, v), info(t))
      ['{', true] : Token(cons(`@do-afn, v), info(t))
      ['<', true] : Token(cons(`@of, v), info(t))
  defn shorthand (t:Token, v:Token) :
    val item = item(t) as QuoteToken
    Token(List(`@quote, v), info(t))
  defn shorthand (t:Token) :
    val item = item(t) as CaptureToken
    Token(List(`@cap, symbol(item)), info(t))
      
  ;Parse the next item in the sequence
  defn parse-next () -> Token|False : 
    if not empty?(s) :
      val t = peek(s)
      match(item(t)) :
        (item:OpenToken) :
          next(s) ;Eat opening token
          val result = shorthand(t, parse-list())
          next(s) ;Eat closing token
          result
        (item:CloseToken) :
          false
        (item:QuoteToken) :
          next(s)
          match(parse-next()) :
            (x:Token) : shorthand(t,x)
            (x:False) : throw(NoQuotedValue(info(t)))
        (item:CaptureToken) :
          next(s)
          shorthand(t)
        (item:Identifier) :
          next(s)
          Token(symbol(item), info(t))
        (item:Operator) :
          next(s)
          Token(symbol(item), info(t))
        (item) :
          next(s)
          t
  ;Parse until the next closing bracket in the sequence.
  defn parse-list () -> List<Token> :
    val accum = Vector<Token>()
    let loop () :
      match(parse-next()) :
        (t:Token) :
          add(accum,t)
          loop()
        (t:False) :
          to-list(accum)          

  ;Return parser
  new Parser :
    defmethod parse-list (this) :
      parse-list()
    defmethod parse-1 (this) :
      parse-next()

;============================================================
;================== Utilities ===============================
;============================================================

defn but-last (str:String) :
  str[0 to (length(str) - 1)]

defn set-top<?T> (v:Vector<?T>, x:T) :
  val n = length(v)
  v[n - 1] = x

;============================================================
;=================== Lexer Errors ===========================
;============================================================

public deftype LexerException <: Exception

defn LexerException (s:String) :
  new LexerException :
    defmethod print (o:OutputStream, this) :
      print(o, s)

defn NoClosingToken (info:FileInfo, open:Char) :
  LexerException $ to-string $
  "%_: No corresponding closing parenthesis found for opening parenthesis %~." % [info, open]

defn InvalidNumber (info:FileInfo) :
  LexerException $ string-join $
  [info ": Invalid number."]

defn InvalidChar (info:FileInfo, item:Char) :
  LexerException $ to-string $
  "%_: Invalid token %~." % [info, item]

defn InvalidEscapeChar (info:FileInfo, c:Char) :
  LexerException $ string-join $
  [info ": Invalid escape character: " c "."]

defn NoEscapeSpecifier (info:FileInfo) :
  LexerException $ string-join $
  [info ": Expected an escape specifier after backslash."]

defn UnclosedString (info:FileInfo) :
  LexerException $ string-join $
  [info ": Unclosed string. "]

defn UnclosedCharString (info:FileInfo) :
  LexerException $ string-join $
  [info ": Unclosed character. "]

defn UnclosedSymbol (info:FileInfo) :
  LexerException $ string-join $
  [info ": Unclosed symbol. "]

defn InvalidCharString (info:FileInfo) :
  LexerException $ string-join $
  [info ": Invalid character string. Must have length 1."]

defn WrongClosingToken (info:FileInfo, opening:Char, closing:Char) :
  val msg = "%_: Wrong closing parenthesis %~ for corresponding opening parenthesis %~." % [info, closing, opening]
  LexerException(to-string(msg))

defn ExtraClosingToken (info:FileInfo, c:Char) :
  LexerException $ to-string $
  "%_: Extra closing parenthesis %~ found." % [info, c]

defn InvalidTag (info:FileInfo) :
  LexerException $ string-join $
  [info ": Invalid tag for here string."]

defn NoEndTagFound (info:FileInfo, description:String) :
  LexerException $ string-join $
  [info ": No ending tag found for " description "."]

defn InvalidDeindent (info:FileInfo, actual:Int, expected:Int) :
  LexerException $ to-string $
  "%_: Cannot de-indent to %_ spaces. It does not line up with the previous indentation level which is at %_ spaces." % [info, actual, expected]

defn InvalidBlock (info:FileInfo, indent:Int, base-info:FileInfo, base:Int) :
  LexerException $ to-string $
  "%_: Cannot start indented block with an indentation level of %_ spaces. \
   The current block, starting at %_, is at %_ spaces." % [
   info, indent, base-info, base]

defn NoForm (info:FileInfo) :
  LexerException $ string-join $
  [info ": No forms left in stream."]

defn NoQuotedValue (info:FileInfo) :
  LexerException $ string-join $
  [info ": No s-expression following quote operator."]