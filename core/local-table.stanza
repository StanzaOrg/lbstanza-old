defpackage core/local-table :
  import core
  import collections
  import stz/printing-utils
  
;============================================================
;========== Lostanza Reflection of Binary Layout ============
;============================================================

public lostanza deftype LSLocalVarTable :
  varmaps:ptr<LSVarMaps>
  contexts:ptr<LSVarContexts>
  named-vars:ptr<LSNamedVars>
  index-maps:ptr<LSIndexMaps>
  indices:ptr<LSIndices>

public lostanza deftype LSVarMaps :
  length:long
  entries:LSVarMapEntry ...

public lostanza deftype LSVarMapEntry :
  code-label:ptr<?>
  context-index:int
  index-map-index:int

public lostanza deftype LSVarContexts :
  length:int
  var-indices:int ...

public lostanza deftype LSNamedVars :
  length:long
  vars:LSNamedVar ...

public lostanza deftype LSNamedVar :
  stack-offset:long
  name:ptr<byte>

public lostanza deftype LSIndexMaps :
  length:int
  start-indices:int ...

public lostanza deftype LSIndices :
  length:int
  indices:int ...

;============================================================
;=================== HiStanza Wrappers ======================
;============================================================

;HiStanza handle for the LocalVarTable.
public lostanza deftype LocalVarTable :
  value:ptr<LSLocalVarTable>

;HiStanza handle for a VarContext.
public lostanza deftype VarContext :
  vartable:ptr<LSLocalVarTable>
  entry:ptr<LSVarMapEntry>

;HiStanza handle for a NamedVar.
public lostanza deftype NamedVar :
  value:ptr<LSNamedVar>

;============================================================
;======================= Accessors ==========================
;============================================================

;Create a LocalVarTable from a pointer to the underlying binary data.
public lostanza defn LocalVarTable (data:ptr<LSLocalVarTable>) -> ref<LocalVarTable> :
  return new LocalVarTable{data}

;Return the number of variable contexts. 
public lostanza defn length (table:ref<LocalVarTable>) -> ref<Int> :
  return new Int{table.value.varmaps.length as int}

;Return the i'th variable context.
public lostanza defn get (table:ref<LocalVarTable>, i:ref<Int>) -> ref<VarContext> :
  val varmaps = table.value.varmaps
  if i.value < 0 or i.value >= varmaps.length :
    fatal(VarContextOutOfBounds(i))
  return new VarContext{table.value, addr(varmaps.entries[i.value])}

;Error message.
defn VarContextOutOfBounds (i:Int) :
  "Index %_ is out of bounds of the LocalVarTable." % [i]

;Retrieve the VarContext for the given code position, if there is one.
public lostanza defn context (table:ref<LocalVarTable>, codepos:ptr<?>) -> ref<VarContext|False> :
  val varmaps = table.value.varmaps
  for (var i:long = 0, i < varmaps.length, i = i + 1) :
    if varmaps.entries[i].code-label == codepos :
      return new VarContext{table.value, addr(varmaps.entries[i])}
  return false

;HiStanza override.
public lostanza defn context (table:ref<LocalVarTable>, codepos:ref<Long>) -> ref<VarContext|False> :
  return context(table, codepos.value as ptr<?>)

;Return the number of named variables in the context.
public lostanza defn length (c:ref<VarContext>) -> ref<Int> :
  val index-maps = c.vartable.index-maps
  val i = c.entry.index-map-index
  val start = index-maps.start-indices[i]
  val end = index-maps.start-indices[i + 1]
  return new Int{end - start}

;Return the code address of the context.
public lostanza defn code-label (c:ref<VarContext>) -> ref<Long> :
  val address = c.entry.code-label as long
  return new Long{address}

;Return the information about the i'th named variable.
public lostanza defn get (c:ref<VarContext>, i:ref<Int>) -> ref<NamedVar> :
  ;Bounds check.
  if i.value < 0 or i.value >= length(c).value :
    fatal(VarOutOfBounds(i))
    
  ;Every variable context is a set of NamedVars.
  ;Compute the index of the named var in the context.
  ;e.g. var-index = 2, means that this is the 2nd NamedVar in the given context.
  val index-maps = c.vartable.index-maps
  val indices-start = index-maps.start-indices[c.entry.index-map-index]
  val var-index = c.vartable.indices.indices[indices-start + i.value]

  ;Compute the location of the named var in the big array of named vars.
  val context-vars-start = c.vartable.contexts.var-indices[c.entry.context-index]
  val named-vars = c.vartable.named-vars
  val named-var = addr(named-vars.vars[context-vars-start + var-index])

  ;Return the wrapped handle.
  return new NamedVar{named-var}

;Error message.
defn VarOutOfBounds (i:Int) :
  "Index %_ is out of bounds of the VarContext" % [i]

;Retrieve the name of the NamedVar.
public lostanza defn name (v:ref<NamedVar>) -> ref<String> :
  return String(v.value.name)

;Retrieve the stack offset of the variable.
public lostanza defn stack-offset (v:ref<NamedVar>) -> ref<Int> :
  return new Int{v.value.stack-offset as int}

;============================================================
;====================== Printers ============================
;============================================================

defmethod print (o:OutputStream, t:LocalVarTable) :
  val items = seq({t[_]}, 0 to length(t))
  print(o, "LocalVarTable(%_)" % [indented-field-list(items)])

defmethod print (o:OutputStream, c:VarContext) :
  val var-items = for i in 0 to length(c) seq : c[i]
  val items = [
    "address: %_" % [code-label(c)]
    inline-fields(var-items)]  
  print(o, "VarContext(%_)" % [indented-field-list(items)])

defmethod print (o:OutputStream, v:NamedVar) :
  print(o, "NamedVar(stack-offset = %_, name = %~)" % [stack-offset(v), name(v)])