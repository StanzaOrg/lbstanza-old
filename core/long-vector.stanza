defpackage core/long-vector :
  import core
  import collections

public lostanza deftype LSLongVector :
  var capacity: int
  var length: int
  var items: ptr<long>

public lostanza defn realloc (p:ptr<?>, size*:long) -> ptr<?> :
  val p* = call-c clib/realloc(p, size*)
  if p* == null : core/fatal!("Failed to realloc")
  return p*

public lostanza defn LSLongVector (capacity:int) -> ptr<LSLongVector> :
  val v:ptr<LSLongVector> = call-c clib/malloc(sizeof(LSLongVector))
  v.capacity = capacity
  v.length = 0
  v.items = call-c clib/malloc(capacity * sizeof(long))
  return v

public lostanza defn LSLongVector () -> ptr<LSLongVector> :
  return LSLongVector(8)

public lostanza defn add (v:ptr<LSLongVector>, x:long) -> int :
  ensure-capacity(v, v.length + 1)
  v.items[v.length] = x
  v.length = v.length + 1
  return 0

public lostanza defn free (v:ptr<LSLongVector>) -> int :
  call-c clib/free(v.items)
  call-c clib/free(v)
  return 0

lostanza defn ensure-capacity (v:ptr<LSLongVector>, new-capacity:int) -> int :
  if v.capacity < new-capacity :
    var c:int = v.capacity
    while c < new-capacity : c = c << 1
    v.capacity = c
    v.items = realloc(v.items, c * sizeof(long))
  return 0