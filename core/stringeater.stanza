;See License.txt for details about licensing.

defpackage core/stringeater :
   import core
   import verse

public defclass StringEater <: Gettable<Int,False|Char> & Lengthable & Streamable<Char>
public defmulti info (s:StringEater) -> FileInfo
public defmulti eat (s:StringEater) -> False|Char
public defmulti eat (s:StringEater, n:Int) -> String

public defn StringEater (text:String, file:String) :
   StringEater(text, file, 1, 0)

public defn StringEater (text:String, file:String, starting-line:Int, starting-col:Int) :
   var line:Int = starting-line
   var col:Int = starting-col
   var position:Int = 0
   
   new StringEater :
      defmethod get (this, i:Int) :
         if position + i < length(text) :
            text[position + i]

      defmethod info (this) :
         FileInfo(file, line, col)

      defmethod length (this) :
         length(text) - position

      defmethod to-stream (this) :
         val s = stream({this[_]}, 0 to length(this))
         s as Stream<Char>               

      defmethod eat (this) :
         match(this[0]) :
            (c:Char) :
               position = position + 1
               col = col + 1
               if c == '\n' :
                  line = line + 1
                  col = 0
               c   
            (n:False) :
               false

      defmethod eat (this, n:Int) :
         val s = substring(text, position, position + n)
         do(eat{this}, 0 to n)
         s
   

