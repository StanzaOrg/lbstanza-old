defpackage core/collect-stack-trace :
  import core
  import collections
  import core/long-vector
  import core/stack-trace

;Collect a SingleStackTrace object.
public lostanza defn collect-stack-trace (vms:ptr<core/VMState>,
                                          frames:ptr<StackFrame>,
                                          last-frame:ptr<StackFrame>,
                                          pc:long) -> ptr<PackedStackTrace> :
  ;Collect the addresses of all the stack frames.
  val frame-addresses = stack-trace-frames(vms, frames, last-frame)

  ;Pack them using the StackTraceBuilder.
  val builder = StackTraceBuilder()
    
  ;Include the last pc if desired.
  if pc :
    val entry = stack-trace-entry-from-pc(pc, vms.stack-trace-table)
    if entry != null :
      add-entry(builder, entry)

  ;Add the records from the stack frames on the stack.
  ;Look up stack trace records using the saved RETURN address.
  for (var i:long = frame-addresses.length - 1, i >= 0, i = i - 1) :
    val frame = frame-addresses.items[i] as ptr<StackFrame>
    val entry = stack-trace-entry(frame, vms.stack-trace-table)
    if entry != null :
      add-entry(builder, entry)

  ;Pack stack trace into stable memory.
  val trace = pack(builder)

  ;Free the buffer holding the collected frames.
  free(frame-addresses)

  ;Return the packed trace.
  return trace
  

;Helper: Call stack-trace-frames by pulling out the first frame in the
;current stack.
public lostanza defn current-stack-frames (vms:ptr<core/VMState>) -> ptr<StackFrame> :
  val stack = untag-stack(vms.heap.current-stack)
  return stack.frames

;Scan through the given frames from start to last, and
;accumulate the ptr<StackFrame> into a LSLongVector.
;The VMState is necessary for looking up the stackmap table.
lostanza defn stack-trace-frames (vms:ptr<core/VMState>,
                                  frames:ptr<StackFrame>,
                                  last-frame:ptr<StackFrame>) -> ptr<LSLongVector> :
  ;Discover return addresses
  val buffer = LSLongVector()

  labels :
    begin : goto loop(frames)
    loop (sp:ptr<StackFrame>) :
      ;Store in return buffer
      add(buffer, sp as long)

      ;Continue if we're not at the end of the stack
      if sp < last-frame :
        val map-index = sp.liveness-map
        val stackmap = vms.stackmap-table[map-index]
        goto loop(sp + stackmap.size)

  ;Return the buffer
  return buffer

;Given a pointer to a stack frame return the StackTraceRecord
;associated with that frame.
;- trace-table: The table as defined in VMState.
lostanza defn stack-trace-entry (frame:ptr<StackFrame>,
                                 trace-table:ptr<core/StackTraceTable>) -> ptr<core/StackTraceTableEntry> :
  return stack-trace-entry-from-pc(frame.return, trace-table)

;Given an instruction pointer return the StackTraceRecord
;associated with that frame.
;- trace-table: The table as defined in VMState.
lostanza defn stack-trace-entry-from-pc (pc:long,
                                         trace-table:ptr<core/StackTraceTable>) -> ptr<core/StackTraceTableEntry> :
  for (var i:int = 0, i < trace-table.length, i = i + 1) :
    val entry = addr(trace-table.entries[i])
    if pc == (entry.lbl as long) :
      return entry
  return null  

;Retrieve a pointer to the memory of a Stack.
;Temporarily casts x to a ref<Stack> (even though it is not in the
;same heap.)
lostanza defn untag-stack (x:long) -> ptr<Stack> :
  return addr!([x as ref<Stack>])