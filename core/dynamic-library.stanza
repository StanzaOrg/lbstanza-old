defpackage core/dynamic-library :
  import core
  import collections

;============================================================
;=================== Externs ================================
;============================================================
#if-defined(PLATFORM-WINDOWS):
  extern load_library: (ptr<byte>) -> ptr<?>
  extern free_library: (ptr<?>) -> int
  extern get_proc_address: (ptr<?>, ptr<byte>) -> ptr<?>

#else:
  extern dlopen : (ptr<byte>, int) -> ptr<?>
  extern dlerror : () -> ptr<byte>
  extern dlsym : (ptr<?>, ptr<byte>) -> ptr<?>
  extern dlclose : (ptr<?>) -> int

;============================================================
;================== LoStanza Objects ========================
;============================================================

public lostanza deftype DynamicLibrary :
  name: ref<String>
  handle: ptr<?>

public lostanza deftype DynamicSymbol :
  lib: ref<DynamicLibrary>
  address: ptr<?>

;============================================================
;===================== Accessors ============================
;============================================================

;Retrieve the name of the library.
public lostanza defn name (dl:ref<DynamicLibrary>) -> ref<String> :
  return dl.name

;============================================================
;=================== Opening/Closing ========================
;============================================================

#if-defined(PLATFORM-WINDOWS):
  ;Load a new dynamic library when given the name of the library.
  public lostanza defn dynamic-library-open (name: ref<String>) -> ref<DynamicLibrary>:
    val ret = call-c load_library(addr!(name.chars))
    if ret == null: throw(OpenLibraryError(name, last-dl-error()))
    return new DynamicLibrary{name, ret}

  ;Close an opened dynamic library.
  public lostanza defn dynamic-library-close (dl: ref<DynamicLibrary>) -> ref<False>:
    if call-c free_library(dl.handle) != 0:
      throw(CloseLibraryError(dl.name, last-dl-error()))
    return false

  ;Retrieve the symbol contained within a dynamic library.
  public lostanza defn dynamic-library-symbol (dl:ref<DynamicLibrary>, name:ref<String>) -> ref<DynamicSymbol> :
    val address = call-c get_proc_address(dl.handle, addr!(name.chars))
    if address == null : throw(SymbolLoadError(dl.name, name, last-dl-error()))
    return new DynamicSymbol{dl, address}

#else:
  ;Load a new dynamic library when given the name of the library.
  public lostanza defn dynamic-library-open (name: ref<String>) -> ref<DynamicLibrary>:
    #if-defined(PLATFORM-OS-X) :
      val RTLD_NOW = 0x2
      val dlflags = RTLD_NOW
    #if-defined(PLATFORM-LINUX) :
      val RTLD_NOW = 0x2
      val RTLD_DEEPBIND = 0x8
      val dlflags = RTLD_NOW | RTLD_DEEPBIND
    val address = call-c dlopen(addr!(name.chars), dlflags)
    if address == null: throw(OpenLibraryError(name, last-dl-error()))
    return new DynamicLibrary{name, address}

  ;Close an opened dynamic library.
  public lostanza defn dynamic-library-close (dl:ref<DynamicLibrary>) -> ref<False> :
    if call-c dlclose(dl.handle) != 0:
      throw(CloseLibraryError(dl.name, last-dl-error()))
    return false

  ;Retrieve the symbol contained within a dynamic library.
  public lostanza defn dynamic-library-symbol (dl:ref<DynamicLibrary>, name:ref<String>) -> ref<DynamicSymbol> :
    val address = call-c dlsym(dl.handle, addr!(name.chars))
    if address == null :    
      throw(SymbolLoadError(dl.name, name, last-dl-error()))
    return new DynamicSymbol{dl, address}

;============================================================
;==================== Errors ================================
;============================================================

;Represents all errors related to dynamic libraries.
public deftype DLError <: Exception

;Error occurring when opening a library.
public defstruct OpenLibraryError <: DLError :
  name:String
  message:String

defmethod print (o:OutputStream, e:OpenLibraryError) :
  print(o, "Error loading dynamic library %_. %_." % [name(e), message(e)])

;Error occurring when opening a library.
public defstruct CloseLibraryError <: DLError :
  name:String
  message:String

defmethod print (o:OutputStream, e:CloseLibraryError) :
  print(o, "Error closing dynamic library %_. %_." % [name(e), message(e)])

;Error occurring when loading a symbol within a library.
public defstruct SymbolLoadError <: DLError :
  library-name:String
  symbol-name:String
  message:String

defmethod print (o:OutputStream, e:SymbolLoadError) :
  print(o, "Error loading symbol %_ in dynamic library %_. %_." % [symbol-name(e), library-name(e), message(e)])

;Helper: Retrieve the string indicating the cause of the last
;failure.
lostanza defn last-dl-error () -> ref<String> :
  #if-defined(PLATFORM-WINDOWS) :
    return core/windows-error-msg()
  #else :
    return String(call-c dlerror())  

