defpackage core/debug-table :
  import core
  import collections

;============================================================
;====================== Binary Layout =======================
;============================================================

;The memory layout of the entire debug table.
public lostanza deftype DebugTableLayout :
  num-packages:long
  packages:ptr<PackageDebugInfoLayout> ...

;The memory layout of the definitions within a specific package.
public lostanza deftype PackageDebugInfoLayout :
  num-entries:long
  package:ptr<byte>
  entries:DebugEntryLayout ...

;The memory layout for the entry of one variable.
public lostanza deftype DebugEntryLayout :
  name:ptr<byte>
  offset:long

;============================================================
;=================== HiStanza Wrappers ======================
;============================================================

;Represents the entire debug table.
public lostanza deftype DebugTable :
  value: ptr<DebugTableLayout>

;Represents the definitions with a specific package.
public lostanza deftype PackageDebugInfo :
  value: ptr<PackageDebugInfoLayout>

;Represents the entry of one variable.
public lostanza deftype DebugEntry :
  value: ptr<DebugEntryLayout>

;Create a HiStanza DebugTable from the memory address of its layout.
public lostanza defn DebugTable (v:ptr<DebugTableLayout>) -> ref<DebugTable> :
  return new DebugTable{v}

;Return the number of packages in the table.
public lostanza defn num-packages (t:ref<DebugTable>) -> ref<Int> :
  return new Int{t.value.num-packages as int}

;Return the i'th package definition in the table.
public lostanza defn get (t:ref<DebugTable>, i:ref<Int>) -> ref<PackageDebugInfo> :
  return new PackageDebugInfo{t.value.packages[i.value]}

;Return the number of entries in the package.
public lostanza defn num-entries (t:ref<PackageDebugInfo>) -> ref<Int> :
  return new Int{t.value.num-entries as int}

;Return the name of the package.
public lostanza defn name (t:ref<PackageDebugInfo>) -> ref<Symbol> :
  return to-symbol(String(t.value.package))

;Return the i'th debug entry in the package.
public lostanza defn get (t:ref<PackageDebugInfo>, i:ref<Int>) -> ref<DebugEntry> :
  return new DebugEntry{addr!(t.value.entries[i.value])}

;Return the name of the variable entry.
public lostanza defn name (t:ref<DebugEntry>) -> ref<Symbol> :
  return to-symbol(String(t.value.name))

;Return the offset of the variable entry.
public lostanza defn offset (t:ref<DebugEntry>) -> ref<Int> :
  return new Int{t.value.offset as int}
