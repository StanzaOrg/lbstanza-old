;<doc>=======================================================
;=================== Documentation ==========================
;============================================================

This package implements the function for reading the stack trace
from a user Stanza program loaded using dlopen.

Example: How to read the stack trace of the suspended program.

defpackage core/debug/read-stack-trace :
  import core
  import collections
  import core/debug/system-typesExample: How to read the stack trace of the suspended program.

  val lib:DynamicLibrary = ...
  val vms:VMState = ...
  val trace = read-stack-trace(lib)

;============================================================
;=======================================================<doc>

defpackage core/debug/read-stack-trace :
  import core
  import core/collect-stack-trace
  import core/stack-trace
  import core/debug/system-types

;This function returns the current stack trace of the running program
;in the dynamic library. It assumes that the program is suspended, and its
;register contents are saved in stanza_sighandler_context.
public lostanza defn read-stack-trace (vms:ptr<core/VMState>) -> ref<SingleStackTrace> :
  val ctxt = current-sighandler-context()
  val last-frame = ctxt.rsp as ptr<StackFrame>

  ;Compute the address of the safepoint that we're stopped on.
  ;Note that the RIP is saved AFTER the INT3 instruction.
  val safepoint-pc = ctxt.rip - 1

  ;Return the collected stack trace.
  val packed-trace = collect-current-stack-trace(vms, last-frame, safepoint-pc)
  return StackTrace(packed-trace)
