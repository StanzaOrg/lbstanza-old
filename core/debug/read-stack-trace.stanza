;<doc>=======================================================
;=================== Documentation ==========================
;============================================================

This package implements the function for reading the stack trace
from a user Stanza program loaded using dlopen.

Example: How to read the stack trace of the suspended program.

  val lib:DynamicLibrary = ...
  val trace = read-stack-trace(lib)

;============================================================
;=======================================================<doc>

defpackage core/debug/read-stack-trace :
  import core
  import collections
  import core/debug/system-types
  import core/dynamic-library
  import core/collect-stack-trace
  import core/stack-trace

;This function returns the current stack trace of the running program
;in the dynamic library. It assumes that the program is suspended, and its
;register contents are saved in stanza_sighandler_context.
public lostanza defn read-stack-trace (lib:ref<DynamicLibrary>) -> ref<SingleStackTrace> :
  val vmstate = app-vmstate(lib)
  val ctxt = current-sighandler-context()
  val last-frame = ctxt.rsp as ptr<StackFrame>
  val app-pc = ctxt.rip

  ;Compute the address of the safepoint that we're stopped on.
  ;Note that the RIP is saved AFTER the INT3 instruction.
  val safepoint-pc = app-pc - 1

  ;Return the collected stack trace.
  val packed-trace = collect-stack-trace(vmstate,
                                         current-stack-frames(vmstate),
                                         last-frame,
                                         safepoint-pc)
  return StackTrace(packed-trace)

;Return the ptr<VMState> structure of the user application.
lostanza defn app-vmstate (lib:ref<DynamicLibrary>) -> ptr<core/VMState> :
  val sym = dynamic-library-symbol(lib, String("stanza_vmstate"))
  return sym.address as ptr<core/VMState>