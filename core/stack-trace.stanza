defpackage core/stack-trace :
  import core
  import collections
  import stz/absolute-info

;============================================================
;================ High Level Representation =================
;============================================================

;Representation of a StackTrace
public deftype StackTrace

;Represents a single packed stack trace.
public lostanza deftype SingleStackTrace <: StackTrace & Unique :
  data:ptr<PackedStackTrace>

;Represents a number of traces appended together.
public defstruct AppendedStackTrace <: StackTrace :
  traces:Tuple<SingleStackTrace>

;Represents a single item in the stack trace
public defstruct StackTraceEntry <: Hashable & Equalable :
  instruction-pointer:Long
  stack-pointer:Long
  package:Symbol
  signature:String|False
  info:AbsoluteFileInfo|False
with:
  hashable => true
  equalable => true

;============================================================
;================== Datastructure Printers ==================
;============================================================

defmethod print (o:OutputStream, e:StackTraceEntry) :
  val sig-str = "" when signature(e) is False else "/%_" % [signature(e)]
  val info-str = "" when info(e) is False else " at %_" % [/info(info(e) as AbsoluteFileInfo)]
  print(o, "StackTraceEntry[%_](%_%_%_)" % [instruction-pointer(e), package(e), sig-str, info-str])

;============================================================
;=================== Stylized Printing ======================
;============================================================

;Print the given trace to the given outputstream.
;An optional filtering function can be provided to filter out
;stack entries (e.g. e.g. stack frames from system and core libraries).
public defn print-stack-trace (o:OutputStream,
                               trace:StackTrace,
                               filter:((Symbol, String|False) -> True|False)|False) -> False :
  defn keep? (e:StackTraceEntry) :
    match(filter:(Symbol, String|False) -> True|False) :
      filter(package(e), signature(e))
    else : true
  for e in entries(trace) do :
    print-trace-entry(o, e) when keep?(e)

;Print a single trace entry to the given output stream.
defn print-trace-entry (o:OutputStream, e:StackTraceEntry) :
  val sig-str = "" when signature(e) is False else "/%_" % [signature(e)]
  println(o, "  in %_%_" % [package(e), sig-str])
  match(info(e)) :
    (info:AbsoluteFileInfo) : println(o, "    at %_" % [/info(info)])
    (f:False) : false

;------------------------------------------------------------
;---------------------- API Functions -----------------------
;------------------------------------------------------------
public defmulti length (s:StackTrace) -> Int
lostanza defmethod length (s:ref<SingleStackTrace>) -> ref<Int> :
  return new Int{s.data.num-entries}
defmethod length (s:AppendedStackTrace) -> Int :
  sum(seq(length, traces(s)))

lostanza defn get (trace:ref<SingleStackTrace>, i:ref<Int>) -> ref<StackTraceEntry> :
  return entry(trace.data, i.value)

public defn append-all (xs:Seqable<StackTrace>) -> StackTrace :
  val traces = to-tuple $ for x in xs seq-cat :
    match(x) :
      (x:SingleStackTrace) : [x]
      (x:AppendedStackTrace) : traces(x)
  switch(length(traces)) :
    0 : fatal("No stack traces given.")
    1 : traces[0]
    else : AppendedStackTrace(traces)

public defn entries (trace:StackTrace) -> Seq<StackTraceEntry> :
  defn single-trace-entries (trace:SingleStackTrace) :
    for i in 0 to length(trace) seq: trace[i]
  match(trace) :
    (trace:SingleStackTrace) : single-trace-entries(trace)
    (trace:AppendedStackTrace) : seq-cat(single-trace-entries, traces(trace))

;------------------------------------------------------------
;---------------------- Constructor -------------------------
;------------------------------------------------------------
public lostanza defn StackTrace (data:ptr<PackedStackTrace>) -> ref<SingleStackTrace> :
  data.reference-count = data.reference-count + 1
  val trace = new SingleStackTrace{data}
  val finalizer = new TraceFinalizer{data}
  add-finalizer(finalizer, trace)
  return trace

;------------------------------------------------------------
;---------------------- Finalization ------------------------
;------------------------------------------------------------
lostanza deftype TraceFinalizer <: Finalizer :
  trace:ptr<PackedStackTrace>

lostanza defmethod run (f:ref<TraceFinalizer>) -> ref<False> :
  val trace = f.trace

  trace.reference-count = trace.reference-count - 1
  if trace.reference-count == 0 :
    call-c clib/free(trace)
  return false

;============================================================
;=================== Packed Representation ==================
;============================================================

;Packed representation of a stack trace.
;Layout is:
;  num-entries:int ...
;  num-records:int ...
;  num-chars-words:int ...
;  entries:int ... (x num-entries)
;  records:PackedStackTraceRecord ... (x num-records)
;  strings:long ... (x num-char-words)
public lostanza deftype PackedStackTrace :
  var reference-count:int
  num-entries:int
  num-records:int
  num-char-words:int
  data:byte ...

;Packed representation of a single stack trace record.
lostanza deftype PackedStackTraceRecord :
  address:long
  stack-pointer:long
  package:int
  signature:int
  base:int
  file:int
  line:int
  column:int

;------------------------------------------------------------
;--------------------- Accessors ----------------------------
;------------------------------------------------------------

;Return the number of bytes in the trace.
lostanza defn num-bytes (trace:ptr<PackedStackTrace>) -> int :
  val n = sizeof(PackedStackTrace) +
          trace.num-entries * sizeof(int) +
          trace.num-records * sizeof(PackedStackTraceRecord) +
          trace.num-char-words * sizeof(long)
  return n as int

;Return the address at which the entries start.
lostanza defn entries (trace:ptr<PackedStackTrace>) -> ptr<int> :
  return addr(trace.data) as ptr<int>

;Return the address at which the records start.
lostanza defn records (trace:ptr<PackedStackTrace>) -> ptr<PackedStackTraceRecord> :
  return addr(entries(trace)[trace.num-entries]) as ptr<PackedStackTraceRecord>

;Return the address at which the characters start.
lostanza defn char-words (trace:ptr<PackedStackTrace>) -> ptr<long> :
  return addr(records(trace)[trace.num-records]) as ptr<long>

;------------------------------------------------------------
;------------------------ Unpacking -------------------------
;------------------------------------------------------------

;Return the string at index i. Returns false if i is negative.
lostanza defn unpack-string (trace:ptr<PackedStackTrace>, i:int) -> ref<String|False> :
  if i < 0 : return false
  val chars = addr(char-words(trace)[i]) as ptr<byte>
  return String(chars)

;Unpack the given record at the given index.
lostanza defn record (trace:ptr<PackedStackTrace>, i:int) -> ref<StackTraceEntry> :
  ;Retrieve the i'th record.
  val r = records(trace)[i]
  val package = unpack-string(trace, r.package) as ref<String>
  val signature = unpack-string(trace, r.signature)
  val base = unpack-string(trace, r.base)
  val file = unpack-string(trace, r.file)
  var info:ref<AbsoluteFileInfo|False> = false
  if base != false and file != false :
    info = AbsoluteFileInfo(
             base as ref<String>,
             file as ref<String>,
             new Int{r.line}, new Int{r.column})
  return StackTraceEntry(new Long{r.address}, new Long{r.stack-pointer}, to-symbol(package), signature, info)

;Unpack the given entry at the given index.
protected lostanza defn entry (trace:ptr<PackedStackTrace>, i:int) -> ref<StackTraceEntry> :
  ;Get the index of the record that forms this entry.
  val record-index = entries(trace)[i]
  return record(trace, record-index)

;============================================================
;============= Stack Trace Builder Algorithm ================
;============================================================

;------------------------------------------------------------
;--------------------- Public API ---------------------------
;------------------------------------------------------------

public lostanza deftype StackTraceRecord :
  package:ptr<byte>
  signature:ptr<byte>
  base:ptr<byte>
  file:ptr<byte>
  line:int
  column:int

;Add the given record as an entry in the stack trace.
public lostanza defn add-entry (b:ref<StackTraceBuilder>,
                                e:ptr<core/StackTraceTableEntry>,
                                sp:ptr<?>) -> ref<False> :
  add-entry(b, add-record?(b, e, sp))
  return false

;Add the given entry to the stack trace.
public defn add-entry (b:StackTraceBuilder, e:StackTraceEntry) -> False :
  add-entry(b, add-record?(b, e))
  false

;Pack into a stable array.
public lostanza defn pack (b:ref<StackTraceBuilder>) -> ptr<PackedStackTrace> :
  val buffer = pack-buffer(b)
  val len = length(buffer).value
  val mem:ptr<PackedStackTrace> = call-c clib/malloc(len)
  call-c clib/memcpy(mem, data(buffer), len)
  return mem

;------------------------------------------------------------
;-------------------- Implementation ------------------------
;------------------------------------------------------------

;Add the given StackTraceRecord to the StackTraceBuilder and return the index at which
;it is written. If this address has been added before then return the previous index.
lostanza defn add-record? (b:ref<StackTraceBuilder>, e:ptr<core/StackTraceTableEntry>, sp:ptr<?>) -> ref<Int> :
  val index = record-index?(b, new Long{e.lbl as long})
  if index == false :
    return add-record(b,
                      new Long{e.lbl as long},
                      new Long{sp as long}
                      add-string?(b, e.record.package),
                      add-string?(b, e.record.signature),
                      add-string?(b, e.record.base),
                      add-string?(b, e.record.file),
                      new Int{e.record.line}
                      new Int{e.record.column})
  else :
    return index as ref<Int>

;Add the given string to the StackTraceBuilder and return the index at which
;it is written. If that address has been added before then return the previous index.
;Returns -1 if the given address is null.
lostanza defn add-string? (b:ref<StackTraceBuilder>, s:ptr<byte>) -> ref<Int> :
  if s == null : return new Int{-1}
  val index = string-index?(b, new Long{s as long})
  if index == false : return add-string(b, new Long{s as long}, String(s))
  else : return index as ref<Int>

;Add the given StackTraceRecord to the StackTraceBuilder and return the index at which
;it is written. If this address has been added before then return the previous index.
defn add-record? (b:StackTraceBuilder, e:StackTraceEntry) -> Int :
  match(record-index?(b, instruction-pointer(e))) :
    (f:False) :
      val [base, info-file, info-line, info-column] = match(info(e)) :
        (info:AbsoluteFileInfo) : [base(info), filename(info), line(info), column(info)]
        (f:False) : [false, false, 0, 0]
      add-record(b,
                 instruction-pointer(e),
                 stack-pointer(e)
                 add-string?(b, to-string(package(e))),
                 add-string?(b, signature(e)),
                 add-string?(b, base)
                 add-string?(b, info-file)
                 info-line,
                 info-column)
    (index:Int) :
      index

;Add the given string to the StackTraceBuilder and return the index at which
;it is written. If that hash has been added before then return the previous index.
;Returns -1 if the given address is null.
defn add-string? (b:StackTraceBuilder, s:String|False) -> Int :
  match(s:String) :
    match(string-index?(b, s)) :
      (index:Int) : index
      (f:False) : add-string(b, s, s)
  else :
    -1

;============================================================
;============= Stack Trace Builder Utility ==================
;============================================================

;Builder utility for constructing packed stack traces.
public deftype StackTraceBuilder

;------------------------------------------------------------
;--------------------- Internal API -------------------------
;------------------------------------------------------------
defmulti add-entry (b:StackTraceBuilder, entry:Int) -> False
defmulti record-index? (b:StackTraceBuilder, address:Long) -> Int|False
defmulti add-record (b:StackTraceBuilder, address:Long, stack-pointer:Long,
                     package:Int, signature:Int, base:Int, file:Int, line:Int, column:Int) -> Int
defmulti string-index? (b:StackTraceBuilder, str:Long|String) -> Int|False
defmulti add-string (b:StackTraceBuilder, key:Long|String, str:String) -> Int
defmulti pack-buffer (b:StackTraceBuilder) -> ByteBuffer

;------------------------------------------------------------
;--------------------- Implementation -----------------------
;------------------------------------------------------------

public defn StackTraceBuilder () -> StackTraceBuilder :
  val entries = Vector<Int>()
  val record-buffer = ByteBuffer()
  val string-buffer = ByteBuffer()
  val record-table = HashTable<Long,Int>()
  val string-table = HashTable<Long|String,Int>()
  new StackTraceBuilder :
    defmethod add-entry (this, entry:Int) :
      add(entries, entry)
    defmethod record-index? (this, address:Long) :
      get?(record-table, address)
    defmethod add-record (this, address:Long, stack-pointer:Long,
                          package:Int, signature:Int, base:Int, file:Int, line:Int, column:Int) :
      val index = length(record-table)
      record-table[address] = index
      put(record-buffer, address)
      put(record-buffer, stack-pointer)
      put(record-buffer, package)
      put(record-buffer, signature)
      put(record-buffer, base)
      put(record-buffer, file)
      put(record-buffer, line)
      put(record-buffer, column)
      index
    defmethod string-index? (this, key:Long|String) :
      get?(string-table, key)
    defmethod add-string (this, key:Long|String, str:String) :
      ;Get the index
      val index = length(string-buffer) >> 3
      string-table[key] = index
      ;Put the characters and 0 ending.
      print(string-buffer, str)
      put(string-buffer, 0Y)
      ;Pad up to 8-bytes
      val remaining = (8 - (length(string-buffer) & 7)) & 7
      for i in 0 to remaining do : put(string-buffer, 0Y)
      ;Return the index
      index
    defmethod pack-buffer (this) :
      val buffer = ByteBuffer()
      put(buffer, 0)
      put(buffer, length(entries))
      put(buffer, length(record-table))
      put(buffer, length(string-buffer) >> 3)
      do(put{buffer, _}, entries)
      do(put{buffer, _}, record-buffer)
      do(put{buffer, _}, string-buffer)
      buffer