defpackage core/threaded-reader :
  import core
  import collections

;============================================================
;===================== Docs =================================
;============================================================
;
;Notes about cleanup:
;
;Cleanup is slightly tricky because there are two different cases.
;
;When the ThreadedReader is collected, we would like the thread to
;continue running (if it is), which means that the pointer cannot be
;deleted at that moment. 
;
;If the thread is not running when the ThreadedReader is collected,
;then the pointer can be safely deleted.

;============================================================
;=============== Extern Declarations ========================
;============================================================

lostanza deftype CThreadedReader
extern make_threaded_reader: ptr<?> -> ptr<CThreadedReader>
extern stop_threaded_reader: ptr<CThreadedReader> -> int
extern threaded_reader_running: ptr<CThreadedReader> -> int
extern threaded_reader_buffer: ptr<CThreadedReader> -> ptr<byte>
extern threaded_reader_buffer_length: ptr<CThreadedReader> -> long
extern delete_threaded_reader: ptr<CThreadedReader> -> int

;============================================================
;================== Wrappers ================================
;============================================================

public lostanza deftype ThreadedReader <: Unique :
  value:ptr<CThreadedReader>

public lostanza defn ThreadedReader (stream:ref<FileInputStream>) -> ref<ThreadedReader> :
  val reader = call-c make_threaded_reader(stream.file)
  if reader == null: throw(Exception(core/linux-error-msg()))
  val threadedreader = new ThreadedReader{reader}
  add-finalizer(new ThreadedReaderFinalizer{reader}, threadedreader)
  return threadedreader

public lostanza defn stop (reader:ref<ThreadedReader>) -> ref<False> :
  call-c stop_threaded_reader(reader.value)
  return false

public lostanza defn running? (reader:ref<ThreadedReader>) -> ref<True|False> :
  val ret = call-c threaded_reader_running(reader.value)
  if ret : return true
  else : return false

public lostanza defn contents-as-string (reader:ref<ThreadedReader>) -> ref<String> :
  ;Sanity check.
  if running?(reader) == true :
    fatal("Cannot retrieve contents of reader when still running.")

  ;Copy the buffer contents into the Stanza heap.
  val len = call-c threaded_reader_buffer_length(reader.value)
  val chars = call-c threaded_reader_buffer(reader.value)
  return String(len, chars)

;============================================================
;====================== Cleanup =============================
;============================================================

lostanza deftype ThreadedReaderFinalizer <: Finalizer :
  reader:ptr<CThreadedReader>

lostanza defmethod run (f:ref<ThreadedReaderFinalizer>) -> ref<False> :
  call-c delete_threaded_reader(f.reader)
  return false