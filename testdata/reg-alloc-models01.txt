;Accurate model of X86 integer subtraction.
analyze subtraction :
  model (V0:Rx) = op0(V1:Rx, V2:Rx) :
    release V1
    assign V0
    release V2
    
  ;Case: No argument is killed.
  ;Should use 1 register.
  UsageContext(args = [0, 1], killed = [])

  ;Case: First argument is killed.
  ;Should use 0 registers.
  UsageContext(args = [0, 1], killed = [0])

  ;Case: Second argument is killed.
  ;Should use 1 register.
  UsageContext(args = [0, 1], killed = [1])

;Accurate model of x86 integer addition.
analyze addition :
  model (V0:Rx) = op0(V1:Rx, V2:Rx) :
    release V1
    release V2
    assign V0

  ;Case: No argument is killed.
  ;Requires 1 more register.
  UsageContext(args = [0, 1], killed = [])

  ;Case: First argument killed.
  ;Requires 0 registers.
  UsageContext(args = [0, 1], killed = [0])

  ;Case: Second argument killed.
  ;Requires 0 registers.
  UsageContext(args = [0, 1], killed = [1])

  ;Case: Both arguments killed.
  ;Requires 0 registers.
  UsageContext(args = [0, 1], killed = [0, 1])

;Model with clear-registers in the middle.
;The UsedRegisters should not include anything that occurs
;after clear-registers. Even though 7 registers is needed
;to store the result, the operation only requires 4 additional
;registers (to be used as temp) to be successful.
analyze test01 :
  model (V0:Rx, V1:Rx, V2:Rx, V3:Rx, V4:Rx, V5:Rx, V6:Rx) = op0(V7:Rx, V8:Rx)
                                                            (temp V9:Rx V10:Rx V11:Rx V12:Rx) :
    assign V9
    assign V10
    assign V11
    assign V12
    clear-registers
    assign V0
    assign V1
    assign V2
    assign V3
    assign V4
    assign V5
    assign V6

  ;Should only require 4 registers
  UsageContext(args = [0, 1], killed = [])

;Different types of registers.
analyze test02 :
  model (V0:Rx) = op0(V1:Rx, V2:Fx) :
    release V1
    release V2
    assign V0

  ;Nothing is killed, so needs one more register.
  UsageContext(args = [0, 1], killed = [])

  ;Integer register released, so no additional registers needed.
  UsageContext(args = [0, 1], killed = [0])

  ;Floating register released, so still needs one more register.
  UsageContext(args = [0, 1], killed = [1])

;Different types of registers.
analyze test03 :
  model (V0:Rx, V1:Fx, V2:Fx) = op0(V3:Rx, V4:Fx) :
    release V3
    release V4
    assign V0
    assign V1
    assign V2

  ;Nothing is killed, so needs one more register.
  UsageContext(args = [0, 1], killed = [])

  ;Integer register released.
  UsageContext(args = [0, 1], killed = [0])

  ;Floating register released.
  UsageContext(args = [0, 1], killed = [1])

  ;Both integer and floating register released.
  UsageContext(args = [0, 1], killed = [0,1])

;Different specificities of registers.
;Result registers are more specific than argument registers.
analyze test04 :
  model (V0:R3, V1:R4) = op0(V2:Rx, V3:Rx) :
    release V2
    release V3
    assign V0
    assign V1

  UsageContext(args = [0,1], killed = [])
  UsageContext(args = [0,1], killed = [0])
  UsageContext(args = [0,1], killed = [1])
  UsageContext(args = [0,1], killed = [0,1])

analyze test05 :
  model (V0:R1 (prefer-same V1)) = op10(V1:Rx, V2:R2) :
    release V1
    release V2
    assign V0

  UsageContext(args = [0,1], killed = [])
