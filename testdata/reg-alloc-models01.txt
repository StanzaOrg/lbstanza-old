;Accurate model of X86 integer subtraction.
analyze subtraction :
  model (V0) = op0(V1:Rx, V2:Rx) :
    release V1
    assign Rx to V0
    
  ;Case: No argument is killed.
  ;Should use 1 register.
  UsageContext(args = [0, 1], killed = [])

  ;Case: First argument is killed.
  ;Should use 0 registers.
  UsageContext(args = [0, 1], killed = [0])

  ;Case: Second argument is killed.
  ;Should use 1 register.
  UsageContext(args = [0, 1], killed = [1])

;Accurate model of x86 integer addition.
analyze addition :
  model (V0) = op0(V1:Rx, V2:Rx) :
    release V1
    release V2
    assign Rx to V0

  ;Case: No argument is killed.
  ;Requires 1 more register.
  UsageContext(args = [0, 1], killed = [])

  ;Case: First argument killed.
  ;Requires 0 registers.
  UsageContext(args = [0, 1], killed = [0])

  ;Case: Second argument killed.
  ;Requires 0 registers.
  UsageContext(args = [0, 1], killed = [1])

  ;Case: Both arguments killed.
  ;Requires 0 registers.
  UsageContext(args = [0, 1], killed = [0, 1])

;Model with clear-registers in the middle.
;The UsedRegisters should not include anything that occurs
;after clear-registers. Even though 7 registers is needed
;to store the result, the operation only requires 4 additional
;registers (to be used as temp) to be successful.
analyze test01 :
  model (V0, V1, V2, V3, V4, V5, V6) = op0(V7:Rx, V8:Rx)
                                       (temp V9 V10 V11 V12) :
    assign Rx to V9
    assign Rx to V10
    assign Rx to V11
    assign Rx to V12
    clear-registers
    assign Rx to V0
    assign Rx to V1
    assign Rx to V2
    assign Rx to V3
    assign Rx to V4
    assign Rx to V5
    assign Rx to V6

  ;Should only require 4 registers
  UsageContext(args = [0, 1], killed = [])

;Different types of registers.
analyze test02 :
  model (V0) = op0(V1:Rx, V2:Fx) :
    release V1
    release V2
    assign Rx to V0

  ;Nothing is killed, so needs one more register.
  UsageContext(args = [0, 1], killed = [])

  ;Integer register released, so no additional registers needed.
  UsageContext(args = [0, 1], killed = [0])

  ;Floating register released, so still needs one more register.
  UsageContext(args = [0, 1], killed = [1])

;Different specificities of registers.

;Greedy assignment of available register.
