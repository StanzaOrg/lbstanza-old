defpackage gen-numbers :
  import core
  import collections

;Externally defined function for generating integers.
extern generate_integers: (ptr<(int -> int)>, int, int) -> int

;Externally defined function for generatin floats.
extern generate_floats: (ptr<(double -> int)>, double, double, int) -> int

;Global variable for holding a HiStanza function to be called by 'int-callback'.
var CALLBACK:? -> ?

;Call the closure stored in 'CALLBACK'.
extern defn int-callback (x:int) -> int :
  val closure = CALLBACK as ref<(Int -> ?)>
  [closure](new Int{x})
  return 0

;Call the closure stored in 'CALLBACK'.
extern defn float-callback (x:double) -> int :
  val closure = CALLBACK as ref<(Double -> ?)>
  [closure](new Double{x})
  return 0

;HiStanza wrapper for generate-integers.
lostanza defn generate-integers (return:ref<(Int -> ?)>, low:ref<Int>, high:ref<Int>) -> ref<False> :
  CALLBACK = return
  call-c generate_integers(addr(int-callback), low.value, high.value)
  return false

;HiStanza wrapper for generate-floats.
lostanza defn generate-floats (return:ref<(Double -> ?)>, low:ref<Double>, high:ref<Double>, n:ref<Int>) -> ref<False> :
  CALLBACK = return
  call-c generate_floats(addr(float-callback), low.value, high.value, n.value)
  return false

;Main testing function.
defn main () :
  ;Test 1: Add all the integers between 0 and 30 together.
  var total:Int = 0
  within x = generate-integers(0, 30) :
    total = total + x
  println("Test 1:")
  println("The result of adding all the integers between 0 and 30 together is %_.\n" % [total])

  ;Test 2: Collect all the integers between 0 and 30 in a vector.
  val int-vec = Vector<Int>()
  within x = generate-integers(0, 8) :
    add(int-vec, x)
  println("Test 2:")
  println("Collecting all the integers between 0 and 8 in a vector: %_\n" % [int-vec])

  ;Test 3: Add all the 10 floats between 0.0 and 8.0 together.
  var totald:Double = 0.0
  within x = generate-floats(0.0, 8.0, 10) :
    totald = totald + x
  println("Test 3:")
  println("The result of adding all the 10 floats between 0.0 and 8.0 together: %_.\n" % [totald])

  ;Test 4: Collecting the 10 floats between 0.0 and 8.0 into a vector.
  val d-vec = Vector<Double>()
  within x = generate-floats(0.0, 8.0, 10) :
    add(d-vec, x)
  println("Test 4:")
  println("Collecting the 10 floats between 0.0 and 8.0 into a vector: %_\n" % [d-vec])

;Test everything out.
main()