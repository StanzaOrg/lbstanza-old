#use-added-syntax(tests)
defpackage simple-mock :
  import core
  import collections
  import stz/mocker

;============================================================
;==================== Main Algorithm ========================
;============================================================

;Object representing the installation directory of a project.
public deftype InstallDir

;Retrieve all of the filenames of the given file.
;It is assumed that the given file is the path to a directory.
public defmulti files (dir:InstallDir, file:String) -> Tuple<String>

;Test whether the given path is a directory or not.
public defmulti directory? (dir:InstallDir, file:String) -> True|False

;Simple depth-first listing of a directory when provided a `InstallDir`
;object. 
defn recursive-list-files (dir:InstallDir) -> Tuple<String> :
  val all-files = Vector<String>()
  let loop (path:String = ".") :
    for filename in files(dir, path) do :
      val full-path = string-join $ [path "/" filename]
      if directory?(dir, full-path) :
        loop(full-path)
      else :
        add(all-files, full-path)
  to-tuple(all-files)

;============================================================
;========= Mock Installation Directory For Testing ==========
;============================================================

;Mock a InstallDir object representing the following directory
;structure:
;
;  - myfile.txt
;  - myprog
;  - mydir/
;    - a.txt
;    - b.png
;

;+[mocking mock InstallDir implementation]
defn MockInstallDir () :
  val script =
    within caller = MockScript() :
      expect(caller, [`files, "."])
      reply(caller, ["myfile.txt", "myprog", "mydir"])

      expect(caller, [`directory?, "./myfile.txt"])
      reply(caller, false)

      expect(caller, [`directory?, "./myprog"])
      reply(caller, false)

      expect(caller, [`directory?, "./mydir"])
      reply(caller, true)

      expect(caller, [`files, "./mydir"])
      reply(caller, ["a.txt", "b.png"])

      expect(caller, [`directory?, "./mydir/a.txt"])
      reply(caller, false)

      expect(caller, [`directory?, "./mydir/b.png"])
      reply(caller, false)

  new InstallDir :
    defmethod files (this, file:String) :
      call(script, [`files, file])
    defmethod directory? (this, file:String) :
      call(script, [`directory?, file])

;============================================================
;======================== Tests =============================
;============================================================

;Verify that our algorithm returns the correct
;depth-first listing of the mock installation directory.
;+[mocking recursive-list-files test]
deftest test-recursive-list-files :
  val files = recursive-list-files(MockInstallDir())
  #ASSERT(files == ["./myfile.txt" "./myprog" "./mydir/a.txt" "./mydir/b.png"])