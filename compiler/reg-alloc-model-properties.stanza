defpackage stz/reg-alloc-model-properties :
  import core
  import collections
  import stz/reg-alloc-ir
  import stz/printing-utils

;- returns?: Returns true if execution is guaranteed
;  not to continue past this operation. Occurs when
;  the model contains a Return statement.
;- clears-registers?: Returns true if this operation clears all the
;  registers, and thus requires all live variables to be saved. Occurs
;  when the model contains a ClearRegisters statement.
;- arg-types/result-types: The types of registers where arguments and
;  results are expected to be.
;- forced-release?: The arguments that are forced to be released
;  for the operation to execute correctly.
;- any-forced-release?: True if any of forced-release? is true.
public defstruct ModelProperties :
  id:Int
  returns?:True|False
  clears-registers?:True|False
  arg-types:Tuple<RegisterType>
  result-types:Tuple<RegisterType>
  forced-release?:Tuple<True|False>
  any-forced-release?:True|False

;Represents the context in which an operation is used.
;This is necessary to compute the UsedRegisters.
;- killed: Indicates which arguments are not live
;  after the instruction.
public defstruct UsageContext <: Hashable&Equalable :
  killed:Tuple<Int>
with:
  hashable => true
  equalable => true
  printer => true

defmethod print (o:OutputStream, m:ModelProperties) :
  val items = [
    simple-field("returns?", returns?(m))
    simple-field("clears-registers?", clears-registers?(m))
    simple-field("arg-types", arg-types(m))
    simple-field("result-types", result-types(m))
    simple-field("forced-release?", forced-release?(m))
    simple-field("any-forced-release?", any-forced-release?(m))]
  print(o, "model-properties %_%_" % [
    id(m), colon-field-list(items)])