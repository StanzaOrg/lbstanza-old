defpackage stz/preparsed-template :
  import core
  import collections
  import parser/syntax-package-registry

;============================================================
;======================== API ===============================
;============================================================

;Represents a code template that has been eagerly expanded.
public deftype PreparsedTemplate

;Fill a template with the given substitutions.
public defmulti fill (t:PreparsedTemplate, entries:Tuple<KeyValue<Symbol,?>>) -> ?

;============================================================
;===================== Core Templates =======================
;============================================================

;Create a template for the Stanza core syntax package.
public defn CoreTemplate (production:Symbol, template:List) -> PreparsedTemplate :
  PreparsedTemplate(`core, List(), production, template)

;Create a template for a Stanza core expression.
public defn CoreExp (template:List) -> PreparsedTemplate :
  CoreTemplate(`exp, template)

;Create a template for a Stanza core expression.
public defn CoreLSStmt (template:List) -> PreparsedTemplate :
  CoreTemplate(`ls-stmt, template)

;============================================================
;================ Auto-Binder Identification ================
;============================================================

;Convenient utility for creating a template.
;Binders are assumed to start with ~. 

public defn PreparsedTemplate (base:Symbol,
                               overlays:List<Symbol>,
                               production:Symbol,
                               template:List) -> PreparsedTemplate :

  ;Accumulate any discovered binders here.
  val binders = HashSet<Symbol>()

  ;Helper: Replace discovered binders with their proper name.
  defn identify-binders (form) -> ? :
    match(form) :
      (form:Token) :
        Token(identify-binders(item(form)), info(form))
      (form:List) :
        map(identify-binders, form)
      (form:Symbol) :
        if prefix?(form, "~") :
          val b = to-symbol(name(form)[1 to false])
          add(binders, b)
          b
        else :
          form
      (form) :
        form

  ;Identify binders in the template.
  val template* = identify-binders(template)

  ;Create the template.
  PreparsedTemplate(`core, List(), production, template*, binders)

;============================================================
;=================== Main Implementation ====================
;============================================================

;Create the PreparsedTemplate utility.
;- base: The name of the syntax package.
;- overlays: The overlays to add to the base syntax package.
;- production: The name of the production to use to parse this template.
;- template: The template itself.
;- binders: The binders within the template.

public defn PreparsedTemplate (base:Symbol,
                               overlays:List<Symbol>,
                               production:Symbol,
                               template:List,
                               binders:Seqable<Symbol>) ->
                               PreparsedTemplate :

  ;Create tables for mapping symbols.
  val binder-to-gensym = HashTable<Symbol,Symbol>()
  val gensym-to-binder = HashTable<Symbol,Symbol>()
  for b in binders do :
    val b* = gensym(b)
    binder-to-gensym[b] = b*
    gensym-to-binder[b*] = b

  ;Helper: Fill the symbols in a given form with their
  ;replacements.
  defn fill-form (form, table:Table<Symbol,?>) -> ? :
    match(form) :
      (form:Token) : Token(fill-form(item(form), table), info(form))
      (form:List) : map(fill-form{_, table}, form)
      (form:Symbol) : get?(table, form, form)
      (form) : form      

  ;Replace binders with their gensym equivalents.
  val translated-template = fill-form(template, binder-to-gensym)

  ;Store the parsed template after it is computed.
  var parsed-template:Maybe = None()
  
  ;Ensure that the template has been parsed, and cache the result
  ;if it has.
  defn get-parsed-template () -> ? :
    if empty?(parsed-template) :
      parsed-template = One $ syntax-parse(
                          base, overlays, translated-template,
                          production, false)
    value!(parsed-template)

  ;Create new template.
  new PreparsedTemplate :

    defmethod fill (this,
                    entries:Tuple<KeyValue<Symbol,?>>) :
      ;Ensure that the entries are correct.
      #if-not-defined(OPTIMIZE) :
        for entry in entries do :
          if not key?(binder-to-gensym, key(entry)) :
            fatal("'%~' is not one of the binders of the \
                   preparsed template: %_." % [key(entry), template])

      ;Create substitutions
      val substitutions = to-hashtable<Symbol,?> $
        for entry in entries seq :
          binder-to-gensym[key(entry)] => value(entry)

      ;Ensure that all binders are provided.
      #if-not-defined(OPTIMIZE) :
        for entry in binder-to-gensym do :
          if not key?(substitutions, value(entry)) :
            fatal("Binder '%~' was not provided to template." % [key(entry)])

      ;Fill parsed template with substitutions
      fill-form(get-parsed-template(), substitutions)