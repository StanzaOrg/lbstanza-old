defpackage stz/langs :
   import core

public defn expande (e) :
   with-syntax(core) :
      match-syntax(e) :
         (?e:#exp) :
            e

;============================================================
;================ defast Lang ===============================
;============================================================

defpackage stz/ast-lang :
   import core
   import collections
   import macro-utils

;======== AST TABLE ========
public val AST-TABLE = HashTable<Symbol, ASTStructure>()
public defstruct ASTStructure :
   nodes: List<KeyValue<Symbol, List<Symbol>>>

;======== PARSING STRUCTURES ========
defstruct DefAst :
   defs: List<Def>
deftype Def
defstruct DefType <: Def :
   name: Symbol
   parent
   fields: List<Field>
defstruct DefNodes <: Def :
   type: Symbol
   nodes: List<Node>
defstruct Node :
   name: Symbol
   fields: List<Field>
defstruct Field :
   name: Symbol
   type
   options: List
defstruct DefMapper <: Def :
   f: Symbol
   type
   clauses: List<Clause>
defstruct DefDoer <: Def :
   f: Symbol
   type
   clauses: List<Clause>
defstruct Ignore <: Def :
   types: List
defstruct MakeMapper <: Def :
   f: Symbol
   ftype
   x: Symbol
   xtype: Symbol
defstruct MakeDoer <: Def :
   f: Symbol
   ftype
   x: Symbol
   xtype: Symbol
   
defstruct Clause :
   x:Symbol
   type
   body

;======== PARSING ========
defsyntax stz/ast-lang :
   defn sym? (x) :
      match(unwrap-token(x)) :
         (x:Symbol) : x != `...
         (x) : false

   defrule :
      sym = (?x) when sym?(x) : unwrap-token(x)
      prefix-op = (defast : (?defs:#def ... ?rest ...)) :
         if not empty?(rest) :
            fatal("Invalid syntax: The following forms are not defs: %*" % [join(rest, " ")])
         stz/langs/expande(compile(DefAst(defs)))

      def = (deftype ?name:#sym ?parent:#parent : (?fields:#field ...)) :
         DefType(name, parent, fields)
      def = (deftype ?name:#sym ?parent:#parent) :
         DefType(name, parent, List())
      parent = (<: ?t:#type) : t
      parent = () : false

      def = (defnodes ?name:#sym : (?nodes:#node ...)) :
         DefNodes(name, nodes)
      node = (?name:#sym : (?fields:#field ...)) :
         Node(name, fields)
      node = (?name:#sym) :
         Node(name, List())
      field = (?name:#sym : ?t:#type with : (?options ...)) :
         Field(name, t, options)
      field = (?name:#sym : ?t:#type) :
         Field(name, t, List())

      clause = ((?x:#sym : ?xt:#type) : ?body:#exp) :
         Clause(x, xt, body)

      def = (defmapper (?f:#sym : ?ft:#type) :
                ?cs:#clause ...) :
         DefMapper(f, ft, cs)
      def = (defdoer (?f:#sym : ?ft:#type) :
                ?cs:#clause ...) :
         DefDoer(f, ft, cs)
      def = (ignore : (?ts:#type ...)) :
         Ignore(ts)
      def = (make-mapper(?f:#sym : ?ft:#type, ?x:#sym : ?xt:#sym)) :
         MakeMapper(f, ft, x, xt)
      def = (make-doer(?f:#sym : ?ft:#type, ?x:#sym : ?xt:#sym)) :
         MakeDoer(f, ft, x, xt)

;======== COMPILATION ========
defn fill-each<?T> (f: T -> Many<KeyValue<Symbol,?>>, xs:Seqable<?T>) :
   nested(to-list(seq(f, xs)))

defn compile (d:DefAst) :
   ;Type Tables
   val type-table = to-list $
      for e in filter({_ typeof DefType}, defs(d)) seq :
         val e* = e as DefType
         name(e*) => e*
   defn typefields (n:Symbol) :
      fields(lookup(type-table, n))

   ;Save AST Structure
   for def in filter({_ typeof DefNodes}, defs(d)) as Seqable<DefNodes> do :
      val tfs = typefields(type(def))
      val nodes = for n in nodes(def) map :
         val fs = append(fields(n), tfs)
         name(n) => map(name, fs)
      AST-TABLE[type(def)] = ASTStructure(nodes)   

   ;Node Table
   val node-table = to-list $
      for e in filter({_ typeof DefNodes}, defs(d)) seq :
         val e* = e as DefNodes
         type(e*) => nodes(e*)
   defn nodes-of (n:Symbol) :
      lookup(node-table, n)

   ;Mapper Table
   val mapper-table = Vector<KeyValue<[?, ?], Symbol>>()
   val doer-table = Vector<KeyValue<[?, ?], Symbol>>()
   val all-mappers = Vector<?>()
   val all-doers = Vector<?>()

   defn fn-name (type:Symbol, ftype, xtype) :
      val ftype* = unwrap-all(ftype)
      val xtype* = unwrap-all(xtype)
      val [table, all-table] = switch {type == _} :
         `mapper : [mapper-table, all-mappers]
         `doer : [doer-table, all-doers]
      val e = for e in table find :
         key(e) == [ftype*, xtype*]
      match(e) :
         (e:KeyValue<[?, ?], False|Symbol>) :
            value(e)
         (e:False) :
            if contains?(all-table, xtype*) : false
            else : fatal("No %_ for function %_ for type %_." % [type, ftype, xtype])      
   defn mapper-name (ftype, xtype) :
      fn-name(`mapper, ftype, xtype)
   defn doer-name (ftype, xtype) :
      fn-name(`doer, ftype, xtype)
         
   for d in defs(d) do :      
      match(d) :
         (d:DefMapper|DefDoer) :
            val ftype = unwrap-all(type(d))
            val [table, all-table] = match(d) :
               (d:DefMapper) : [mapper-table, all-mappers]
               (d:DefDoer) : [doer-table, all-doers]
            for c in clauses(d) do :
               val xtype = unwrap-all(type(c))
               add(table, [ftype, xtype] => gensym())
               add(all-table, xtype)
         (d:Ignore) :
            do(add{all-mappers, unwrap-all(_)}, types(d))
            do(add{all-doers, unwrap-all(_)}, types(d))
         (d) : false

   ;Compile DefType
   defn compile (d:DefType) :
      val template = `(deftype name parent?{<: parent}{})
      fill-template(template, [
         `name => name(d)
         `parent? => choice(parent(d) not-typeof False)
         `parent => parent(d)])

   ;Compile DefNodes
   defn compile (d:DefNodes) :
      val tfs = typefields(type(d))
      defn comp (n:Node) :
         val template = `(defstruct name <: type : (fs tfs))
         fill-template(template, [
            `name => name(n),
            `type => type(d),
            `fs => splice(to-list(seq-cat(comp, fields(n)))),
            `tfs => splice(to-list(seq-cat(comp, tfs)))])
      defn comp (f:Field) :
         qquote(~ (name(f)) : ~ (type(f)) with : ~ (options(f)))
      seq-append(comp, nodes(d))

   ;Compile DefMapper
   defn compile (dm:DefMapper|DefDoer) :
      val forms = Vector<?>()
      for c in clauses(dm) do :
         val template = `(defn #name (f:ftype, x:xtype) : body)
         val #name = match(dm) :
            (dm:DefMapper) : mapper-name(type(dm), type(c))
            (dm:DefDoer) : doer-name(type(dm), type(c))
         val filled = fill-template(template, [
            `#name => #name
            `f => f(dm)
            `ftype => type(dm)
            `x => x(c)
            `xtype => type(c)
            `body => body(c)])
         add(forms, filled)
      to-list(forms)

   ;Compile Ignore
   defn compile (ig:Ignore) :
      `()

   ;Compile MakeMapper
   defn compile (m:MakeMapper) :
      ;Compiling a field
      defn compile (x:Symbol, f:Symbol, fd:Field) :
         val template = `(ignore?{name(x)}{#f(f, name(x))})
         val #f = mapper-name(ftype(m), type(fd))
         fill-template(template, [
            `name => name(fd)
            `x => x
            `f => f
            `#f => #f
            `ignore? => choice(#f typeof False)])
            
      ;Compiling main map function
      val template = `(
         defn map<?T> (f:ft, x:?T&xt) -> T :
            {_ as T&xt} $ match(x) :
               nodes{(x:Node) : Node(fs)})
      fill-template(template, [
         `T => gensym()
         `f => f(m)
         `ft => ftype(m)
         `x => x(m)
         `xt => xtype(m)
         `nodes => for n in nodes-of(xtype(m)) fill-each :
            val fs = append(fields(n), typefields(xtype(m)))
            [`Node => name(n)
             `fs => splice $ map(compile{x(m), f(m), _}, fs)]])

   ;Compile MakeDoer
   defn compile (m:MakeDoer) :
      ;Compiling a field
      defn compile (x:Symbol, f:Symbol, fd:Field) :
         val template = `(ignore?{}{#f(f, name(x))})
         val #f = doer-name(ftype(m), type(fd))
         fill-template(template, [
            `name => name(fd)
            `x => x
            `f => f
            `#f => #f
            `ignore? => choice(#f typeof False)])
            
      ;Compiling main map function
      val template = `(
         defn do (f:ft, x:xt) -> False :
            match(x) :
               nodes{(x:Node) :
                  fs
                  false})
      fill-template(template, [
         `f => f(m)
         `ft => ftype(m)
         `x => x(m)
         `xt => xtype(m)
         `nodes => for n in nodes-of(xtype(m)) fill-each :
            val fs = append(fields(n), typefields(xtype(m)))
            [`Node => name(n)
             `fs => splice $ seq-append(compile{x(m), f(m), _}, fs)]])

   ;Driver
   List $ for d in defs(d) map :
      compile(d as DefType|DefNodes|DefMapper|MakeMapper|DefDoer|MakeDoer|Ignore)

;============================================================
;================= defreader Lang ===========================
;============================================================
defpackage stz/reader-lang :
   import core
   import collections
   import macro-utils

defstruct DefReader :
   name: Symbol
   exp: Symbol
   type
   forms: List<Form>

deftype Form
defstruct TagForm <: Form :
   tag: Symbol
   fields: List<Field>
   body
defstruct SForm <: Form :
   body
defstruct VForm <: Form :
   body
defstruct Field :
   name: Symbol
   prod: Symbol
   type: Int

val STYPE = 0
val LTYPE = 1
val RTYPE = 2

defsyntax stz/reader-lang :
   defn sym? (x) :
      match(unwrap-token(x)) :
         (x:Symbol) : x != `...
         (x) : false

   defrule :
      sym = (?x) when sym?(x) : unwrap-token(x)
      prefix-op = (defreader ?name:#sym (?exp:#sym) -> ?type:#type :
                      ?fs:#form ...) :
         val d = DefReader(name, exp, type, fs)
         stz/langs/expande(compile(d))
      form = ((?tag:#sym ?fs:#field ...) : ?body:#exp) :
         TagForm(tag, fs, body)
      form = (x : ?body:#exp) :
         SForm(body)
      form = (v : ?body:#exp) :
         VForm(body)
      field = (?name:#sym : ?prod:#sym ~ ...) :
         Field(name, prod, RTYPE)
      field = (?name:#sym : ?prod:#sym) :
         Field(name, prod, STYPE)
      field = ((?name:#sym : ?prod:#sym ~ ...)) :
         Field(name, prod, LTYPE)


defn compile (d:DefReader) :
   ;Compile a form body into a reader function
   defn compile-body (f:Form) -> List :
      match(f) :
         (f:TagForm) :            
            defn field-type (f:Field) :
               val prod-type = switch {prod(f) == _} :
                  `? : `?
                  exp(d) : type(d)
                  else : fatal("Unrecognized type: %_" % [prod(f)])
               switch {type(f) == _} :
                  STYPE : prod-type
                  LTYPE : qquote(List<~ prod-type>)
                  RTYPE  : qquote(List<~ prod-type>)
            val template = `(
               fn (#array:Array, info:False|FileInfo) -> ret :
                  fields{val name:type = #array[i]}
                  body)
            fill-template(template, [
               `body => body(f)
               `ret => type(d)
               `fields => nested $ for (f in fields(f), i in 0 to false) map : [
                  `name => name(f)
                  `type => field-type(f)
                  `i => i]])
         (f:SForm) :
            val template = `(
               fn (x:Symbol, info:False|FileInfo) -> ret :
                  body)
            fill-template(template, [
               `body => body(f),
               `ret => type(d)])
         (f:VForm) :
            val template = `(
               fn (v:?, info:False|FileInfo) -> ret :
                  body)
            fill-template(template, [
               `body => body(f),
               `ret => type(d)])

   ;Compile field into Field
   defn compile (f:Field) :
      val template = `(type{lang/read/SField(`prod)}{
                            lang/read/LField(`prod)}{
                            lang/read/RField(`prod)})
      fill-template(template, [
         `type => choice(type(f))
         `prod => prod(f)])

   ;Compile a form into a Form
   defn compile (f:Form) :
      match(f) :
         (f:TagForm) :
            val template = `(lang/read/TagForm(`tag, [fs], body))
            fill-template(template, [
               `tag => tag(f)
               `fs => splice(map(compile, fields(f)))
               `body => compile-body(f)])
         (f:SForm) :
            val template = `(lang/read/SForm(body))
            fill-template(template, [
               `body => compile-body(f)])
         (f:VForm) :
            val template = `(lang/read/VForm(body))
            fill-template(template, [
               `body => compile-body(f)])
         
   ;Compile reader
   val template = `(
      defn name (form) -> type :
         lang/read/read(form, [fs]))
   fill-template(template, [
      `name => name(d)
      `form => gensym()
      `table => gensym()
      `type => type(d)
      `fs => splice(to-list(seq(compile, forms(d))))])

;============================================================
;================= defast-printer Lang ======================
;============================================================
defpackage stz/ast-printer-lang :
   import core
   import collections
   import macro-utils

defstruct DefAstPrinter :
   exp: Symbol
   type
   clauses: List<Clause>
defstruct Clause :
   type
   form: Form
deftype Form
defstruct TagForm <: Form :
   tag: Symbol
   fields: List<Field>
defstruct CustomForm <: Form :
   exp
defstruct IfForm <: Form :
   pred
   conseq: Form
   alt: Form

deftype Field
defmulti name (f:Field) -> Symbol
defstruct SField <: Field :
   name:Symbol with: (as-method => true)
defstruct LField <: Field :
   name:Symbol with: (as-method => true)
defstruct RField <: Field :
   name:Symbol with: (as-method => true)

defsyntax stz/printer-lang :
   defn sym? (x) :
      match(unwrap-token(x)) :
         (x:Symbol) : x != `...
         (x) : false

   defrule :
      sym = (?x) when sym?(x) : unwrap-token(x)
      prefix-op = (defprinter (?name:#sym : ?type:#type) :
                      ?clauses:#clause ... ?rest ...) :
         fatal("Not a printer clause: %_" % [rest]) when not empty?(rest)               
         val d = DefAstPrinter(name, type, clauses)
         stz/langs/expande(compile(d))
      clause = (?t:#type : (?f:#form)) :
         Clause(t, f)
      form = ((?tag:#sym ?fs:#field ...)) :
         TagForm(tag, fs)
      form = (if ?pred:#exp : ?conseq:#form else : ?alt:#form) :
         IfForm(pred, conseq, alt)
      form = (custom{?exp:#exp}) :
         CustomForm(exp)
      field = (?name:#sym ~ ...) :
         RField(name)
      field = (?name:#sym) :
         SField(name)
      field = ((?name:#sym ~ ...)) :
         LField(name)

defn format-string (f:TagForm) :
   val o = StringBuffer()
   print(o, "(%_" % [tag(f)])
   for f in fields(f) do :
      print{o, _} $ match(f) :
         (f:SField) : " %~"
         (f:LField) : " (%@)"
         (f:RField) : " %@"
   print(o, ")")
   to-string(o)

defn value-obj (e:Symbol, f:Field) :
   fill-template(`(name(e)), [
      `name => name(f)
      `e => e])

defn compile (e:Symbol, f:Form) :
   match(f) :
      (f:TagForm) :
         val template = `(core/print(#o, str % [vs]))
         fill-template(template, [
            `str => format-string(f)
            `vs => splice(map(value-obj{e, _}, fields(f)))])
      (f:CustomForm) :
         val template = `(core/print(#o, exp))
         fill-template(template, [
            `exp => exp(f)])
      (f:IfForm) :
         val template = `(if pred : conseq else : alt)
         fill-template(template, [
            `pred => pred(f)
            `conseq => compile(e, conseq(f))
            `alt => compile(e, alt(f))])

defn compile (d:DefAstPrinter) :
   val template = `(
      defmethod print (#o:core/OutputStream, e:Type) :
         match(e) :
            clauses{(e:Type) : body})
   fill-template(template, [
      `e => exp(d)
      `Type => type(d)
      `clauses => nested $
         for c in clauses(d) map : [
            `Type => type(c)
            `body => compile(exp(d), form(c))]])


;============================================================
;===================== defcheck Lang ========================
;============================================================
defpackage stz/check-lang :
   import core
   import collections
   import macro-utils

;Possible checker types
deftype CType
defstruct SymType <: CType :
   type: Symbol
defstruct RestType <: CType :
   type: Symbol
defstruct ListType <: CType :
   types: List<CType>

;Checkers
deftype Checker
defstruct FormChecker <: Checker :
   args: List<Symbol>
   types: List<CType>
defstruct IfChecker <: Checker :
   pred
   conseq: Checker
   alt: Checker
defstruct SwitchChecker <: Checker :
   exp
   clauses: List<KeyValue<?, Checker>>
   else-clause: Checker
defstruct CustomChecker <: Checker :
   exp
defstruct BeginChecker <: Checker :
   checkers: List<Checker>

;Specification
defstruct FormSpec :
   type: Symbol
   description: String
   type-checkers: List<KeyValue<?, Checker>>
   plus-checkers: List<Symbol>
   custom-checkers: List<?>

;General Wrapper
defstruct DefCheck :
   name: Symbol
   exp: Symbol
   type
   specs: List<FormSpec>

;======== Syntax Definition ========
defsyntax stz/check-lang :
   defn sym? (x) :
      match(unwrap-token(x)) :
         (x:Symbol) : x != `...
         (x) : false

   defrule :
      ;Utilities
      sym = (?x) when sym?(x) : unwrap-token(x)

      ;Overall Form
      prefix-op = (defcheck ?name:#sym (?exp:#sym : ?type:#type) :
                      ?fs:#spec ... ?rest ...) :
         if not empty?(rest) :
            fatal("Invalid syntax: The following forms are not specs: %*" % [join(rest, " ")])
         stz/langs/expande(compile(DefCheck(name, exp, type, fs)))
      spec = (?name:#sym(?desc) :
                 (?ts:#type : ?type-cs:#checker) @...
                 (+ ?plus-cs:#sym) @...
                 (custom{?custom-cs:#exp}) @...) :
         FormSpec(name, unwrap-token(desc),
            map(KeyValue, ts, type-cs),
            plus-cs,
            custom-cs)

      ;Form Checker   
      checker = ({(?ns:#sym : ?ts:#ctype) @...}) :
         FormChecker(ns, ts)
      ;If Checker
      checker = (if ?pred:#exp : ?conseq:#checker else : ?alt:#checker) :
         IfChecker(pred, conseq, alt)
      ;Switch Checker   
      checker = (switch ?pred:#exp :
                    ((! else) ?keys:#exp : ?cs:#checker) @...
                    else : ?ec:#checker) :
         SwitchChecker(pred, map(KeyValue, keys, cs), ec)
      ;Custom Checker   
      checker = (custom{?e:#exp}) :
         CustomChecker(e)
      ;Begin Checker
      checker = ((?c0:#checker ?cs:#checker ...)) :
         BeginChecker(cons(c0, cs))
      checker = (()) :
         BeginChecker(List())

      ;Checker Types
      ctype = (?type:#sym ~ ...) :
         RestType(type)
      ctype = (?type:#sym) :
         SymType(type)
      ctype = ((?ts:#ctype ...)) :
         ListType(ts)


;======== Compilation ========
defn fill-each<?T> (f: T -> Many<KeyValue<Symbol,?>>, xs:Seqable<?T>) :
   nested(to-list(seq(f, xs)))

defn compile (d:DefCheck) :
   ;Create function names
   val #types = map({type(_) => gensym()}, specs(d))
   val #withins = map({type(_) => gensym()}, specs(d))
   defn #type (n:Symbol) : lookup(#types, n)
   defn #type (s:FormSpec) : #type(type(s))
   defn #type (t:SymType|RestType) : #type(type(t))
   defn #within (n:Symbol) : lookup(#withins, n)
   defn #within (s:FormSpec) : #within(type(s))
   defn #within (t:SymType|RestType) : #within(type(t))

   ;Compiling a CType
   defn compile (pos:String, t:CType) :
      match(t) :
         (t:SymType) :
            fill-template(`(lang/check/SymType(#t)), [
               `#t => #type(t)])
         (t:RestType) :
            fill-template(`(lang/check/RestType(#t)), [
               `#t => #type(t)])
         (t:ListType) :
            fill-template(`(lang/check/ListType(e, pos, [ts])), [
               `e => exp(d)
               `pos => pos
               `ts => splice(map(compile{pos, _}, types(t)))])

   ;Compiling a field check against a CType
   defn compile-check (field:Symbol, t:CType) :
      fill-template(`(lang/check/check(field(e), t)), [
         `e => exp(d)
         `field => field
         `t => compile(to-string(field), t)])

   ;Compiling a checker
   defn compile (c:Checker) -> ? :
      match(c) :
         (c:FormChecker) :
            map(compile-check, args(c), types(c))
         (c:IfChecker) :
            fill-template(`(if pred : conseq else : alt), [
               `pred => pred(c)
               `conseq => compile(conseq(c))
               `alt => compile(alt(c))])
         (c:CustomChecker) :
            exp(c)
         (c:SwitchChecker) :
            val template = `(
               switch pred :
                  clauses{key : check}
                  else : else-check)
            fill-template(template, [
               `pred => exp(c)
               `clauses => for c in clauses(c) fill-each : [
                  `key => key(c)
                  `check => compile(value(c))]
               `else-check => compile(else-clause(c))])
         (c:BeginChecker) :
            map(compile, checkers(c))

   ;Compiling a form specification
   defn compile (s:FormSpec) :
      defn compile-match (custom:List, fail) :
         if empty?(type-checkers(s)) :
            fail
         else :   
            val template = `(
               match(e) :
                  clauses{
                     (e:type) :
                        check
                        custom
                        false}
                  (e) :
                     fail)
            fill-template(template, [
               `e => exp(d)
               `clauses => for c in type-checkers(s) fill-each : [
                  `type => key(c)
                  `check => compile(value(c))
                  `custom => splice(custom)]
               `fail => fail])
            
      defn compile-plus (custom:List, fail) :
         defn loop (cs:List<Symbol>) :
            if empty?(cs) :
               fail
            else :
               val template = `(
                  if within(e) :
                     check(e)
                     custom
                     false
                  else :
                     fail)
               fill-template(template, [
                  `within => #within(head(cs))
                  `check => #type(head(cs))
                  `e => exp(d)
                  `custom => splice(custom)
                  `fail => loop(tail(cs))])
         loop(plus-checkers(s))

      defn compile-fail () :
         fill-template(`(lang/check/invalid-form(description, e)), [
            `description => description(s)
            `e => exp(d)])

      val template = `(
         defn name (e:type) : body)
      val fail-body = compile-fail()   
      fill-template(template, [
         `name => #type(s)
         `e => exp(d)
         `type => type(d)
         `body => compile-match(
                     custom-checkers(s)
                     compile-plus(custom-checkers(s), fail-body))])

   ;Compile a within form specification
   defn compile-within (s:FormSpec) :
      var body = false
      for name in plus-checkers(s) do :
         body = fill-template(`(within(e) or body), [
            `within => #within(name)
            `e => exp(d)
            `body => body])
      if not empty?(type-checkers(s)) :
         body = fill-template(`(e is (type) or body), [
            `e => exp(d)
            `type => splice(to-list(join(seq(key, type-checkers(s)), `|)))
            `body => body])
      val template = `(
         defn name (e:type) : body)
      fill-template(`(defn name (e:type) : body), [
         `name => #within(s)
         `e => exp(d)
         `type => type(d),
         `body => body])

   ;Compiling the DefCheck
   val template = `(
      defn check (e:type) :
         checkers
         withiners
         lang/check/run-check(check0, e))
   fill-template(template, [
      `check => name(d)
      `e => exp(d)
      `type => type(d)
      `checkers => splice(map(compile, specs(d)))
      `withiners => splice(to-list(seq(compile-within, specs(d))))
      `check0 => #type(head(specs(d)))])

