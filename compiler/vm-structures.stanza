defpackage stz/vm-structures :
  import core
  import collections
  import stz/vm-ir
  import stz/vm-table

;============================================================
;============== Memory Layout of VM Structures ==============
;============================================================

;The first fields in VMState are used by the core library
;in both compiled and interpreted mode. The last fields
;are used only in interpreted mode.
;Permanent state changes in-between each code load.
;Variable state changes in-between each boundary change.
public lostanza deftype VMState :
  ;Compiled and Interpreted Mode
  var global-offsets: ptr<long>    ;(Permanent State)
  var global-mem: ptr<byte>        ;(Permanent State)
  var const-table: ptr<long>       ;(Permanent State)
  var const-mem: ptr<byte>         ;(Permanent State)
  var data-offsets: ptr<int>       ;(Permanent State)
  var data-mem: ptr<byte>          ;(Permanent State)
  var code-offsets: ptr<long>      ;(Permanent State)
  var registers: ptr<long>         ;(Permanent State)
  var system-registers: ptr<long>  ;(Permanent State)
  heap: core/Heap                  ;(Variable State)
  var class-table: ptr<?>          ;(Permanent State)
  ;Interpreted Mode Tables
  var instructions: ptr<byte>      ;(Permanent State)
  var trie-table: ptr<ptr<int>>    ;(Permanent State)

;- code: The integer id of the function. The VM
;  will retrieve the address of the code by looking up
;  vmstate.code-offsets[id]. 
public lostanza deftype Function :
  var num-slots: long
  var code: long
  slots: long ...

;============================================================
;=================== Sizes ==================================
;============================================================

public lostanza val SIZEOF-STACK-FRAME:ref<Int> = new Int{sizeof(StackFrame) as int}
public lostanza val SIZEOF-STACK:ref<Int> = new Int{sizeof(Stack) as int}

public lostanza val SIZEOF-BYTE:ref<Int> = new Int{sizeof(byte) as int}
public lostanza val SIZEOF-INT:ref<Int> = new Int{sizeof(int) as int}
public lostanza val SIZEOF-LONG:ref<Int> = new Int{sizeof(long) as int}

;============================================================
;================== Offsets into Structures =================
;============================================================

lostanza defn null-vmstate () -> ptr<VMState> :
  return 0L as ptr<VMState>

public lostanza val VMSTATE-GLOBAL-OFFSETS-OFFSET:ref<Int> = 
  new Int{addr(null-vmstate().global-offsets) as long as int}
public lostanza val VMSTATE-GLOBAL-MEM-OFFSET:ref<Int> = 
  new Int{addr(null-vmstate().global-mem) as long as int}  
public lostanza val VMSTATE-CONST-TABLE-OFFSET:ref<Int> =
  new Int{addr(null-vmstate().const-table) as long as int}
public lostanza val VMSTATE-CONST-MEM-OFFSET:ref<Int> =
  new Int{addr(null-vmstate().const-mem) as long as int}
public lostanza val VMSTATE-DATA-OFFSETS-OFFSET:ref<Int> =
  new Int{addr(null-vmstate().data-offsets) as long as int}
public lostanza val VMSTATE-DATA-MEM-OFFSET:ref<Int> =
  new Int{addr(null-vmstate().data-mem) as long as int}
public lostanza val VMSTATE-CODE-OFFSETS-OFFSET:ref<Int> =
  new Int{addr(null-vmstate().code-offsets) as long as int}
public lostanza val VMSTATE-REGISTERS-OFFSET:ref<Int> =
  new Int{addr(null-vmstate().registers) as long as int}
public lostanza val VMSTATE-SYSTEM-REGISTERS-OFFSET:ref<Int> =
  new Int{addr(null-vmstate().system-registers) as long as int}
public lostanza val VMSTATE-HEAP-START-OFFSET:ref<Int> =
  new Int{addr(null-vmstate().heap.start) as long as int}
public lostanza val VMSTATE-HEAP-TOP-OFFSET:ref<Int> =
  new Int{addr(null-vmstate().heap.top) as long as int}
public lostanza val VMSTATE-HEAP-LIMIT-OFFSET:ref<Int> =
  new Int{addr(null-vmstate().heap.limit) as long as int}
public lostanza val VMSTATE-HEAP-BITSET-BASE-OFFSET:ref<Int> =
  new Int{addr(null-vmstate().heap.bitset-base) as long as int}
public lostanza val VMSTATE-CURRENT-STACK-OFFSET:ref<Int> =
  new Int{addr(null-vmstate().heap.current-stack) as long as int}
public lostanza val VMSTATE-SYSTEM-STACK-OFFSET:ref<Int> =
  new Int{addr(null-vmstate().heap.system-stack) as long as int}

lostanza defn null-stackframe () -> ptr<StackFrame> :
  return 0L as ptr<StackFrame>

public lostanza val STACK-FRAME-RETURN-OFFSET:ref<Int> =
  new Int{addr(null-stackframe().return) as long as int}
public lostanza val STACK-FRAME-LIVENESS-MAP-OFFSET:ref<Int> =
  new Int{addr(null-stackframe().liveness-map) as long as int}
public lostanza val STACK-FRAME-SLOTS-OFFSET:ref<Int> =
  new Int{addr(null-stackframe().slots) as long as int}

lostanza defn null-stack () -> ptr<Stack> :
  return 0L as ptr<Stack>

public lostanza val STACK-SIZE-OFFSET:ref<Int> =
  new Int{addr(null-stack().size) as long as int}
public lostanza val STACK-FRAMES-OFFSET:ref<Int> =
  new Int{addr(null-stack().frames) as long as int}
public lostanza val STACK-STACK-POINTER-OFFSET:ref<Int> =
  new Int{addr(null-stack().stack-pointer) as long as int}
public lostanza val STACK-PC-OFFSET:ref<Int> =
  new Int{addr(null-stack().pc) as long as int}

lostanza defn null-function () -> ptr<Function> :
  return 0L as ptr<Function>

public lostanza val FUNCTION-NUM-SLOTS-OFFSET:ref<Int> =
  new Int{addr(null-function().num-slots) as long as int}
public lostanza val FUNCTION-CODE-OFFSET:ref<Int> =
  new Int{addr(null-function().code) as long as int}
public lostanza val FUNCTION-SLOTS-OFFSET:ref<Int> =
  new Int{addr(null-function().slots) as long as int}