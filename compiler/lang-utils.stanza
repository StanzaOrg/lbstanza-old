defpackage stz/utils-lang :
   import core
   import verse
   import core/macro-utils
   import stz/lexer

defsyntax stz/attempt-lang :
   defn compile (conseq, alt) :
      val template = `(
         stz/utils/attempt-clause(
            fn* () : conseq,
            fn* () : alt))
      stz/langs/expande $ fill-template(template, [
         `conseq => conseq,
         `alt => alt])
         
   defrule attempt :
      prefix-op = (?e:#attempt) : e
      attempt = (attempt : ?conseq:#exp else : ?alt:#exp) :
         compile(conseq, alt)
      attempt = (attempt : ?conseq:#exp else ?alt:#attempt) :
         compile(conseq, alt)
      attempt = (attempt : ?conseq:#exp) :
         compile(conseq, false)