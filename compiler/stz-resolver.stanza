defpackage stz/resolver :
   import core
   import verse
   import stz/il-ir
   import stz/namemap

defresolver resolve IExp :
   structure :
      IBegin (exps info)
      IFn (a1 a2 args body info)
      
   define + :
      IVar : define
      IExp : (_: +)

   define f+ :
      IDefn : (name: +)

   resolve te :
      IDefType : (class: +, {args: +, parent:t})
      IExport
      ???
         
   resolve se :
      IBegin : (exps:se)
      IDef : (value:e, name: +, type:t)
      IDefVar : (value:e, name: +, type:t)
      LetRec : {defns:f+, defns:f, body:se}
      + e

   resolve e :
      IFn : (a1:t, a2:t, {args: +, body:se})
      IBranch : (types:t, {args: +, body:se})
      IDo : (func:fa, args:e)
      INew : (class:t, methods:dm)
      ICast : (exp:e, type:t)
      ISet : (name:v, value:e)
      IPrim : (args:e)
      ICallLS : (function:lfa, args:e)
      IVar : resolve var
      IExp : (_:e)

   resolve f :
      IDefn : ({targs: +, a1:t, a2:t, body:se})

   resolve t :
      IVar : resolve tvar
      IOf : (class:c, args:t)
      IExp : (_:t)

   resolve c :
      IVar : resolve class

   resolve fa :
      IOf : (class:e, args:t)
      + e

   resolve dm :
      IDefmethod : (multi:m, {targs: +, args: +, a1:t, a2:t, thisn:this, body:se})

   resolve m :
      IVar : resolve multi

   resolve this (Int|False) :
      Int|False : resolve this

   resolve v :
      IVar : resolve mutable-var

   resolve lfa :
      IOf : (class:le, args:t)
      + le


          








