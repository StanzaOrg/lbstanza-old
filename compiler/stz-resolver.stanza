defpackage stz/resolver :
   import core
   import verse
   import stz/il-ir
   import stz/namemap

(defn resolve-exp (gen17 : IExp gen18 : Engine) : (defn #map (@of (@cap S) (@cap T)) (f : T -> (@cap S) x : (@cap T)) : f (@do x) defn #map (@of (@cap S) (@cap T)) (f : T -> (@cap S) x : List (@of (@cap T))) : core/map (@do f x) defn #do (@of (@cap S) (@cap T)) (f : T -> (@cap S) x : (@cap T)) : f (@do x) defn #do (@of (@cap S) (@cap T)) (f : T -> (@cap S) x : List (@of (@cap T))) : core/do (@do f x) defn #new-definition (gen17 : IExp) : new-definition (@do gen18 gen17) ((defn gen19 (gen17 : IExp) -> core/False : (match (@do gen17) : ((gen17 : IDefn) : ((#do (@do #new-definition name (@do gen17))))))) (defn gen20 (gen17 : IExp) : (match (@do gen17) : ((gen17 : IBegin) : (((val gen35 = #map (@do gen20 exps (@do gen17)))) IBegin (@do gen35 (info (@do gen17)))) (gen17 : IDefType) : (((new-scope (@do gen18) ((#do (@do #new-definition args (@do gen17))) (val gen40 = #map (@do gen23 parent (@do gen17)))) end-scope (@do gen18))) IDefType (@do (class (@do gen17)) (args (@do gen17)) gen40 (info (@do gen17)))) (gen17 : IDef) : (((val gen45 = #map (@do gen23 type (@do gen17))) (val gen48 = #map (@do gen21 value (@do gen17)))) IDef (@do (name (@do gen17)) gen45 gen48 (info (@do gen17)))) (gen17 : IDefVar) : (((val gen45 = #map (@do gen23 type (@do gen17))) (val gen48 = #map (@do gen21 value (@do gen17)))) IDefVar (@do (name (@do gen17)) gen45 gen48 (info (@do gen17)))) (gen17 : IDefn) : (((new-scope (@do gen18) ((#do (@do #new-definition targs (@do gen17))) (#do (@do #new-definition args (@do gen17))) (val gen59 = #map (@do gen23 a1 (@do gen17))) (val gen62 = #map (@do gen23 a2 (@do gen17))) (val gen65 = #map (@do gen21 body (@do gen17)))) end-scope (@do gen18))) IDefn (@do (tail? (@do gen17)) (name (@do gen17)) (targs (@do gen17)) gen59 gen62 (args (@do gen17)) gen65 (info (@do gen17)))) (gen17 : IDefmulti) : (((new-scope (@do gen18) ((#do (@do #new-definition targs (@do gen17))) (val gen59 = #map (@do gen23 a1 (@do gen17))) (val gen62 = #map (@do gen23 a2 (@do gen17)))) end-scope (@do gen18))) IDefmulti (@do (name (@do gen17)) (targs (@do gen17)) gen59 gen62 (info (@do gen17)))) (gen17 : IDefmethod) : (((val gen77 = #map (@do gen27 multi (@do gen17))) (new-scope (@do gen18) ((#do (@do #new-definition targs (@do gen17))) (#do (@do #new-definition args (@do gen17))) (val gen59 = #map (@do gen23 a1 (@do gen17))) (val gen62 = #map (@do gen23 a2 (@do gen17))) (val gen65 = #map (@do gen21 body (@do gen17)))) end-scope (@do gen18))) IDefmethod (@do (tail? (@do gen17)) gen77 (thisn (@do gen17)) (targs (@do gen17)) gen59 gen62 (args (@do gen17)) gen65 (info (@do gen17)))) (gen17 : IExport) : (((val gen90 = #map (@do gen20 exp (@do gen17)))) IExport (@do gen90 (info (@do gen17)))) (gen17) : gen21 (@do gen17)))) (defn gen21 (gen17 : IExp) : (match (@do gen17) : ((gen17 : IDef) : (((val gen48 = #map (@do gen21 value (@do gen17))) (val gen45 = #map (@do gen23 type (@do gen17))) (#do (@do #new-definition name (@do gen17)))) IDef (@do (name (@do gen17)) gen45 gen48 (info (@do gen17)))) (gen17 : IDefVar) : (((val gen48 = #map (@do gen21 value (@do gen17))) (val gen45 = #map (@do gen23 type (@do gen17))) (#do (@do #new-definition name (@do gen17)))) IDefVar (@do (name (@do gen17)) gen45 gen48 (info (@do gen17)))) (gen17 : LetRec) : ((new-scope (@do gen18) ((#do (@do gen19 defns (@do gen17))) (val gen126 = #map (@do gen22 defns (@do gen17))) (val gen65 = #map (@do gen21 body (@do gen17)))) end-scope (@do gen18)) LetRec (@do gen126 gen65 (info (@do gen17)))) (gen17 : IFn) : (((val gen59 = #map (@do gen23 a1 (@do gen17))) (val gen62 = #map (@do gen23 a2 (@do gen17))) (new-scope (@do gen18) ((#do (@do #new-definition args (@do gen17))) (val gen65 = #map (@do gen21 body (@do gen17)))) end-scope (@do gen18))) IFn (@do (tail? (@do gen17)) gen59 gen62 (args (@do gen17)) gen65 (info (@do gen17)))) (gen17 : IBranch) : (((val gen144 = #map (@do gen23 types (@do gen17))) (new-scope (@do gen18) ((#do (@do #new-definition args (@do gen17))) (val gen65 = #map (@do gen21 body (@do gen17)))) end-scope (@do gen18))) IBranch (@do gen144 (args (@do gen17)) gen65 (info (@do gen17)))) (gen17 : INew) : (((val gen152 = #map (@do gen23 class (@do gen17))) (val gen155 = #map (@do gen26 methods (@do gen17)))) INew (@do gen152 gen155 (info (@do gen17)))) (gen17 : ICast) : (((val gen90 = #map (@do gen21 exp (@do gen17))) (val gen45 = #map (@do gen23 type (@do gen17)))) ICast (@do gen90 gen45 (info (@do gen17)))) (gen17 : ISet) : (((val gen164 = #map (@do gen29 name (@do gen17))) (val gen48 = #map (@do gen21 value (@do gen17)))) ISet (@do gen164 gen48 (info (@do gen17)))) (gen17 : IDo) : (((val gen170 = #map (@do gen25 func (@do gen17))) (val gen173 = #map (@do gen21 args (@do gen17)))) IDo (@do gen170 gen173 (info (@do gen17)))) (gen17 : IPrim) : (((val gen173 = #map (@do gen21 args (@do gen17)))) IPrim (@do (function (@do gen17)) gen173 (info (@do gen17)))) (gen17 : IVar) : (resolve-var (@do gen18 gen17)) (gen17 : IExp) : (map (@do gen21 gen17))))) (defn gen22 (gen17 : IExp) : (match (@do gen17) : ((gen17 : IDefn) : (((new-scope (@do gen18) ((#do (@do #new-definition targs (@do gen17))) (#do (@do #new-definition args (@do gen17))) (val gen59 = #map (@do gen23 a1 (@do gen17))) (val gen62 = #map (@do gen23 a2 (@do gen17))) (val gen65 = #map (@do gen21 body (@do gen17)))) end-scope (@do gen18))) IDefn (@do (tail? (@do gen17)) (name (@do gen17)) (targs (@do gen17)) gen59 gen62 (args (@do gen17)) gen65 (info (@do gen17))))))) (defn gen23 (gen17 : IExp) : (match (@do gen17) : ((gen17 : IVar) : (resolve-tvar (@do gen18 gen17)) (gen17 : IOf) : (((val gen152 = #map (@do gen24 class (@do gen17))) (val gen173 = #map (@do gen23 args (@do gen17)))) IOf (@do gen152 gen173 (info (@do gen17)))) (gen17 : IExp) : (map (@do gen23 gen17))))) (defn gen24 (gen17 : IExp) : (match (@do gen17) : ((gen17 : IVar) : (resolve-class (@do gen18 gen17))))) (defn gen25 (gen17 : IExp) : (match (@do gen17) : ((gen17 : IOf) : (((val gen152 = #map (@do gen21 class (@do gen17))) (val gen173 = #map (@do gen23 args (@do gen17)))) IOf (@do gen152 gen173 (info (@do gen17)))) (gen17) : gen21 (@do gen17)))) (defn gen26 (gen17 : IExp) : (match (@do gen17) : ((gen17 : IDefmethod) : (((val gen77 = #map (@do gen27 multi (@do gen17))) (new-scope (@do gen18) ((#do (@do #new-definition targs (@do gen17))) (#do (@do #new-definition args (@do gen17))) (val gen59 = #map (@do gen23 a1 (@do gen17))) (val gen62 = #map (@do gen23 a2 (@do gen17))) (val gen259 = #map (@do gen28 thisn (@do gen17))) (val gen65 = #map (@do gen21 body (@do gen17)))) end-scope (@do gen18))) IDefmethod (@do (tail? (@do gen17)) gen77 gen259 (targs (@do gen17)) gen59 gen62 (args (@do gen17)) gen65 (info (@do gen17))))))) (defn gen27 (gen17 : IExp) : (match (@do gen17) : ((gen17 : IVar) : (resolve-multi (@do gen18 gen17))))) (defn gen28 (gen17 : (Int | False)) : (match (@do gen17) : ((gen17 : (Int | False)) : (resolve-this (@do gen18 gen17))))) (defn gen29 (gen17 : IExp) : (match (@do gen17) : ((gen17 : IVar) : (resolve-mutable-var (@do gen18 gen17)))))) gen20 (@do gen17)))


;============================================================
;=================== Implementation =========================
;============================================================

definterface ScopeBucket 
defn ScopeBucket () :
   val table = HashTable<Symbol, Vector<List<Int>>>(symbol-hash)
   var level = 0
   new ScopeBucket :
      defmethod add (this, x:Symbol, i:Int) :
         if not key?(table, x) :
            val v = Vector<List<Int>>()
            set-length(v, level + 1, List())
            table[x] = v
         val b = table[x]
         b[level] = List(i, b[level])
      defmethod begin-scope (this) :
         level = level + 1
         if level > levels :
            levels = levels * 2
      defmethod end-scope (this) :
         for k in keys(table) do :
            while (length(table[k]) > level) or empty?(table[k]) :
               pop(table[k])
         level = level - 1
      defmethod get (this, x:Symbol, filter:Int -> True|False) -> List<Int> :
         if key?(table, x) :
            val b = table[x]
            for i in level through 0 by -1 do :
               b[i]
         else :
            List()
               
         
   

defstruct ScopeBucket :
   table: HashTable<Symbol, Vector<List<Int>>>(symbol-hash)




defstruct Engine 

defn new-definition (eng:Engine, e:IExp) :
   println("new-definition(~)" << [e])
defn new-scope (eng:Engine) :
   println("start scope")
defn end-scope (eng:Engine) :
   println("end scope")
defn resolve-var (eng:Engine, e:IExp) :
   println("resolve-var(~)" << [e])
   e
defn resolve-tvar (eng:Engine, e:IExp) :
   println("resolve-tvar(~)" << [e])
   e
defn resolve-class (eng:Engine, e:IExp) :
   println("resolve-class(~)" << [e])
   e
defn resolve-multi (eng:Engine, e:IExp) :
   println("resolve-multi(~)" << [e])
   e
defn resolve-this (eng:Engine, e:Int|False) :
   println("resolve-this(~)" << [e])
   e
defn resolve-mutable-var (eng:Engine, e:IExp) :
   println("resolve-mutable-var(~)" << [e])
   e
defn resolve (eng:Engine, r: IExp -> IExp, e:IExp) :
   println("resolve(~)" << [e])
   val res = r(e)
   println("result = ~" << [res])

public defn resolve (e:IExp) :
   defn loop (e:IExp) :
      println("Loop: ~" << [e])
      match(e) :
         (e:LetPackage) :
            val r = resolve-exp(body(e), Engine())
            println("Resolved: ~" << [r])
         (e) :
            do(loop, e)
   println("Resolving: ~" << [e])         
   loop(e)
   
   