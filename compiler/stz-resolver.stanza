;See License.txt for details about licensing.

defpackage stz/resolver :
   import core
   import collections
   import stz/il-ir
   import stz/namemap
   import stz/primitives
   import stz/utils
   import stz/algorithms
   import stz/params
   import stz/dl-ir
   import stz/ids
   import stz/visibility

;<doc>=======================================================
;====================== Environment =========================
;============================================================

### Environment Imported Packages ###

When the resolver imports a package that is not yet loaded, it
requests the environment to retrieve the package.

If the environment cannot find the package, then it returns false.

If the environment can find the package, then it returns either:

  a. an IPackage: which means that the package is represented by a
  source file, has been renamed, and should be one of the packages to
  be resolved.

  b. a PackageExports: which means that it's a package from the
  resolution environment (whether from a .pkg or from the REPL
  environment) and does not need to be resolved.

### Environment Conditional Dependencies ###

Stanza allows packages to be conditionally imported when it detects
that other packages are imported together.

The conditional-dependencies method is given the current list of
already imported packages, and must return the list of packages
that should be conditionally imported.

### Environment Package Priority ###

By default, all packages have the same priority, and therefore if an
overloaded definition is found in multiple packages, it is by default
an ambigious reference.

By providing different priorities to different packages, the resolver
will allow higher priority definitions to shadow previous definitions.

;============================================================
;=======================================================<doc>

public deftype Env
public defmulti imported-package (e:Env, package:Symbol) -> IPackage|PackageExports|False

;============================================================
;=================== Multis with Defaults ===================
;============================================================

public defmulti conditional-dependencies (e:Env, packages:Seqable<Symbol>) -> Tuple<Symbol>
defmethod conditional-dependencies (e:Env, packages:Seqable<Symbol>) : []

public defmulti package-priority (e:Env) -> False|(Symbol -> Int)
defmethod package-priority (e:Env) : false

;============================================================
;==================== Result Structures =====================
;============================================================

public defstruct ResolverResult :
  ipackages: Tuple<IPackage>
  import-lists: Tuple<ImportList>
  init-order: Tuple<Symbol>

public defstruct ImportList :
  package: Symbol
  imports: Tuple<IImport>

;============================================================
;====================== Driver ==============================
;============================================================
public defn resolve-il (packages:Tuple<IPackage|PackageExports>, env:Env) -> ResolverResult|ResolveErrors :
  ;Track all detected errors
  val error-accum = Vector<ResolveError>()

  ;Create base environments
  val symtables = SymbolTables(packages, env, error-accum)

  ;Resolve individual packages
  ;  Accumulate all resolved packages into ipackages*
  ;  Track conditional dependencies in cond-dependencies
  val ipackages* = Vector<IPackage>()
  val import-lists* = Vector<ImportList>()
  val cond-dependencies = Vector<Symbol>()
  let resolve-ipackages () :
    val ds = load-conditional-dependencies(symtables)
    add-all(cond-dependencies, ds)
    val ps = new-ipackages(symtables)
    for p in ps do :
      add(import-lists*, ImportList(name(p), imports(p)))
      add(ipackages*, resolve-package(p, symtables, package-priority(env), error-accum))
    resolve-ipackages() when not empty?(ps) or not empty?(ds)
      

  ;Resolve type dependencies from pkgs
  check-exported-types(symtables, ipackages*, package-exports(symtables), error-accum)

  ;Compute initialization order
  defn init-order () :
    ;First compute the dependency graph
    val dependency-graph = HashTable<Symbol,List<Symbol>>()
    for p in ipackages* do :
      dependency-graph[name(p)] = to-list $ seq(package, imports(p))
    for p in package-exports(symtables) do :
      dependency-graph[package(p)] = to-list $ imported-packages(p)
    ;Compute the input order
    defn get-name (p:IPackage) : name(p)
    defn get-name (p:PackageExports) : package(p)
    val input-order = to-tuple $ cat-all $ [
      `(core)
      in-reverse(cond-dependencies),
      seq(get-name,packages)]
    ;Compute init order
    to-tuple(initialization-order(dependency-graph, input-order))

  ;Return result
  if empty?(error-accum) :
    ResolverResult(to-tuple(ipackages*),
                   to-tuple(import-lists*),
                   init-order())
  else :
    ResolveErrors(error-accum)  

;============================================================
;=================== Resolve a Single Package ===============
;============================================================

defn resolve-package (ipackage:IPackage,
                      symtables:SymbolTables,
                      priority:False|(Symbol -> Int),
                      error-accum:Vector<ResolveError>) :
  ;Retrieve symbol table for the package to resolven
  val symtable = symtables[name(ipackage)] as SymbolTable
  val eng = Engine(symtable, symtables, priority, error-accum)
  val exps* = map(resolve-exp{_, eng}, exps(ipackage))
  val ipackage* = sub-exps(ipackage, exps*)
  add-qualified-imports(ipackage*, qualified-imports(eng))  

;============================================================
;=================== Check Type Dependencies ================
;============================================================

defn check-exported-types (symtables:SymbolTables, pkgs:Collection<IPackage>, pexs:Tuple<PackageExports>, error-accum:Vector<ResolveError>) :
  ;Compute set of source packages
  val packages = to-hashset<Symbol>(seq(name,pkgs))

  ;Ensure that all types referenced in exports are defined
  for pex in pexs do :
    ;Check for existence of typeid
    defn check-for-type (e:TypeId) :
      if packages[package(e)] :
        val symtable = symtables[package(e)] as SymbolTable
        defn type? (e:VEntry) : type(e) is TypeE|LTypeE
        val entries = filter(type?, base(symtable, name(e)))
        add(error-accum, MissingType(package(pex), e)) when empty?(entries)
    ;Recursively scan DItem for typeid
    defn scan-for-type (e:DItem) :
      do(scan-for-type, e)
      match(e:TypeId) :
        check-for-type(e)
    ;Scan all exports
    do(scan-for-type, exports(pex))

;============================================================
;===================== Defresolver ==========================
;============================================================

#use-added-syntax(stz-resolver-lang)
defresolver resolve-exp (e:IExp, eng:Engine) :

  ;     Resolving Stanza Expressions
  ;     ----------------------------   
  ;Resolve top level expressions
  resolve te :
    IBegin: (exps:te)
    IDefType: {args:+, parent:t, children:te}
    IDefChild: (name:c, {args:+, parent:t})
    IDef: (type:t, value:e)
    IDefVar: (type:t, value:e)
    IDefn: {targs:+, args:+, a1:t, a2:t, body:e}
    IDefmulti: {targs:+, a1:t, a2:t}
    IDefmethod: (multi:m, {targs:+, args:+, a1:t, a2:t, body:e})
    IVisibility: (exp:te)
    + ltc
    + e

  ;Resolve Stanza expressions
  resolve e :
    Let: (def:e, body:e)
    LetRec: (defns:f+, defns:f, body:e)
    ILet: {exp:e}
    IDef: (type:t, value:e, name:+)
    IDefVar: (type:t, value:e, name:+)
    IFn: (a1:t, a2:t, {args:+, body:e})
    IBranch: (types:t, {args:+, body:e})
    INew: (class:pt, methods:dm)
    ICast: (exp:e, type:t)
    IUpCast: (exp:e, type:t)
    ISet: (name:v, value:e)
    IPrim: (op:prim, args:e)
    IDo: (func:farg, args:e)
    IVar: resolve var
    ILiteral: ()
    INone: ()
    IMulti: (_:e)
    IBegin: (_:e)
    IMatch: (_:e)
    ITuple: (_:e)      

  ;Stanza Nested functions
  resolve f :
    IDefn: {targs:+, args:+, a1:t, a2:t, body:e}

  ;Function arguments used in do forms
  resolve farg :
    IOf: (class:e, args:t)
    + e

  ;Nested defmethods in new forms
  resolve dm :
    IDefmethod: (multi:m, {targs:+, args:+, a1:t, a2:t, thisn:this, body:e})

  ;For resolving multis in defmethod forms
  resolve m :
    IVar: resolve multi

  ;For resolving the this argument in nested defmethod forms
  resolve this (Int|False) :
    Int|False: resolve this

  ;For resolving mutable variables in set forms
  resolve v :
    IVar: resolve mutable-var

  ;For resolving HiStanza primitive
  resolve prim :
    IVar: resolve prim

  ;For scanning for nested functions in a letrec form
  define f+ :
    IDefn: (name:+)

  ;For scanning for defined blocks in a labels form
  define blk+ :
    ILSLabeledBlock: (name:+)

  ;     Resolving Types
  ;     ---------------
  ;Resolving a HiStanza type
  resolve t :
    IVar: resolve type
    ICap: (name:cap)
    IOf: (class:c, args:t)
    IExp: (_:t)
     
  ;For resolving class in a A<X> form
  resolve c :
    IVar: resolve class

  ;For resolving the captured type variable
  resolve cap :
    IVar: resolve capvar

  ;     Resolving Parent Types
  ;     ----------------------
  resolve pt :
    IVar: resolve raw-hs-class
    IOf: (class:hclass, args:t)
    IExp: (_:pt)
  resolve hclass :
    IVar: resolve hs-class

  ;     Resolving LoStanza
  ;     ------------------
  ;For resolving top level LoStanza commands
  resolve ltc :
    IBegin: (exps:ltc)
    ILSDef: (exp:le, type:lt)
    ILSDefVar: (exp:le, type:lt)
    ILSDefType: {args:+, parent:pt, types:lt, rtype:lt}
    ILSExtern: (type:lt)
    ILSDefn: {targs:+, a1:lt, a2:lt, args:+, body:lc}
    ILSExternFn: {a1:lt, a2:lt, args:+, body:lc}
    ILSDefmethod: (multi:m, {targs:+, a1:lt, a2:lt, args:+, body:lc})
    + lc

  ;For resolving LoStanza commands
  resolve lc :
    IBegin: (exps:lc)
    ILSSet: (exp:lval, value:le)
    ILSLabels: {blocks:blk+, blocks:lc}
    ILSLabeledBlock: (types:lt, {args:+, body:lc})
    ILSGoto: (name:lbl, args:le)
    ILSReturn: (exp:le)
    ILSLet: {comm:lc}
    ILSIf: (pred:le, {conseq:lc}, {alt:lc})
    ILSMatch: (args:le, branches:lc)
    ILSBranch: (types:lt, {args:+, body:lc})
    ILSDef: (exp:le, type:lt, name:+)
    ILSDefVar: (exp:le, type:lt, name:+)
    ILSDo: (func:lfarg, args:le)
    ILSPrim: (op:lprim, args:le)
    ILSCallC: (_:le)

  ;For resolving a LoStanza expression
  resolve le :
    IVar: resolve var
    ILSAddr: (exp:lval)
    ILSNew: (type:lt, args:le)
    ILSStruct: (type:lt, args:le)
    ILSField: (exp:le)
    ILSDo: (func:lfarg, args:le)
    ILSPrim: (op:lprim, args:le)
    ILSSizeof: (type:lt)
    ILSTagof: (name:lclass)
    ILSAs: (exp:le, type:lt)
    ILSFn: (ref:fn)
    ILiteral: ()
    IExp: (_:le)

  ;For resolving functions in ls-fn forms
  resolve fn :
    IVar: resolve function

  ;For resolving labels in label/goto forms
  resolve lbl :
    IVar: resolve label

  ;For resolving the lvalue expression in a set form
  resolve lval :
    IVar: resolve var
    ILSDeref: (exp:le)
    ILSSlot: (exp:le index:le)
    ILSField: (exp:le)

  ;For resolving the name argument of a prim form
  resolve lprim :
    IVar: resolve ls-prim

  ;For resolving the function argument of a do form
  resolve lfarg :
    ILSOfT: (class:le, args:t)
    + le

  ;For resolving a LoStanza type
  resolve lt :
    IVar: resolve raw-ls-class
    ILSOfT: (class:lclass, args:t)
    ILSRefT: (type:t)
    IExp: (_:lt)
  resolve lclass :
    IVar: resolve ls-class

;============================================================
;===================== Engine ===============================
;============================================================

deftype Engine
defmulti new-definitions (eng:Engine, e:IExp) -> False
defmulti push-scope (eng:Engine) -> False
defmulti pop-scope (eng:Engine) -> False
defmulti resolve (e:IVar, eng:Engine, type:Symbol) -> IExp
defmulti resolve (e:Int|False, eng:Engine, type:Symbol) -> Int|False
defmulti qualified-imports (eng:Engine) -> Tuple<Symbol>

defn Engine (current-symtable:SymbolTable,
             symtables:SymbolTables,
             priority:False|(Symbol -> Int),
             errors:Vector<ResolveError>) :
  ;All packages that need to be imported
  ;due to package-qualified identifiers.
  val import-set = HashSet<Symbol>()  

  ;Type predicates
  defn type-pred (f: EType -> True|False) : fn* (e:VEntry) : f(type(e))
  val var? = type-pred({_ is LValE|LVarE|LFnE|ValE|VarE|FnE|MultiE})
  val mvar? = type-pred({_ is LVarE|VarE})
  val fn? = type-pred({_ is LFnE|FnE|MultiE})
  val multi? = type-pred({_ is MultiE})
  val type? = type-pred({_ is TVarE|CapVarE|TypeE|LTypeE})
  val class? = type-pred({_ is TypeE|LTypeE})
  val hs-class? = type-pred({_ is TypeE})
  val ls-class? = type-pred({_ is LTypeE})               
  val tvar? = type-pred({_ is TVarE|CapVarE})
  val capvar? = type-pred({_ is CapVarE})
  val label? = type-pred({_ is LabelE})

  ;Resolve a variable of the given type.
  ;Result can be multiple entries.
  defn resolve-many (e:IVar, pred?:VEntry -> True|False, base?:True|False) -> List<VEntry> :
    val [package-name, local-name] = qualifier(name(e))
    match(package-name) :
      (package-name:Symbol) :        
        if package-name == `\|| :
          resolve-top(local-name)        
        else : 
          match(symtables[package-name]) :
            (t:SymbolTable) : resolve-qualified(t, package-name, local-name)
            (_:False) : throw(BadQualifyPackage(name(e), info(e)))
      (package-name:False) :
        resolve-unqualified(local-name)
    where :
      ;Prune by priority
      defn prune-low-priority (es:Seqable<VEntry>) :
        match(priority:Symbol -> Int) :
          defn max-priority (es:Seqable<VEntry>) : maximum(seq(priority{package(_)}, es))
          val [es, max-p] = fork-on-seq(es, to-tuple, max-priority)
          filter({priority(package(_)) == max-p}, es)
        else :
          es
        
      ;Return type-appropriate entries
      defn return-pruned (es:Seqable<VEntry>) :
        val es* = filter(pred?, es)
        if empty?(es*) : throw(NoResolve(name(e), info(e)))
        else : to-list(prune-low-priority(es*))

      ;Qualified form: /mysymbol
      defn resolve-top (name:Symbol) :
        return-pruned(base(current-symtable, name))

      ;Qualified form: mypackage/mysymbol
      defn resolve-qualified (table:SymbolTable, package-name:Symbol, name:Symbol) :
        add(import-set, package-name)
        return-pruned $ for e in base(table,name) filter :
          visibility(e) is Public|Protected and
          package(e) == package(table)

      ;Standard unqualified symbol
      defn resolve-unqualified (name:Symbol) :
        if base? :
          resolve-top(name)
        else :
          val es = for layer in current-symtable[name] first :
            val es* = filter(pred?, layer)
            if empty?(es*) : None()
            else : One(es*)
          if empty?(es) : throw(NoResolve(/name(e), info(e)))
          else : to-list(prune-low-priority(value!(es)))
  defn resolve-many (e:IVar, pred?:VEntry -> True|False) -> List<VEntry> :
    resolve-many(e, pred?, false)

  ;Resolve a variable of the given type.
  ;Result must be a single unambiguous entry.
  defn resolve-one (e:IVar, pred?:VEntry -> True|False, base?:True|False) -> VEntry :
    val es = resolve-many(e, pred?, base?)
    if empty?(tail(es)) : head(es)
    else : throw(AmbResolve(name(e), info(e), es))
  defn resolve-one (e:IVar, pred?:VEntry -> True|False) -> VEntry :
    resolve-one(e, pred?, false)

  ;Resolve a variable in the immediate scope.
  ;Guaranteed to not be a top-level scope. (So no need for priority pruning.)
  defn resolve-immediate (e:IVar, pred?:VEntry -> True|False) :
    val es = to-list(filter(type?, immediate(current-symtable, name(e))))
    if empty?(es) : throw(NoResolve(name(e), info(e)))
    else if one?(es) : head(es)
    else : throw(AmbResolve(name(e), info(e), es))

  ;Accumulate errors
  defn catch-error<?T> (f:() -> ?T, default:?T) :
    try :
      f()
    catch (ex:ResolveError) :
      add(errors, ex)
      default

  new Engine :
    defmethod qualified-imports (this) :
      to-tuple(import-set)
    defmethod new-definitions (this, e:IExp) :        
      let loop (e:IExp = e) :
        match(e:VarN) : define(current-symtable, n(e))
        else : do(loop, e)
    defmethod push-scope (this) :
      push-scope(current-symtable)
    defmethod pop-scope (this) :
      pop-scope(current-symtable)
    defmethod resolve (e:IVar, this, type:Symbol) :
      ;Return a list of entries
      defn return (es:List<VEntry>) :
        if one?(es) : return(head(es))
        else : Mix(map(return,es), info(e))
      defn return (ventry:VEntry) :
        VarN(n(ventry), info(e))

      within catch-error(e) :  
        switch(type) :
          `var :
            val vs = resolve-many(e,var?)
            if one?(vs) : return(head(vs))
            else if all?(fn?, vs) : return(vs)
            else : throw(AmbResolve(name(e), info(e), vs))
          `mutable-var :
            val v = resolve-one(e,var?)
            if not mvar?(v) : throw(NotMutable(name(e), info(e), v))
            else : return(v)
          `multi :
            return(resolve-many(e,multi?,true))
          `function :
            val vs = resolve-many(e,var?)
            if one?(vs) :
              val v = head(vs)
              if fn?(v) : return(v)
              else : throw(NotFn(name(e),info(e),v))
            else if all?(fn?, vs) : return(vs)
            else : throw(AmbResolve(name(e), info(e), vs))
          `type :
            val v = resolve-one(e,type?)
            if class?(v) : Raw(return(v), info(e))
            else : return(v)
          `class :
            val v = resolve-one(e,type?,true)
            if class?(v) : return(v)
            else : throw(NotClass(name(e),info(e),v))
          `capvar :
            val v = resolve-immediate(e, type?)
            if capvar?(v) : return(v)
            else : throw(NotCapVar(name(e), info(e), v))          
          `raw-hs-class :
            val v = resolve-one(e,type?,true)
            if hs-class?(v) : Raw(return(v), info(e))
            else : throw(NotHSClass(name(e),info(e),v))
          `hs-class :
            val v = resolve-one(e,type?,true)
            if hs-class?(v) : return(v)
            else : throw(NotHSClass(name(e),info(e),v))
          `raw-ls-class :
            val v = resolve-one(e,type?,true)
            if ls-class?(v) : Raw(return(v), info(e))
            else : throw(NotLSClass(name(e),info(e),v))
          `ls-class :
            val v = resolve-one(e,type?,true)
            if ls-class?(v) : return(v)
            else : throw(NotLSClass(name(e),info(e),v))
          `label :
            return(resolve-one(e,label?))          
          `prim :
            throw(NotPrim(name(e),info(e))) when not primitive?(name(e))            
            e
          `ls-prim :
            throw(NotLSPrim(name(e),info(e))) when not ls-primitive?(name(e))            
            e
    defmethod resolve (e:Int|False, this, type:Symbol) :
      fatal("Illegal argument") when type != `this
      val es = to-list(filter(var?, immediate(current-symtable, `this)))
      fatal("Improper instance method.") when length(es) != 1
      n(head(es))

defn add-qualified-imports (ipackage:IPackage, imps:Tuple<Symbol>) :
  ;Set of imports
  val imports = HashSet<IImport>(name-hash, name-equal?) where :
    defn name-hash (i:IImport) : hash(package(i))
    defn name-equal? (a:IImport, b:IImport) : package(a) == package(b)

  ;Add existing imports
  add-all(imports, /imports(ipackage))

  ;Add new imports
  for imp in imps do :
    add(imports, IImport(imp)) when imp != name(ipackage)      

  ;Add imports    
  sub-imports(ipackage, to-tuple(imports))  

;============================================================
;=================== Symbol Tables ==========================
;============================================================

deftype SymbolTables
defmulti get (st:SymbolTables, package:Symbol) -> SymbolTable|False
defmulti package-exports (st:SymbolTables) -> Tuple<PackageExports>
defmulti new-ipackages (st:SymbolTables) -> Tuple<IPackage>
defmulti load-conditional-dependencies (st:SymbolTables) -> Vector<Symbol>

defn SymbolTables (packages:Tuple<IPackage|PackageExports>, env:Env, errors:Vector<ResolveError>) :
  ;Table holding packages
  val pkg-table = HashTable<Symbol,IPackage|PackageExports|False>()
  
  ;Accumulator holding new ipackages loaded during the resolution process
  val new-ipackages = Vector<IPackage>()

  ;Load the given package from the environment if it has
  ;already been loaded. Recursively load all of its dependencies as well.
  defn load-package (name:Symbol) -> IPackage|PackageExports|False :   
    if not key?(pkg-table, name) :
      val p = imported-package(env, name)
      pkg-table[name] = p
      match(p:IPackage|PackageExports) :
        load-dependencies(p)      
    pkg-table[name]

  ;Load all dependencies of a package
  defn load-dependencies (p:IPackage|PackageExports) :
    match(p) :
      (p:IPackage) :
        add(new-ipackages, p)
        do(load-package{package(_)}, imports(p))
      (p:PackageExports) :
        do(load-package, imported-packages(p))

  ;Initialize with source packages
  for p in packages do :
    match(p) :
      (p:IPackage) : pkg-table[name(p)] = p
      (p:PackageExports) : pkg-table[package(p)] = p
  do(load-dependencies, packages)

  ;Ensure that core is loaded.
  load-package(`core)

  ;Construct a symbol table from a source package.
  defn make-symtable (p:IPackage) -> SymbolTable :
    ;Create and initialize symboltable with base mappings
    val symtable = SymbolTable(name(p), namemap(p))
    ;Evaluate all imports for the symbol table
    for imp in imports(p) do :
      defn visible? (e:VEntry|Export) :
        if import-private?(imp) : true
        else : visibility(e) is Public
      val package-name = package(imp)
      match(load-package(package-name)) :
        ;Imported a source file
        (p:IPackage) :
          import(symtable, filter(visible?, toplevel(namemap(p))), prefix(imp))
        ;Imported a .pkg file.
        (p:PackageExports) :
          import(symtable, filter(visible?, exports(p)), prefix(imp))
        ;Could not resolve the imported package.
        (f:False) :
          add(errors, NoPackage(package-name, name(p), info(imp)))
    ;Return new symbol table      
    symtable
    
  ;Construct a symbol table from a .pkg file.        
  defn make-symtable (p:PackageExports) -> SymbolTable :
    SymbolTable(package(p), exports(p))

  ;Create cached symbol tables
  val symtables = within package-name = HashTable-init<Symbol,SymbolTable|False>() :
    match(load-package(package-name)) :
      (p:IPackage|PackageExports) : make-symtable(p)
      (p:False) : false

  ;Return symbol tables structure
  new SymbolTables :
    defmethod get (this, package:Symbol) :
      symtables[package]
    defmethod package-exports (this) :
      to-tuple $ filter-by<PackageExports>(values(pkg-table))
    defmethod new-ipackages (this) :
      val ps = to-tuple(new-ipackages)
      clear(new-ipackages)
      ps
    defmethod load-conditional-dependencies (this) -> Vector<Symbol> :
      val ds = conditional-dependencies(env, keys(pkg-table))
      val newly-loaded = Vector<Symbol>()
      for d in ds do :
        match(load-package(d)) :
          (l:PackageExports) : add(newly-loaded, package(l))
          (l:IPackage) : add(newly-loaded, name(l))
          (l:False) : add(errors, NoConditionalPackage(d))
      ;Return newly loaded
      newly-loaded

deftype SymbolTable
defmulti package (t:SymbolTable) -> Symbol
defmulti import (t:SymbolTable, entries:Seqable<VEntry>, prefix:Tuple<IPrefix>) -> False
defmulti import (t:SymbolTable, exports:Seqable<Export>, prefix:Tuple<IPrefix>) -> False
defmulti push-scope (t:SymbolTable) -> False
defmulti pop-scope (t:SymbolTable) -> False
defmulti define (t:SymbolTable, n:Int) -> False
defmulti get (t:SymbolTable, name:Symbol) -> List<List<VEntry>>
defmulti base (t:SymbolTable, name:Symbol) -> List<VEntry>
defmulti immediate (t:SymbolTable, name:Symbol) -> List<VEntry>

defn SymbolTable (package-name:Symbol, base:NameMap|Tuple<Export>) :
  ;Level Table
  val table = MultilevelTable<Symbol, List<VEntry>>()
  val basetable = HashTable<Symbol, List<VEntry>>(List())
  defn add-entry (e:VEntry, prefix:String|False) :
    val name* = add-prefix(prefix, name(e))
    table[name*] =
      if key?(table, name*) : cons(e, table[name*])
      else : List(e)
    if level(table) == 0 :
      update(basetable, cons{e,_}, name*)
      false
  defn add-entries (es:Seqable<VEntry>) :
    do(add-entry{_, false}, es)

  ;Importing a sequence of entries
  defn import (es:Seqable<VEntry>, prefix:Tuple<IPrefix>) :
    val ptable = PrefixTable(prefix)
    for e in es do :
      add-entry(e, ptable[name(e)])

  ;Initializing the symbol table
  match(base) :
    (basemap:NameMap) : add-entries(toplevel(basemap))
    (baseexs:Tuple<Export>) : add-entries(seq(VEntry,baseexs))

  ;Return bindings structure
  new SymbolTable :
    defmethod package (this) :
      package-name
    defmethod import (this, entries:Seqable<VEntry>, prefix:Tuple<IPrefix>) :
      import(entries, prefix)
    defmethod import (this, exports:Seqable<Export>, prefix:Tuple<IPrefix>) :
      import(seq(VEntry,exports), prefix)
    defmethod push-scope (this) :
      push-level(table)
    defmethod pop-scope (this) :
      pop-level(table)
    defmethod define (this, n:Int) :
      val basemap = base as NameMap
      add-entry(basemap[n], false)
    defmethod get (this, name:Symbol) :
      get-all(table,name)
    defmethod base (this, name:Symbol) :
      get?(basetable, name, List())
    defmethod immediate (this, name:Symbol) :
      if key?(table,name) : table[name]
      else : List()
    defmethod print (o:OutputStream, this) :
      val o2 = IndentedStream(o)
      val o3 = IndentedStream(o, 4)
      print(o, "symbol table for package %~ :" % [package-name])
      for e in basetable do :
        lnprint(o2, "%~ : " % [key(e)])
        lnprints(o3, value(e))      

;============================================================
;==================== Prefixes ==============================
;============================================================

deftype PrefixTable
defmulti get (t:PrefixTable, name:Symbol) -> String|False

defn PrefixTable (prefixes:Tuple<IPrefix>) :
  var all-prefix:String|False = false
  val table = HashTable<Symbol,String>()
  for e in prefixes do :
    match(names(e)) :
      (names:False) : all-prefix = prefix(e)
      (names:Tuple<Symbol>) : do({table[_] = prefix(e)}, names)
  new PrefixTable :
    defmethod get (this, name:Symbol) :
      match(get?(table, name)) :
        (s:String) : s
        (s:False) : all-prefix
        
defn add-prefix (prefix:String|False, x:Symbol) :
  match(prefix:String) :
    val name* = append(prefix,name(x))
    match(x) :
      (x:StringSymbol) : to-symbol(name*)
      (x:GenSymbol) : gensym(name*)
  else :
    x
    
;============================================================
;======================= Utilities ==========================
;============================================================

defn one? (xs:List) :
  not empty?(xs) and empty?(tail(xs))

;============================================================
;===================== Exceptions ===========================
;============================================================

public deftype ResolveError <: Exception
public defmulti info (e:ResolveError) -> FileInfo|False

public defstruct NoResolve <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
public defstruct BadQualifyPackage <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
public defstruct NoPackage <: ResolveError :
  name:Symbol
  source-package:Symbol
  info:FileInfo|False with: (as-method => true)
public defstruct NoConditionalPackage <: ResolveError :
  name:Symbol
public defstruct AmbResolve <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
  entries:List<VEntry>
public defstruct NotMutable <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotFn <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotClass <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotHSClass <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotLSClass <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct NotPrim <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
public defstruct NotLSPrim <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
public defstruct NotCapVar <: ResolveError :
  name:Symbol
  info:FileInfo|False with: (as-method => true)
  entry:VEntry
public defstruct MissingType <: ResolveError :
  src-package:Symbol
  typeid:TypeId

defmethod print (o:OutputStream, e:MissingType) :
  val FMT = "Missing type: The %~ package requires the %_/%_ type to be defined."
  print(o, FMT % [src-package(e), package(typeid(e)), name(typeid(e))])

defmethod print (o:OutputStream, e:NoResolve) :
  val FMT = "%_Could not resolve %~."
  print(o, FMT % [infostr(e), name(e)])

defmethod print (o:OutputStream, e:BadQualifyPackage) :
  val [package,n] = qualifier(name(e))
  val FMT = "%_Could not resolve %~. The package %~ could not be found."
  print(o, FMT % [infostr(e), name(e), package])

defmethod print (o:OutputStream, e:NoPackage) :
  val FMT = "%_Could not find package %~, which is imported by package %~."
  print(o, FMT % [infostr(e), name(e), source-package(e)])

defmethod print (o:OutputStream, e:NoConditionalPackage) :
  val FMT = "Conditionally-imported package %_ could not be found."
  print(o, FMT % [name(e)])

defmethod print (o:OutputStream, e:AmbResolve) :
  val FMT = "%_Ambiguous reference to %~. Possibilities include:"
  print(o, FMT % [infostr(e), name(e)])
  val o2 = IndentedStream(o)
  for v in entries(e) do :
    val FMT = "%_%~ defined in package %~"
    lnprint(o2, FMT % [infostr(v), name(v), package(v)])

defmethod print (o:OutputStream, e:NotMutable) :
  val FMT = "%_Expected %~ to be a mutable variable, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])
  
defmethod print (o:OutputStream, e:NotFn) :
  val FMT = "%_Expected %~ to be a function, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])
  
defmethod print (o:OutputStream, e:NotClass) :
  val FMT = "%_Expected %~ to be a type, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])

defmethod print (o:OutputStream, e:NotHSClass) :
  val FMT = "%_Expected %~ to be a HiStanza type, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])
  
defmethod print (o:OutputStream, e:NotLSClass) :
  val FMT = "%_Expected %~ to be a LoStanza type, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])

defmethod print (o:OutputStream, e:NotCapVar) :
  val FMT = "%_Expected %~ to be a captured type variable, but %_"
  print(o, FMT % [infostr(e), name(e), descriptor(entry(e))])
  
defmethod print (o:OutputStream, e:NotPrim) :
  val FMT = "%_%~ is not a recognized HiStanza primitive."
  print(o, FMT % [infostr(e), name(e)])

defmethod print (o:OutputStream, e:NotLSPrim) :
  val FMT = "%_%~ is not a recognized LoStanza primitive."
  print(o, FMT % [infostr(e), name(e)])

defn descriptor (e:VEntry) :
  val typestr = match(type(e)) :
    (t:ValE) : "HiStanza value"
    (t:VarE) : "HiStanza variable"
    (t:TVarE) : "type variable"
    (t:CapVarE) : "captured type variable"
    (t:TypeE) : "HiStanza type"
    (t:MultiE) : "multi"
    (t:FnE) : "HiStanza function"
    (t:LValE) : "LoStanza value"
    (t:LVarE) : "LoStanza variable"
    (t:LFnE) : "LoStanza function"
    (t:LTypeE) : "LoStanza type"
    (t:FieldE) : "field"
    (t:LabelE) : "label"
  val defstr = match(info(e)) :
    (info:FileInfo) : " at %_" % [info]
    (info:False) : ""
  "%~ defined%_ in package %~ is a %_." % [name(e), defstr, package(e), typestr]

defn infostr (info:FileInfo|False) :
  match(info) :
    (info:FileInfo) : "%_: " % [info]
    (info:False) : ""
defn infostr (e:ResolveError) :
  infostr(info(e))
defn infostr (e:VEntry) :
  infostr(info(e))

public defstruct ResolveErrors <: Exception :
  errors: Vector<ResolveError>
defmethod print (o:OutputStream, e:ResolveErrors) :
  print(o, "%n" % [errors(e)])
