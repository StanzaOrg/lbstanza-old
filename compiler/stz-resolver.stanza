;See License.txt for details about licensing.

defpackage stz/resolver :
   import core
   import collections
   import stz/il-ir
   import stz/namemap
   import stz/primitives
   import stz/utils
   import stz/pkg-ir
   import stz/algorithms
   import stz/pkg

;============================================================
;===================== Defresolver ==========================
;============================================================

#use-overlay(stz/resolver-lang)
defresolver resolve-exp (e:IExp, eng:Engine) :

   ;     Resolving Stanza Expressions
   ;     ----------------------------   
   ;Resolve top level expressions
   resolve te :
      IBegin: (exps:te)
      IDefType: {args:+, parent:t, children:te}
      IDefChild: (name:c, {args:+, parent:t})
      IDef: (type:t, value:e)
      IDefVar: (type:t, value:e)
      IDefn: {targs:+, args:+, a1:t, a2:t, body:e}
      IDefmulti: {targs:+, a1:t, a2:t}
      IDefmethod: (multi:m, {targs:+, args:+, a1:t, a2:t, body:e})
      IPublic: (exp:te)
      IProtected: (exp:te)
      + ltc
      + e

   ;Resolve Stanza expressions
   resolve e :
      Let: (def:e, body:e)
      LetRec: (defns:f+, defns:f, body:e)
      ILet: {exp:e}
      IDef: (type:t, value:e, name:+)
      IDefVar: (type:t, value:e, name:+)
      IFn: (a1:t, a2:t, {args:+, body:e})
      IBranch: (types:t, {args:+, body:e})
      INew: (class:pt, methods:dm)
      ICast: (exp:e, type:t)
      IUpCast: (exp:e, type:t)
      ISet: (name:v, value:e)
      IPrim: (op:prim, args:e)
      IDo: (func:farg, args:e)
      IVar: resolve var
      ILiteral: ()
      INone: ()
      IMulti: (_:e)
      IBegin: (_:e)
      IMatch: (_:e)
      ITuple: (_:e)      

   ;Stanza Nested functions
   resolve f :
      IDefn: {targs:+, args:+, a1:t, a2:t, body:e}

   ;Function arguments used in do forms
   resolve farg :
      IOf: (class:e, args:t)
      + e

   ;Nested defmethods in new forms
   resolve dm :
      IDefmethod: (multi:m, {targs:+, args:+, a1:t, a2:t, thisn:this, body:e})

   ;For resolving multis in defmethod forms
   resolve m :
      IVar: resolve multi

   ;For resolving the this argument in nested defmethod forms
   resolve this (Int|False) :
      Int|False: resolve this

   ;For resolving mutable variables in set forms
   resolve v :
      IVar: resolve mutable-var

   ;For resolving HiStanza primitive
   resolve prim :
      IVar: resolve prim

   ;For scanning for nested functions in a letrec form
   define f+ :
      IDefn: (name:+)

   ;For scanning for defined blocks in a labels form
   define blk+ :
      ILSLabeledBlock: (name:+)

   ;     Resolving Types
   ;     ---------------
   ;Resolving a HiStanza type
   resolve t :
      IVar: resolve type
      ICap: (name:cap)
      IOf: (class:c, args:t)
      IExp: (_:t)
      
   ;For resolving class in a A<X> form
   resolve c :
      IVar: resolve class

   ;For resolving the captured type variable
   resolve cap :
      IVar: resolve capvar

   ;     Resolving Parent Types
   ;     ----------------------
   resolve pt :
      IVar: resolve raw-hs-class
      IOf: (class:hclass, args:t)
      IExp: (_:pt)
   resolve hclass :
      IVar: resolve hs-class

   ;     Resolving LoStanza
   ;     ------------------
   ;For resolving top level LoStanza commands
   resolve ltc :
      IBegin: (exps:ltc)
      ILSDef: (exp:le, type:lt)
      ILSDefVar: (exp:le, type:lt)
      ILSDefType: {args:+, parent:pt, types:lt, rtype:lt}
      ILSExtern: (type:lt)
      ILSDefn: {targs:+, a1:lt, a2:lt, args:+, body:lc}
      ILSExternFn: {a1:lt, a2:lt, args:+, body:lc}
      ILSDefmethod: (multi:m, {targs:+, a1:lt, a2:lt, args:+, body:lc})
      + lc

   ;For resolving LoStanza commands
   resolve lc :
      IBegin: (exps:lc)
      ILSSet: (exp:lval, value:le)
      ILSLabels: {blocks:blk+, blocks:lc}
      ILSLabeledBlock: (types:lt, {args:+, body:lc})
      ILSGoto: (name:lbl, args:le)
      ILSReturn: (exp:le)
      ILSLet: {comm:lc}
      ILSIf: (pred:le, {conseq:lc}, {alt:lc})
      ILSMatch: (args:le, branches:lc)
      ILSBranch: (types:lt, {args:+, body:lc})
      ILSDef: (exp:le, type:lt, name:+)
      ILSDefVar: (exp:le, type:lt, name:+)
      ILSDo: (func:lfarg, args:le)
      ILSDoInStack: (ret:lt, func:lfarg, args:le)
      ILSDoStack: (ret:lt, func:le, arg:le)
      ILSPrim: (op:lprim, args:le)
      ILSCallC: (_:le)

   ;For resolving a LoStanza expression
   resolve le :
      IVar: resolve var
      ILSAddr: (exp:lval)
      ILSNew: (type:lt, args:le)
      ILSStruct: (type:lt, args:le)
      ILSField: (exp:le)
      ILSDo: (func:lfarg, args:le)
      ILSDoInStack: (ret:lt, func:lfarg, args:le)
      ILSDoStack: (ret:lt, func:le, arg:le)
      ILSPrim: (op:lprim, args:le)
      ILSSizeof: (type:lt)
      ILSTagof: (name:lclass)
      ILSAs: (exp:le, type:lt)
      ILSFn: (ref:fn)
      ILiteral: ()
      IExp: (_:le)

   ;For resolving functions in ls-fn forms
   resolve fn :
      IVar: resolve function

   ;For resolving labels in label/goto forms
   resolve lbl :
      IVar: resolve label

   ;For resolving the lvalue expression in a set form
   resolve lval :
      IVar: resolve var
      ILSDeref: (exp:le)
      ILSSlot: (exp:le index:le)
      ILSField: (exp:le)

   ;For resolving the name argument of a prim form
   resolve lprim :
      IVar: resolve ls-prim

   ;For resolving the function argument of a do form
   resolve lfarg :
      ILSOfT: (class:le, args:t)
      + le

   ;For resolving a LoStanza type
   resolve lt :
      IVar: resolve raw-ls-class
      ILSOfT: (class:lclass, args:t)
      ILSRefT: (type:t)
      IExp: (_:lt)
   resolve lclass :
      IVar: resolve ls-class


;============================================================
;============== ScopeBucket Datastructure ===================
;============================================================
;Represents the environment for a single package

deftype Bucket
defmulti add (b:Bucket, n:Int, x:Symbol, scope:Int) -> False
defmulti get (b:Bucket, x:Symbol, scope:Int) -> List<Int>

defn Bucket () :
   val table = HashTable<[Symbol,Int], List<Int>>()
   new Bucket :
      defmethod add (this, n:Int, x:Symbol, scope:Int) :
         table[[x,scope]] = cons(n, this[x,scope])
      defmethod get (this, x:Symbol, scope:Int) :
         get?(table, [x,scope], List())

deftype ScopeBucket
defmulti add (s:ScopeBucket, x:Symbol, i:Int) -> False
defmulti begin-scope (s:ScopeBucket) -> False
defmulti end-scope (s:ScopeBucket) -> False
defmulti get (s:ScopeBucket, x:Symbol, filter:Int -> True|False) -> List<Int>
defmulti get-local (s:ScopeBucket, x:Symbol, filter:Int -> True|False) -> List<Int>
defmulti get-top (s:ScopeBucket, x:Symbol, filter:Int -> True|False) -> List<Int>
defmulti get-all-top (s:ScopeBucket) -> List<Int>

defn ScopeBucket () :
   val bucket = Bucket()
   val scopes = Vector<Int>()
   val scope-counter = to-seq(1 to false)
   var top-defs:List<Int> = List()
   add(scopes, next(scope-counter))

   new ScopeBucket :
      defmethod add (this, x:Symbol, n:Int) :
         val s = peek(scopes)         
         add(bucket, n, x, s)
         if s == scopes[0] :
            top-defs = cons(n, top-defs)
      defmethod begin-scope (this) :
         add(scopes, next(scope-counter))
      defmethod end-scope (this) :
         pop(scopes)
         false
      defmethod get (this, x:Symbol, f:Int -> True|False) :
         label<List<Int>> return :
            for s in in-reverse(scopes) do :
               val es = filter(f, bucket[x, s])
               return(to-list(es)) when not empty?(es)
            List()   
      defmethod get-local (this, x:Symbol, f:Int -> True|False) :
         to-list(filter(f, bucket[x, peek(scopes)]))
      defmethod get-top (this, x:Symbol, f:Int -> True|False) :
         to-list(filter(f, bucket[x, scopes[0]]))
      defmethod get-all-top (this) :
         top-defs

;============================================================
;================= Prefixer Datastructure ===================
;============================================================
;Creates the prefix environment given a set of Prefix statements

deftype Prefixer
defmulti set-all-prefix (p:Prefixer, prefix:Symbol) -> False
defmulti set-prefix (p:Prefixer, xs:List<Symbol>, prefix:Symbol) -> False
defmulti prefix (p:Prefixer, x:Symbol) -> Symbol

defn Prefixer () :
   var all-prefix:String|False = false
   val prefix-table = HashTable<Symbol,String>()

   new Prefixer :
      defmethod set-all-prefix (this, prefix:Symbol) :
         all-prefix = to-string(prefix)
         clear(prefix-table)
      defmethod set-prefix (this, xs:List<Symbol>, prefix:Symbol) :
         for x in xs do :
            prefix-table[x] = to-string(prefix)
      defmethod prefix (this, x:Symbol) :
         if key?(prefix-table, x) :
            symbol-join([prefix-table[x], x])
         else if all-prefix is-not False :
            symbol-join([all-prefix, x])
         else :
            x

defn Prefixer (ps:List<IPrefix>) :
   defn prefix! (p:IPrefix) : name(prefix(p) as IVar)
   val prefixer = Prefixer()
   for p in ps do :
      match(names(p)) :
         (ns:False) : set-all-prefix(prefixer, prefix!(p))
         (ns:List<IVar>) : set-prefix(prefixer, map(name, ns), prefix!(p))
   prefixer


;============================================================
;=============== Environment Datastructure ==================
;============================================================

deftype Environment
defmulti public-scope (e:Environment, name:Symbol) -> ScopeBucket
defmulti protected-scope (e:Environment, name:Symbol) -> ScopeBucket
defmulti private-scope (e:Environment, name:Symbol) -> ScopeBucket

defn resolve-with-environment (idmap:IdMap,
                               nm:NameMap,
                               exps:List<LoadPackage|LetPackage>,
                               f:(Environment,LetPackage) -> LetPackage) -> List<LoadPackage|LetPackage> :
   ;(imported[n] = false) => private scope n has not computed imports yet
   val imported = HashTable<Symbol,True|False>(false)
   val pkg-imports = HashTable<Symbol,List<IImport>>()
   val public-scopes = HashTable<Symbol, ScopeBucket>()
   val protected-scopes = HashTable<Symbol, ScopeBucket>()
   val private-scopes = HashTable<Symbol, ScopeBucket>()
   val renamed = HashTable<Symbol, LoadPackage>()
   val loaded = Vector<Symbol>()

   ;Compute scopes for all immediate packages
   defn compute-scope (e:LoadPackage) :
      val pkg* = rename(idmap, pkg(e))
      renamed[name(e)] = LoadPackage(filename(e), pkg*, info(e))
      val public-scope = ScopeBucket()
      val protected-scope = ScopeBucket()
      public-scopes[name(e)] = public-scope
      protected-scopes[name(e)] = protected-scope
      for comm in filter({_ is DefInfo}, comms(pkg*)) do :
         val c = comm as DefInfo
         val [n, p, name, vis, cat, info] = [n(c), package(c), name(c), visibility(c), category(c), info(c)]
         register(nm, n, p, name, vis, cat, info)
         add(protected-scope, name, n) when vis is Protected|Public
         add(public-scope, name, n) when vis is Public
   ;Create empty scopes
   for e in exps do :
      match(e) :
         (e:LoadPackage) :
            compute-scope(e)
         (e:LetPackage) :
            val n = name(e)
            public-scopes[n] = ScopeBucket()
            protected-scopes[n] = ScopeBucket()
            private-scopes[n] = ScopeBucket()
            pkg-imports[n] = imports(e) as List<IImport>
   for v in globals(nm) do :
      val [n, p, name, vis] = [n(v), package(v), name(v), visibility(v)]
      add(private-scopes[p], name, n) when vis is Private|Protected|Public
      add(protected-scopes[p], name, n) when vis is Protected|Public
      add(public-scopes[p], name, n) when vis is Public

   ;Ensure that a package is loaded and abort if it isn't
   defn ensure-loaded (pkg-name:Symbol) :
      if not key?(public-scopes, pkg-name) :
         val filename = pkg-filename(pkg-name)
         val pkg = deserialize-pkg(filename)
         add(loaded, name(pkg))
         compute-scope(LoadPackage(filename, pkg, false))
         for i in imports(pkg) do :
            ensure-loaded(name(i))

   ;Ensure that we evaluated all import statements for the package
   defn ensure-imported (pkg-name:Symbol) :
      if not imported[pkg-name] :
         val scope = private-scopes[pkg-name]
         for i in pkg-imports[pkg-name] do :
            val import-name = name!(package(i))
            ensure-loaded(import-name)
            val prefixer = Prefixer(prefix(i) as List<IPrefix>)
            for n in get-all-top(public-scopes[import-name]) do :
               add(scope, prefix(prefixer, name(nm[n])), n)
         imported[pkg-name] = true

   ;Create environment
   val environment = new Environment :
      defmethod public-scope (this, name:Symbol) :
         ensure-loaded(name)
         public-scopes[name]
      defmethod protected-scope (this, name:Symbol) :
         ensure-loaded(name)
         protected-scopes[name]
      defmethod private-scope (this, name:Symbol) :
         ensure-imported(name)
         private-scopes[name]

   ;Resolve all expressions
   let :
      var exps* = for e in exps map :
         match(e) :
            (e:LetPackage) : f(environment, e)
            (e:LoadPackage) : (ensure-loaded(name(e)), name(e))
      exps* = append(loaded, exps*)
      for e in exps* map :
         match(e) :
            (e:LetPackage) :
               e
            (name:Symbol) :
               val e = renamed[name]
               val pkg* = resolve(idmap, pkg(e))
               LoadPackage(filename(e), pkg*, info(e))

;============================================================
;=============== Ordering Engine ============================
;============================================================

defn order-packages (es:List<LoadPackage|LetPackage>) :
   ;Retrieve imports for a package
   defn pkg-imports (e:LoadPackage|LetPackage) :
      match(e) :
         (e:LoadPackage) : map(name, imports(pkg(e)))
         (e:LetPackage) : map(name!{package(_ as IImport)}, imports(e))

   ;Create natural ordering table
   val natural = HashTable<Symbol,Int>()
   for (e in es, i in 0 to false) do :
      natural[name(e)] = i

   ;Create dependencies table
   val dependencies = HashTable<KeyValue<Symbol,Symbol>,True|False>(false)
   val edges = transitive-closure $
      for e in es seq :
         name(e) => pkg-imports(e)
   for e in edges do :
      for v in value(e) do :         
         dependencies[key(e) => v] = true

   ;Before Ordering
   defn before? (a:LoadPackage|LetPackage, b:LoadPackage|LetPackage) :
      val an = name(a)
      val bn = name(b)
      match(dependencies[an => bn], dependencies[bn => an]) :
         (x:True, y:False) : false
         (x:False, y:True) : true
         (x, y) : natural[an] < natural[bn]

   ;Sort
   to-list(lazy-qsort(es, before?))

;============================================================
;=============== Resolution Engine ==========================
;============================================================

deftype Engine
defmulti new-definitions (eng:Engine, e:IExp) -> False
defmulti push-scope (eng:Engine) -> False
defmulti pop-scope (eng:Engine) -> False
defmulti resolve (e, eng:Engine, type:Symbol) -> ?

;Messages
val NO-RESOLVE = "%_Could not resolve %_."
val DEFINED-IN = "\n   %_%_ defined in package %_."
val AMB-REF = "%_Ambiguous reference to %_. Possibilities include:%*"
val BAD-SET = "%_Cannot assign to immutable value %_."
val BAD-CAP = "%_Cannot capture explicit type argument %_."
val NO-PACKAGE = "%_No package found with name %_."
val NOT-HS-CLASS = "%_Expected a HiStanza type here but received %_."
val NOT-LS-CLASS = "%_Expected a LoStanza type here but received %_."
val NOT-FN = "%_Expected a function here but received %_."
val NOT-LS-PRIM = "%_%_ is not a recognized LoStanza primitive."
val NOT-PRIM = "%_%_ is not a recognized Stanza primitive."

defn info-string (i:False|FileInfo) :
   match(i) :
      (i:False) : ""
      (i:FileInfo) : "%_: " % [i]

public defn resolve (nm:NameMap, exps:List<LetPackage|LoadPackage>) -> List<LetPackage|LoadPackage> :
   ;Error System
   val errors = Vector<?>()
   defn resolve-error (msg) :
      add(errors, msg)
      throw(new NotResolved)
   defn no-resolve (v:IVar) :
      resolve-error(NO-RESOLVE % [info-string(info(v)), name(v)])
   defn amb-resolve (v:IVar, ns:List<Int>) :
      val others = for n in ns seq :
         val e = nm[n]
         DEFINED-IN % [info-string(info(e)), name(e), package(e)]
      resolve-error(AMB-REF % [info-string(info(v)), name(v), others])
   defn not-mutable (v:IVar) :
      resolve-error(BAD-SET % [info-string(info(v)), name(v)])
   defn not-cap (v:IVar) :
      resolve-error(BAD-CAP % [info-string(info(v)), name(v)])
   defn no-package (info:False|FileInfo, name:Symbol) :
      resolve-error(NO-PACKAGE % [info-string(info), name])
   defn not-hs-class (v:IVar) :
      resolve-error(NOT-HS-CLASS % [info-string(info(v)), name(v)])
   defn not-ls-class (v:IVar) :
      resolve-error(NOT-LS-CLASS % [info-string(info(v)), name(v)])
   defn not-fn (v:IVar) :
      resolve-error(NOT-FN % [info-string(info(v)), name(v)])
   defn not-ls-prim (v:IVar) :
      resolve-error(NOT-LS-PRIM % [info-string(info(v)), name(v)])
   defn not-prim (v:IVar) :
      resolve-error(NOT-PRIM % [info-string(info(v)), name(v)])

   ;Namespace Utilities
   defn type-pred (f: EType -> True|False) -> Int -> True|False :
      fn (i:Int) :
         f(type(nm[i]))
   defn get-name (e:VarN) :
      name(nm[n(e)])

   ;Resolve a given package
   defn resolve (environment:Environment, p:LetPackage) -> LetPackage :
      ;Retrieve package scope
      val scope = private-scope(environment, name(p))

      ;Retrieve the scope indicated by the given package name
      val imported-packages = HashTable<Symbol,True>()
      defn get-qualified-scope (name:Symbol) -> ScopeBucket :
         if name == `\|| :
            scope
         else :
            imported-packages[name] = true
            protected-scope(environment, name)

      ;Resolve a given identifier
      defn resolve-name (name:Symbol, pass?: Int -> True|False) :
         val [package, local-name] = qualifier(name)
         match(package) :
            ;Package qualified identifiers access the top level protected scope.
            (package:Symbol) :
               val scope = get-qualified-scope(package)
               get-top(scope, local-name, pass?)
            ;Otherwise look in current scope
            (package:False) :
               scope[name, pass?]

      ;Resolve an identifier to a single item
      defn resolve-one (e:IVar, pass?: Int -> True|False) :
         val ns = resolve-name(name(e), pass?)
         val l = length(ns)
         if l == 0 : no-resolve(e)
         else if l == 1 : head(ns)
         else : amb-resolve(e, ns)

      ;Resolve an identifier to multiple items
      defn resolve-many (e:IVar, pass?: Int -> True|False) :
         val ns = resolve-name(name(e), pass?)            
         val l = length(ns)
         if l == 0 : no-resolve(e)
         else if l == 1 : head(ns)
         else : ns

      ;Resolve the body of the package
      val body* = resolve-exp{body(p), _} $ new Engine :
         defmethod new-definitions (this, e:IExp) :
            match(e) :
               (e:VarN) : add(scope, get-name(e), n(e))
               (e) : do(new-definitions{this, _}, e)

         defmethod push-scope (this) :
            begin-scope(scope)

         defmethod pop-scope (this) :
            end-scope(scope)

         defmethod resolve (e, this, type:Symbol) :
            val var? = type-pred({_ is LValE|LVarE|LFnE|ValE|VarE|FnE|MultiE})
            val mvar? = type-pred({_ is LVarE|VarE})
            val fn? = type-pred({_ is LFnE|FnE|MultiE})
            val multi? = type-pred({_ is MultiE})
            val type? = type-pred({_ is TVarE|CapVarE|TypeE|LTypeE})
            val class? = type-pred({_ is TypeE|LTypeE})
            val hs-class? = type-pred({_ is TypeE})
            val ls-class? = type-pred({_ is LTypeE})               
            val tvar? = type-pred({_ is TVarE|CapVarE})
            val capvar? = type-pred({_ is CapVarE})
            val label? = type-pred({_ is LabelE})

            try :
               switch {type == _} :
                  `var :
                     match(resolve-many(e, var?)) :
                        (n:Int) :
                           VarN(n, info(e))
                        (ns:List<Int>) :
                           if all?(fn?, ns) : Mix(map(VarN{_, info(e)}, ns), info(e))
                           else : amb-resolve(e, ns)
                  `mutable-var :
                     val n = resolve-one(e, var?)
                     not-mutable(e) when not mvar?(n)
                     VarN(n, info(e))                        
                  `multi :
                     match(resolve-many(e, multi?)) :
                        (n:Int) : VarN(n, info(e))
                        (ns:List<Int>) : Mix(map(VarN{_, info(e)}, ns), info(e))
                  `this :
                     head(scope[`this, var?])
                  `type :
                     val n = resolve-one(e, type?)
                     if class?(n) : Raw(VarN(n, info(e)), info(e))
                     else : VarN(n, info(e))                        
                  `capvar :
                     val ns = get-local(scope, name(e), tvar?)
                     if empty?(ns) : no-resolve(e)
                     else if capvar?(head(ns)) : VarN(head(ns), info(e))
                     else : not-cap(e)
                  `class :
                     val n = resolve-one(e, class?)
                     VarN(n, info(e))
                  `raw-hs-class :
                     val n = resolve-one(e, type?)
                     if hs-class?(n) : Raw(VarN(n, info(e)), info(e))
                     else : not-hs-class(e)
                  `hs-class :
                     val n = resolve-one(e, type?)
                     if hs-class?(n) : VarN(n, info(e))
                     else : not-hs-class(e)
                  `raw-ls-class :
                     val n = resolve-one(e, type?)
                     if ls-class?(n) : Raw(VarN(n, info(e)), info(e))
                     else : not-ls-class(e)
                  `ls-class :
                     val n = resolve-one(e, type?)
                     if ls-class?(n) : VarN(n, info(e))
                     else : not-ls-class(e)
                  `label :
                     val n = resolve-one(e, label?)
                     VarN(n, info(e))
                  `function :
                     match(resolve-many(e, var?)) :
                        (n:Int) :
                           if fn?(n) : VarN(n, info(e))
                           else : not-fn(e)
                        (ns:List<Int>) :
                           if all?(fn?, ns) : Mix(map(VarN{_, info(e)}, ns), info(e))
                           else : amb-resolve(e, ns)
                  `ls-prim :
                     if ls-primitive?(name(e)) : e
                     else : not-ls-prim(e)
                  `prim :
                     if primitive?(name(e)) : e
                     else : not-prim(e)
                  else :
                     fatal("Unknown resolver %~" % [type])
            catch (err:NotResolved) :
               e
               
      ;Compute all imported packages
      val imports* = let :
         for i in imports(p) as List<IImport> do :
            imported-packages[name!(package(i))] = true
         to-list $ for p in keys(imported-packages) seq :
            IImport(IVar(p, false), List(), false)

      ;Return new package with resolved body
      LetPackage(name(p), imports*, body*, info(p))

   ;Driver
   val idmap = IdMap()
   val resolved = resolve-with-environment(idmap, nm, exps, resolve)
   throw(ResolveError(errors)) when not empty?(errors)
   order-packages(resolved)

;============================================================
;===================== Exceptions ===========================
;============================================================

deftype NotResolved <: Exception

defstruct ResolveError <: Exception :
   msgs: Seqable
defmethod print (o:OutputStream, e:ResolveError) :
   print-all(o, join(msgs(e), "\n"))