defpackage stz/type-equations :
  import core
  import collections
  import stz/types

;<doc>=======================================================
;============================================================
;============================================================

Operations:

- Calling a function. Check whether a function can be
  called in the given scenario.

- Calling a function or expression. What are the injected
  expected types into each argument expression?

- Passing an argument to a function. Check whether one type
  is a subtype of another.

- Casting an expression to some type. Is the cast allowed?

- Matching an expression. Is the match type allowed?

- Defining a method. Is this an appropriate method for
  a multi?

- Injecting an expected type to an anonymous function. Retrieve
  the type of the function argument(s) from the injected type.

- Injecting an expected type to a tuple. What is the resulting
  injected types to each of the tuple elements?

- Destructuring a tuple. Given the type of an expression,
  what are the types of the destructured tuple elements.

- Determine whether a mixture of overloaded functions are
  disjoint and hence allowed to be mixed.

- Referencing an overloaded function. Which ones are
  appropriate. 

;============================================================
;=======================================================<doc>

;Represents a type equation.
public deftype TypeEqn

;Capture a specific variable n, to satisfy a <: b.
public defstruct CaptureEqn <: TypeEqn :
  n:Int
  variance:Variance
  a:Type
  b:Type

