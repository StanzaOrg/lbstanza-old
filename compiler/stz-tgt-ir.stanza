defpackage stz/tgt-ir :
   import core
   import collections
   import stz/imms
      
public defn ref-mask (ts:Seqable<Type>) :
   val mask = Vector<True|False>()
   var accum = 0
   for t in ts do :
      accum = accum + size(t)
      if accum % 8 == 0 :
         add(mask, t is RefType)
   mask

public defn to-bitmask (xs:Seqable<True|False>) -> List<Long> :
   val sxs = to-seq(xs)
   val zero = to-long(0)
   defn bit (x:True|False) :
      to-long(1 when x else 0)
   defn loop (accum:Long, len:Int) :
      if len == 64 : cons(accum, loop(zero, 0))
      else if not empty?(sxs) : loop(accum + bit(next(sxs)) << to-long(len), len + 1)
      else if len > 0 : List(accum)
      else : List()
   loop(zero, 0)

;                Instruction Definition
;                ======================

public deftype Ins
public defstruct ArgsIns <: Ins :
   xs: List<Var>
public defstruct Return <: Ins :
   xs: List<Imm>
public defstruct CArgsIns <: Ins :
   xs: List<Var>
public defstruct CReturn <: Ins :
   xs: List<Imm>
public defstruct SetIns <: Ins :
   x: Var
   y: Imm
public defstruct ConvertIns <: Ins :
   x: Var
   y: Imm
public defstruct InterpretIns <: Ins :
   x: Var
   y: Imm
public defstruct BinOp <: Ins :
   x: Var
   op: Op
   y: Imm
   z: Imm
public defstruct UnaOp <: Ins :
   x: Var
   op: Op
   y: Imm
public defstruct Load <: Ins :
   x: Var
   y: Imm
   offset: Int
public defstruct Store <: Ins :
   x: Imm
   y: Imm
   offset: Int
public defstruct Addr <: Ins :
   x: Var
   n: Int
public defstruct Call <: Ins :
   arity: Int
   xs: List<Var>
   f: Imm
   ys: List<Imm>
   new-stack?: True|False
   info: False|FileInfo
public defstruct CallStack <: Ins :
   xs: List<Var>
   f: Imm
   ys: List<Imm>
   info: False|FileInfo
public defstruct TCall <: Ins :
   arity: Int
   f: Imm
   ys: List<Imm>
   new-stack?: True|False
public defstruct TCallStack <: Ins :
   f: Imm
   ys: List<Imm>
public defstruct CallC <: Ins :
   n: Int
   xs: List<Var>
   f: Imm
   ys: List<Imm>
public defstruct Label <: Ins :
   n:Int
public defstruct Goto <: Ins :
   n:Int
public defstruct Branch <: Ins :
   n: Int
   op: Op
   x: Imm
   y: Imm
public defstruct SpecialBranch <: Ins :
   n: Int
   op: Op
public defstruct SpecialOp <: Ins :
   op: Op


;                   Global Definitions
;                   ==================

;     Structural Instructions
;     -----------------------
public deftype DefIns 
public defstruct DefFn <: DefIns :
   n: Int
   defs: Vector<DefVar>
   body: Vector<Ins>

public defstruct DefVar :
   n: Int
   type: Type

;     Data Instructions
;     -----------------
public defstruct DefData <: DefIns
public defstruct DefText <: DefIns
public defstruct DefByte <: DefIns :
   value: Byte
public defstruct DefInt <: DefIns :
   value: Int
public defstruct DefLong <: DefIns :
   value: Long
public defstruct DefFloat <: DefIns :
   value: Float
public defstruct DefDouble <: DefIns :
   value: Double
public defstruct DefString <: DefIns :
   value: String
public defstruct DefSpace <: DefIns :
   size: Int
public defstruct DefLabel <: DefIns :
   n: Int
public defstruct TLabel <: DefIns :
   n: Int
public defstruct TExLabel <: DefIns :
   lbl: Symbol

;     Program
;     -------
public defstruct Program :
   ins: Vector<DefIns>
   entry: Int

;                    Constructors
;                    ============

public defn CallC (xs: List<Var>, f: Imm, ys: List<Imm>) :
   CallC(0, xs, f, ys)

;                      Printer
;                      =======

defn cms (xs) : join(xs, ", ")

defmethod print (o:OutputStream, p:Program) :
   val io = IndentedStream(o,3)
   print(o, "program(%~) :" % [entry(p)])
   for i in ins(p) do :
      print(io, "\n%~" % [i])

defmethod print (o:OutputStream, i:Ins) :
   defn star? (x:True|False) : "*" when x else ""
   print{o, _} $ match(i) :
      (i:ArgsIns) : "(%,) = Args" % [xs(i)]
      (i:CArgsIns) : "(%,) = CArgs" % [xs(i)]
      (i:CReturn) : "creturn (%,)" % [xs(i)]   
      (i:SetIns) : "%~ = %~" % [x(i), y(i)]         
      (i:ConvertIns) : "%~ = convert %~" % [x(i), y(i)]
      (i:InterpretIns) : "%~ = interpret %~" % [x(i), y(i)]
      (i:BinOp) : "%~ = %~(%~, %~)" % [x(i), op(i), y(i), z(i)]
      (i:UnaOp) : "%~ = %~(%~)" % [x(i), op(i), y(i)]
      (i:Load) : "%~ = [%~ + %~]" % [x(i), y(i), offset(i)]
      (i:Store) : "[%~ + %~] = %~" % [x(i), offset(i), y(i)]
      (i:Addr) : "%~ = addr(%~)" % [x(i), n(i)]
      (i:Call) : "(%*) = call%_ %~(%*) / %~ @ %~" % [
         cms(xs(i)), star?(new-stack?(i)), f(i), cms(ys(i)), arity(i), info(i)]
      (i:CallStack) : "(%*) = call stack %~(%*) @ %~" % [
         cms(xs(i)), f(i), cms(ys(i)), info(i)]
      (i:TCall) : "tcall%_ %~(%*) / %~" % [
         star?(new-stack?(i)), f(i), cms(ys(i)), arity(i)]
      (i:TCallStack) : "tcall stack %~(%*)" % [f(i), cms(ys(i))]
      (i:CallC) : "(%*) = callc %~(%*)" % [cms(xs(i)), f(i), cms(ys(i))]
      (i:Return) : "return (%*)" % [cms(xs(i))]
      (i:Label) : "label %~" % [n(i)]
      (i:Goto) : "goto %~" % [n(i)]
      (i:Branch) : "branch %~ when %~(%~, %~)" % [n(i), op(i), x(i), y(i)]
      (i:SpecialBranch) : "branch* %~ when %~" % [n(i), op(i)]
      (i:SpecialOp) : op(i)
   
defmethod print (o:OutputStream, v:DefVar) :
   print(o, "V%~:%~" % [n(v), type(v)])

defmethod print (o:OutputStream, i:DefIns) :
   match(i) :
      (i:DefFn) :
         val io = IndentedStream(o, 3)
         print(o, "function F%~ :" % [n(i)])
         print(o, "\ndefs :")
         for d in defs(i) do :
            print(io, "\n%~" % [d])
         print(o, "\nbody :")
         for b in body(i) do :
            print(io, "\n%~" % [b])
      (i:DefData) : print(o, "   .data")
      (i:DefText) : print(o, "   .text")
      (i:DefByte) : print(o, "   .byte %~" % [value(i)])
      (i:DefInt) : print(o, "   .int %~" % [value(i)])
      (i:DefLong) : print(o, "   .long %~" % [value(i)])
      (i:DefFloat) : print(o, "   .float %~" % [value(i)])
      (i:DefDouble) : print(o, "   .double %~" % [value(i)])
      (i:DefString) : print(o, "   .string %~" % [value(i)])
      (i:DefSpace) : print(o, "   .space %~" % [size(i)])
      (i:DefLabel) : print(o, "   .label L<%~>" % [n(i)])
      (i:TLabel) : print(o, "label %~" % [n(i)])
      (i:TExLabel) : print(o, "exlabel %~" % [lbl(i)])