defpackage stz/reg-alloc-block-arranger :
  import core
  import collections
  import stz/reg-alloc-block

;Rearrange the blocks such that they are in reverse-post-order.
public defn order-blocks (blocks:Vector<Block>) -> False :
  if empty?(blocks) :
    fatal("No blocks given.")

  ;Compute the new ordering of blocks.
  val visited = IntSet()
  val ordering = Vector<Int>()
  let loop (i:Int = 0) :
    if add(visited,i) :
      do(loop, succs(blocks[i]))
      add(ordering, i)
  reverse!(ordering)

  ;For each block, compute its new index.
  val new-indices = Array<Int>(length(ordering))
  for (old-index in ordering, new-index in 0 to false) do :
    new-indices[old-index] = new-index

  ;Helper: Retrieve the new index.
  defn reindex (old-index:Int) -> Int :
    new-indices[old-index]

  ;Fill in the new indices.
  for b in blocks do :
    set-index(b, reindex(index(b)))
    set-succs(b, map(reindex, succs(b)))
    set-preds(b, map(reindex, preds(b)))

  ;Rearrange the blocks in the right order.
  val block-buffer = to-tuple(blocks)
  clear(blocks)
  for i in ordering do :
    add(blocks, block-buffer[i])