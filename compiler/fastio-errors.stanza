defpackage stz/fastio-errors :
  import core

public deftype FastIOError <: Exception

;Error occurs when reading from a FastIOBuffer and
;there are no more bytes in the buffer.
public defstruct FastIOReadPastLimitError <: FastIOError
defmethod print (o:OutputStream, e:FastIOReadPastLimitError) :
  print(o, "Error occurred during reading: reached end of buffer.")

;Error occurs when the user uses the wrong syntax
;when defining defserializer.
public defstruct FastIOSyntaxError <: FastIOError :
  info: FileInfo|False
  message
defmethod print (o:OutputStream, e:FastIOSyntaxError) :
  print(o, "%_%_" % [info-str(info(e)), message(e)])

;Error occurs when there is more than one definition with the same name.
public defstruct DuplicateFastIODefinition <: FastIOError :
  info: FileInfo|False
  name: Symbol
  prev-info: FileInfo|False
defmethod print (o:OutputStream, e:DuplicateFastIODefinition) :
  val prev-str = "" when prev-info(e) is False
            else " Previous definition at %_." % [prev-info(e)]
  print(o, "%_Duplicate definition of '%_' serializer.%_" % [info-str(info(e)), name(e), prev-str])

;Error occurs when there is more than one definition with the same name.
public defstruct DuplicateArgDefinition <: FastIOError :
  info: FileInfo|False
  name: Symbol
  prev-info: FileInfo|False
defmethod print (o:OutputStream, e:DuplicateArgDefinition) :
  val prev-str = "" when prev-info(e) is False
            else " Previous definition at %_." % [prev-info(e)]
  print(o, "%_Duplicate definition of argument '%_'.%_" % [info-str(info(e)), name(e), prev-str])

;Error occurs when we cannot find the serializer with the given name.
public defstruct CannotResolveSerializerDefinition <: FastIOError :
  info: FileInfo|False
  name: Symbol
defmethod print (o:OutputStream, e:CannotResolveSerializerDefinition) :
  print(o, "%_Cannot resolve serializer with name '%_'." % [info-str(info(e)), name(e)])

;Error occurs when we refer to a combinator serializer with the wrong
;number of arguments.
public defstruct WrongCombinatorArguments <: FastIOError :
  info: FileInfo|False
  name: Symbol
  num-args: Int
  num-given: Int
defmethod print (o:OutputStream, e:WrongCombinatorArguments) :
  val give-str = "none were given" when num-given(e) == 0
            else "%_ were given" % [num-given(e)]
  print(o, "%_Serializer '%_' is a combinator that requires %_ arguments, but %_." % [
    info-str(info(e)), name(e), num-args(e), give-str])

;Error occurs when we attempt to provide arguments for a combinator definition.
public defstruct WrongArgumentsForNonCombinator <: FastIOError :
  info: FileInfo|False
  name: Symbol
defmethod print (o:OutputStream, e:WrongArgumentsForNonCombinator) :
  print(o, "%_Serializer '%_' is not a combinator and does not accept arguments." % [
    info-str(info(e)), name(e)])

;Error occurs when we use the enum constructor when type is not a single Symbol.
public defstruct InvalidEnumConstructor <: FastIOError :
  info: FileInfo|False
  type
defmethod print (o:OutputStream, e:InvalidEnumConstructor) :
  print(o, "%_Invalid use of enum constructor for type '%~'. \
            Type must be a single Symbol." % [
    info-str(info(e)), type(e)])

;Error occurs when we use the struct constructor when type is not a single Symbol.
public defstruct InvalidStructConstructor <: FastIOError :
  info: FileInfo|False
  type
defmethod print (o:OutputStream, e:InvalidStructConstructor) :
  print(o, "%_Invalid use of struct constructor for type '%~'. \
            Type must be a single Symbol." % [
    info-str(info(e)), type(e)])

;Error occurs when we provide the wrong number of branches to the union definition.
public defstruct NoUnionBranches <: FastIOError :
  info: FileInfo|False
defmethod print (o:OutputStream, e:NoUnionBranches) :
  print(o, "%_No branches provided for a 'defunion' definition." % [
    info-str(info(e))])

;Overall error occurs when errors are detected during checking of the serialier.
public defstruct InvalidSerializerDefinition <: FastIOError :
  info:FileInfo|False
  errors:Tuple<FastIOError>
defmethod print (o:OutputStream, e:InvalidSerializerDefinition) :
  val error-str = Indented("%n" % [errors(e)])
  print(o, "%_The defined serializer contains errors:\n%_" % [
    info-str(info(e)), error-str])  

;Error occurred when processing a file that was
;included.
public defstruct FastIOIncludeError <: FastIOError :
  info: FileInfo
  filename: String
  error: Exception

defmethod print (o:OutputStream, e:FastIOIncludeError) :
  print(o, "%_: Error in included file %~:\n%_" % [
    info(e), filename(e), Indented(error(e))])

;Generic error occurred during writing.
public defstruct FastIOSerializationError <: FastIOError
defmethod print (o:OutputStream, e:FastIOSerializationError) :
  print(o, "Error occurred in FastIO serialization.")

;Return the info header.
defn info-str (info:FileInfo|False) :
  "" when info is False else "%_: " % [info]