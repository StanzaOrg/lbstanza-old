;See License.txt for details about licensing.

defpackage stz/arg-parser :
   import core
   import collections

;============================================================
;=============== Public Interface ===========================
;============================================================

public defstruct Command :
   name: String
   flags: Collection<Flag>
   action: ParseResult -> ?

public defn MarkerFlag (name:String) :
   Flag(name, 0, 0, true, false)

public defn GreedyFlag (name:String, optional?:True|False) :
   Flag(name, 1, 1, optional?, true)
   
public defn SingleFlag (name:String, optional?:True|False) :
   Flag(name, 1, 1, optional?, false)

public defn SingleFlag (name:String) :
   SingleFlag(name, false)

public defn MultipleFlag (name:String, min:Int, max:Int, optional?:True|False) :
   Flag(name, min, max, optional?, false)

public defn MultipleFlag (name:String, min:Int, optional?:True|False) :
   Flag(name, min, INT-MAX, optional?, false)

public defn MultipleFlag (name:String, min:Int) :
   Flag(name, min, INT-MAX, false, false)

public defn MultipleFlag (name:String, optional?:True|False) :
   Flag(name, 0, INT-MAX, optional?, false)

public defn MultipleFlag (name:String) :
   Flag(name, 0, INT-MAX, false, false)

public deftype ParseResult
public defmulti command (r:ParseResult) -> String
public defmulti args (r:ParseResult) -> List<String>
public defmulti has-flag? (r:ParseResult, flag:String) -> True|False
public defmulti flag? (r:ParseResult, flag:String) -> String|List<String>|False|True

public defn flag?<?D> (r:ParseResult, name:String, default:?D) -> String|List<String>|D|True :
   match(flag?(r, name)) :
      (f:False) : default
      (f:String|List<String>|True) : f   

public defn flag (r:ParseResult, name:String) -> String|List<String>|True :
   match(flag?(r, name)) :
      (f:False) : fatal("No flag: %_" % [name])
      (f:String|List<String>|True) : f

public defn single (r:ParseResult, name:String) :
   flag(r, name) as String

public defn single?<?D> (r:ParseResult, name:String, default:?D) :
   match(flag?(r, name)) :
      (f:False) : default
      (f:String) : f

public defn multiple (r:ParseResult, name:String) :
   flag(r, name) as List<String>

public defn multiple?<?D> (r:ParseResult, name:String, default:?D) :
   match(flag?(r, name)) :
      (f:False) : default
      (f:List<String>) : f

;============================================================
;============= Internal Flag Representation =================
;============================================================

public defstruct Flag :
   name: String
   min-arity: Int
   max-arity: Int
   optional?: True|False
   eats-next?: True|False

defn marker? (f:Flag) :
   max-arity(f) == 0

defn single? (f:Flag) :
   min-arity(f) == 1 and max-arity(f) == 1

;============================================================
;====================== Engine ==============================
;============================================================

public defn parse-args (comms:Collection<Command>, default-comm:False|Command, args:Seqable<String>) -> False :
  ;Get sequence of arguments
  val args-seq = to-seq(args)
  if default-comm is False :
    throw(NoCommand()) when empty?(args-seq)

  ;Parse command name
  defn parse-command () :
    defn use-default-comm () :
      match(default-comm) :
        (c:Command) : c
        (c:False) : throw(NoCommand())         
    if empty?(args-seq) :
      use-default-comm()
    else :
      val cname = peek(args-seq)
      val c = for c in comms find :
        name(c) == cname
      match(c) :
        (c:False) : use-default-comm()
        (c:Command) : (next(args-seq), c)
  val command = parse-command()

  ;Parse command arguments and flag arguments
  val command-args = Vector<String>()
  val flag-args = HashTable<String,List<String>>()

  defn flag? (str:String) :
    prefix?(str, "-")

  defn flag-eats-next? (str:String) :
    value? $ for flag in flags(command) first :
      if name(flag) == str : One(eats-next?(flag))
      else : None()
  
  defn* parse-args () :
    if not empty?(args-seq) :
      val arg = peek(args-seq)         
      if flag?(arg) :
        parse-flag-args("")
      else :
        add(command-args, next(args-seq))
        parse-args()            
           
  defn* parse-flag-args (flag:String) :
    if not empty?(args-seq) :
      val arg = next(args-seq)
      if flag?(arg) :
        val flag = arg[1 to false]
        throw(DuplicateFlag(flag)) when key?(flag-args, flag)
        if flag-eats-next?(flag) :
          if not empty?(args-seq) :
            flag-args[flag] = List(next(args-seq))
            parse-flag-args(flag)
        else :
          flag-args[flag] = List()
          parse-flag-args(flag)
      else :
        flag-args[flag] = cons(arg, flag-args[flag])
        parse-flag-args(flag)
           
  parse-args()

  ;Verify flags
  val accepted-args = HashTable<String,List<String>>()
  for flag in flags(command) do :
    match(get?(flag-args, name(flag))) :
      (args:List<String>) :
        val args* = reverse(args)
        val arity = length(args*)
        if arity < min-arity(flag) or arity > max-arity(flag) :
          throw(WrongArityFlag(flag, args*))
        accepted-args[name(flag)] = args*
        remove(flag-args, name(flag))
      (args:False) :
        throw(MissingFlag(command, flag)) when not optional?(flag)

  ;Extraneous flags
  for entry in flag-args do :
    throw(NoSuchFlag(command, key(entry)))
     
  ;Perform action
  action(command) $ new ParseResult :
    defmethod command (this) -> String :
      name(command)
    defmethod args (this) -> List<String> :
      to-list(command-args)
    defmethod has-flag? (this, flag:String) -> True|False :
      key?(accepted-args, flag)
    defmethod flag? (this, flag:String) :
      val f = for f in flags(command) find :
        name(f) == flag
      match(f) :
        (f:Flag) :
          match(get?(accepted-args, flag)) :
            (args:List<String>) :
              if marker?(f) : true
              else if single?(f) : head(args)
              else : args
            (args:False) :
              false
        (f:False) :
          fatal("No flag: %_" % [flag])
                
  ;Return false
  false

;============================================================
;====================== Errors ==============================
;============================================================

public deftype ArgParserException <: Exception
public defstruct NoCommand <: ArgParserException
public defstruct NoSuchCommand <: ArgParserException :
  name:String
public defstruct DuplicateFlag <: ArgParserException :
  flag:String
public defstruct WrongArityFlag <: ArgParserException :
  flag:Flag
  args:List<String>
public defstruct MissingFlag <: ArgParserException :
  command:Command
  flag:Flag
public defstruct NoSuchFlag <: ArgParserException :
  command:Command
  flag:String

;===== Error printers =====
defmethod print (o:OutputStream, e:NoCommand) :
  print(o, "No command given.")
defmethod print (o:OutputStream, e:NoSuchCommand) :
  print(o, "%_ is not a recognized command." % [name(e)])
defmethod print (o:OutputStream, e:DuplicateFlag) :
  print(o, "Duplicate flag -%_ given." % [flag(e)])
defmethod print (o:OutputStream, e:WrongArityFlag) :  
  print{o, _} $
    if marker?(flag(e)) :
      "Flag -%_ does not accept arguments, but received (%,)." % [name(flag(e)), args(e)]
    else if single?(flag(e)) :
      "Flag -%_ requires a single argument, but received (%,)." % [name(flag(e)), args(e)]
    else if length(args(e)) < min-arity(flag(e))  :
      "Flag -%_ requires at least %_ arguments, but received (%,)." % [name(flag(e)), min-arity(flag(e)), args(e)]
    else :
      "Flag -%_ accepts at most %_ arguments, but received (%,)." % [name(flag(e)), max-arity(flag(e)), args(e)]
defmethod print (o:OutputStream, e:MissingFlag) :
  print(o, "Command %_ requires flag -%_." % [name(command(e)), name(flag(e))])
defmethod print (o:OutputStream, e:NoSuchFlag) :
  print(o, "Command %_ does not recognize flag -%_." % [name(command(e)), flag(e)])