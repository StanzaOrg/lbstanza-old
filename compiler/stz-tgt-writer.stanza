defpackage stz/tgt-writer :
   import core
   import collections
   import stz/tgt-ir
   import stz/imms

;============================================================
;================= Serialize DefFns =========================
;============================================================

public defn serialize-defns (fns:List<DefFn>, filename:String) :
   val f = FileOutputStream(filename)   
   try: serialize(f, DefFns(fns))
   finally: close(f)

public defn deserialize-defns (filename:String) :
   val f = FileInputStream(filename)
   try: fns(deserialize-deffns(f))
   finally: close(f)

defstruct DefFns :
   fns: List<DefFn>

#with-overlay(stz/serializer-lang) :
   defserializer (out:FileOutputStream, in:FileInputStream) :
      defunion deffns (DefFns) :
         DefFns: (fns:list(deffn))

      defunion deffn (DefFn) :
         DefFn: (n:int, defs:vec(defvar), body:vec(ins))

      defunion defvar (DefVar) :
         DefVar: (n:int, type:type)

      defunion ins (Ins) :
         ArgsIns: (xs:slist(imm as Var))
         Return: (xs:slist(imm))
         CArgsIns: (xs:slist(imm as Var))
         CReturn: (xs:slist(imm))
         SetIns: (x:imm as Var, y:imm)
         ConvertIns: (x:imm as Var, y:imm)
         InterpretIns: (x:imm as Var, y:imm)
         BinOp: (x:imm as Var, op:op, y:imm, z:imm)
         UnaOp: (x:imm as Var, op:op, y:imm)
         Load: (x:imm as Var, y:imm, offset:int)
         Store: (x:imm, y:imm, offset:int)
         Addr: (x:imm as Var, n:int)
         Call: (arity:int, xs:slist(imm as Var), f:imm, ys:slist(imm), new-stack?:bool, info:opt<FileInfo>(info))
         CallStack: (xs:slist(imm as Var), f:imm, ys:slist(imm), info:opt<FileInfo>(info))
         TCall: (arity:int, f:imm, ys:slist(imm), new-stack?:bool)
         TCallStack: (f:imm, ys:slist(imm))
         CallC: (n:int, xs:slist(imm as Var), f:imm, ys:slist(imm))
         Label: (n:int)
         Goto: (n:int)
         Branch: (n:int, op:op, x:imm, y:imm)
         SpecialBranch: (n:int, op:op)
         SpecialOp: (op:op)

      defunion imm (Imm) :
         ByteImm: (value:byte)
         IntImm: (value:int)
         LongImm: (value:long)
         Mem: (n:int, offset:int)
         ExMem: (name:symbol, offset:int)
         RegSP: ()
         Reg: (n:int)
         FReg: (n:int)
         Var: (n:int)
         
      defunion type (Type) :
         ByteType: ()
         IntType: ()
         LongType: ()
         FloatType: ()
         DoubleType: ()
         RefType: ()

      defunion op (Op) :
         AddOp: ()
         SubOp: ()
         MulOp: ()
         DivOp: ()
         ModOp: ()
         AndOp: ()
         OrOp: ()
         XorOp: ()
         ShlOp: ()
         ShrOp: ()
         AshrOp: ()
         EqOp: ()
         NeOp: ()
         LtOp: ()
         GtOp: ()
         LeOp: ()
         GeOp: ()
         UleOp: ()
         UltOp: ()
         UgtOp: ()
         UgeOp: ()
         NotOp: ()
         NegOp: ()
      ;Abstract Ops
         SwitchStackOp: ()
         StackHasSpaceOp: ()
         SaveCContextOp: ()
         ArityNeqOp: (arity:int)

      reader defn read-slist<?T> (f: () -> ?T) :
         val n = read-byte()
         to-list(repeatedly(f, to-int(n)))

      writer defn write-slist<?T> (f: T -> False, xs:List<?T>) :
         write-byte(to-byte(length(xs)))
         do(f, xs)

      reader defn read-vec<?T> (f: () -> ?T) :
         val n = read-int()
         to-vector<T>(repeatedly(f, n))

      writer defn write-vec<?T> (f: T -> False, xs:Vector<?T>) :
         write-int(length(xs))
         do(f, xs)

      reader defn read-list<?T> (f: () -> ?T) :
         val n = read-int()
         to-list(repeatedly(f, n))

      writer defn write-list<?T> (f: T -> False, xs:List<?T>) :
         write-int(length(xs))
         do(f, xs)

      reader defn read-opt<T> (f: () -> T) :
         val n = read-byte()
         f() when n == 1Y

      writer defn write-opt<T> (f: T -> False, x:T|False) :
         if x is False :
            write-byte(0Y)
         else :
            write-byte(1Y)
            f(x as T)
            
      defatom bool (x:True|False) :
         writer :
            write-byte(1Y when x else 0Y)
         reader :
            true when read-byte() == 1Y

      defunion info (FileInfo) :
         FileInfo: (filename:string, line:int, column:int)

      defatom int (x:Int) :
         writer :
            put(out, x)
         reader :
            match(get-int(in)) :
               (x:Int) : x
               (x:False) : throw(FileReadException())

      defatom long (x:Long) :
         writer :
            put(out, x)
         reader :
            match(get-long(in)) :
               (x:Long) : x
               (x:False) : throw(FileReadException())

      defatom float (x:Float) :
         writer :
            put(out, x)
         reader :
            match(get-float(in)) :
               (x:Float) : x
               (x:False) : throw(FileReadException())

      defatom double (x:Double) :
         writer :
            put(out, x)
         reader :
            match(get-double(in)) :
               (x:Double) : x
               (x:False) : throw(FileReadException())

      defatom byte (x:Byte) :
         writer :
            put(out, x)
         reader :
            match(get-byte(in)) :
               (x:Byte) : x
               (x:False) : throw(FileReadException())

      defatom char (x:Char) :
         writer :
            print(out, x)
         reader :
            match(get-char(in)) :
               (x:Char) : x
               (x:False) : throw(FileReadException())

      defatom string (x:String) :
         writer :
            write-int(length(x))
            print(out, x)
         reader :
            val n = read-int()
            String(repeatedly(read-char, n))

      defatom symbol (x:Symbol) :
         writer : write-string(to-string(x))
         reader : to-symbol(read-string())