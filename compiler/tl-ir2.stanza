#use-added-syntax(ast-lang2)
defpackage stz/tl-ir2 :
  import core
  import collections
  import stz/types
  import stz/primitives
  import stz/dl-ir with:
    prefix(Child) => DL
  import stz/namemap
  import stz/type-hierarchy with:
    prefix(Field) => H
  import stz/type-instfns
  import stz/type-match

;============================================================
;====================== Shared Multis =======================
;============================================================

;Retrieve the file information.
public defmulti info (c:TComm) -> FileInfo|False

;The type of an expression.
public defmulti type (t:TExp) -> False|Type
public defmulti sub-type (t:TExp, t:False|Type) -> TExp

;The file info of an expression.
public defmulti info (t:TExp) -> FileInfo|False

;The type of a LoStanza expression.
public defmulti type (t:LSExp) -> False|LSType
public defmulti sub-type (t:LSExp, type:False|LSType) -> LSExp

;The file info of a LoStanza expression.
public defmulti info (t:LSExp) -> FileInfo|False

;The file info of a LoStanza command.
public defmulti info (t:LSComm) -> FileInfo|False

;The context of an expression.
public defmulti ctxt (a:LSExp) -> LSContext|False
public defmulti ctxt (a:TExp) -> Context|False
public defmulti sub-ctxt (a:TExp, ctxt:Context|False) -> TExp
public defmulti sub-ctxt (a:LSExp, ctxt:LSContext|False) -> LSExp

;The type of an argument.
public defmulti type (a:FArg?) -> False|Type
public defmulti sub-type (a:FArg?, t:False|Type) -> FArg?

;============================================================
;================= Convenience Accessors ====================
;============================================================

;Forcifully retrieve the type of an expression.
public defn type! (e:TExp) -> Type :
  match(type(e)) :
    (t:Type) : t
    (f:False) : fatal("Expression has no computed type.")

;Forcifully retrieve the type of a LoStanza expression.
public defn type! (e:LSExp) -> LSType :
  match(type(e)) :
    (t:LSType) : t
    (f:False) : fatal("Expression has no computed type.")

;Forcifully retrieve the type of an FArg?
public defn type! (a:FArg?) -> Type :
  match(type(a)) :
    (t:Type) : t
    (f:False) : fatal("Type not annotated in function argument.")

;Forcifully retrieve a1,a2 of functions.
#for TDEF in [TDefn, TDefmulti] :
;  public defn a1! (e:TDEF) -> Tuple<Type> : 
;    a1(e) as Tuple<Type>
  public defn a2! (e:TDEF) -> Type :
    a2(e) as Type

;============================================================
;=================== Support Structures =====================
;============================================================

;Representation of whole program.
public defstruct TProg :
  hierarchy:TypeHierarchy
  packages:Tuple<TPackage> with: (updater => sub-packages)
  environment:Tuple<Export>
  namemap: NameMap  

;Representation of one typed package.
public defstruct TPackage :
  packageio:PackageIO with: (updater => sub-packageio)
  comms:Tuple<TComm> with: (updater => sub-comms)

;For listing the child types given a fresh deftype definition.
public defstruct Child :
  n: Int
  args: Tuple<Int>
  parent: Type

;For listing the fields of a LoStanza deftype definition.
public defstruct Field :
  name: Symbol
  type: LSType with: (updater => sub-type)
  mutable?: True|False

;Represents an argument in a call.
public defstruct TArg :
  keyword: Symbol|False
  value: TExp

;Represents an argument in a LoStanza call.
public defstruct LSArg :
  keyword: Symbol|False
  value: LSExp

;Represents a set of LoStanza instantiated functions.
public defstruct LSInstFns :
  funcs:Tuple<LSInstFn>
with:
  printer => true

;============================================================
;==================== AST Definition ========================
;============================================================

public defast :

  ;----------------------------------------------------------
  ;------------------ Top Level Commands --------------------
  ;----------------------------------------------------------

  defnodes TComm :
    ;Common nodes.
    common :
      info: FileInfo|False with: (as-method => true)

    ;--------------------------------------------------------
    ;--------------------- HiStanza -------------------------
    ;--------------------------------------------------------    

    TDefType :
      n: Int
      args: Tuple<Int>
      parent: False|Type
      children: Tuple<Child>
    TDef :
      n: Int
      type: False|Type with: (updater => sub-type)
      value: TExp
    TDefTuple :
      ns: Tuple<Int>
      types: Tuple<False|Type> with: (updater => sub-types)
      value: TExp
    TDefVar :
      n: Int
      type: False|Type with: (updater => sub-type)
      value: False|TExp
    TDefn :
      tail?: True|False
      n: Int
      targs: Tuple<Int>
      cargs: Tuple<Int>
      a1: Tuple<FArg?> with: (updater => sub-a1)
      a2: False|Type with: (updater => sub-a2)
      args: Tuple<Int>
      body: TExp with: (updater => sub-body)
    TDefmulti :
      n: Int
      targs: Tuple<Int>
      cargs: Tuple<Int>
      a1: Tuple<FArg?> with: (updater => sub-a1)
      a2: False|Type with: (updater => sub-a2)
    TDefmethod :
      tail?: True|False
      n: Int
      multi: TExp
      thisn: False|Int
      targs: Tuple<Int>
      cargs: Tuple<Int>
      a1: Tuple<FArg?> with: (updater => sub-a1)
      a2: False|Type with: (updater => sub-a2)
      args: Tuple<Int>
      body: TExp
    TInit :
      exp: TExp

    ;--------------------------------------------------------
    ;--------------------- LoStanza -------------------------
    ;--------------------------------------------------------
    TLDefType :
      n: Int
      args: Tuple<Int>
      parent: False|Type
      fields: Tuple<Field>
    TLDef :
      n: Int
      type: LSType
      value: LSExp
    TLDefVar :
      n: Int
      type: LSType
      value: False|LSExp
    TLDefn :
      tail?: True|False
      n: Int
      targs: Tuple<Int>
      cargs: Tuple<Int>
      a1: Tuple<LSFArg>
      a2: LSType
      args: Tuple<Int>
      body: LSComm with: (updater => sub-body)
    TLExternFn :
      n: Int
      a1: Tuple<LSType>
      a2: LSType
      args: Tuple<Int>
      body: LSComm with: (updater => sub-body)
      lbl: Symbol
    TLDefmethod :
      tail?: True|False
      n: Int
      multi: TExp
      targs: Tuple<Int>
      cargs: Tuple<Int>
      a1: Tuple<LSFArg>
      a2: LSType
      args: Tuple<Int>
      body: LSComm with: (updater => sub-body)
    TExtern :
      n: Int
      type: LSType
      lbl: Symbol
    TLInit :
      comm: LSComm
    TDoc :
      string: String

  ;----------------------------------------------------------
  ;------------------ HiStanza Expressions ------------------
  ;----------------------------------------------------------

  defnodes TExp :
    common :
      info: FileInfo|False with: (as-method => true)
      type: False|Type with: (as-method => true, updater => sub-type)
      ctxt: Context|False with: (as-method => true, default => false, updater => sub-ctxt)
    common-options:
      printer => true
    TLet : (n:Int, ntype:False|Type, value:TExp, body:TExp)
    TLetVar : (n:Int, ntype:False|Type, value:False|TExp, body:TExp)
    TLetTuple : (ns:Tuple<Int>, ntypes:Tuple<False|Type>, value:TExp, body:TExp)
    TLetRec : (defns:Tuple<TDefn>, body:TExp)
    TFn : (tail?:True|False, a1:Tuple<False|Type>, a2:False|Type, args:Tuple<Int>, body:TExp)
    TMulti : (funcs:Tuple<TFn>)
    TSeq : (a:TExp, b:TExp)
    TMatch : (args:Tuple<TExp>, branches:Tuple<TBranch>)
    TBranch : (args:Tuple<Int>, atypes:Tuple<False|Type>, body:TExp)
    TNew : (class:Type, methods:Tuple<TDefmethod>)
    TRef : (n:Int)
    TCast : (exp:TExp, targ:Type)
    TUpCast : (exp:TExp, targ:Type)
    TSet : (ref:TRef, value:TExp)
    TDo : (func:TExp, targs:Tuple<Type>, args:Tuple<TArg>)
    TPrim : (op:Primitive, args:Tuple<TExp>)
    TLiteral : (value:?)
    TTupleExp : (exps:Tuple<TExp>)
    TMix : (refs:Tuple<TRef>, sel:False|Selection, inst:False|Instantiation)

  defnodes Context :
    common-options :
      printer => true
    ExpCtxt: (expected:Type)
    CallCtxt: (targs:Tuple<Type>, fargs:Tuple<FArg>)
    MultiCtxt: (targs:Tuple<Type>, fargs:Tuple<FArg>)

  ;----------------------------------------------------------
  ;------------------ LoStanza Commands ---------------------
  ;----------------------------------------------------------

  defnodes LSComm :
    common:
      info: FileInfo|False with: (as-method => true)
    LSCall: (exp:LSExp)
    LSSet: (exp:LSExp, value:LSExp)
    LSLabels: (blocks:Tuple<LSLabeledBlock>)
    LSLabeledBlock: (n:Int, args:Tuple<Int>, atypes:Tuple<LSType>, body:LSComm)
    LSGoto: (n:Int, args:Tuple<LSExp>)
    LSReturn: (exp:LSExp)
    LSDef: (n:Int, type:False|LSType, value:LSExp)
    LSDefVar: (n:Int, type:LSType, value:False|LSExp)
    LSSeq: (a:LSComm, b:LSComm)
    LSIf: (pred:LSExp, conseq:LSComm, alt:LSComm)
    LSMatch: (args:Tuple<LSExp>, branches:Tuple<LSBranch>)
    LSBranch: (args:Tuple<Int>, atypes:Tuple<False|LSType>, body:LSComm)
    LSSkip: ()

  ;----------------------------------------------------------
  ;------------------ LoStanza Expressions ------------------
  ;----------------------------------------------------------

  defnodes LSExp :
    common :
      info: FileInfo|False with: (as-method => true)
      type: False|LSType with: (as-method => true, updater => sub-type)
      ctxt: LSContext|False with: (as-method => true, default => false, updater => sub-ctxt)
    common-options :
      printer => true
    LSVar: (n:Int)
    LSNew: (n:Int, targs:Tuple<Type>, args:Tuple<LSExp>)
    LSStruct: (n:Int, targs:Tuple<Type>, args:Tuple<LSExp>)
    LSAddr: (exp:LSExp, unstable?:True|False)
    LSDeref: (exp:LSExp)
    LSSlot: (exp:LSExp, index:LSExp)
    LSField: (exp:LSExp, name:Symbol)
    LSDo: (func:LSExp, targs:Tuple<Type>, args:Tuple<LSArg>)
    LSCallC: (func:LSExp, args:Tuple<LSArg>)
    LSPrim: (op:LSPrimitive, args:Tuple<LSExp>)
    LSSizeof: (targ:LSType)
    LSTagof: (n:Int)
    LSCast: (exp:LSExp, targ:LSType)   
    LSLiteral: (value:?)
    LSAnd: (a:LSExp, b:LSExp)
    LSOr: (a:LSExp, b:LSExp)
    LSLetExp: (comm:LSComm, exp:LSExp)
    LSMix: (refs:Tuple<LSVar>, sel:False|Selection, inst:False|LSInstFns)
    LSFn: (ref:TExp)    

    ;After type resolution, TCast becomes this if the cast acts as
    ;a numerical conversion.
    LSConv: (exp:LSExp, targ:LSType)

  defnodes LSContext :
    common-options :
      printer => true
    ;LoStanza expression position.
    LSExpCtxt: (expected:LSType)
    ;LoStanza expression position without expected type.
    LSBlankExpCtxt: ()
    ;LoStanza calling position.
    LSCallCtxt: (targs:Tuple<Type>, fargs:Tuple<LSFArg>)
    ;LoStanza address-of position.
    LSAddrCtxt: (expected:LSType)
    ;LoStanza bad context. Used when there is already a detected
    ;error, higher in the expression tree.
    LSBadCtxt: ()
    ;LoStanza deref context.
    LSDerefCtxt: ()

  ;----------------------------------------------------------
  ;----------------------- Utilities ------------------------
  ;----------------------------------------------------------

  ;For representing the selection of a function mixture.
  defnodes Selection :
    common-options :
      printer => true
    SVar: (n:Int)
    SSel: (sels: Tuple<True|False|PartialMatch>)

  ;For representing instantiated functions.
  defnodes Instantiation :
    common-options :
      printer => true
    InstVar: (n:Int)
    InstFns: (funcs:Tuple<InstFn>)

  ;For representing types of arguments, where types are not
  ;guaranteed to be supplied.
  defnodes FArg? :
    common :
      type:False|Type with: (as-method => true, updater => sub-type)
    PositionalArg?: (optional?:True|False)
    KeywordArg?: (name:Symbol, optional?:True|False)
    VarArg?: (name:Symbol)

  ;----------------------------------------------------------
  ;-------------------- Mappers and Doers -------------------
  ;----------------------------------------------------------

  make-mapper :
    func: TLItem -> TLItem
    item: TLItem
    nodes: (TComm, TExp, LSComm, LSExp, Context, LSContext, Instantiation, FArg?)
    branches: (TypeItem)

  make-doer :
    func: TLItem -> ?
    item: TLItem
    nodes: (TComm, TExp, LSComm, LSExp, Context, LSContext, Instantiation, FArg?)
    branches: (TypeItem)

  defmapper (f:TLItem -> TLItem) :
    (x:False|Type) :
      (f(x as Type) as Type) when x is Type
    (x:Child) :
      Child(n(x), args(x), f(parent(x)) as Type)
    (xs:Tuple<Child>) : 
      for x in xs map :
        Child(n(x), args(x), f(parent(x)) as Type)
    (x:TExp) :
      f(x) as TExp
    (xs:Tuple<False|Type>) :
      for x in xs map :
        (f(x as Type) as Type) when x is Type
    (x:False|TExp) :
      (f(x as TExp) as TExp) when x is TExp
    (x:Field) :
      Field(name(x), f(type(x)) as LSType, mutable?(x))
    (xs:Tuple<Field>) :
      for x in xs map :
        Field(name(x), f(type(x)) as LSType, mutable?(x))
    (x:LSType) :
      f(x) as LSType
    (x:LSExp) :
      f(x) as LSExp
    (x:False|LSExp) :
      (f(x as LSExp) as LSExp) when x is LSExp
    (xs:Tuple<LSType>) :
      for x in xs map :
        f(x) as LSType
    (x:LSComm) :
      f(x) as LSComm
    (xs:Tuple<TDefn>) :
      for x in xs map :
        f(x) as TDefn
    (xs:Tuple<TFn>) :
      for x in xs map :
        f(x) as TFn
    (xs:Tuple<TExp>) :
      for x in xs map :
        f(x) as TExp
    (xs:Tuple<TBranch>) :
      for x in xs map :
        f(x) as TBranch
    (x:Type) :
      f(x) as Type
    (xs:Tuple<TDefmethod>) :
      for x in xs map :
        f(x) as TDefmethod
    (x:TRef) :
      f(x) as TRef
    (xs:Tuple<Type>) :
      for x in xs map :
        f(x) as Type
    (xs:Tuple<LSLabeledBlock>) :
      for x in xs map :
        f(x) as LSLabeledBlock
    (xs:Tuple<LSExp>) :
      for x in xs map :
        f(x) as LSExp
    (x:False|LSType) :
      (f(x as LSType) as LSType) when x is LSType
    (xs:Tuple<LSBranch>) :
      for x in xs map :
        f(x) as LSBranch
    (xs:Tuple<False|LSType>) :
      for x in xs map :
        (f(x as LSType) as LSType) when x is LSType
    (x:LSVar) :
      f(x) as LSVar
    (x:Context|False) :
      (f(x as Context) as Context) when x is Context
    (x:LSContext|False) :
      (f(x as LSContext) as LSContext) when x is LSContext
    (xs:Tuple<FArg>) :
      for x in xs map :
        f(x) as FArg
    (xs:Tuple<LSFArg>) :
      for x in xs map :
        f(x) as LSFArg
    (xs:Tuple<FArg?>) :
      for x in xs map :
        f(x) as FArg?
    (xs:Tuple<TArg>) :
      for x in xs map :
        TArg(keyword(x), f(value(x)) as TExp)
    (xs:Tuple<LSArg>) :
      for x in xs map :
        LSArg(keyword(x), f(value(x)) as LSExp)
    (xs:Tuple<TRef>) :
      for x in xs map :
        f(x) as TRef
    (x:False|Instantiation) :
      (f(x as Instantiation) as Instantiation) when x is Instantiation
    (xs:Tuple<InstFn>) :
      for x in xs map :
        val new-capvars = for v in capvars(x) map : f(v) as Type
        val new-type = f(type(x)) as TArrow
        InstFn(n(x), pattern(x), new-capvars, new-type)
    (xs:Tuple<LSVar>) :
      for x in xs map :
        f(x) as LSVar
    (x:False|LSInstFns) :
      match(x:LSInstFns) :
        LSInstFns $ for func in funcs(x) map :
          val new-capvars = for v in capvars(func) map : f(v) as Type
          val new-type = f(type(func)) as FnT
          LSInstFn(n(func), pattern(func), new-capvars, new-type)
    ;Note since TypeItem is a branch (as opposed to a node),
    ;the mapper needs to map over subelements of it. 
    (x:TypeItem) :
      stz/types/map({f(_) as TypeItem},x)

  defdoer (f:TLItem -> ?) : 
    (x:False|Type) :
      f(x as Type) when x is Type
    (x:Child) :
      f(parent(x))
    (xs:Tuple<Child>) :
      for x in xs do :
        f(parent(x))
    (x:TExp) :
      f(x)
    (xs:Tuple<False|Type>) :
      for x in xs do :
        f(x as Type) when x is Type
    (x:False|TExp) :
      f(x as TExp) when x is TExp
    (x:Field) :
      f(type(x))
    (xs:Tuple<Field>) :
      for x in xs do :
        f(type(x))
    (x:LSType) :
      f(x)
    (x:LSExp) :
      f(x)
    (x:False|LSExp) :
      f(x as LSExp) when x is LSExp
    (xs:Tuple<LSType>) :
      do(f,xs)
    (x:LSComm) :
      f(x)
    (xs:Tuple<TDefn>) :
      do(f,xs)
    (xs:Tuple<TFn>) :
      do(f, xs)
    (xs:Tuple<TExp>) :
      do(f, xs)
    (xs:Tuple<TBranch>) :
      do(f, xs)
    (x:Type) :
      f(x)
    (xs:Tuple<TDefmethod>) :
      do(f, xs)
    (x:TRef) :
      f(x)
    (xs:Tuple<Type>) :
      do(f,xs)
    (xs:Tuple<LSLabeledBlock>) :
      do(f,xs)
    (xs:Tuple<LSExp>) :
      do(f,xs)
    (x:False|LSType) :
      f(x as LSType) when x is LSType
    (xs:Tuple<LSBranch>) :
      do(f, xs)
    (xs:Tuple<False|LSType>) :
      for x in xs do :
        f(x as LSType) when x is LSType
    (x:LSVar) :
      f(x)
    (x:Context|False) :
      f(x as Context) when x is Context
    (x:LSContext|False) :
      f(x as LSContext) when x is LSContext
    (xs:Tuple<FArg>) :
      do(f,xs)
    (xs:Tuple<FArg?>) :
      do(f,xs)
    (xs:Tuple<LSFArg>) :
      do(f,xs)
    (xs:Tuple<TArg>) :
      do(f{value(_)}, xs)
    (xs:Tuple<LSArg>) :
      do(f{value(_)}, xs)
    (xs:Tuple<TRef>) :
      do(f, xs)
    (x:False|Instantiation) :
      f(x as Instantiation) when x is Instantiation
    (xs:Tuple<LSVar>) :
      do(f, xs)
    (x:False|LSInstFns) :
      match(x:LSInstFns) :
        for func in funcs(x) do :
          do(f, capvars(func))
          f(type(func))
    (xs:Tuple<InstFn>) :
      for x in xs do :
        do(f, capvars(x))
        f(type(x))
    ;Note since TypeItem is a branch (as opposed to a node),
    ;the doer needs to 'do' over subelements of it. 
    (x:TypeItem) :
      stz/types/do(f,x)

  ignore :
    Int
    FileInfo|False
    False|Selection
    ?
    Tuple<Int>
    True|False
    False|Int
    Symbol
    String
    Primitive
    LSPrimitive

;============================================================
;====================== Mapping =============================
;============================================================

public deftype TLItem :
  TComm <: TLItem
  TExp <: TLItem
  LSComm <: TLItem
  LSExp <: TLItem
  TypeItem <: TLItem
  Context <: TLItem
  LSContext <: TLItem
  FArg? <: TLItem
  Instantiation <: TLItem
