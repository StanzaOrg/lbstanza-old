#use-added-syntax(ast-lang2)
defpackage stz/tl-ir2 :
  import core
  import collections
  import stz/types
  import stz/primitives
  import stz/dl-ir with:
    prefix(Child) => DL
  import stz/namemap

;============================================================
;====================== Shared Multis =======================
;============================================================

;Retrieve the file information.
public defmulti info (c:TComm) -> FileInfo|False

;The type of an expression.
public defmulti type (t:TExp) -> False|Type

;The file info of an expression.
public defmulti info (t:TExp) -> FileInfo|False

;The type of a LoStanza expression.
public defmulti type (t:LSExp) -> False|LSType

;The file info of a LoStanza expression.
public defmulti info (t:LSExp) -> FileInfo|False

;The file info of a LoStanza command.
public defmulti info (t:LSComm) -> FileInfo|False

;============================================================
;=================== Support Structures =====================
;============================================================

;Representation of whole program.
public defstruct TProg :
  packages:Tuple<TPackage>
  namemap: NameMap  

;Representation of one typed package.
public defstruct TPackage :
  packageio:PackageIO with: (updater => sub-packageio)
  comms:Tuple<TComm>

;For listing the child types given a fresh deftype definition.
public defstruct Child :
  n: Int
  args: Tuple<Int>
  parent: Type

;For listing the fields of a LoStanza deftype definition.
public defstruct Field :
  name: Symbol
  type: LSType
  mutable?: True|False

;============================================================
;==================== AST Definition ========================
;============================================================

public defast :

  ;----------------------------------------------------------
  ;------------------ Top Level Commands --------------------
  ;----------------------------------------------------------

  defnodes TComm :
    ;Common nodes.
    common :
      info: FileInfo|False with: (as-method => true)

    ;--------------------------------------------------------
    ;--------------------- HiStanza -------------------------
    ;--------------------------------------------------------    

    TDefType :
      n: Int
      args: Tuple<Int>
      parent: False|Type
      children: Tuple<Child>
    TDef :
      n: Int
      type: False|Type
      value: TExp
    TDefTuple :
      ns: Tuple<Int>
      types: Tuple<False|Type>
      value: TExp
    TDefVar :
      n: Int
      type: False|Type
      value: False|TExp
    TDefn :
      tail?: True|False
      n: Int
      targs: Tuple<Int>
      cargs: Tuple<Int>
      a1: Tuple<False|Type>
      a2: False|Type
      args: Tuple<Int>
      body: TExp
    TDefmulti :
      n: Int
      targs: Tuple<Int>
      cargs: Tuple<Int>
      a1: Tuple<False|Type>
      a2: False|Type
    TDefmethod :
      tail?: True|False
      n: Int
      multi: TExp
      thisn: False|Int
      targs: Tuple<Int>
      cargs: Tuple<Int>
      a1: Tuple<False|Type>
      a2: False|Type
      args: Tuple<Int>
      body: TExp
    TInit :
      exp: TExp

    ;--------------------------------------------------------
    ;--------------------- LoStanza -------------------------
    ;--------------------------------------------------------
    TLDefType :
      n: Int
      args: Tuple<Int>
      parent: False|Type
      fields: Tuple<Field>
    TLDef :
      n: Int
      type: LSType
      value: LSExp
    TLDefVar :
      n: Int
      type: LSType
      value: False|LSExp
    TLDefn :
      tail?: True|False
      n: Int
      targs: Tuple<Int>
      cargs: Tuple<Int>
      a1: Tuple<LSType>
      a2: LSType
      args: Tuple<Int>
      body: LSComm
    TLExternFn :
      n: Int
      a1: Tuple<LSType>
      a2: LSType
      args: Tuple<Int>
      body: LSComm
      lbl: Symbol
    TLDefmethod :
      tail?: True|False
      n: Int
      multi: TExp
      targs: Tuple<Int>
      cargs: Tuple<Int>
      a1: Tuple<LSType>
      a2: LSType
      args: Tuple<Int>
      body: LSComm
    TExtern :
      n: Int
      type: LSType
      lbl: Symbol
    TLInit :
      comm: LSComm
    TDoc :
      string: String

  ;----------------------------------------------------------
  ;------------------ HiStanza Expressions ------------------
  ;----------------------------------------------------------

  defnodes TExp :
    common :
      info: FileInfo|False with: (as-method => true)
      type: False|Type with: (as-method => true)
    TLet : (n:Int, ntype:False|Type, value:TExp, body:TExp)
    TLetVar : (n:Int, ntype:False|Type, value:False|TExp, body:TExp)
    TLetTuple : (ns:Tuple<Int>, ntypes:Tuple<False|Type>, value:TExp, body:TExp)
    TLetRec : (defns:Tuple<TDefn>, body:TExp)
    TFn : (tail?:True|False, a1:Tuple<False|Type>, a2:False|Type, args:Tuple<Int>, body:TExp)
    TMulti : (funcs:Tuple<TFn>)
    TSeq : (a:TExp, b:TExp)
    TMatch : (args:Tuple<TExp>, branches:Tuple<TBranch>)
    TBranch : (args:Tuple<Int>, atypes:Tuple<False|Type>, body:TExp)
    TNew : (class:Type, methods:Tuple<TDefmethod>)
    TRef : (n:Int)
    TCast : (exp:TExp, targ:Type)
    TUpCast : (exp:TExp, targ:Type)
    TSet : (ref:TRef, value:TExp)
    TDo : (func:TExp, args:Tuple<TExp>)
    TPrim : (op:Primitive, args:Tuple<TExp>)
    TLiteral : (value:?)
    TTupleExp : (exps:Tuple<TExp>)
    TMix : (sel:False|Selection, exps:Tuple<TExp>)
    TCurry : (ref:TRef, targs:Tuple<Type>, cargs:Tuple<False|Type>)

  ;----------------------------------------------------------
  ;------------------ LoStanza Commands ---------------------
  ;----------------------------------------------------------

  defnodes LSComm :
    common:
      info: FileInfo|False with: (as-method => true)
    LSCall: (exp:LSExp)
    LSSet: (exp:LSExp, value:LSExp)
    LSLabels: (blocks:Tuple<LSLabeledBlock>)
    LSLabeledBlock: (n:Int, args:Tuple<Int>, atypes:Tuple<LSType>, body:LSComm)
    LSGoto: (n:Int, args:Tuple<LSExp>)
    LSReturn: (exp:LSExp)
    LSDef: (n:Int, type:False|LSType, value:LSExp)
    LSDefVar: (n:Int, type:LSType, value:False|LSExp)
    LSSeq: (a:LSComm, b:LSComm)
    LSIf: (pred:LSExp, conseq:LSComm, alt:LSComm)
    LSMatch: (args:Tuple<LSExp>, branches:Tuple<LSBranch>)
    LSBranch: (args:Tuple<Int>, atypes:Tuple<False|LSType>, body:LSComm)
    LSSkip: ()

  ;----------------------------------------------------------
  ;------------------ LoStanza Expressions ------------------
  ;----------------------------------------------------------

  defnodes LSExp :
    common :
      info: FileInfo|False with: (as-method => true)
      type: False|LSType with: (as-method => true)
    LSVar: (n:Int)
    LSNew: (n:Int, targs:Tuple<Type>, args:Tuple<LSExp>)
    LSStruct: (n:Int, targs:Tuple<Type>, args:Tuple<LSExp>)
    LSAddr: (exp:LSExp, unstable?:True|False)
    LSDeref: (exp:LSExp)
    LSSlot: (exp:LSExp, index:LSExp)
    LSField: (exp:LSExp, name:Symbol)
    LSDo: (func:LSExp, args:Tuple<LSExp>)
    LSCallC: (func:LSExp, args:Tuple<LSExp>)
    LSPrim: (op:LSPrimitive, args:Tuple<LSExp>)
    LSSizeof: (targ:LSType)
    LSTagof: (n:Int)
    LSCast: (exp:LSExp, targ:LSType)   
    LSLiteral: (value:?)
    LSAnd: (a:LSExp, b:LSExp)
    LSOr: (a:LSExp, b:LSExp)
    LSLetExp: (comm:LSComm, exp:LSExp)
    LSMix: (sel:False|Selection, exps:Tuple<LSExp>)
    LSCurry: (ref:LSVar, targs:Tuple<Type>, cargs:Tuple<False|Type>)
    LSFn: (ref:TExp)    

    ;After type resolution, TCast becomes this if the cast acts as
    ;a numerical conversion.
    LSConv: (exp:LSExp, targ:LSType)

  ;----------------------------------------------------------
  ;----------------------- Utilities ------------------------
  ;----------------------------------------------------------

  ;For representing the selection of a function mixture.
  defnodes Selection :
    SVar: (n:Int)
    SSel: (sels: Tuple<True|False>)


  ;----------------------------------------------------------
  ;-------------------- Mappers and Doers -------------------
  ;----------------------------------------------------------

  make-mapper :
    func: TLItem -> TLItem
    item: TLItem
    nodes: (TComm, TExp, LSComm, LSExp)

  make-doer :
    func: TLItem -> ?
    item: TLItem
    nodes: (TComm, TExp, LSComm, LSExp)

  defmapper (f:TLItem -> TLItem) :
    (x:False|Type) :
      (f(x as Type) as Type) when x is Type
    (x:Child) :
      Child(n(x), args(x), f(parent(x)) as Type)
    (xs:Tuple<Child>) : 
      for x in xs map :
        Child(n(x), args(x), f(parent(x)) as Type)
    (x:TExp) :
      f(x) as TExp
    (xs:Tuple<False|Type>) :
      for x in xs map :
        (f(x as Type) as Type) when x is Type
    (x:False|TExp) :
      (f(x as TExp) as TExp) when x is TExp
    (x:Field) :
      Field(name(x), f(type(x)) as LSType, mutable?(x))
    (xs:Tuple<Field>) :
      for x in xs map :
        Field(name(x), f(type(x)) as LSType, mutable?(x))
    (x:LSType) :
      f(x) as LSType
    (x:LSExp) :
      f(x) as LSExp
    (x:False|LSExp) :
      (f(x as LSExp) as LSExp) when x is LSExp
    (xs:Tuple<LSType>) :
      for x in xs map :
        f(x) as LSType
    (x:LSComm) :
      f(x) as LSComm
    (xs:Tuple<TDefn>) :
      for x in xs map :
        f(x) as TDefn
    (xs:Tuple<TFn>) :
      for x in xs map :
        f(x) as TFn
    (xs:Tuple<TExp>) :
      for x in xs map :
        f(x) as TExp
    (xs:Tuple<TBranch>) :
      for x in xs map :
        f(x) as TBranch
    (x:Type) :
      f(x) as Type
    (xs:Tuple<TDefmethod>) :
      for x in xs map :
        f(x) as TDefmethod
    (x:TRef) :
      f(x) as TRef
    (xs:Tuple<Type>) :
      for x in xs map :
        f(x) as Type
    (xs:Tuple<LSLabeledBlock>) :
      for x in xs map :
        f(x) as LSLabeledBlock
    (xs:Tuple<LSExp>) :
      for x in xs map :
        f(x) as LSExp
    (x:False|LSType) :
      (f(x as LSType) as LSType) when x is LSType
    (xs:Tuple<LSBranch>) :
      for x in xs map :
        f(x) as LSBranch
    (xs:Tuple<False|LSType>) :
      for x in xs map :
        (f(x as LSType) as LSType) when x is LSType
    (x:LSVar) :
      f(x) as LSVar

  defdoer (f:TLItem -> ?) : 
    (x:False|Type) :
      f(x as Type) when x is Type
    (x:Child) :
      f(parent(x))
    (xs:Tuple<Child>) :
      for x in xs do :
        f(parent(x))
    (x:TExp) :
      f(x)
    (xs:Tuple<False|Type>) :
      for x in xs do :
        f(x as Type) when x is Type
    (x:False|TExp) :
      f(x as TExp) when x is TExp
    (x:Field) :
      f(type(x))
    (xs:Tuple<Field>) :
      for x in xs do :
        f(type(x))
    (x:LSType) :
      f(x)
    (x:LSExp) :
      f(x)
    (x:False|LSExp) :
      f(x as LSExp) when x is LSExp
    (xs:Tuple<LSType>) :
      do(f,xs)
    (x:LSComm) :
      f(x)
    (xs:Tuple<TDefn>) :
      do(f,xs)
    (xs:Tuple<TFn>) :
      do(f, xs)
    (xs:Tuple<TExp>) :
      do(f, xs)
    (xs:Tuple<TBranch>) :
      do(f, xs)
    (x:Type) :
      f(x)
    (xs:Tuple<TDefmethod>) :
      do(f, xs)
    (x:TRef) :
      f(x)
    (xs:Tuple<Type>) :
      do(f,xs)
    (xs:Tuple<LSLabeledBlock>) :
      do(f,xs)
    (xs:Tuple<LSExp>) :
      do(f,xs)
    (x:False|LSType) :
      f(x as LSType) when x is LSType
    (xs:Tuple<LSBranch>) :
      do(f, xs)
    (xs:Tuple<False|LSType>) :
      for x in xs do :
        f(x as LSType) when x is LSType
    (x:LSVar) :
      f(x)

  ignore :
    Int
    FileInfo|False
    False|Selection
    ?
    Tuple<Int>
    True|False
    False|Int
    Symbol
    String
    Primitive
    LSPrimitive

;============================================================
;====================== Mapping =============================
;============================================================

public deftype TLItem :
  TComm <: TLItem
  TExp <: TLItem
  LSComm <: TLItem
  LSExp <: TLItem
  TypeItem <: TLItem