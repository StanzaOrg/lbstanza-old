defpackage stz/tl-to-dl :
  import core
  import collections
  import stz/tl-ir
  import stz/dl-ir
  import stz/types
  import stz/namemap
  import stz/visibility
  import stz/type-fargs

;============================================================
;================= Compute PackageIO ========================
;============================================================

;Compute the updated PackageIOs for the typed program.
public defn compute-packageios (p:TProg) -> TProg :
  val new-packages = for package in packages(p) map :
    val io = compute-packageio(package, namemap(p))
    sub-packageio(package, io)
  sub-packages(p, new-packages)

;Compute the updated PackageIO for the package.
;Populates the 'exports' field.
;Note that 'imports' field remains empty.
defn compute-packageio (p:TPackage, namemap:NameMap) -> PackageIO :
  ;Sanity check: The PackageIO for the package is not
  ;expected to be populated at this time.
  val old-io = packageio(p)
  if not empty?(imports(old-io)) or
     not empty?(exports(old-io)) :
    fatal("PackageIO for package has already populated.")

  ;Track the most current doc string.
  var prev-doc-string:String|False = false

  ;Add exports to this list.
  val export-list = Vector<Export>()
  for comm in comms(p) do :
    match(comm:TDoc) :
      prev-doc-string = string(comm)
    else :
      within (n, rec) = exports(comm, namemap) :
        val e = namemap[n]
        val ex = Export(n, visibility(e), rec, info(e), prev-doc-string)
        add(export-list, ex)
      prev-doc-string = false

  ;Fill the exports in the old PackageIO structure.
  sub-exports(old-io, to-tuple(export-list))

;============================================================
;================ Compute Export from TL-IR =================
;============================================================

;Compute the exported records in the given type command.
public defn exports (return:(Int, Rec) -> ?,
                     c:TComm,
                     namemap:NameMap) -> False :

  ;Helper: Convert into DType
  defn conv (t:Type, tvars:Tuple<Int>) : to-dtype(t, tvars, namemap)
  defn conv (t:LSType, tvars:Tuple<Int>) : to-dtype(t, tvars, namemap)
  defn conv (f:False, tvars:Tuple<Int>) : false

  match(c) :
  
    (c:TDefType) :
      val id = typeid(n(c), namemap)
      val ntargs = length(args(c))
      val dparent = conv(parent(c), args(c))
      val children = for c in children(c) map :
        val id = typeid(n(c), namemap)
        val ntargs = length(args(c))
        val parent = conv(parent(c), args(c)) as DOf
        Child(id, ntargs, parent)
      return(n(c), TypeRec(id, ntargs, dparent, children))
      
    (c:TLDefType) :
      val id = typeid(n(c), namemap)
      val ntargs = length(args(c))
      val parent = conv(parent(c), args(c))

      defn sfield (f:Field) -> StructField :
        StructField(name(f), conv(type(f), args(c)), mutable?(f))

      val [base, rest] = split-rest-field(fields(c))
      val base-fields = map(sfield,base)
      match(rest:Field) :
        val item-field = sfield(unwrap-rest(rest))
        return(n(c), StructRec(id, ntargs, parent, base-fields, item-field))
      else :
        return(n(c), StructRec(id, ntargs, parent, base-fields, false))      
      
    (c:TDef) :
      val id = valid(n(c), namemap)
      val type = conv(type(c) as Type, [])
      return(n(c), ValRec(id, type, false, false))
      
    (c:TDefTuple) :
      for (n in ns(c), t in types(c)) do :
        val id = valid(n, namemap)
        val type = conv(t as Type, [])
        return(n, ValRec(id, type, false, false))
      
    (c:TDefVar) :
      val id = valid(n(c), namemap)
      val type = conv(type(c) as Type, [])
      return(n(c), ValRec(id, type, true, false))
      
    (c:TDefn) :
      val [id, a2] = fnid(n(c), targs(c), cargs(c), a1(c), a2(c) as Type, namemap)
      return(n(c), FnRec(id, a2, false, tail?(c)))
      
    (c:TDefmulti) :
      val [id,a2] = fnid(n(c), targs(c), cargs(c), a1(c), a2(c) as Type, namemap)
      return(n(c), MultiRec(id, a2))
      
    (c:TLDef) :
      val id = valid(n(c), namemap)
      val type = conv(type(c), [])
      return(n(c), ValRec(id, type, false, true))
      
    (c:TLDefVar) :
      val id = valid(n(c), namemap)
      val type = conv(type(c), [])
      return(n(c), ValRec(id, type, true, true))
      
    (c:TLDefn) :
      val [id,a2] = fnid(n(c), targs(c), cargs(c), a1(c), a2(c), namemap)
      return(n(c), FnRec(id, a2, true, tail?(c)))
      
    (c:TLExternFn) :
      val pos-args = map(PositionalArg<LSType>{false, _}, a1(c))
      val [id,a2] = fnid(n(c), [], [], pos-args, a2(c), namemap)
      val ventry = namemap[n(c)]
      val lbl = name(ventry) when visibility(ventry) is-not Private
      return(n(c), ExternFnRec(id, a2, lbl))
      
    (c:TExtern) :
      val id = valid(n(c), namemap)
      val lbl = name(id)
      val type = conv(type(c), [])
      return(n(c), ExternRec(id, type, lbl))

    (c) :
      false

;============================================================
;=============== Convert Type to DType ======================
;============================================================

;Convert HiStanza type to DType.
;- tvars: The list of type variable identifiers. TVar
;  will be replaced with the indices into this array.
public defn to-dtype (t:Type, tvars:Tuple<Int>, namemap:NameMap) -> DType :

  ;Convert a variable into a DTVar by looking up index in
  ;tvars.
  defn lookup-var (n:Int) -> DTVar :
    DTVar(index-of!(tvars, n))

  ;Return all the types in the TAnd chain.
  defn and-types (t:TAnd) -> Vector<Type> :
    val ts = Vector<Type>()
    let loop (t:Type = t) :
      match(t:TAnd) : (loop(a(t)), loop(b(t)))
      else : add(ts, t)
    ts

  ;Return all the types in the TOr chain.
  defn or-types (t:TOr) -> Vector<Type> :
    val ts = Vector<Type>()
    let loop (t:Type = t) :
      match(t:TOr) : (loop(a(t)), loop(b(t)))
      else : add(ts, t)
    ts

  ;Recursively convert the type.
  defn conv (t:Type) -> DType :
    match(t) :
      (t:TCap) :
        DCap(lookup-var(n(t)))
      (t:TOf) :
        val id = typeid(n(t), namemap)
        DOf(id, conv(args(t)))                  
      (t:TTuple) :
        DTuple(conv(args(t)))
      (t:TOr) :
        DOr?(conv(or-types(t)))        
      (t:TAnd) : 
        DAnd?(conv(and-types(t)))
      (t:TVar) :
        lookup-var(n(t))
      (t:TArrow) :
        DArrow(conv(a1(t)), conv(a2(t)))
      (t:TGradual) :
        DTop()
      (t:TBot) :
        DBot()

  ;Convert multiple types.
  defn conv (ts:Seqable<Type>) -> Tuple<DType> :
    to-tuple(seq(conv, ts))

  ;Launch!
  conv(t)

;Convert LoStanza type to DType.
;- tvars: The list of type variable identifiers. TVar
;  will be replaced with the indices into this array.
public defn to-dtype (t:LSType, tvars:Tuple<Int>, namemap:NameMap) -> DType :

  ;Convert LSType into a DType.
  defn conv (t:LSType) -> DType :
    match(t) :      
      (t:ByteT) :
        DByte()
      (t:IntT) :
        DInt()
      (t:LongT) :
        DLong()
      (t:FloatT) :
        DFloat()
      (t:DoubleT) :
        DDouble()
      (t:UnknownT) :
        DUnknown()
      (t:PtrT) :
        DPtrT(conv(type(t)))
      (t:RefT) :
        to-dtype(type(t), tvars, namemap)
      (t:FnT) :
        DFnT(map(conv,a(t)), conv(r(t)), conv(b(t)))
      (t:StructT) :
        val id = typeid(n(t), namemap)
        val args = map(to-dtype{_, tvars, namemap}, args(t))
        DStructT(id, args)

  ;Do nothing for false to handle optional types.
  defn conv (f:False) -> False :
    false

  ;Launch!
  conv(t)

;Convert a TL-IR FArg|LSFArg into a DArg.
public defn to-darg (a:FArg<Type|LSType|False>, tvars:Tuple<Int>, namemap:NameMap) -> FArg<DType> :
  for t in a map :
    match(t:Type|LSType) :
      to-dtype(t, tvars, namemap)
    else :
      fatal("Missing type.")

;============================================================
;========= Convert Structured Ids from Identifiers ==========
;============================================================

;Retrieve the named TypeId for a given identifier.
defn typeid (n:Int, namemap:NameMap) -> TypeId :
  val entry = namemap[n]
  TypeId(package(entry), name(entry))

;Retrieve the named ValId for a given identifier.
defn valid (n:Int, namemap:NameMap) -> ValId :
  val entry = namemap[n]
  ValId(package(entry), name(entry))

;Retrieve the named FnId for a given identifier.
;- a1: Assume that types have been fully computed.
defn fnid (n:Int, targs:Tuple<Int>, cargs:Tuple<Int>,
           a1:Tuple<FArg<Type|LSType|False>>, a2:Type|LSType, namemap:NameMap) -> [FnId, DType] :
  val entry = namemap[n]
  val tvars = to-tuple(cat(targs, cargs))
  val args = map(to-darg{_, tvars, namemap}, a1)
  val id = FnId(package(entry), name(entry), length(targs), length(cargs), args)
  val da2 = to-dtype(a2, tvars, namemap)
  [id, da2]

;============================================================
;=============== Conversion from DL to TL ===================
;============================================================

;Convert a DL record into a type-level type definition.
;Requires an active DL id environment.
public defn to-deftype (rec:StructRec|TypeRec) -> TDefType|TLDefType :

  ;Helper: Create a Tuple<TVar> from their ids.
  defn to-tvars (xs:Seqable<Int>) -> Tuple<TVar> :
    to-tuple(seq(TVar{_, false}, xs))

  ;Helper: Append 'b' to 'a' if b is given. 
  defn append? (a:Seqable<Field>, b:Field|False) -> Tuple<Field> :
    match(b:Field) : to-tuple(cat(a, [b]))
    else : to-tuple(a)
    
  match(rec) :
    (rec:StructRec) :
      val n = env-id(id(rec))
      val targ-ns = to-tuple(0 to ntargs(rec))
      val type-args = to-tvars(targ-ns)
      val parent = to-type?(parent(rec), type-args)
      val base-fields = for f in base(rec) seq :
        val type = to-lstype(type(f), type-args)
        Field(name(f), type, mutable?(f))
      val item-field = match(items(rec)) :
        (items:StructField) :
          val type = RestT(to-lstype(type(items), type-args))
          Field(name(items), type, mutable?(items))
        (items:False) : false
      TLDefType(false, n, targ-ns, parent, append?(base-fields, item-field))
      
    (rec:TypeRec) :
      val n = env-id(id(rec))
      val targ-ns = to-tuple(0 to ntargs(rec))
      val type-args = to-tvars(targ-ns)      
      val parent = to-type?(parent(rec), type-args)
      val children = for c in children(rec) map :
        val n = env-id(id(c))
        val targ-ns = to-tuple(0 to ntargs(c))
        val type-args = to-tvars(targ-ns)        
        val parent = to-type(/parent(c), type-args)
        Child(n, targ-ns, parent)
      TDefType(false, n, targ-ns, parent, children)

;If the record has a corresponding type, then return it,
;otherwise return false.
public defn to-type (r:Rec) -> Type|LSType|False :
  match(r) :
    (r:ValRec) :
      if lostanza?(r) : to-lstype(type(r), [])
      else : to-type(type(r), [])      
    (r:FnRec) :
      if lostanza?(r) : to-lstype(id(r) as FnId, a2(r))
      else : to-type(id(r) as FnId, a2(r))
    (r:MultiRec) :
      to-type(id(r) as FnId, a2(r))
    (r:ExternFnRec) :
      to-lstype(id(r) as FnId, a2(r))
    (r:ExternRec) :
      to-lstype(type(r), [])
    (r) :
      false

;Convert to HiStanza function type.
public defn to-type (id:FnId, a2:DType) -> TFunction :
  val id-counter = to-seq(0 to false)
  val tvars = to-tuple(take-n(ntargs(id), id-counter))
  val cvars = to-tuple(take-n(ncargs(id), id-counter))
  val targs = to-tuple(seq(TVar{_, false}, cat(tvars,cvars)))
  val new-a1 = map(to-farg{_, targs}, a1(id))
  val new-a2 = to-type(a2, targs)  
  TFunction(tvars, cvars, new-a1, new-a2)

;Convert to LoStanza function type.
public defn to-lstype (id:FnId, a2:DType) -> TLSFunction :
  val id-counter = to-seq(0 to false)
  val tvars = to-tuple(take-n(ntargs(id), id-counter))
  val cvars = to-tuple(take-n(ncargs(id), id-counter))
  val targs = to-tuple(seq(TVar{_, false}, cat(tvars,cvars)))
  val new-a1 = map(to-lsfarg{_, targs}, a1(id))
  val new-a2 = to-lstype(a2, targs)  
  TLSFunction(tvars, cvars, new-a1, new-a2)  

;Convert to FArg.
public defn to-farg (a:FArg<DType>, type-args:Tuple<Type>) -> FArg<Type> :
  map(to-type{_, type-args}, a)

;Convert to LSFArg.
public defn to-lsfarg (a:FArg<DType>, type-args:Tuple<Type>) -> FArg<LSType> :
  map(to-lstype{_, type-args}, a)

;Convert DType with the given type arguments into Type.
public defn to-type (t:DType, type-args:Tuple<Type>) -> Type :
  let loop (t:DType = t) :
    match(t) :
      (t:DOf) : TOf(env-id(id(t)), map(loop,targs(t)))
      (t:DTVar) : type-args[index(t)]
      (t:DCap) : TCap(n(loop(tvar(t)) as TVar), false)
      (t:DAnd) : reduce(TAnd, seq(loop, types(t)))
      (t:DOr) : reduce(TOr, seq(loop, types(t)))
      (t:DTop) : TGradual()
      (t:DBot) : TBot()
      (t:DTuple)  : TTuple(map(loop,types(t)))
      (t:DArrow)  : TArrow(map(loop,a1(t)), loop(a2(t)))

;Convert DType with the given type arguments into LSType.
public defn to-lstype (t:DType, type-args:Tuple<Type>) -> LSType :
  let loop (t:DType = t) :
    match(t) :
      (t:DByte) : ByteT()
      (t:DInt) : IntT()
      (t:DLong) : LongT()
      (t:DFloat) : FloatT()
      (t:DDouble) : DoubleT()
      (t:DUnknown) : UnknownT()
      (t:DPtrT) : PtrT(loop(type(t)))
      (t:DFnT) : FnT(map(loop,a(t)), to-lstype?(r(t),type-args), loop(b(t)))
      (t:DStructT) : StructT(env-id(id(t)), map(to-type{_, type-args},targs(t)))
      (t) : RefT(to-type(t, type-args))

;------------------------------------------------------------
;--------------------- Convenience --------------------------
;------------------------------------------------------------

;Convert an optional DType into an optional Type.
public defn to-type? (t:DType|False, type-args:Tuple<Type>) -> Type|False :
  match(t:DType) : to-type(t, type-args)

;Convert an optional DType into an optional LSType.
public defn to-lstype? (t:DType|False, type-args:Tuple<Type>) -> LSType|False :
  match(t:DType) : to-lstype(t, type-args)