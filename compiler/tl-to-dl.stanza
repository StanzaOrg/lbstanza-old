defpackage stz/tl-to-dl :
  import core
  import collections
  import stz/namemap with:
    prefix(EType, Private, Public, Protected) => NM
  import stz/tl-ir
  import stz/dl-ir
  import stz/visibility

;============================================================
;============= Extract Exports from TPackage ================
;============================================================

public defn compute-packageios (p:TProg, namemap:NameMap) :
  val packages* = map(compute-packageio{_, namemap}, packages(p))
  sub-packages(p, packages*)

defn compute-packageio (p:TPackage, namemap:NameMap) -> TPackage :
  val io = packageio(p)
  val io* = sub-exports(io, compute-exports(p, namemap))
  sub-packageio(p, io*)

defn compute-exports (p:TPackage, namemap:NameMap) :
  ;Utilities
  defn get-package (n:Int) : package(namemap[n])
  defn get-name (n:Int) : name(namemap[n])
  defn get-typeid (n:Int) : TypeId(get-package(n), get-name(n))
  defn get-valid (n:Int) : ValId(get-package(n), get-name(n))
  defn get-fnid (n:Int, targs:Seqable<Int>, cargs:Seqable<Int>, a1:Seqable<Type|False>, a2:Type|False) :
    val targs* = to-tuple(targs)
    val cargs* = to-tuple(cargs)
    val tcargs* = to-tuple(cat(targs*,cargs*))
    val a1* = to-tuple(seq(to-dtype{_ as Type, tcargs*}, a1))
    val a2* = to-dtype(a2 as Type, tcargs*)
    [FnId(get-package(n), get-name(n), length(targs*), length(cargs*), a1*), a2*]
  defn get-fnid (n:Int, targs:Seqable<Int>, cargs:Seqable<Int>, a1:Seqable<LSType>, a2:LSType) :
    val targs* = to-tuple(targs)
    val cargs* = to-tuple(cargs)
    val tcargs* = to-tuple(cat(targs*,cargs*))
    val a1* = to-tuple(seq(to-dtype{_, tcargs*}, a1))
    val a2* = to-dtype(a2, tcargs*)
    [FnId(get-package(n), get-name(n), length(targs*), length(cargs*), a1*), a2*]

  ;Type Conversion
  defn to-dtype (t:Type, targs0:Seqable<Int>) :
    val targs = to-tuple(targs0)
    defn lookup-var (n:Int) :
      DTVar(index-of!(targs, n))
    defn and-types (t:Type) :
      val ts = Vector<Type>()
      let loop (t:Type = t) :
        match(t:TAnd) : (loop(a(t)), loop(b(t)))
        else : add(ts, t)
      ts
    defn or-types (t:Type) :
      val ts = Vector<Type>()
      let loop (t:Type = t) :
        match(t:TOr) : (loop(a(t)), loop(b(t)))
        else : add(ts, t)
      ts
    let loop (t:Type = t) :
      match(t) :
        (t:TCap) : DCap(lookup-var(n(t)))
        (t:TOf) : DOf(get-typeid(n(t)), to-tuple(targs)) where :
                    val targs = seq(loop, types(type(t) as TTuple))
        (t:TTuple) : DTuple(to-tuple(seq(loop,types(t))))
        (t:TOr) : DOr?(seq(loop, cat(or-types(a(t)), or-types(b(t)))))
        (t:TAnd) : DAnd?(seq(loop, cat(and-types(a(t)), and-types(b(t)))))
        (t:TVar) : lookup-var(n(t))
        (t:TArrow) : DArrow(a1, a2) where :
                       val a1 = to-tuple(seq(loop, types(a(t) as TTuple)))
                       val a2 = loop(b(t))
        (t:TGradual) : DTop()
        (t:TBot) : DBot()

  defn to-dtype (t:LSType, targs0:Seqable<Int>) :
    val targs = to-tuple(targs0)
    let loop (t:LSType = t) :      
      match(t) :
        (t:ByteT) : DByte()
        (t:IntT) : DInt()
        (t:LongT) : DLong()
        (t:FloatT) : DFloat()
        (t:DoubleT) : DDouble()
        (t:UnknownT) : DUnknown()
        (t:PtrT) : DPtrT(loop(type(t)))
        (t:RefT) : to-dtype(type(t), targs)
        (t:FnT) : DFnT(a*, r*, b*) where :
          val a* = to-tuple(seq(loop,a(t)))
          val r* = match(r(t):LSType) : loop(r(t) as LSType)
          val b* = loop(b(t))
        (t:StructT) : DStructT(get-typeid(n(t)), to-tuple(targs)) where :
                        val targs = for t in types(type(t) as TTuple) seq :
                                      to-dtype(t, targs)
  defn to-dtype (t:Type) : to-dtype(t, [])
  defn to-dtype (t:LSType) : to-dtype(t, [])
  defn to-dtype? (t:Type, targs:Seqable<Int>) : to-dtype(t, targs)
  defn to-dtype? (t:LSType, targs:Seqable<Int>) : to-dtype(t, targs)
  defn to-dtype? (f:False, targs:Seqable<Int>) : false

  ;Discover all exported entries.
  val exports = Vector<Export>()
  defn export (n:Int, r:Rec, doc?:False|String) :
    val [vis, info] =
      if key?(namemap,n) :
        val e = namemap[n]
        [visibility(e), info(e)]
      else :
        [Private, false]
    add(exports, Export(n, vis, r, info, doc?))

  ;Scan through every command in the program.
  let loop (comms:List<TComm> = comms(p),
            last-doc?:String|False = false) :
    if not empty?(comms) :
      val c = head(comms)
      match(c) :
        (c:TDoc) :
          loop(tail(comms), string(c))
        (c:TDefType) :
          val id = get-typeid(n(c))
          val ntargs = length(args(c))
          val dparent = to-dtype?(parent(c), args(c))
          val children = to-tuple $ for c in children(c) seq :
            val id = get-typeid(n(c))
            val ntargs = length(args(c))
            val parent = to-dtype(parent(c), args(c)) as DOf
            Child(id, ntargs, parent)
          export(n(c), TypeRec(id, ntargs, dparent, children), last-doc?)
          loop(tail(comms), false)
        (c:TLDefType) :
          val id = get-typeid(n(c))
          val ntargs = length(args(c))
          val parent = to-dtype?(parent(c), args(c))
          val last-field-type = type(last(fields(c))) when not empty?(fields(c))
          defn sfield (f:Field) : StructField(name(f), to-dtype(type(f), args(c)), mutable?(f))
          val [base-fields, items-field] =
            match(last-field-type:RestT) :
              val lf = last(fields(c))
              [to-tuple(seq(sfield, but-last(fields(c))))                
               StructField(name(lf), to-dtype(type(last-field-type), args(c)), mutable?(lf))]
            else :
              [to-tuple(seq(sfield,fields(c))), false]
          export(n(c), StructRec(id, ntargs, parent, base-fields, items-field), last-doc?)
          loop(tail(comms), false)
        (c:TDef) :
          val id = get-valid(n(c))
          val type = to-dtype(type(c) as Type)
          export(n(c), ValRec(id, type, false, false), last-doc?)
          loop(tail(comms), false)
        (c:TDefTuple) :
          for (n in ns(c), t in types(c)) do :
            val id = get-valid(n)
            val type = to-dtype(t as Type)
            export(n, ValRec(id, type, false, false), last-doc?)
          loop(tail(comms), false)
        (c:TDefVar) :
          val id = get-valid(n(c))
          val type = to-dtype(type(c) as Type)
          export(n(c), ValRec(id, type, true, false), last-doc?)
          loop(tail(comms), false)
        (c:TDefn) :
          val [id, a2] = get-fnid(n(c), targs(c), cargs(c), a1(c), a2(c))
          export(n(c), FnRec(id, a2, false, tail?(c)), last-doc?)
          loop(tail(comms), false)
        (c:TDefmulti) :
          val [id, a2] = get-fnid(n(c), targs(c), cargs(c), a1(c), a2(c))
          export(n(c), MultiRec(id, a2), last-doc?)
          loop(tail(comms), false)
        (c:TLDef) :
          val id = get-valid(n(c))
          val type = to-dtype(type(c))
          export(n(c), ValRec(id, type, false, true), last-doc?)
          loop(tail(comms), false)
        (c:TLDefVar) :
          val id = get-valid(n(c))
          val type = to-dtype(type(c))
          export(n(c), ValRec(id, type, true, true), last-doc?)
          loop(tail(comms), false)
        (c:TLDefn) :
          val [id, a2] = get-fnid(n(c), targs(c), cargs(c), a1(c), a2(c))
          export(n(c), FnRec(id, a2, true, tail?(c)), last-doc?)
          loop(tail(comms), false)
        (c:TLExternFn) :
          val ventry = namemap[n(c)]
          val lbl = name(ventry) when visibility(ventry) is-not Private
          val [id, a2] = get-fnid(n(c), [], [], a1(c), a2(c))
          export(n(c), ExternFnRec(id, a2, lbl), last-doc?)
          loop(tail(comms), false)
        (c:TExtern) :
          val id = get-valid(n(c))
          val type = to-dtype(type(c))
          export(n(c), ExternRec(id, type, get-name(n(c))), last-doc?)
          loop(tail(comms), false)
        (c) :
          ;Note: This throws away doc strings that do not precede an
          ;exported definition.          
          loop(tail(comms), false)
  
  to-tuple(exports)

;============================================================
;================ Convert DType to Type =====================
;============================================================

public defn to-type? (t:DType, type-args:Tuple<Type>) :
  to-type(t, type-args)
public defn to-type? (t:False, type-args:Tuple<Type>) :
  false

public defn to-type (t:DType, type-args:Tuple<Type>) :
  defn loop (t:DType) :
    defn to-tuple (ts:Tuple<DType>) :
      TTuple(to-list(seq(loop, ts)))
    match(t) :
      (t:DOf) : TOf(env-id(id(t)), to-tuple(targs(t)))
      (t:DTVar) : type-args[index(t)]
      (t:DCap) : TCap(n(loop(tvar(t)) as TVar), false)
      (t:DAnd) : reduce(TAnd, seq(loop, types(t)))
      (t:DOr) : reduce(TOr, seq(loop, types(t)))
      (t:DTop) : TGradual()
      (t:DBot) : TBot()
      (t:DTuple)  : to-tuple(types(t))
      (t:DArrow)  : TArrow(to-tuple(a1(t)), loop(a2(t)))
  loop(t)

public defn to-lstype (t:DType, type-args:Tuple<Type>) :
  defn loop (t:DType) -> LSType :
    defn to-tuple (ts:Tuple<DType>) :      
      val dts = seq(to-type{_, type-args}, ts)
      TTuple(to-list(dts))
    match(t) :
      (t:DByte) : ByteT()
      (t:DInt) : IntT()
      (t:DLong) : LongT()
      (t:DFloat) : FloatT()
      (t:DDouble) : DoubleT()
      (t:DUnknown) : UnknownT()
      (t:DPtrT) : PtrT(loop(type(t)))
      (t:DFnT) : FnT(a*, r*, b*) where :
        val a* = to-list(seq(loop,a(t)))
        val r* = match(r(t)) :
                   (r:DType) : loop(r)
                   (r:False) : false
        val b* = loop(b(t))
      (t:DStructT) : StructT(env-id(id(t)), to-tuple(targs(t)))
      (t) : RefT(to-type(t, type-args))
  loop(t)

public defn to-deftype (rec:StructRec|TypeRec) :
  defn to-tvars (xs:Seqable<Int>) :
    to-tuple(seq(TVar{_, false}, xs))
  defn append? (a:Seqable<Field>, b:Field|False) :
    match(b:Field) : to-list(cat(a, [b]))
    else : to-list(a)
    
  match(rec) :
    (rec:StructRec) :
      val n = env-id(id(rec))
      val type-args = to-tvars(0 to ntargs(rec))
      val targ-ns = to-list(0 to ntargs(rec))
      val parent = to-type?(parent(rec), type-args)
      val base-fields = for f in base(rec) seq :
        val type = to-lstype(type(f), type-args)
        Field(name(f), type, mutable?(f))
      val item-field = match(items(rec)) :
        (items:StructField) :
          val type = RestT(to-lstype(type(items), type-args))
          Field(name(items), type, mutable?(items))
        (items:False) : false
      TLDefType(n, targ-ns, parent, append?(base-fields, item-field), false)
    (rec:TypeRec) :
      val n = env-id(id(rec))
      val type-args = to-tvars(0 to ntargs(rec))
      val targ-ns = to-list(0 to ntargs(rec))
      val parent = to-type?(parent(rec), type-args)
      val children = to-list $ for c in children(rec) seq :
        val n = env-id(id(c))
        val type-args = to-tvars(0 to ntargs(c))
        val targ-ns = to-list(0 to ntargs(c))
        val parent = to-type(/parent(c), type-args)
        Child(n, targ-ns, parent)
      TDefType(n, targ-ns, parent, children, false)

public defn get-type (rec:Rec) -> Type|LSType :
  defn tcvars (ntargs:Int, ncargs:Int) :
    val targs = to-list(0 to ntargs)
    val cargs = to-list(ntargs to ntargs + ncargs)
    val tcargs = to-tuple $ seq(TVar{_,false}, cat(targs,cargs))
    [targs, cargs, tcargs]
    
  defn fntype (id:FnId, a2:DType) :
    val [targs, cargs, tcargs] = tcvars(ntargs(id), ncargs(id))
    val a1* = to-list(seq(to-type{_, tcargs}, a1(id)))
    val a2* = to-type(a2, tcargs)
    val t* = TArrow(TTuple(a1*), a2*)
    if empty?(tcargs) : t*
    else : TPoly(targs, cargs, t*)
    
  defn lsfntype (id:FnId, a2:DType) :
    val [targs, cargs, tcargs] = tcvars(ntargs(id), ncargs(id))
    val a1* = to-list(seq(to-lstype{_, tcargs}, a1(id)))
    val a2* = to-lstype(a2, tcargs)
    val t* = FnT(a1*, false, a2*)
    if empty?(tcargs) : t*
    else : PolyT(targs, cargs, t*)
  
  match(rec) :
    (rec:ValRec) :
      if lostanza?(rec) : to-lstype(type(rec), [])
      else : to-type(type(rec), [])
    (rec:FnRec) :
      if lostanza?(rec) : lsfntype(id(rec) as FnId, a2(rec))
      else : fntype(id(rec) as FnId, a2(rec))
    (rec:MultiRec) :
      fntype(id(rec) as FnId, a2(rec))
    (rec:ExternFnRec) :
      lsfntype(id(rec) as FnId, a2(rec))
    (rec:ExternRec) :
      to-lstype(type(rec), [])
    (rec) :
      fatal("Cannot extract type from record: %_" % [rec])
