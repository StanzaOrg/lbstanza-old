defpackage stz/namemap :
   import core
   import verse
   import stz/ids

public defstruct VEntry :
   n: Int
   package: Symbol
   name: Symbol
   visibility: Vis
   type: EType
   info: FileInfo   

public definterface Vis
public defstruct Private <: Vis
public defstruct Protected <: Vis
public defstruct Public <: Vis
public defstruct Local <: Vis

public definterface EType
public defstruct ValE <: EType
public defstruct VarE <: EType
public defstruct TVarE <: EType
public defstruct CapVarE <: EType
public defstruct TypeE <: EType
public defstruct MultiE <: EType
public defstruct FnE <: EType
public defstruct LValE <: EType
public defstruct LVarE <: EType
public defstruct LFnE <: EType
public defstruct LTypeE <: EType
public defstruct FieldE <: EType
public defstruct LabelE <: EType

defmethod print (o:OutputStream, t:EType) :
   print{o, _} $ match(t) :
      (t:ValE) : "ValE"
      (t:VarE) : "VarE"
      (t:TVarE) : "TVarE"
      (t:CapVarE) : "CapVarE"
      (t:TypeE) : "TypeE"
      (t:MultiE) : "MultiE"
      (t:FnE) : "FnE"
      (t:LValE) : "LValE"
      (t:LVarE) : "LVarE"
      (t:LFnE) : "LFnE"
      (t:LTypeE) : "LTypeE"
      (t:FieldE) : "FieldE"
      (t:LabelE) : "LabelE"

defmethod equal? (a:EType, b:EType) :
   match(a, b) :
      (a:ValE, b:ValE) : true
      (a:VarE, b:VarE) : true
      (a:TVarE, b:TVarE) : true
      (a:CapVarE, b:CapVarE) : true
      (a:TypeE, b:TypeE) : true
      (a:MultiE, b:MultiE) : true
      (a:FnE, b:FnE) : true
      (a:LValE, b:LValE) : true
      (a:LVarE, b:LVarE) : true
      (a:LFnE, b:LFnE) : true
      (a:LTypeE, b:LTypeE) : true
      (a:FieldE, b:FieldE) : true
      (a:LabelE, b:LabelE) : true
      (a, b) : false

public definterface NameMap <: Gettable<Int,VEntry>
public defmulti register (n:NameMap, n:Int, package:Symbol, name:Symbol, visibility:Vis, type:EType, info:FileInfo) -> False
public defmulti globals (n:NameMap) -> Streamable<VEntry>
public defmulti key? (n:NameMap, i:Int) -> True|False
   
public defn NameMap () :
   val globals = Vector<VEntry>()
   val table = HashTable<Int,VEntry>({_})
   
   defn add-entry (e:VEntry) :
      table[n(e)] = e
      add(globals, e) when visibility(e) not-typeof Local

   new NameMap :
      defmethod register (this, n:Int, package:Symbol, name:Symbol, visibility:Vis, type:EType, info:FileInfo) -> False :
         println("register ~ ~/~ @~ as ~" << [type package name info n])
         add-entry(VEntry(n, package, name, visibility, type, info))
      defmethod get (this, n:Int) -> VEntry :
         table[n]
      defmethod globals (this) :
         globals
      defmethod key? (this, i:Int) :
         key?(table, i)

public defn resolve-type (nm:NameMap, package-name:Symbol, type-name:Symbol) :
   for g in globals(nm) search :
      if package(g) == package-name and
         name(g) == type-name and
         type(g) typeof TypeE :
         n(g)