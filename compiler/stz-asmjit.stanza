defpackage stz/asmjit :
  import core

;============================================================
;================== Extern Definitions ======================
;============================================================

extern jit_runtime_new: () -> ptr<?>
extern jit_runtime_delete: (ptr<?>) -> int
extern jit_runtime_add: (ptr<?>, ptr<?>) -> ptr<?>
extern jit_runtime_release: (ptr<?>, ptr<?>) -> int
extern code_holder_new: (ptr<?>) -> ptr<?>
extern code_holder_reset: (ptr<?>) -> int
extern code_holder_delete: (ptr<?>) -> int
extern code_holder_label_offset: (ptr<?>, ptr<?>) -> long
extern code_holder_size: (ptr<?>) -> long
extern code_holder_flatten: (ptr<?>) -> int
extern assembler_new: (ptr<?>) -> ptr<?>
extern assembler_delete: (ptr<?>) -> int
extern assembler_new_label: (ptr<?>) -> ptr<?>
extern assembler_bind: (ptr<?>, ptr<?>) -> int
extern assembler_push: (ptr<?>, ptr<?>) -> int
extern assembler_pop: (ptr<?>, ptr<?>) -> int
extern assembler_call_label: (ptr<?>, ptr<?>) -> int
extern assembler_call_reg: (ptr<?>, ptr<?>) -> int
extern assembler_ret: (ptr<?>) -> int
extern assembler_mov_int: (ptr<?>, ptr<?>, int) -> int
extern assembler_mov_long: (ptr<?>, ptr<?>, long) -> int
extern assembler_mov_label: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_movsx: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_movsxd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mov_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mov_xmm_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mov_reg_xmm: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mov_gp_ptr: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mov_ptr_gp: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_lea_ptr: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_jmp_label: (ptr<?>, ptr<?>) -> int
extern assembler_jmp_mem: (ptr<?>, ptr<?>) -> int
extern assembler_jmp_reg: (ptr<?>, ptr<?>) -> int
extern assembler_je: (ptr<?>, ptr<?>) -> int
extern assembler_jne: (ptr<?>, ptr<?>) -> int
extern assembler_js: (ptr<?>, ptr<?>) -> int
extern assembler_jns: (ptr<?>, ptr<?>) -> int
extern assembler_jg: (ptr<?>, ptr<?>) -> int
extern assembler_jge: (ptr<?>, ptr<?>) -> int
extern assembler_jl: (ptr<?>, ptr<?>) -> int
extern assembler_jle: (ptr<?>, ptr<?>) -> int
extern assembler_ja: (ptr<?>, ptr<?>) -> int
extern assembler_jae: (ptr<?>, ptr<?>) -> int
extern assembler_jb: (ptr<?>, ptr<?>) -> int
extern assembler_jbe: (ptr<?>, ptr<?>) -> int
extern assembler_add_int: (ptr<?>, ptr<?>, long) -> int
extern assembler_add_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_sub_int: (ptr<?>, ptr<?>, long) -> int
extern assembler_sub_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_imul_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_div_reg: (ptr<?>, ptr<?>) -> int
extern assembler_mod_reg: (ptr<?>, ptr<?>) -> int
extern assembler_cqo_reg: (ptr<?>) -> int
extern assembler_cdq_reg: (ptr<?>) -> int
extern assembler_and_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_and_int: (ptr<?>, ptr<?>, int) -> int
extern assembler_or_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_xor_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_not_reg: (ptr<?>, ptr<?>) -> int
extern assembler_neg_reg: (ptr<?>, ptr<?>) -> int
extern assembler_shl_int: (ptr<?>, ptr<?>, int) -> int
extern assembler_shr_int: (ptr<?>, ptr<?>, int) -> int
extern assembler_ashr_int: (ptr<?>, ptr<?>, int) -> int
extern assembler_shl_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_shr_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_ashr_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_tzcnt_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_bt_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_bt_ptr_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_bts_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_bts_ptr_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_btr_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_btr_ptr_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_movss_xmm_xmm: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_movss_mem_xmm: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_movss_xmm_mem: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_movsd_xmm_xmm: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_movsd_mem_xmm: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_movsd_xmm_mem: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_cvtss2sd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_cvtsd2ss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_cvtsi2ss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_cvtsi2sd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_cvtss2si: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_cvtsd2si: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_addss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_addsd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_subss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_subsd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mulss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_mulsd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_divss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_divsd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_minss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_minsd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_maxss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_maxsd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_sqrtss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_sqrtsd: (ptr<?>, ptr<?>, ptr<?>) -> int

extern assembler_cmp_reg: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_cmp_int: (ptr<?>, ptr<?>, int) -> int
extern assembler_ucomiss: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_ucomisd: (ptr<?>, ptr<?>, ptr<?>) -> int
extern assembler_set_c: (ptr<?>, ptr<?>) -> int
extern assembler_set_e: (ptr<?>, ptr<?>) -> int
extern assembler_set_ne: (ptr<?>, ptr<?>) -> int
extern assembler_set_s: (ptr<?>, ptr<?>) -> int
extern assembler_set_ns: (ptr<?>, ptr<?>) -> int
extern assembler_set_g: (ptr<?>, ptr<?>) -> int
extern assembler_set_ge: (ptr<?>, ptr<?>) -> int
extern assembler_set_l: (ptr<?>, ptr<?>) -> int
extern assembler_set_le: (ptr<?>, ptr<?>) -> int
extern assembler_set_a: (ptr<?>, ptr<?>) -> int
extern assembler_set_ae: (ptr<?>, ptr<?>) -> int
extern assembler_set_b: (ptr<?>, ptr<?>) -> int
extern assembler_set_be: (ptr<?>, ptr<?>) -> int
extern x86_ptr_gp_base_const_offset_size: (ptr<?>, long, long) -> ptr<?>
extern x86_ptr_gp_base_index_const_shift_offset_size: (ptr<?>, ptr<?>, long, long, long) -> ptr<?>
extern x86_ptr_label_base_index_const_shift_offset_size: (ptr<?>, ptr<?>, long, long, long) -> ptr<?>
extern x86_ptr_label_base_const_index_size: (ptr<?>, long, long) -> ptr<?>
extern func_call: (ptr<?>) -> int
extern func_call1: (ptr<?>,long) -> int
extern func_call2: (ptr<?>,long,long) -> int

extern assembler_embed_label: (ptr<?>, ptr<?>) -> int

#for x86_reg in [x86_al x86_bl x86_cl x86_dl x86_sil x86_dil x86_spl x86_bpl x86_r8b x86_r9b x86_r10b x86_r11b
                 x86_r12b x86_r13b x86_r14b x86_r15b x86_eax x86_ebx x86_ecx x86_edx x86_esi x86_edi
                 x86_esp x86_ebp x86_r8d x86_r9d x86_r10d x86_r11d x86_r12d x86_r13d x86_r14d x86_r15d
                 x86_rax x86_rcx x86_rdx x86_rbx x86_rsi x86_rdi x86_rsp x86_rbp x86_r8 x86_r9 x86_r10
                 x86_r11 x86_r12 x86_r13 x86_r14 x86_r15 x86_xmm0 x86_xmm1 x86_xmm2 x86_xmm3 x86_xmm4
                 x86_xmm5 x86_xmm6 x86_xmm7 x86_xmm8 x86_xmm9 x86_xmm10 x86_xmm11 x86_xmm12 x86_xmm13
                 x86_xmm14 x86_xmm15 x86_rip] :
  extern x86_reg: () -> ptr<?>

;============================================================
;================== Wrapper Types ===========================
;============================================================

public lostanza deftype JitRuntime :
  value: ptr<?>

public lostanza deftype CodeHolder :
  value: ptr<?>

public lostanza deftype Assembler :
  value: ptr<?>
  var next-id: int

public lostanza deftype Label :
  value: ptr<?>
  id: int

public lostanza deftype Gp <: Equalable :
  value: ptr<?>
  id: int
  num-bytes: int

public lostanza deftype Rip :
  value: ptr<?>

public lostanza deftype Xmm <: Equalable :
  value: ptr<?>
  id: int

public lostanza deftype Func <: Unique :
  value: ptr<?>

public lostanza deftype MemPtr :
  value: ptr<?>

;------------------------------------------------------------
;------------------- Equality -------------------------------
;------------------------------------------------------------
defmethod equal? (a:Gp, b:Gp) -> True|False :
  id(a) == id(b)
  
defmethod equal? (a:Xmm, b:Xmm) -> True|False :
  id(a) == id(b)

;------------------------------------------------------------
;------------------- Printers -------------------------------
;------------------------------------------------------------
defmethod print (o:OutputStream, reg:Xmm) :
  print(o, "Xmm%_" % [id(reg)])

defmethod print (o:OutputStream, reg:Gp) :
  val w = "" when (num-bytes(reg) == 8) else ("i" when (num-bytes(reg) == 4) else "b")
  print(o, "R%_%_" % [id(reg), w])

defmethod print (o:OutputStream, l:Label) :
  print(o, "L%_" % [id(l)])

;------------------------------------------------------------
;------------------- HiStanza Wrappers ----------------------
;------------------------------------------------------------

public lostanza defn id (reg:ref<Xmm>) -> ref<Int> :
  return new Int{reg.id}

public lostanza defn id (reg:ref<Gp>) -> ref<Int> :
  return new Int{reg.id}

public lostanza defn num-bytes (reg:ref<Gp>) -> ref<Int> :
  return new Int{reg.num-bytes}

public lostanza defn id (l:ref<Label>) -> ref<Int> :
  return new Int{l.id}

lostanza defn next-id (a:ref<Assembler>) -> ref<Int> :
  val id = a.next-id
  a.next-id = a.next-id + 1
  return new Int{id}

public lostanza defn value (f:ref<Func>) -> ref<Long> :
  return new Long{f.value as long}

public lostanza defn flatten (code:ref<CodeHolder>) -> ref<False> :
  call-c code_holder_flatten(code.value)
  return false

public lostanza defn size (code:ref<CodeHolder>) -> ref<Long> :
  val res = call-c code_holder_size(code.value)
  return new Long{res}

;============================================================
;============== Memory Addressing Modes =====================
;============================================================

public lostanza defn MemPtr (base-ptr:ref<Gp>, offset:ref<Int>, size:ref<Int>) -> ref<MemPtr> :
  val p = call-c x86_ptr_gp_base_const_offset_size(base-ptr.value, offset.value, size.value)
  return new MemPtr{p}

public defn MemPtr (base-ptr:Gp, offset:Int) -> MemPtr :
  MemPtr(base-ptr, offset, 8)

public lostanza defn MemPtr (base-ptr:ref<Gp>, index-ptr:ref<Gp>, shift:ref<Int>, offset:ref<Int>, size:ref<Int>) -> ref<MemPtr> :
  val p = call-c x86_ptr_gp_base_index_const_shift_offset_size(base-ptr.value, index-ptr.value, shift.value, offset.value, size.value)
  return new MemPtr{p}

public defn MemPtr (base-ptr:Gp, index-ptr:Gp, shift:Int, offset:Int) -> MemPtr :
  MemPtr(base-ptr, index-ptr, shift, offset, 0)

public defn MemPtr (base-ptr:Gp, index-ptr:Gp, shift:Int) -> MemPtr :
  MemPtr(base-ptr, index-ptr, shift, 0)

public lostanza defn MemPtr (base-ptr:ref<Label>, index-ptr:ref<Gp>, shift:ref<Int>, offset:ref<Int>, size:ref<Int>) -> ref<MemPtr> :
  val p = call-c x86_ptr_label_base_index_const_shift_offset_size(base-ptr.value, index-ptr.value, shift.value, offset.value, size.value)
  return new MemPtr{p}

public lostanza defn MemPtr (base-ptr:ref<Label>, index:ref<Int>, size:ref<Int>) -> ref<MemPtr> :
  val p = call-c x86_ptr_label_base_const_index_size(base-ptr.value, index.value, size.value)
  return new MemPtr{p}

public defn MemPtr (base-ptr:Label, index:Int) -> MemPtr :
  MemPtr(base-ptr, index, 8)

public defn MemPtr (base-ptr:Label) -> MemPtr :
  MemPtr(base-ptr, 0, 8)

;============================================================
;=================== Registers ==============================
;============================================================

lostanza defn new-al () -> ref<Gp> :
  return new Gp{ call-c x86_al(), 0, 1 }
public val al = new-al()
lostanza defn new-bl () -> ref<Gp> :
  return new Gp{ call-c x86_bl(), 1, 1 }
public val bl = new-bl()
lostanza defn new-cl () -> ref<Gp> :
  return new Gp{ call-c x86_cl(), 2, 1 }
public val cl = new-cl()
lostanza defn new-dl () -> ref<Gp> :
  return new Gp{ call-c x86_dl(), 3, 1 }
public val dl = new-dl()
lostanza defn new-sil () -> ref<Gp> :
  return new Gp{ call-c x86_sil(), 4, 1 }
public val sil = new-sil()
lostanza defn new-dil () -> ref<Gp> :
  return new Gp{ call-c x86_dil(), 5, 1 }
public val dil = new-dil()
lostanza defn new-spl () -> ref<Gp> :
  return new Gp{ call-c x86_spl(), 6, 1 }
public val spl = new-spl()
lostanza defn new-bpl () -> ref<Gp> :
  return new Gp{ call-c x86_bpl(), 7, 1 }
public val bpl = new-bpl()
lostanza defn new-r8b () -> ref<Gp> :
  return new Gp{ call-c x86_r8b(), 8, 1 }
public val r8b = new-r8b()
lostanza defn new-r9b () -> ref<Gp> :
  return new Gp{ call-c x86_r9b(), 9, 1 }
public val r9b = new-r9b()
lostanza defn new-r10b () -> ref<Gp> :
  return new Gp{ call-c x86_r10b(), 10, 1 }
public val r10b = new-r10b()
lostanza defn new-r11b () -> ref<Gp> :
  return new Gp{ call-c x86_r11b(), 11, 1 }
public val r11b = new-r11b()
lostanza defn new-r12b () -> ref<Gp> :
  return new Gp{ call-c x86_r12b(), 12, 1 }
public val r12b = new-r12b()
lostanza defn new-r13b () -> ref<Gp> :
  return new Gp{ call-c x86_r13b(), 13, 1 }
public val r13b = new-r13b()
lostanza defn new-r14b () -> ref<Gp> :
  return new Gp{ call-c x86_r14b(), 14, 1 }
public val r14b = new-r14b()
lostanza defn new-r15b () -> ref<Gp> :
  return new Gp{ call-c x86_r15b(), 15, 1 }
public val r15b = new-r15b()

lostanza defn new-eax () -> ref<Gp> :
  return new Gp{ call-c x86_eax(), 0, 4 }
public val eax = new-eax()
lostanza defn new-ebx () -> ref<Gp> :
  return new Gp{ call-c x86_ebx(), 1, 4 }
public val ebx = new-ebx()
lostanza defn new-ecx () -> ref<Gp> :
  return new Gp{ call-c x86_ecx(), 2, 4 }
public val ecx = new-ecx()
lostanza defn new-edx () -> ref<Gp> :
  return new Gp{ call-c x86_edx(), 3, 4 }
public val edx = new-edx()
lostanza defn new-esi () -> ref<Gp> :
  return new Gp{ call-c x86_esi(), 4, 4 }
public val esi = new-esi()
lostanza defn new-edi () -> ref<Gp> :
  return new Gp{ call-c x86_edi(), 5, 4 }
public val edi = new-edi()
lostanza defn new-esp () -> ref<Gp> :
  return new Gp{ call-c x86_esp(), 6, 4 }
public val esp = new-esp()
lostanza defn new-ebp () -> ref<Gp> :
  return new Gp{ call-c x86_ebp(), 7, 4 }
public val ebp = new-ebp()
lostanza defn new-r8d () -> ref<Gp> :
  return new Gp{ call-c x86_r8d(), 8, 4 }
public val r8d = new-r8d()
lostanza defn new-r9d () -> ref<Gp> :
  return new Gp{ call-c x86_r9d(), 9, 4 }
public val r9d = new-r9d()
lostanza defn new-r10d () -> ref<Gp> :
  return new Gp{ call-c x86_r10d(), 10, 4 }
public val r10d = new-r10d()
lostanza defn new-r11d () -> ref<Gp> :
  return new Gp{ call-c x86_r11d(), 11, 4 }
public val r11d = new-r11d()
lostanza defn new-r12d () -> ref<Gp> :
  return new Gp{ call-c x86_r12d(), 12, 4 }
public val r12d = new-r12d()
lostanza defn new-r13d () -> ref<Gp> :
  return new Gp{ call-c x86_r13d(), 13, 4 }
public val r13d = new-r13d()
lostanza defn new-r14d () -> ref<Gp> :
  return new Gp{ call-c x86_r14d(), 14, 4 }
public val r14d = new-r14d()
lostanza defn new-r15d () -> ref<Gp> :
  return new Gp{ call-c x86_r15d(), 15, 4 }
public val r15d = new-r15d()

lostanza defn new-rax () -> ref<Gp> :
  return new Gp{ call-c x86_rax(), 0, 8 }
public val rax = new-rax()
lostanza defn new-rbx () -> ref<Gp> :
  return new Gp{ call-c x86_rbx(), 1, 8 }
public val rbx = new-rbx()
lostanza defn new-rcx () -> ref<Gp> :
  return new Gp{ call-c x86_rcx(), 2, 8 }
public val rcx = new-rcx()
lostanza defn new-rdx () -> ref<Gp> :
  return new Gp{ call-c x86_rdx(), 3, 8 }
public val rdx = new-rdx()
lostanza defn new-rsi () -> ref<Gp> :
  return new Gp{ call-c x86_rsi(), 4, 8 }
public val rsi = new-rsi()
lostanza defn new-rdi () -> ref<Gp> :
  return new Gp{ call-c x86_rdi(), 5, 8 }
public val rdi = new-rdi()
lostanza defn new-rsp () -> ref<Gp> :
  return new Gp{ call-c x86_rsp(), 6, 8 }
public val rsp = new-rsp()
lostanza defn new-rbp () -> ref<Gp> :
  return new Gp{ call-c x86_rbp(), 7, 8 }
public val rbp = new-rbp()
lostanza defn new-r8 () -> ref<Gp> :
  return new Gp{ call-c x86_r8(), 8, 8 }
public val r8 = new-r8()
lostanza defn new-r9 () -> ref<Gp> :
  return new Gp{ call-c x86_r9(), 9, 8 }
public val r9 = new-r9()
lostanza defn new-r10 () -> ref<Gp> :
  return new Gp{ call-c x86_r10(), 10, 8 }
public val r10 = new-r10()
lostanza defn new-r11 () -> ref<Gp> :
  return new Gp{ call-c x86_r11(), 11, 8 }
public val r11 = new-r11()
lostanza defn new-r12 () -> ref<Gp> :
  return new Gp{ call-c x86_r12(), 12, 8 }
public val r12 = new-r12()
lostanza defn new-r13 () -> ref<Gp> :
  return new Gp{ call-c x86_r13(), 13, 8 }
public val r13 = new-r13()
lostanza defn new-r14 () -> ref<Gp> :
  return new Gp{ call-c x86_r14(), 14, 8 }
public val r14 = new-r14()
lostanza defn new-r15 () -> ref<Gp> :
  return new Gp{ call-c x86_r15(), 15, 8 }
public val r15 = new-r15()

val gp8s  = [ al,  bl,  cl,  dl, sil, dil, spl, bpl, r8b, r9b, r10b, r11b, r12b, r13b, r14b, r15b]
val gp32s = [eax, ebx, ecx, edx, esi, edi, esp, ebp, r8d, r9d, r10d, r11d, r12d, r13d, r14d, r15d]
public val gp64s = [rax, rbx, rcx, rdx, rsi, rdi, rsp, rbp, r8,  r9,  r10,  r11,  r12,  r13,  r14,  r15]

public defn gp8  (reg:Gp) -> Gp : gp8s[id(reg)]
public defn gp32 (reg:Gp) -> Gp : gp32s[id(reg)]
public defn gp64 (reg:Gp) -> Gp : gp64s[id(reg)]

public defn gp-by-index (index:Int) :
  gp64s[index]

lostanza defn new-xmm0 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm0(), 0 }
public val xmm0 = new-xmm0()
lostanza defn new-xmm1 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm1(), 1 }
public val xmm1 = new-xmm1()
lostanza defn new-xmm2 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm2(), 2 }
public val xmm2 = new-xmm2()
lostanza defn new-xmm3 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm3(), 3 }
public val xmm3 = new-xmm3()
lostanza defn new-xmm4 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm4(), 4 }
public val xmm4 = new-xmm4()
lostanza defn new-xmm5 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm5(), 5 }
public val xmm5 = new-xmm5()
lostanza defn new-xmm6 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm6(), 6 }
public val xmm6 = new-xmm6()
lostanza defn new-xmm7 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm7(), 7 }
public val xmm7 = new-xmm7()
lostanza defn new-xmm8 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm8(), 8 }
public val xmm8 = new-xmm8()
lostanza defn new-xmm9 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm9(), 9 }
public val xmm9 = new-xmm9()
lostanza defn new-xmm10 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm10(), 10 }
public val xmm10 = new-xmm10()
lostanza defn new-xmm11 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm11(), 11 }
public val xmm11 = new-xmm11()
lostanza defn new-xmm12 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm12(), 12 }
public val xmm12 = new-xmm12()
lostanza defn new-xmm13 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm13(), 13 }
public val xmm13 = new-xmm13()
lostanza defn new-xmm14 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm14(), 14 }
public val xmm14 = new-xmm14()
lostanza defn new-xmm15 () -> ref<Xmm> :
  return new Xmm{ call-c x86_xmm15(), 15 }
public val xmm15 = new-xmm15()

lostanza defn new-rip () -> ref<Rip> :
  return new Rip{ call-c x86_rip() }
public val rip = new-rip()

;============================================================
;=================== JitRuntime API =========================
;============================================================

public lostanza defn jit-runtime-new () -> ref<JitRuntime> :
  return new JitRuntime{ call-c jit_runtime_new() }
public lostanza defn delete (rt:ref<JitRuntime>) -> ref<False> :
  call-c jit_runtime_delete(rt.value)
  return false
public lostanza defn add (rt:ref<JitRuntime>, c:ref<CodeHolder>) -> ref<Func> :
  val func = new Func{ call-c jit_runtime_add(rt.value, c.value) }
  return func
public lostanza defn release (rt:ref<JitRuntime>, func:ref<Long>) -> ref<False> :
  call-c jit_runtime_release(rt.value, func.value as ptr<?>)
  return false
public lostanza defn release (rt:ref<JitRuntime>, func:ref<Func>) -> ref<False> :
  call-c jit_runtime_release(rt.value, func.value)
  return false
public lostanza defn code-holder-new (rt:ref<JitRuntime>) -> ref<CodeHolder> :
  return new CodeHolder{ call-c code_holder_new(rt.value) }
public lostanza defn reset (c:ref<CodeHolder>) -> ref<False> :
  call-c code_holder_reset(c.value)
  return false

;============================================================
;=================== CodeHolder API =========================
;============================================================

public lostanza defn delete (c:ref<CodeHolder>) -> ref<False> :
  call-c code_holder_delete(c.value)
  return false

public lostanza defn label-offset (c:ref<CodeHolder>, f:ref<Label>) -> ref<Long> :
  return new Long{ call-c code_holder_label_offset(c.value, f.value) }

;============================================================
;=================== Assembler API ==========================
;============================================================

public lostanza defn assembler-new (c:ref<CodeHolder>) -> ref<Assembler> :
  return new Assembler{ call-c assembler_new(c.value), 0 }

;For use with `within'
public defn gen-code (f: (CodeHolder, Assembler) -> ?,
                      rt:JitRuntime) -> Func :
  val code = code-holder-new(rt)
  val assembler = assembler-new(code)
  f(code, assembler)
  val func = add(rt, code)
  delete(assembler)
  reset(code)
  delete(code)
  func

;------------------------------------------------------------
;-------------------- Labels --------------------------------
;------------------------------------------------------------

public lostanza defn new-label (a:ref<Assembler>) -> ref<Label> :
  return new Label{ call-c assembler_new_label(a.value), next-id(a).value }
public lostanza defn delete (a:ref<Assembler>) -> ref<False> :
  call-c assembler_delete(a.value)
  return false
public lostanza defn bind (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_bind(a.value, lab.value)
  return false
;Put (jmp) label in code stream for jmp tables
public lostanza defn embed (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_embed_label(a.value, lab.value)
  return false

;------------------------------------------------------------
;-------------------- Stack, Calls, Returns -----------------
;------------------------------------------------------------

public lostanza defn push (a:ref<Assembler>, reg:ref<Gp>) -> ref<False> :
  call-c assembler_push(a.value, reg.value)
  return false
public lostanza defn pop (a:ref<Assembler>, reg:ref<Gp>) -> ref<False> :
  call-c assembler_pop(a.value, reg.value)
  return false
public lostanza defn call (a:ref<Assembler>, f:ref<Label>) -> ref<False> :
  call-c assembler_call_label(a.value, f.value)
  return false
public lostanza defn call (a:ref<Assembler>, f:ref<Gp>) -> ref<False> :
  call-c assembler_call_reg(a.value, f.value)
  return false
public lostanza defn ret (a:ref<Assembler>) -> ref<False> :
  call-c assembler_ret(a.value)
  return false

;------------------------------------------------------------
;-------------------- Arithmetic ----------------------------
;------------------------------------------------------------

public lostanza defn add (a:ref<Assembler>, reg:ref<Gp>, value:ref<Int>) -> ref<Gp> :
  call-c assembler_add_int(a.value, reg.value, value.value)
  return reg
public lostanza defn add (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_add_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn imul (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_imul_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn div (a:ref<Assembler>, divisor:ref<Gp>) -> ref<False> :
  call-c assembler_div_reg(a.value, divisor.value)
  return false
public lostanza defn mod (a:ref<Assembler>, divisor:ref<Gp>) -> ref<False> :
  call-c assembler_mod_reg(a.value, divisor.value)
  return false
public lostanza defn cqo (a:ref<Assembler>) -> ref<False> :
  call-c assembler_cqo_reg(a.value)
  return false
public lostanza defn cdq (a:ref<Assembler>) -> ref<False> :
  call-c assembler_cdq_reg(a.value)
  return false
public lostanza defn and-op (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_and_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn and-op (a:ref<Assembler>, dst:ref<Gp>, src:ref<Int>) -> ref<Gp> :
  call-c assembler_and_int(a.value, dst.value, src.value)
  return dst
public lostanza defn or-op (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_or_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn xor-op (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_xor_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn not-op (a:ref<Assembler>, dst:ref<Gp>) -> ref<Gp> :
  call-c assembler_not_reg(a.value, dst.value)
  return dst
public lostanza defn neg (a:ref<Assembler>, dst:ref<Gp>) -> ref<Gp> :
  call-c assembler_neg_reg(a.value, dst.value)
  return dst
public lostanza defn sub (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_sub_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn sub (a:ref<Assembler>, dst:ref<Gp>, value:ref<Int>) -> ref<Gp> :
  call-c assembler_sub_int(a.value, dst.value, value.value)
  return dst
public lostanza defn shl (a:ref<Assembler>, dst:ref<Gp>, value:ref<Int>) -> ref<Gp> :
  call-c assembler_shl_int(a.value, dst.value, value.value)
  return dst
public lostanza defn shr (a:ref<Assembler>, dst:ref<Gp>, value:ref<Int>) -> ref<Gp> :
  call-c assembler_shr_int(a.value, dst.value, value.value)
  return dst
public lostanza defn ashr (a:ref<Assembler>, dst:ref<Gp>, value:ref<Int>) -> ref<Gp> :
  call-c assembler_ashr_int(a.value, dst.value, value.value)
  return dst
public lostanza defn shl (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_shl_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn shr (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_shr_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn ashr (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_ashr_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn mov (a:ref<Assembler>, dst:ref<Gp>, value:ref<Long>) -> ref<Gp> :
  call-c assembler_mov_long(a.value, dst.value, value.value)
  return dst
public lostanza defn mov (a:ref<Assembler>, dst:ref<Gp>, value:ref<Int>) -> ref<Gp> :
  call-c assembler_mov_int(a.value, dst.value, value.value)
  return dst
public lostanza defn mov (a:ref<Assembler>, dst:ref<Gp>, value:ref<Label>) -> ref<Gp> :
  call-c assembler_mov_label(a.value, dst.value, value.value)
  return dst
public lostanza defn movsx (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_movsx(a.value, dst.value, src.value)
  return dst
public lostanza defn movsxd (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_movsxd(a.value, dst.value, src.value)
  return dst
public lostanza defn mov (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_mov_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn mov (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Gp>) -> ref<Xmm> :
  call-c assembler_mov_xmm_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn mov (a:ref<Assembler>, dst:ref<Gp>, src:ref<Xmm>) -> ref<Gp> :
  call-c assembler_mov_reg_xmm(a.value, dst.value, src.value)
  return dst
public lostanza defn mov (a:ref<Assembler>, dst:ref<Gp>, ptr:ref<MemPtr>) -> ref<Gp> :
  call-c assembler_mov_gp_ptr(a.value, dst.value, ptr.value)
  return dst
public lostanza defn mov (a:ref<Assembler>, ptr:ref<MemPtr>, reg:ref<Gp>) -> ref<False> :
  call-c assembler_mov_ptr_gp(a.value, ptr.value, reg.value)
  return false
public lostanza defn lea (a:ref<Assembler>, dst:ref<Gp>, ptr:ref<MemPtr>) -> ref<Gp> :
  call-c assembler_lea_ptr(a.value, dst.value, ptr.value)
  return dst
public lostanza defn tzcnt (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_tzcnt_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn bt (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_bt_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn bt (a:ref<Assembler>, ptr:ref<MemPtr>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_bt_ptr_reg(a.value, ptr.value, src.value)
  return src
public lostanza defn bts (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_bts_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn bts (a:ref<Assembler>, ptr:ref<MemPtr>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_bts_ptr_reg(a.value, ptr.value, src.value)
  return src
public lostanza defn btr (a:ref<Assembler>, dst:ref<Gp>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_btr_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn btr (a:ref<Assembler>, ptr:ref<MemPtr>, src:ref<Gp>) -> ref<Gp> :
  call-c assembler_btr_ptr_reg(a.value, ptr.value, src.value)
  return src

;------------------------------------------------------------
;-------------------- Comparisons and Jumps -----------------
;------------------------------------------------------------

public lostanza defn cmp (a:ref<Assembler>, x:ref<Gp>, y:ref<Gp>) -> ref<False> :
  call-c assembler_cmp_reg(a.value, x.value, y.value)
  return false
public lostanza defn cmp (a:ref<Assembler>, x:ref<Gp>, y:ref<Int>) -> ref<False> :
  call-c assembler_cmp_int(a.value, x.value, y.value)
  return false

public lostanza defn set-c (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_c(a.value, x.value)
  return false
public lostanza defn set-e (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_e(a.value, x.value)
  return false
public lostanza defn set-ne (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_ne(a.value, x.value)
  return false
public lostanza defn set-s (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_s(a.value, x.value)
  return false
public lostanza defn set-ns (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_ns(a.value, x.value)
  return false
public lostanza defn set-g (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_g(a.value, x.value)
  return false
public lostanza defn set-ge (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_ge(a.value, x.value)
  return false
public lostanza defn set-l (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_l(a.value, x.value)
  return false
public lostanza defn set-le (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_le(a.value, x.value)
  return false
public lostanza defn set-a (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_a(a.value, x.value)
  return false
public lostanza defn set-ae (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_ae(a.value, x.value)
  return false
public lostanza defn set-b (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_b(a.value, x.value)
  return false
public lostanza defn set-be (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_set_be(a.value, x.value)
  return false

public lostanza defn jmp (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jmp_label(a.value, lab.value)
  return false
public lostanza defn jmp (a:ref<Assembler>, x:ref<Gp>) -> ref<False> :
  call-c assembler_jmp_reg(a.value, x.value)
  return false
public lostanza defn jmp (a:ref<Assembler>, ptr:ref<MemPtr>) -> ref<False> :
  call-c assembler_jmp_label(a.value, ptr.value)
  return false
public lostanza defn je (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_je(a.value, lab.value)
  return false
public lostanza defn jne (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jne(a.value, lab.value)
  return false
public lostanza defn js (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_js(a.value, lab.value)
  return false
public lostanza defn jns (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jns(a.value, lab.value)
  return false
public lostanza defn jg (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jg(a.value, lab.value)
  return false
public lostanza defn jge (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jge(a.value, lab.value)
  return false
public lostanza defn jl (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jl(a.value, lab.value)
  return false
public lostanza defn jle (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jle(a.value, lab.value)
  return false
public lostanza defn ja (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_ja(a.value, lab.value)
  return false
public lostanza defn jae (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jae(a.value, lab.value)
  return false
public lostanza defn jb (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jb(a.value, lab.value)
  return false
public lostanza defn jbe (a:ref<Assembler>, lab:ref<Label>) -> ref<False> :
  call-c assembler_jbe(a.value, lab.value)
  return false

;------------------------------------------------------------
;------------------------- Moves ----------------------------
;------------------------------------------------------------

public lostanza defn movss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_movss_xmm_xmm(a.value, dst.value, src.value)
  return dst
public lostanza defn movss (a:ref<Assembler>, dst:ref<MemPtr>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_movss_xmm_mem(a.value, dst.value, src.value)
  return false
public lostanza defn movss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<MemPtr>) -> ref<Xmm> :
  call-c assembler_movss_mem_xmm(a.value, dst.value, src.value)
  return dst
public lostanza defn movss (a:ref<Assembler>, dst:ref<Gp>, src:ref<Xmm>) -> ref<Gp> :
  call-c assembler_mov_xmm_reg(a.value, dst.value, src.value)
  return dst
public lostanza defn movss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Gp>) -> ref<Xmm> :
  call-c assembler_mov_reg_xmm(a.value, dst.value, src.value)
  return dst
public lostanza defn movsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_movsd_xmm_xmm(a.value, dst.value, src.value)
  return dst
public lostanza defn movsd (a:ref<Assembler>, dst:ref<MemPtr>, src:ref<Xmm>) -> ref<False> :
  call-c assembler_movsd_xmm_mem(a.value, dst.value, src.value)
  return false
public lostanza defn movsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<MemPtr>) -> ref<Xmm> :
  call-c assembler_movsd_mem_xmm(a.value, dst.value, src.value)
  return dst
public lostanza defn movsd (a:ref<Assembler>, dst:ref<Gp>, src:ref<Xmm>) -> ref<Gp> :
  call-c assembler_mov_reg_xmm(a.value, dst.value, src.value)
  return dst
public lostanza defn movsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Gp>) -> ref<Xmm> :
  call-c assembler_mov_xmm_reg(a.value, dst.value, src.value)
  return dst

;------------------------------------------------------------
;---------------- Floating-Point Operations -----------------
;------------------------------------------------------------

public lostanza defn cvtsd2ss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_cvtsd2ss(a.value, dst.value, src.value)
  return dst
public lostanza defn cvtss2sd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_cvtss2sd(a.value, dst.value, src.value)
  return dst
public lostanza defn cvtsi2ss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Gp>) -> ref<Xmm> :
  call-c assembler_cvtsi2ss(a.value, dst.value, src.value)
  return dst
public lostanza defn cvtsi2sd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Gp>) -> ref<Xmm> :
  call-c assembler_cvtsi2sd(a.value, dst.value, src.value)
  return dst
public lostanza defn cvtss2si (a:ref<Assembler>, dst:ref<Gp>, src:ref<Xmm>) -> ref<Gp> :
  call-c assembler_cvtss2si(a.value, dst.value, src.value)
  return dst
public lostanza defn cvtsd2si (a:ref<Assembler>, dst:ref<Gp>, src:ref<Xmm>) -> ref<Gp> :
  call-c assembler_cvtsd2si(a.value, dst.value, src.value)
  return dst
public lostanza defn addss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_addss(a.value, dst.value, src.value)
  return dst
public lostanza defn addsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_addsd(a.value, dst.value, src.value)
  return dst
public lostanza defn subss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_subss(a.value, dst.value, src.value)
  return dst
public lostanza defn subsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_subsd(a.value, dst.value, src.value)
  return dst
public lostanza defn mulss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_mulss(a.value, dst.value, src.value)
  return dst
public lostanza defn mulsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_mulsd(a.value, dst.value, src.value)
  return dst
public lostanza defn divss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_divss(a.value, dst.value, src.value)
  return dst
public lostanza defn divsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_divsd(a.value, dst.value, src.value)
  return dst
public lostanza defn minss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_minss(a.value, dst.value, src.value)
  return dst
public lostanza defn minsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_minsd(a.value, dst.value, src.value)
  return dst
public lostanza defn maxss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_maxss(a.value, dst.value, src.value)
  return dst
public lostanza defn maxsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_maxsd(a.value, dst.value, src.value)
  return dst
public lostanza defn sqrtss (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_sqrtss(a.value, dst.value, src.value)
  return dst
public lostanza defn sqrtsd (a:ref<Assembler>, dst:ref<Xmm>, src:ref<Xmm>) -> ref<Xmm> :
  call-c assembler_sqrtsd(a.value, dst.value, src.value)
  return dst
public lostanza defn ucomiss (a:ref<Assembler>, x:ref<Xmm>, y:ref<Xmm>) -> ref<False> :
  call-c assembler_ucomiss(a.value, x.value, y.value)
  return false
public lostanza defn ucomisd (a:ref<Assembler>, x:ref<Xmm>, y:ref<Xmm>) -> ref<False> :
  call-c assembler_ucomisd(a.value, x.value, y.value)
  return false

