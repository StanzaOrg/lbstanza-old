defpackage stz/types :
  import core
  import collections

;============================================================
;====================== Types ===============================
;============================================================

;Represents first-class types, types that may appear within
;type expressions.
public deftype Type

;Represents a ground type with some parametric arguments.
public defstruct TOf <: Type :
  n:Int
  args:Tuple<Type> with:
    default => []

;Represents a finite tuple type.
public defstruct TTuple <: Type :
  args:Tuple<Type>

;Represents the ? type.
public defstruct TGradual <: Type

;Represents the function type.
public defstruct TArrow <: Type :
  a1:Tuple<Type>
  a2:Type

;Represents the Void type.
public defstruct TBot <: Type

;Represents the intersection type.
public defstruct TAnd <: Type :
  a:Type
  b:Type

;Represents the union type.
public defstruct TOr <: Type :
  a:Type
  b:Type

;Represents a type variable.
public defstruct TVar <: Type :
  n:Int
  name:Symbol|False

;Represents a type that has yet to be solved.
public defstruct TUVar <: Type :
  n:Int

;Represents a literal type that is used only for inference
;of tuple-getters.
public defstruct LitType <: Type :
  value:Int

;------------------------------------------------------------
;-------------------- Defn Definitions ----------------------
;------------------------------------------------------------

;Represents a type that can only be used for 'defn' definitions.
public defstruct TFunction <: Type :
  targs:Tuple<Int>
  cargs:Tuple<Int>
  a1:Tuple<FArg>
  a2:Type

;Used within a TFunction to represent a capturing position.
public defstruct TCap <: Type :
  n:Int
  name:Symbol|False

;Represents an argument specification with a TFunction.
public deftype FArg

;Retrieve the type of the argument.
public defmulti type (arg:FArg) -> Type

;Represents a normal position argument.
public defstruct PositionalArg <: FArg :
  optional?:True|False
  type:Type

;Represents a keyword argument.
public defstruct KeywordArg <: FArg :
  name:Symbol
  optional?:True|False
  type:Type

;Represents a variable-arity argument.
public defstruct VarArg <: FArg :
  type:Type

;============================================================
;================== Categories of Types =====================
;============================================================

;Types that can be used by the user in type expressions.
public defn user-type? (t:Type,
                        include-uvar?:True|False) -> True|False :
  match(t) :
    (t:TUVar) :
      include-uvar?
    (t:TOf|TGradual|TArrow|TBot|TAnd|TOr|TVar) :
      all?(basic-type?{_, include-uvar?}, t)
    (t) :
      false

;Types that can be used by the user for the types of fnargs.
public defn fnarg-type? (t:Type) -> True|False :
  match(t) :
    (t:TOf|TGradual|TArrow|TBot|TAnd|TOr|TVar|TCap) :
      all?(fnarg-type?, t)
    (t) :
      false

;A FArg is typically used as a specification for the allowed
;arguments to a function. We also use it to represent the
;values that a function is called with, but in this case
;the optional? fields don't have any meaning, so we
;require them to be false.
public defn used-as-value? (a:FArg) -> True|False :
  match(a) :
    (a:PositionalArg) : not optional?(a)
    (a:KeywordArg) : not optional?(a)
    (a:VarArg) : false