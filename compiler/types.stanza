#use-added-syntax(ast-lang2)
defpackage stz/types :
  import core
  import collections

;============================================================
;=================== Common Multis ==========================
;============================================================

;Retrieve the type of the argument.
public defmulti type (arg:FArg) -> Type
public defmulti type (arg:LSFArg) -> LSType

;============================================================
;====================== Types ===============================
;============================================================

public defast :

  ;----------------------------------------------------------
  ;---------------------- Types -----------------------------
  ;----------------------------------------------------------

  defnodes Type <: Hashable & Equalable :
    common-options :
      printer => true
      equalable => true
      hashable => true
      
    ;Represents a class.
    TOf : (n:Int, args:Tuple<Type> with: (default => []))

    ;Represents a finite tuple type.
    TTuple : (args:Tuple<Type>)

    ;Represents the ? type.
    TGradual : ()

    ;Represents the function type.
    TArrow : (a1:Tuple<Type>, a2:Type with: (updater => sub-a2))

    ;Represents the Void type.
    TBot : ()

    ;Represents the intersection type.
    TAnd : (a:Type, b:Type)

    ;Represents the union type.
    TOr : (a:Type, b:Type)

    ;Represents a type variable.
    TVar : (n:Int, name:Symbol|False with: (default => false))

    ;Represents a type that has yet to be solved.
    TUVar : (n:Int)

    ;Represents a literal type that is used only for inference
    ;of tuple-getters.
    LitType : (value:Int)

    ;Represents a type that can only be used for 'defn' definitions.
    TFunction :
      targs:Tuple<Int>
      cargs:Tuple<Int>
      a1:Tuple<FArg> with: (ensure => good-fn-args!)
      a2:Type with: (ensure => user-type!)

    ;Used within a TFunction to represent a capturing position.
    TCap : (n:Int, name:Symbol|False)

    ;Represents the Top type. Only used for
    ;inference purposes.
    TTop : ()

  ;----------------------------------------------------------
  ;-------------------- LoStanza Types ----------------------
  ;----------------------------------------------------------

  defnodes LSType <: Hashable & Equalable :
    common-options :
      printer => true
      equalable => true
      hashable => true

    ;Represents the primitive numbers.
    ByteT: ()
    IntT: ()
    LongT: ()
    FloatT: ()
    DoubleT: ()

    ;Used for representing the void pointer.
    UnknownT: ()
    
    ;Used for variable-length LoStanza types.
    RestT: (type:LSType)

    ;Represents the ptr<T> type.
    PtrT: (type:LSType)

    ;Represents the ref<T> type.
    RefT: (type:Type)

    ;Represents a function in LoStanza.
    FnT: (a:Tuple<LSType>, r:False|LSType, b:LSType with: (updater => sub-b))

    ;Represents a struct.
    StructT: (n:Int, args:Tuple<Type> with: (default => []))

    ;Represents a LoStanza type that has yet to be solved.
    UVarT: (n:Int)

    ;Represents a type that can only be used for 'lostanza defn' definitions.
    TLSFunction:
      targs:Tuple<Int>
      cargs:Tuple<Int>
      a1:Tuple<LSFArg>
      a2:LSType

  ;----------------------------------------------------------
  ;-------------- Argument Specification --------------------
  ;----------------------------------------------------------

  defnodes FArg <: Hashable & Equalable :  
    common-options :
      printer => true
      equalable => true
      hashable => true      
      
    ;Represents a normal positional argument.
    PositionalArg :
      optional?:True|False
      type:Type with: (as-method => true)

    ;Represents a keyword argument.
    KeywordArg :
      name:Symbol
      optional?:True|False
      type:Type with: (as-method => true)

    ;Represents a variable-arity argument.
    VarArg :
      name:Symbol
      type:Type with: (as-method => true)

  ;----------------------------------------------------------
  ;------------- LoStanza Argument Specification ------------
  ;----------------------------------------------------------

  defnodes LSFArg <: Hashable & Equalable :
    common :
      type:LSType with: (as-method => true)
      
    common-options :
      printer => true
      equalable => true
      hashable => true

    ;Represents a normal positional argument.
    LSPositionalArg :
      optional?:True|False

    ;Represents a keyword argument.
    LSKeywordArg :
      name:Symbol
      optional?:True|False

    ;Represents a variable-arity argument.
    LSVarArg :
      name:Symbol

  ;----------------------------------------------------------
  ;-------------------- Mappers and Doers -------------------
  ;----------------------------------------------------------
  defmapper (f:TypeItem -> TypeItem) :
    (x:Type) : f(x) as Type
    (x:Tuple<Type>) : map({f(_) as Type}, x)
    (x:Tuple<FArg>) : map({f(_) as FArg}, x)
    (x:Tuple<LSFArg>) : map({f(_) as LSFArg}, x)
    (x:LSType) : f(x) as LSType
    (x:Tuple<LSType>) : map({f(_) as LSType}, x)
    (x:False|LSType) : (f(x as LSType) as LSType) when x is LSType

  defdoer (f:TypeItem -> ?) :
    (x:Type) : f(x)
    (x:Tuple<Type>) : do(f,x)
    (x:Tuple<FArg>) : do(f,x)
    (x:Tuple<LSFArg>) : do(f,x)
    (x:LSType) : f(x)
    (x:Tuple<LSType>) : do(f,x)
    (x:False|LSType) : f(x as LSType) when x is LSType

  ignore :
    True|False
    Int
    Symbol|False
    Symbol
    Tuple<Int>

  make-mapper :
    func: TypeItem -> TypeItem
    item: TypeItem
    nodes: (FArg, Type, LSType, LSFArg)

  make-doer :
    func: TypeItem -> ?
    item: TypeItem
    nodes: (FArg, Type, LSType, LSFArg)
    

;============================================================
;======================= Mappers ============================
;============================================================

public deftype TypeItem :
  Type <: TypeItem
  LSType <: TypeItem
  FArg <: TypeItem
  LSFArg <: TypeItem

public defn map-type<?T> (f:Type -> Type, x:?T&TypeItem) -> T :
  defn* g (x:TypeItem) -> TypeItem :
    match(x:Type) : f(x)
    else : map(g,x)
  map(g,x)

public defn map-lstype<?T> (f:LSType|Type -> LSType|Type, x:?T&TypeItem) -> T :
  defn* g (x:TypeItem) -> TypeItem :
    match(x:LSType|Type) : f(x)
    else : map(g,x)
  map(g,x)

public defn all? (f:TypeItem -> True|False, x:TypeItem) -> True|False :
  label<True|False> return :
    for xi in x do :
      return(false) when not f(xi)
    true

public defn any? (f:TypeItem -> True|False, x:TypeItem) -> True|False :
  label<True|False> return :
    for xi in x do :
      return(true) when f(xi)
    false

public defn none? (f:TypeItem -> True|False, x:TypeItem) -> True|False :
  label<True|False> return :
    for xi in x do :
      return(false) when f(xi)
    true

;============================================================
;================== Categories of Types =====================
;============================================================

;Types that can be used by the user in type expressions.
public defn user-type? (t:Type,
                        include-uvar?:True|False) -> True|False :
  match(t) :
    (t:TUVar) :
      include-uvar?
    (t:TOf|TGradual|TArrow|TBot|TAnd|TOr|TVar|TTuple) :
      all?(user-type?{_ as Type, include-uvar?}, t)
    (t) :
      false

;Types that can be used by the user in type expressions.
public defn overload-type? (t:Type) -> True|False :
  match(t) :
    (t:TOf|TGradual|TArrow|TBot|TAnd|TOr|TVar|TTuple|TTop|TUVar) :
      all?(overload-type?{_ as Type}, t)
    (t) :
      false

;Types that can be used by the user for the types of fnargs.
public defn fnarg-type? (t:Type,
                         include-uvar?:True|False) -> True|False :
  match(t) :
    (t:TUVar) :
      include-uvar?
    (t:TOf|TGradual|TArrow|TBot|TAnd|TOr|TVar|TTuple|TCap) :
      all?(fnarg-type?{_ as Type, include-uvar?}, t)
    (t) :
      false

;A FArg is typically used as a specification for the allowed
;arguments to a function. We also use it to represent the
;values that a function is called with, but in this case
;the optional? fields don't have any meaning, so we
;require them to be false.
public defn used-as-value? (a:FArg) -> True|False :
  match(a) :
    (a:PositionalArg) : not optional?(a)
    (a:KeywordArg) : not optional?(a)
    (a:VarArg) : false

;============================================================
;=================== Preconditions ==========================
;============================================================

;Returns true if the given arguments are good.
defn good-fn-args? (args:Tuple<FArg>) -> True|False :
  val num-pos-args = count({_ is PositionalArg}, args)
  val num-args = length(args)
  val keywords = HashSet<Symbol>()
  for (a in args, i in 0 to false) all? :
    fnarg-type?(type(a), true) and
    match(a) :
      (a:PositionalArg) :
        true
      (a:KeywordArg) :
        add(keywords, name(a)) and i >= num-pos-args
      (a:VarArg) :
        i == num-args - 1

;Ensure arguments are good.
defn good-fn-args! (description:String, args:Tuple<FArg>) :
  if not good-fn-args?(args) :
    fatal("Bad arguments given to %_: %_" % [description, args])

;Ensure type is a user-type.
defn user-type! (description:String, t:Type) :
  if not user-type?(t, true) :
    fatal("Bad type given to %_." % [description])

;Ensure that a TFunction has no targs or cargs remaining.
public defn no-type-args! (description:String, f:TFunction) -> False :
  if not (empty?(targs(f)) and empty?(cargs(f))) :
    fatal("Type given to %_ contains type variables." % [description])

;Create an ensure to use on tuples.
public defn tuple-of!<T> (f:(String, T) -> ?) :
  fn (description:String, xs:Tuple<T>) :
    for x in xs do : f(description, x)

;Ensure an appropriate type for the type of a function argument.
public defn fnarg-type! (description:String, v:Type) :
  if not fnarg-type?(v,true) :
    fatal("Type given to %_ is not a function argument type." % [description])