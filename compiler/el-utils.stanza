defpackage stz/el-utils :
  import core
  import collections
  import stz/el-ir
  import stz/dl-ir

;============================================================
;====================== EType Conversion ====================
;============================================================

;Convert a DType to an EType. 
;- table: The IOTable that holds the global DType definitions.
;- t: The type to convert.
;- targs: Since DType uses indices to hold the type arguments,
;  this is the list of type arguments to substitute for those.
public defn to-etype (table:IOTable, t:DType, targs:Tuple<EType>) -> EType :
  defn conv (f:False) : false
  defn conv (ds:Tuple<DType>) : map(conv, ds)
  defn conv (d:DType) :
    match(d) :
      (d:DByte) : EByte()
      (d:DInt) : EInt()
      (d:DLong) : ELong()
      (d:DFloat) : EFloat()
      (d:DDouble) : EDouble()
      (d:DUnknown) : EUnknown()
      (d:DPtrT) : EPtrT()
      (d:DFnT) : EFnT(conv(a(d)), conv(r(d)), conv(b(d)))
      (d:DStructT) : EStructT(n(table,id(d)))
      (d:DOf) : EOf(n(table,id(d)))
      (d:DTVar) : targs[index(d)]
      (d:DCap) : conv(tvar(d))
      (d:DAnd) : reduce(EAnd, seq(conv, types(d)))
      (d:DOr) : reduce(EOr, seq(conv, types(d)))
      (d:DTop) : ETop()
      (d:DBot) : EBot()
      (d:DArrow) : EOf(n(table,CORE-FN-ID))
      (d:DTuple) : EOf(n(table,CORE-TUPLE-ID))
  conv(t)

;============================================================
;================== Deconstruct An Immediate ================
;============================================================

;If the given immediate is a possible function call, then return
;the identifier of the function being called, and its type
;arguments (if any).
;Returns None() if the immediate does not correspond to a function. 
public defn deconstruct-function (f:EImm) -> Maybe<[Int, Tuple<EType>]> :
  match(f) :
    (f:EVar) : One([n(f), []])
    (f:ECurry) : One([n(x(f)), targs(f)])
    (f) : None()

;============================================================
;================= Utilityes on Types =======================
;============================================================

;Remove all nested ETVar within the given item.
public defn remove-tvars<?T> (e:ELItem&?T) -> T :
  defn loop (e:ELItem) -> ELItem :
    match(e) :
      (e:ETVar) : ETop()
      (e:ELItem) : map(loop, e)
  loop(e) as ELItem&T

;Substitute type variables within a type.
public defn sub-tvars (t:EType, table:IntTable<EType>) -> EType :
  let loop (t:EType = t) :
    match(t:ETVar) : get?(table, n(t), t)
    else : map(loop, t)