defpackage stz/reg-alloc-ir :
  import core
  import collections
  import stz/printing-utils

;============================================================
;==================== IR Definition =========================
;============================================================

;------------------------------------------------------------
;-------------------- Program Model -------------------------
;------------------------------------------------------------

public defstruct Program :
  num-vars:Int  
  stmts:Tuple<ProgramStmt>
  
public deftype ProgramStmt

public defstruct LabelStmt <: ProgramStmt :
  index:Int

public defstruct OperationStmt <: ProgramStmt :
  op-id:Int
  op-data
  args:Tuple<Int>
  results:Tuple<Int>

public defstruct BranchStmt <: ProgramStmt :
  targets:Tuple<Int>

public defstruct GotoStmt <: ProgramStmt :
  target:Int

;------------------------------------------------------------
;-------------------- Operation Model -----------------------
;------------------------------------------------------------

public defstruct OperationModel :
  id:Int
  results:Tuple<Int>
  args:Tuple<Int>
  temp:Tuple<Int>
  stmts:Tuple<ModelStmt>

public deftype ModelStmt

public defstruct Require <: ModelStmt :
  arg:Int
  location:Location
  preference:Preference

public defstruct Release <: ModelStmt :
  arg:Int

public defstruct Return <: ModelStmt

public defstruct SaveLive <: ModelStmt

;------------------------------------------------------------
;-------------------- Location Specifiers -------------------
;------------------------------------------------------------

public deftype Location

public deftype Register <: Location

public defstruct AnyReg <: Register

public defstruct AnyFReg <: Register

public defstruct Reg <: Register :
  index:Int

public defstruct FReg <: Register :
  index:Int

public defstruct OrStack <: Location :
  reg:Register

;------------------------------------------------------------
;-------------------- Preference Specifiers -----------------
;------------------------------------------------------------

public deftype Preference

public defstruct PreferSame <: Preference :
  arg:Int

public defstruct PreferRegister <: Preference :
  reg:Reg|FReg

public defstruct NoPreference <: Preference

;============================================================
;====================== Output IR ===========================
;============================================================

;defstruct Save :
;  arg:Int
;  loc:Register
;
;defstruct Load :
;  arg:Int
;  loc:Register
;
;defstruct Relocate :
;  arg:Int
;  src:Register
;  dst:Register

;============================================================
;====================== Printers ============================
;============================================================

defmethod print (o:OutputStream, p:Program) :
  val items = [
    simple-field("num-vars", num-vars(p))
    inline-fields(stmts(p))]
  print(o, named-list-fields("program", items))

defmethod print (o:OutputStream, m:OperationModel) :
  val result-str = "" when empty?(results(m))
              else "(%,) = " % [seq(varid, results(m))]
  val temp-str = "" when empty?(temp(m))
            else " (temp %,)" % [seq(varid, temp(m))]
  print(o, "model %_op%_(%,)%_ %_" % [
    result-str
    id(m)
    seq(varid, args(m))
    temp-str,
    colon-list(stmts(m))])

defmethod print (o:OutputStream, s:ProgramStmt) :
  match(s) :
    (s:LabelStmt) :
      print(o, "label %_" % [labelid(index(s))])
    (s:OperationStmt) :
      val result-str = "" when empty?(results(s))
                  else "(%,) = " % [seq(varid,results(s))]
      print(o, "%_op%_(%,)" % [result-str, op-id(s), seq(varid,args(s))])
    (s:BranchStmt) :
      print(o, "branch (%,)" % [seq(labelid, targets(s))])
    (s:GotoStmt) :
      print(o, "goto %_" % [labelid(target(s))])

defmethod print (o:OutputStream, s:ModelStmt) :
  match(s) :
    (s:Require) :
      val pref-str = match(preference(s)) :
        (pref:NoPreference) : ""
        (pref:PreferSame) : " prefer-same-as %_"  % [varid(arg(pref))]
        (pref:PreferRegister) : " prefer %_" % [reg(pref)]
      print(o, "require %_ for %_%_" % [location(s), varid(arg(s)), pref-str])
    (s:Release) :
      print(o, "release %_" % [varid(arg(s))])
    (s:SaveLive) :
      print(o, "save-live")
    (s:Return) :
      print(o, "return")
    
defmethod print (o:OutputStream, l:Location) :
  print{o, _} $ match(l) :
    (l:AnyReg) : "Rx"
    (l:AnyFReg) : "Fx"
    (l:Reg) : "R%_" % [index(l)]
    (l:FReg) : "F%_" % [index(l)]
    (l:OrStack) : "%_ or stack" % [reg(l)]

defn varid (x:Int) :
  "V%_" % [x]

defn labelid (x:Int) :
  "L%_" % [x]