defpackage stz/reg-alloc-add-temp-vars :
  import core
  import collections

;Type for adding temporary variables to a program.
public deftype AddTempVars 

;Create the AddTempVars system for preprocessing a program.
public defn AddTempVars (resources:ResourceProvider) :

  ;Buffer for holding program statements.
  val program-statements = Vector<ProgramStmt>()

  ;Scratch set for holding variables.
  val var-set = IntSet()

  defn repeated-vars? (results:Tuple<Int>, args:Tuple<Int>) -> True|False :
    clear(var-set)
    add-all(var-set, results)
    

  ;Process a program.
  defn process-program (prog:Program) -> Program :
    for stmt in stmts(prog) do :
      match(stmt) :
        (stmt:SetStmt) :
        (stmt:OperationStmt) :
          ;Compute whether the arguments have repeated variables.
          clear(var-set)
          add-all(var-set, results(stmt))
          val repeated-vars? = any?(add{var-set, _}, args(stmt))
          ;If it does, then make temporaries.
          if forced-release?(models, op-id(stmt)) or repeated-vars? :
            clear(var-set)
            add-all(var-set, results(stmt))
            val new-args = to-tuple $
              for (v in args(stmt), i in 0 to false) seq :
                if add(var-set,v) :
                  if forced-release?(models, op-id(stmt), i) : make-temp()
                  else : v
                else : make-temp()
            emit(sub-args(stmt, new-args))
          ;If it does not, then just emit the operation as is.
          else :
            emit(stmt)
        (stmt) :
          emit(stmt)