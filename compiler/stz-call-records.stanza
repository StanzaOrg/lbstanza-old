defpackage stz/call-records :
  import core
  import collections
  import stz/backend

;============================================================
;===================== Call Records =========================
;============================================================

public deftype CallLoc
public defstruct RegLoc <: CallLoc :
  id: Int
  index: Int
with: (printer => true)
public defstruct FRegLoc <: CallLoc :
  id: Int
  index: Int
with: (printer => true)
public defstruct MemLoc <: CallLoc :
  index: Int
with: (printer => true)

public deftype CallValue
public defstruct StdArg <: CallValue :
  index: Int
with: (printer => true)
public defstruct ShadowArg <: CallValue :
  index: Int
with: (printer => true)

public defstruct CallRecord :
  loc: CallLoc
  value: CallValue
with: (printer => true)

public defstruct CallCRecords :
  args: Tuple<CallRecord>
  return: CallLoc
  num-int-args: Int
  num-real-args: Int
  num-mem-args: Int

public deftype ArgType
public defstruct IntArg <: ArgType
public defstruct RealArg <: ArgType

;============================================================
;========================= Classifier =======================
;============================================================

public defn callc-records (a1:Tuple<ArgType>, a2:ArgType, backend:Backend) -> CallCRecords :
  ;Records
  val records = Vector<CallRecord>()
  defn std-arg (i:Int, l:CallLoc) :
    add(records, CallRecord(l,StdArg(i)))
  defn shadow-arg (i:Int, l:CallLoc) :
    add(records, CallRecord(l,ShadowArg(i)))

  ;Track registers
  val reg-counter = to-peek-seq(0 to length(callc-regs(backend)))
  val freg-counter = to-peek-seq(0 to length(callc-fregs(backend)))
  val mem-counter = to-peek-seq(0 to false)
  defn next-reg () :
    val index = next(reg-counter)
    val id = callc-regs(backend)[index]
    RegLoc(id, index)
  defn next-freg () :
    val index = next(freg-counter)
    val id = callc-fregs(backend)[index]
    FRegLoc(id, index)
  defn next-mem () :
    MemLoc(next(mem-counter))

  ;Classify arguments
  match(backend) :
    (backend:W64Backend) :
      for (x in a1, i in 0 to false) do :
        match(x) :
          (x:IntArg) :
            if done?(reg-counter) :         ;If no more integer registers
              std-arg(i, next-mem())         ;  place in mem argument
            else :
              std-arg(i, next-reg())         ;Otherwise place in integer register
              next(freg-counter)             ;  and eat real register
          (x:RealArg) :
            if done?(freg-counter) :        ;If no more real registers
              std-arg(i, next-mem())         ;  place in mem argument
            else :
              std-arg(i, next-freg())        ;Otherwise place in real register
              shadow-arg(i, next-reg())      ;  and place shadow in integer register
    (backend) :
      for (x in a1, i in 0 to false) do :
        match(x) :
          (x:IntArg) :
            if done?(reg-counter) : std-arg(i, next-mem())
            else : std-arg(i, next-reg())
          (x:RealArg) :
            if done?(freg-counter) : std-arg(i, next-mem())
            else : std-arg(i, next-freg())

  ;Classify return value
  val return-loc = match(a2) :
    (a2:IntArg) : RegLoc(callc-ret(backend), 0)
    (a2:RealArg) : FRegLoc(callc-fret(backend), 0)

  ;Count number of args used
  defn peek? (xs:PeekSeq<Int>, default:Int) : default when done?(xs) else peek(xs)
  val num-int-args = peek?(reg-counter, length(callc-regs(backend)))
  val num-real-args = peek?(freg-counter, length(callc-fregs(backend)))
  val num-mem-args = peek(mem-counter)

  ;Return record
  CallCRecords(to-tuple(records), return-loc, num-int-args, num-real-args, num-mem-args)
