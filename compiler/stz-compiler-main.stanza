;See License.txt for details about licensing.

;<doc>=======================================================
;================== Compilation Steps =======================
;============================================================

# Categorize the situation #

There are three different situations that require different
compilation flows:

  1) We are compiling in optimized mode and need to compile to a final
  assembly file.

  2) We are compiling in unoptimized mode and need to compile to a
  final assembly file.

  3) We are compiling in unoptimized mode and only need to compile to
  .pkg files.

# Reorder the given packages by their initialization order #

Input:
  denv: DEnv
  packages: Seqable<EPackage|VMPackage|Pkg>
  input-order: Tuple<Symbol>

Output:
  packages: Tuple<EPackage|VMPackage|Pkg>

Reorders the given input by their proper dependency order.

# Combine multiple EL packages into a single optimized VMPackage #

Input:
  packages: Tuple<EPackage|FastPkg>
Output:
  vmpackage: VMPackage

# Compile a single VMPackage to a File #

Input:
  vmpackage: VMPackage
  bindings: Vector<Bindings>
  filename: String

# Compile VMPackages and StdPkgs to a File #

Input:
  packages: Tuple<VMPackage|StdPkg>
  bindings: Vector<Bindings>
  filename: String
  save-pkgs?: String|False

Emits the compiled instructions to the given file. If save-pkgs? is a
String, then we emit the unoptimized .pkg files into the that
directory.

# Lower and Compile EL Packages to .pkg Files #

Input:
  epackages: Tuple<EPackage>
  pkg-dir: String

# Utility: Compile a Normalized VMPackage #

Input:
  npkg: NormVMPackage
  stitcher: Stitcher
  stubs: AsmStubs
  return-instructions?: True|False

Output:
  instructions: Tuple<Ins>|False

Emits the compiled instructions to the current output stream, when
given the normalized package. If return-instructions? is true, then the
pre-stitched instructions are saved into a tuple and returned.
Otherwise, the function returns false.

# Utility: Emitters #

  file-emitter: () -> CodeEmitter
  buffer-emitter: (buffer:Vector<Ins>, e:CodeEmitter) -> CodeEmitter
  buffer-emitter: (buffer:Vector<Ins>) -> CodeEmitter

# Utility: Emit all system stubs #

Input:
  stitcher: Stitcher
  stubs: AsmStubs

Emits all tables and stubs required by the linked assembly file.

;============================================================
;=======================================================<doc>

defpackage stz/compiler-main :
  import core
  import collections
  import reader
  import macro-utils
  import stz/utils
  import stz/algorithms
  import stz/input
  import stz/renamer
  import stz/resolver
  import stz/type
  import stz/il-ir
  import stz/tl-ir
  import stz/namemap
  import stz/core-macros
  import stz/tl-to-el
  import stz/tl-to-dl
  import stz/el-to-vm
  import stz/el
  import stz/el-ir
  import stz/vm-ir
  import stz/dl-ir
  import stz/dl
  import stz/backend
  import stz/reg-alloc with :
    prefix(Ins) => reg-alloc-
  import stz/vm-normalize
  import stz/code-emitter
  import stz/codegen
  import stz/asm-ir
  import stz/asm-emitter
  import stz/stitcher
  import stz/bindings
  import stz/bindings-to-vm
  import stz/pkg
  import stz/ids
  import stz/front-end
  import stz/proj-manager
  import stz/proj
  import stz/package-stamps

;============================================================
;============== Main Compilation Algorithm ==================
;============================================================

public defn compile (proj-manager:ProjManager,
                     inputs:Collection<String|Symbol>,
                     supported-vm-packages:Tuple<String|Symbol>,
                     output:False|String,
                     pkg-dir:False|String,
                     backend:Backend,
                     optimize?:True|False,
                     verbose?:True|False) -> CompilationResult :
  defn driver () :
    val denv = DEnv()
    val result = compile-to-el $ new FrontEndInputs :
      defmethod inputs (this) : to-tuple(inputs)
      defmethod find-package (this, name:Symbol) : find-package(proj-manager, name)
      defmethod environment-package? (this, name:Symbol) : packageio(denv, name)
      defmethod load-into-denv (this, ios:Tuple<PackageIO>) : load(denv, ios, [])
      defmethod conditional-dependencies (this, pkgs:Seqable<Symbol>) : conditional-imports(proj-manager, pkgs)
      defmethod supported-vm-packages (this) : supported-vm-packages
      defmethod verbose? (this) : verbose?

    ;Build pkgstamp table
    val pkgstamp-table = to-hashtable(package, pkgstamps(result))

    ;Record filestamp of any output pkgs
    val output-pkgs = Vector<FileStamp>()

    ;Save optimized packages if necessary
    if pkg-dir is String and optimize? :
      within save = save-pkgs(pkgstamp-table, output-pkgs) :
        for p in filter-by<EPackage>(packages(result)) do :
          save(FastPkg(packageio(p), exps(p)))

    ;Depending upon the situation run three different flows
    val situation =
      match(optimize?, output) :
        (opt?:True, output:String) : `optimized-asm
        (opt?:True, output:False) : `optimized-pkgs
        (opt?:False, output:String) : `unoptimized-asm
        (opt?:False, output:False) : `unoptimized-pkgs
    switch(situation) :
      `optimized-asm :
        val packages = Vector<VMPackage|StdPkg>()
        add(packages, combine-and-lower(/packages(result) as Tuple<EPackage|FastPkg>))
        compile-vmpackages({false}, to-tuple(packages), bindings(result), output as String, false)
      `optimized-pkgs :
        ;Already done
        false
      `unoptimized-asm :
        val packages = Vector<VMPackage|StdPkg>()
        for p in /packages(result) do :
          match(p) :
            (p:EPackage) : add(packages, compile(lower-unoptimized(p)))
            (p:StdPkg)  : add(packages, p)
        within save = save-pkgs(pkgstamp-table, output-pkgs) :
          compile-vmpackages(save, to-tuple(packages), bindings(result), output as String, pkg-dir is String)
      `unoptimized-pkgs :
        val epackages = to-tuple $ filter-by<EPackage>(packages(result))
        within save = save-pkgs(pkgstamp-table, output-pkgs) :
          compile-to-pkgs(save, epackages)

    ;Return result
    CompilationResult(map(name, packages(result)),
                      binding-packages(result),
                      pkgstamps(result),
                      to-tuple(output-pkgs))

  defn save-pkgs (body:(Pkg -> False) -> ?,
                  pkgstamp-table:HashTable<Symbol,PackageStamp>,
                  output-pkgs:Vector<FileStamp>) :
    match(pkg-dir:String) :
      val saved-pkgs = Vector<SavedPkg>()
      defn save-pkg (pkg:Pkg) :
        val filename = save-package(pkg-dir as String, pkg)
        val stamp = pkgstamp-table[name(pkg)]
        val filestamp = filestamp(filename)
        add(output-pkgs, filestamp)
        val full-source-path = resolve-path!(source-file(location(stamp)) as String)
        val sourcestamp = FileStamp(full-source-path, source-hashstamp(stamp) as ByteArray)
        add(saved-pkgs, SavedPkg(name(pkg), filestamp, sourcestamp))
      body(save-pkg)
      update-aux-file(proj-manager, saved-pkgs)
    else :
      defn save-pkg (pkg:Pkg) : false
      body(save-pkg)

  defn combine-and-lower (packages:Tuple<EPackage|FastPkg>) :
    val epackages = for p in packages map :
      match(p:FastPkg) : EPackage(packageio(p), exps(p))
      else : p as EPackage
    compile(lower-optimized(epackages))

  defn compile-vmpackages (save-pkg:Pkg -> ?,
                           packages:Tuple<VMPackage|StdPkg>,
                           bindings:Bindings|False,
                           filename:String,
                           save-pkgs?:True|False) :
    val [binding-package, all-packages] =
      match(bindings:Bindings) :
        val p = to-vmpackage(bindings)
        [p, to-tuple(cat([p], packages))]
      else :
        [false, packages]
    val stubs = AsmStubs(backend)
    val npkgs = for p in all-packages map :
      match(p:VMPackage) : normalize(p, backend)
      else : p as StdPkg
    val stitcher = Stitcher(map(collapse,npkgs), bindings, stubs)
    defn compile (filestream:OutputStream) :
      for (pkg in all-packages, npkg in npkgs) do :
        match(npkg) :
          (npkg:NormVMPackage) :
            val ins = compile-normalized-vmpackage(filestream, npkg, stitcher, stubs, save-pkgs?)
            val save-pkg? = (save-pkgs? and not is-binding-package?) where :
              val is-binding-package? = match(binding-package:VMPackage) :
                name(binding-package) == name(pkg)
            if save-pkg? :
              save-pkg(StdPkg(pkg as VMPackage, ins as Tuple<Ins>, datas(npkg)))
          (std-pkg:StdPkg) :
            compile-stdpkg(filestream, std-pkg, stitcher)
      emit-all-system-stubs(filestream, stitcher, stubs)

    ;Create filestream and compile to it.
    val filestream = FileOutputStream(filename)
    try: compile(filestream)
    finally: close(filestream)

  defn compile-stdpkg (filestream:OutputStream, pkg:StdPkg, stitcher:Stitcher) :
    val emitter = emitter(stitcher, name(pkg), file-emitter(filestream, stubs(stitcher)))
    for ins in asm(pkg) do : emit(emitter, ins)

  defn compile-normalized-vmpackage (filestream:OutputStream, npkg:NormVMPackage, stitcher:Stitcher, stubs:AsmStubs, return-instructions?:True|False) :
    if return-instructions? :
      val buffer = Vector<Ins>()
      val emitter = buffer-emitter(buffer, emitter(stitcher, name(npkg), file-emitter(filestream, stubs)))
      emit-normalized-package(npkg, emitter, stubs)
      to-tuple(buffer)
    else :
      val emitter = emitter(stitcher, name(npkg), file-emitter(filestream, stubs))
      emit-normalized-package(npkg, emitter, stubs)

  defn compile-to-pkgs (save-pkg:Pkg -> ?, epackages:Tuple<EPackage>) :
    val stubs = AsmStubs(backend)
    for epackage in epackages do :
      val vmpackage = compile(lower-unoptimized(epackage))
      val npkg = normalize(vmpackage, backend)
      val buffer = Vector<Ins>()
      emit-normalized-package(npkg, buffer-emitter(buffer, stubs), stubs)
      save-pkg(StdPkg(vmpackage, to-tuple(buffer), datas(npkg)))

  defn emit-normalized-package (npkg:NormVMPackage, emitter:CodeEmitter, stubs:AsmStubs) :
    ;Create the debug table so that we can add debug comments
    ;to each function.
    val debug-table = to-inttable<VMDebugInfo> $
      for e in entries(debug-table(vmpackage(npkg))) seq :
        id(e) => e
    ;Emit each function
    var previous-filename:String = ""
    for f in funcs(vmpackage(npkg)) do :
      val id = id(f)
      match(get?(debug-table, id)) :
        (dbg:VMDebugInfo) :
          val name = match(name(dbg)) :
            (name:String) : name
            (f:False) : "Unnamed function"
          match(info(dbg)) :
            (info:FileInfo) :
              emit(emitter, Comment $ string-join([name " at %_" % [info]]))
              emit(emitter, LinkLabel(id))
              val filename = filename(info)
              if previous-filename != filename :
                previous-filename = filename
                emit(emitter, DefFile $ filename)
              emit(emitter, DefLine $ line(info))
            (f:False) :
              emit(emitter, Comment $ name)
              emit(emitter, LinkLabel(id))
        (f:False) :
          emit(emitter, Comment $ "Unnamed function")
          emit(emitter, LinkLabel(id))
      allocate-registers(func(f), emitter, backend, stubs, false)

  defn emit-all-system-stubs (filestream:OutputStream, stitcher:Stitcher, stubs:AsmStubs) :
    val emitter = file-emitter(filestream, stubs)
    emit-tables(stitcher, emitter)
    emit-stubs(stitcher, emitter)
    compile-runtime-stubs(emitter, stubs)

  ;Buffer Utilities
  defn file-emitter (os:OutputStream, stubs:AsmStubs) :
    new CodeEmitter :
      defmethod emit (this, i:Ins) :
        emit-asm(os, i, backend)
      defmethod unique-label (this) :
        unique-id(stubs)

  defn buffer-emitter (buffer:Vector<Ins>, emitter:CodeEmitter) :
    new CodeEmitter :
      defmethod emit (this, i:Ins) :
        add(buffer, i)
        emit(emitter, i)
      defmethod unique-label (this) :
        unique-label(emitter)

  defn buffer-emitter (buffer:Vector<Ins>, stubs:AsmStubs) :
    new CodeEmitter :
      defmethod emit (this, i:Ins) :
        add(buffer, i)
      defmethod unique-label (this) :
        unique-id(stubs)

  ;Launch
  driver()

;============================================================
;============= Collapsing a Normalized Package ==============
;============================================================

defn collapse (p:NormVMPackage|StdPkg) :
  val [vmp, asm-datas] = match(p) :
    (p:NormVMPackage) : [vmpackage(p), datas(p)]
    (p:StdPkg) : [vmp(p), datas(p)]
  new VMPackage :
    defmethod packageio (this) : packageio(vmp)
    defmethod init (this) : init(vmp)
    defmethod globals (this) : globals(vmp)
    defmethod datas (this) : to-tuple(cat(datas(vmp), asm-datas))
    defmethod consts (this) : consts(vmp)
    defmethod classes (this) : classes(vmp)
    defmethod funcs (this) : funcs(vmp)
    defmethod methods (this) : methods(vmp)
    defmethod externs (this) : externs(vmp)
    defmethod extern-defns (this) : extern-defns(vmp)
    defmethod debug-table (this) : debug-table(vmp)

;============================================================
;==================== Result Structure ======================
;============================================================

public defstruct CompilationResult :
  compiled-packages: Tuple<Symbol>
  binding-packages: Tuple<Symbol>
  package-stamps: Tuple<PackageStamp>
  output-pkgs: Tuple<FileStamp>