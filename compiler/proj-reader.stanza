defpackage stz/proj-reader :
  import core
  import collections
  import reader
  import stz/proj-ir
  import stz/proj-stage0
  import stz/proj-errors
  import stz/timing-log-api

;============================================================
;======================= Timers =============================
;============================================================

val READ-RAW = TimerLabel("Read Raw Proj File")
val READ-FILE = TimerLabel(READ-RAW, suffix("Read File"))

;============================================================
;===================== Implementation =======================
;============================================================

public defn read-raw-proj-file (filename:String) -> ProjFileS0 :
  within log-time(READ-RAW, suffix(filename)) :
    val forms = within log-time(READ-FILE, suffix(filename)) :
      read-file(filename)
    val stmts = parse-syntax[stanza-projfile / #projstmt! ...](forms)
    val full-path = resolve-path(filename) as String
    ProjFileS0(genid(), filename, full-path, to-tuple(stmts))

;============================================================
;===================== Syntax Definition ====================
;============================================================

defsyntax stanza-projfile :

  ;----------------------------------------------------------
  ;------------------- Main Productions ---------------------
  ;----------------------------------------------------------
  defproduction projstmt : ProjStmt
  
  defrule projstmt = (include ?path:#string!) :
    IncludeStmtS0(closest-info(), path, false)

  defrule projstmt = (include? ?path:#string!) :
    IncludeStmtS0(closest-info(), path, true)

  defrule projstmt = (package ?package:#symbol! defined-in ?filename:#projvalue!) :
    DefinedInStmtS0(closest-info(), package, filename)

  defrule projstmt = (packages ?packages:#packages-pattern! defined-in ?filename:#projvalue!) :
    PackagesDefinedInStmtS0(closest-info(), packages, filename)

  ;Return true if x looks like a packages pattern: mypackage/*
  defn packages-pattern? (x) -> True|False :
    match(unwrap-token(x)) :
      (sym:Symbol) :
        val [package-name, suffix] = qualifier(sym)
        suffix == `*
      (x) :
        false

  defproduction packages-pattern!:Symbol
  defrule packages-pattern! = (?x) when packages-pattern?(x) :
    unwrap-token(x)
  fail-if packages-pattern! = () :
    ProjFileError(closest-info(), "Expecting a package pattern here. \
                  The pattern is expected to be like this: mypackage/*.")

  defrule projstmt = (syntax-packages (?packages:#symbol! ...) defined-in ?filename:#projvalue!) :
    SyntaxPackagesDefinedInStmtS0(closest-info(), to-tuple(packages), filename)

  defrule projstmt = (dynamic-library-dirs #:! ?dirs:#projvalue!) :
    DylibDirectoryStmtS0(closest-info(), dirs)

  defrule projstmt = (package ?package:#symbol! requires #:! (?rs:#require! ...)) :
    val dylibs = entry?(rs, `dylibs)
    val ccfiles = entry?(rs, `ccfiles)
    val ccflags = entry?(rs, `ccflags)
    val fpackages = entries(rs, `foreign-packages)
    RequiresStmtS0(closest-info(), package, dylibs, ccfiles, ccflags, fpackages)

  defrule projstmt = (import ?package:#symbol! when-imported ?deps:#projvalue!) :
    ImportWhenStmtS0(closest-info(), package, deps)

  defrule projstmt = (compile ?item:#compile-file? ?dependencies:#dependencies #:! (
                        ?fps:#compile-require-packages
                        ?cmds:#projvalue! ...)) :
    val [file?, name] = item
    val cmd = ProjValues(closest-info(), to-tuple(cmds))
    CompileStmtS0(closest-info(), file?, name, dependencies, fps, cmd)

  defproduction compile-file?: [True|False, ProjValue]
  defrule compile-file? = (file ?s:#string!) :
    [true, AtomValue(closest-info(), s)]
  defrule compile-file? = (flag [?ss:#string! ...]) :
    val vs = to-tuple $ for s in ss seq :
      AtomValue(closest-info(), s)
    val tuple = ProjTuple(closest-info(), ProjValues(closest-info(), vs))
    [false, tuple]
  defrule compile-file? = (flag ?s:#string!) :
    [false, AtomValue(closest-info(), s)]

  defproduction compile-require-packages: Tuple<ForeignPackageFilesS0>
  defrule compile-require-packages = (requires #:! (?fps:#foreign-packages ...)) : to-tuple(fps)
  defrule compile-require-packages = () : []

  defproduction dependencies : Maybe<ProjValue>
  defrule dependencies = (from ?v:#projvalue!) : One(v)
  defrule dependencies = () : None()

  defproduction build-tag: BuildTargetType
  defrule build-tag = (build) : StandardTarget
  defrule build-tag = (build-test) : TestTarget
  defrule build-tag = (build-macros) : MacroTarget

  defrule projstmt = (?type:#build-tag ?name:#symbol! #:! (?bs:#build-option! ...)) :
    within add-proj-file-info(closest-info()) :
      BuildStmtS0(closest-info(),
                  name,
                  type,
                  entry!(bs, `inputs),
                  entry?(bs, `supported-vm-packages),
                  entry?(bs, `pkg),
                  entry?(bs, `o)
                  entry?(bs, `s)
                  entry?(bs, `ext-deps)
                  entry?(bs, `ccfiles)
                  entry?(bs, `ccflags)
                  entry?(bs, `flags)
                  entry?(bs, `optimize, false))

  defrule projstmt = (var ?name:#symbol! = ?v:#projvalue!) :
    VarStmtS0(closest-info(), name, v)

  defrule projstmt = (foreign-package-params(?manager:#symbol!) #:! (
                        ?es:#key-projvalue! ...)) :
    ForeignPackageParamsStmtS0(closest-info(),
                               manager,
                               AtomValue(closest-info(), "."),
                               to-tuple(es))

  defproduction projvalue: ProjValue 

  defrule projvalue = (on-platform #:! (?es:#key-projvalue! ...)) :
    CondPlatform(closest-info(), to-tuple(es))
    
  defrule projvalue = (on-link #:! (?es:#key-projvalue! ...)) :
    CondLink(closest-info(), to-tuple(es))
    
  defproduction key-projvalue! : KeyValue<Symbol,ProjValue>
  defrule key-projvalue! = (?key:#symbol! #:! ?v:#projvalue!) : key => v

  defproduction key-projvalue : KeyValue<Symbol,ProjValue>
  defrule key-projvalue = (?key:#symbol : ?v:#projvalue!) : key => v

  defrule projvalue = ({?e0:#key-projvalue ?es:#key-projvalue! ...}) :
    ProjTableS0(closest-info(), to-tuple(cons(e0, es)))

  defrule projvalue = ({}) :
    ProjTableS0(closest-info(), [])    

  defrule projvalue = ({?name:#symbol!}) :
    VarValue(closest-info(), name)

  defrule projvalue = ([?vs:#projvalue! ...]) :
    ProjTuple(closest-info(), ProjValues(closest-info(), to-tuple(vs)))

  defrule projvalue = ((?vs:#projvalue! ...)) :
    ProjValues(closest-info(), to-tuple(vs))

  defrule projvalue = (?v:#symbol-or-string) :
    AtomValue(closest-info(), v)

  defproduction foreign-packages: ForeignPackageFilesS0
  defrule foreign-packages = (foreign-packages(?manager:#symbol) #:! ?v:#projvalue!) :
    ForeignPackageFilesS0(manager, v)

  ;----------------------------------------------------------
  ;----------------- Require Statement Entries --------------
  ;----------------------------------------------------------
  defproduction require! : KeyValue<Symbol,?>
  defrule require! = (dynamic-libraries #:! ?v:#projvalue!) : `dylibs => v
  defrule require! = (ccfiles #:! ?v:#projvalue!) : `ccfiles => v
  defrule require! = (ccflags #:! ?v:#projvalue!) : `ccflags => v
  defrule require! = (?fps:#foreign-packages) : `foreign-packages => fps
  fail-if require! = () : ProjFileError(closest-info(), "Expected a requirement entry here.")

  ;----------------------------------------------------------
  ;----------------- Build Option Entries -------------------
  ;----------------------------------------------------------
  defproduction build-option! : KeyValue<Symbol,?>
  defrule build-option! = (inputs #:! ?v:#projvalue!) : `inputs => v
  defrule build-option! = (supported-vm-packages #:! ?v:#projvalue!) : `supported-vm-packages => v
  defrule build-option! = (pkg #:! ?v:#projvalue!) : `pkg => v
  defrule build-option! = (o #:! ?v:#projvalue!) : `o => v
  defrule build-option! = (s #:! ?v:#projvalue!) : `s => v
  defrule build-option! = (external-dependencies #:! ?v:#projvalue!) : `ext-deps => v
  defrule build-option! = (ccfiles #:! ?v:#projvalue!) : `ccfiles => v
  defrule build-option! = (ccflags #:! ?v:#projvalue!) : `ccflags => v
  defrule build-option! = (flags #:! ?v:#projvalue!) : `flags => v
  defrule build-option! = (optimize) : `optimize => true

  ;----------------------------------------------------------
  ;--------------------- Error Productions ------------------
  ;----------------------------------------------------------
  public defproduction projstmt! : ProjStmt
  defproduction projvalue! : ProjValue

  defrule projstmt! = (?x:#projstmt)
  fail-if projstmt! = () : ProjFileError(closest-info(), "Expected a Stanza project statement here.")
  defrule projvalue! = (?x:#projvalue)
  fail-if projvalue! = () : ProjFileError(closest-info(), "Not a valid value.")

  defproduction :!
  defrule :! = (:)
  fail-if :! = () : ProjFileError(closest-info(), "Expected a colon here.")

  ;----------------------------------------------------------
  ;---------------------- Basics ----------------------------
  ;----------------------------------------------------------

  defn ut (x) : unwrap-token(x)

  public defproduction symbol: Symbol
  public defproduction string: String
  public defproduction char: Char
  public defproduction byte: Byte
  public defproduction int: Int
  public defproduction long: Long
  public defproduction float: Float
  public defproduction double: Double
  public defproduction symbol-or-string : Symbol|String

  public defproduction symbol!: Symbol
  public defproduction string!: String
  public defproduction char!: Char
  public defproduction byte!: Byte
  public defproduction int!: Int
  public defproduction long!: Long
  public defproduction float!: Float
  public defproduction double!: Double
  public defproduction symbol-or-string! : Symbol|String

  defrule symbol = (?x) when ut(x) is Symbol : ut(x)
  defrule string = (?x) when ut(x) is String : ut(x)
  defrule char = (?x) when ut(x) is Char : ut(x)
  defrule byte = (?x) when ut(x) is Byte : ut(x)
  defrule int = (?x) when ut(x) is Int : ut(x)
  defrule long = (?x) when ut(x) is Long : ut(x)
  defrule float = (?x) when ut(x) is Float : ut(x)
  defrule double = (?x) when ut(x) is Double : ut(x)
  defrule symbol-or-string = (?x) when ut(x) is Symbol|String : ut(x)

  defrule symbol! = (?x:#symbol)
  fail-if symbol! = () : ProjFileError(closest-info(), "Expected a symbol here.")
  defrule string! = (?x:#string)
  fail-if string! = () : ProjFileError(closest-info(), "Expected a string here.")
  defrule char! = (?x:#char)
  fail-if char! = () : ProjFileError(closest-info(), "Expected a char here.")
  defrule byte! = (?x:#byte)
  fail-if byte! = () : ProjFileError(closest-info(), "Expected a byte here.")
  defrule int! = (?x:#int)
  fail-if int! = () : ProjFileError(closest-info(), "Expected a int here.")
  defrule long! = (?x:#long)
  fail-if long! = () : ProjFileError(closest-info(), "Expected a long here.")
  defrule float! = (?x:#float)
  fail-if float! = () : ProjFileError(closest-info(), "Expected a float here.")
  defrule double! = (?x:#double)
  fail-if double! = () : ProjFileError(closest-info(), "Expected a double here.")
  defrule symbol-or-string! = (?x:#symbol-or-string)
  fail-if symbol-or-string! = () : ProjFileError(closest-info(), "Expected a symbol or string here.")

;============================================================
;====================== Error Utilities =====================
;============================================================

;Execute the given body.
;If a ProjFileError is thrown, attach the given file information
;to the error.
defn add-proj-file-info<?T> (f:() -> ?T, info:FileInfo|False) :
  try :
    f()
  catch (e:ProjFileError) :
    throw(ProjFileError(info, msg(e)))

;============================================================
;===================== KeyValue Utilities ===================
;============================================================

defn entry?<?T> (es:Seqable<KeyValue<Symbol,?T>>, name:Symbol) :
  for e in es first :
    One(value(e)) when key(e) == name else None()

defn entry?<?T> (es:Seqable<KeyValue<Symbol,?T>>, name:Symbol, default:?T) :
  val v = entry?(es, name)
  value?(v, default)

defn entry!<?T> (es:Seqable<KeyValue<Symbol,?T>>, name:Symbol) :
  val v = entry?(es, name)
  if empty?(v) :
    throw(ProjFileError(false, to-string("No %_ entry given." % [name])))
  value!(v)

defn entries<?T> (es:Seqable<KeyValue<Symbol,?T>>, name:Symbol) -> Tuple<T> :
  to-tuple $ for e in es seq? :
    if key(e) == name : One(value(e))
    else : None()