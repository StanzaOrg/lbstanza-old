;See License.txt for details about licensing.

defpackage stz/compiler :
  import core
  import collections
  import stz/params
  import stz/proj-manager
  import stz/proj
  import stz/proj-ir
  import stz/proj-utils
  import stz/compiler-main
  import stz/config
  import stz/backend
  import stz/utils
  import stz/aux-file
  import stz/front-end
  import core/parsed-path
  import stz/compiler-build-settings
  import stz/compiler-result
  import stz/compiler-linking
  import stz/linking-errors
  import stz/file-stamps
  import stz/macroexpander
  import stz/external-dependencies
  import stz/standard-proj-env
  import stz/foreign-package-manager with:
    prefix(System) => PM
  import stz/foreign-package-files
  import stz/built-in-package-managers
  import stz/dir-utils

;============================================================
;==================== System Callbacks ======================
;============================================================

public deftype System
public defmulti call-cc (s:System, platform:Symbol, file:String, ccfiles:Tuple<String>, ccflags:Tuple<String>, output:String) -> True|False
public defmulti call-shell (s:System, platform:Symbol, command:String) -> False
public defmulti make-temporary-file (s:System) -> String
public defmulti delete-temporary-file (s:System, file:String) -> False

;============================================================
;============== Wrap System for Package Manager =============
;============================================================

;Return a package manager system that just calls the system
;utilities directly.
defn package-manager-system () -> PMSystem :
  new PMSystem :
    defmethod read-file (this, filename:String) -> String :
      slurp(filename)

    defmethod write-file (this, filename:String, contents) :
      spit(filename, contents)
    
    defmethod file-exists? (this, filename:String) -> True|False :
      file-exists?(filename)

    defmethod ensure-directory-exists (this, filepath:String) -> False :
      ensure-directory-exists(filepath)

    defmethod call-system (this,
                           prog:String,
                           args:Tuple<String>,
                           workdir:String|False,
                           env-vars:Tuple<KeyValue<String,String>>|False) -> Int :
      call-system(prog, args, workdir, env-vars)

    defmethod call-system-and-get-output (this,
                                          prog:String,
                                          args:Tuple<String>,
                                          workdir:String|False,
                                          env-vars:Tuple<KeyValue<String,String>>|False) -> String :
      call-system-and-get-output(prog, args, workdir, env-vars)

;============================================================
;================== Compute Build Settings ==================
;============================================================

defn compute-build-settings (projenv:StandardProjEnv,
                             settings:BuildSettings,
                             platform:Symbol) -> [ProjFile, BuildSettings] :
  match(inputs(settings)) :
    (inputs:BuildTarget) :
      val proj-files = default-proj-files()
      val proj = read-proj-files(proj-files, platform, projenv)
      ;Retrieve build target statement
      val s = build-target!(proj, target(inputs))
      ;Compute build flags
      val build-flags = Vector<Symbol>()
      add-all(build-flags, flags(s))
      add-all(build-flags, flags(settings))
      add(build-flags, `TESTING) when type(s) is TestTarget
      remove-duplicates!(build-flags)
      ;Compute build optimization level
      val build-optimization = optimize?(settings) or optimize(s)
      ;Compute assembly
      val build-asm = string-or?(original-asm(settings), value?(assembly(s)))
      ;Compute output
      val build-out = add-exe-suffix?(
                        string-or?(output(settings), value?(output(s)))
                        platform)
      ;Compute external dependencies
      val build-ext-deps = string-or?(external-dependencies(settings), value?(external-dependencies(s)))
      ;Compute build pkg directory
      val build-pkg-dir = string-or?(pkg-dir(settings), value?(pkg(s)))
      ;Compute input packages
      val build-packages = Vector<String|Symbol>()
      add-all(build-packages, /inputs(s))
      if type(s) is TestTarget :
        if not contains?(build-packages, `stz/test-driver) :
          add(build-packages, `stz/test-driver)
      ;Compute ccfiles and ccflags
      val build-ccfiles = to-tuple(cat(ccfiles(s), ccfiles(settings)))
      val build-ccflags = to-tuple(cat(ccflags(s), ccflags(settings)))
      ;Compute new settings
      val asmfile = attempt: AsmFile(build-asm as? String, false)
      val settings* = BuildSettings(
        BuildPackages(to-tuple(build-packages), target(inputs)),
        supported-vm-packages(s),
        platform,
        asmfile,
        build-out,
        build-ext-deps,
        build-pkg-dir,
        build-optimization,
        build-ccfiles,
        build-ccflags,
        to-tuple(build-flags),
        macro-plugins(settings))

      ;Return new settings.
      [proj, settings*]

    (inputs:BuildPackages) :
      val proj-files = default-proj-files()
      add-all(proj-files, /proj-files(names(inputs)))
      val proj = read-proj-files(proj-files, platform, projenv)
      val inputs* = BuildPackages $ to-tuple $ non-files-to-symbols $ non-proj-files $ names $ inputs
      val vm-packages* = to-tuple $ non-files-to-symbols $ vm-packages $ settings
      val build-out = add-exe-suffix?(output(settings), platform)
      val settings* = sub-inputs{_, inputs*} $
                      sub-vm-packages{_, vm-packages*} $
                      sub-platform{_, platform} $
                      sub-output{_, build-out} $
                      settings

      ;Return new settings.
      [proj, settings*]

;If we are compiling on windows, then adjust the path
;to automatically add the .exe extension if no extension
;has been given. This mimics gcc's behaviour on Windows.
defn add-exe-suffix? (path:String|False, platform:Symbol) -> String|False :
  match(path:String) :
    if platform == `windows :
      val parsed-path = parse-path(path, Windows)
      val n = length(entries(parsed-path))
      val elem = entries(parsed-path)[n - 1]
      match(elem:NamedPath) :
        if index-of-char(name(elem), '.') is False : append(path, ".exe")
        else : path
      else : path
    else : path

;Ensure that, if appropriate, that an assembly file
;exists in the build settings.
defn ensure-asmfile (settings:BuildSettings,
                     system:System) -> BuildSettings :
  ;Determine whether we should autogenerate an assembly file.
  val genfile? = match(assembly(settings)) :
    (f:AsmFile) : false
    (f:False) : output(settings) is-not False

  ;If so, then call the system and request a temporary filename.
  if genfile? :
    val asmfile = AsmFile(make-temporary-file(system), true)
    sub-assembly(settings, asmfile)
  else :
    settings

;============================================================
;================ Compute Dependencies ======================
;============================================================
public defn dependencies (settings:BuildSettings, ignore-cache?:True|False) -> DependencyResult :
  defn main () :
    read-config-file()
    val build-platform = compute-build-platform()
    val [proj, settings*] = compute-build-settings(StandardProjEnv(), settings, build-platform)
    val joined-settings = join-vm-packages-with-inputs(settings*)
    setup-system-flags(joined-settings)
    compute-dependencies(proj, joined-settings)

  defn compute-build-platform () :
    match(platform(settings)) :
      (p:Symbol) : p
      (f:False) : OUTPUT-PLATFORM

  defn compute-dependencies (proj:ProjFile, settings:BuildSettings) :
    val params = ProjParams(compiler-flags(), optimize?(settings))
    val auxfile = AuxFile() when not ignore-cache?
    val proj-manager = ProjManager(proj, params, auxfile)
    val macroexpander = StanzaMacroexpander()
    set-proj-manager(macroexpander, proj-manager)
    do(load-macro-plugin{macroexpander, _}, macro-plugins(settings))
    dependencies $ new FrontEndInputs :
      defmethod inputs (this) : build-inputs!(settings)
      defmethod find-package (this, name:Symbol) : find-package(proj-manager, name)
      defmethod conditional-dependencies (this, pkgs:Seqable<Symbol>) : conditional-imports(proj-manager, pkgs)
      defmethod supported-vm-packages (this) : vm-packages(settings)
      defmethod macroexpander (this) : macroexpander

  ;Launch!
  main()

;Helper: For analyze-dependencies, we wish for all packages under
;'supported-vm-packages' to be considered like a normal dependency.
;This function moves all the vm-packages to the inputs field of BuildSettings.
defn join-vm-packages-with-inputs (settings:BuildSettings) -> BuildSettings :
  ;Retrieve the set of input packages and files.
  val packages = inputs(settings) as BuildPackages
  val input-set = to-hashset<String|Symbol>(names(packages))

  ;Compute new names by concatenating original names with all vmpackages
  ;that aren't already there.
  val non-input-vmpackages = for p in vm-packages(settings) filter : not input-set[p]
  val new-names = to-tuple(cat(names(packages), non-input-vmpackages))

  ;Return the new BuildSettings with the concatenated names and now empty vmpackages.
  val new-inputs = BuildPackages(new-names, original-target(packages))
  settings $> sub-inputs{_, new-inputs}
           $> sub-vm-packages{_, []}

;============================================================
;============= Compile Given Files EntryPoint ===============
;============================================================

public defn compile (settings:BuildSettings, system:System, verbose?:True|False) :
  defn main () :
    read-config-file()
    val projenv = StandardProjEnv()
    val build-platform = compute-build-platform()
    val [proj, settings*] = let :
      val [proj, settings*] = compute-build-settings(projenv, settings, build-platform)
      [proj, ensure-asmfile(settings*, system)]

    ;Sanity check: Ensure that all settings required for compilation have
    ;now been calculated.
    ensure-ready-for-compilation!(settings*)

    val auxfile = AuxFile()
    if empty?(build-inputs!(settings*)) :
      println("No inputs given to compiler.")
    else if already-built?(auxfile, settings*, proj) :
      println("Build target %~ is already up-to-date." % [build-target?(settings*)])
    else :
      setup-system-flags(settings*)
      val proj-manager = ProjManager(proj, ProjParams(compiler-flags(), optimize?(settings*)), auxfile)
      val comp-result = compile(proj-manager, build-inputs!(settings*), vm-packages(settings*), asm?(settings*), pkg-dir(settings*),
                                backend(platform(settings*) as Symbol), optimize?(settings*), verbose?, macro-plugins(settings*))
      save(auxfile)
      within delete-temporary-file-on-finish(settings*) :
        link-output-file(projenv, settings*, comp-result, proj, auxfile)

  defn compute-build-platform () :
    match(platform(settings)) :
      (p:Symbol) : p
      (f:False) : OUTPUT-PLATFORM

  defn already-built? (auxfile:AuxFile, settings*:BuildSettings, proj:ProjFile) :
    val target = build-target?(settings*)
    match(target:Symbol) :
      target-up-to-date?(auxfile, target, BuildRecordSettings(settings*), proj)

  defn backend (platform:Symbol) :
    switch(platform) :
      `os-x : X64Backend()
      `linux : L64Backend()
      `windows : W64Backend()

  ;Execute the body and delete the temporary file when the body finishes.
  defn* delete-temporary-file-on-finish (body:() -> False, settings:BuildSettings) :
    ;Determine whether a temporary file has been generated.
    val temp-file? = match(assembly(settings)) :
      (asm:AsmFile) : filename(asm) when auto-generated?(asm)
      (f:False) : false
    match(temp-file?:String) :
      try :
        body()
      finally :
        try: delete-temporary-file(system, temp-file?)
        catch (e) : false      
    else :
      body()

  defn link-output-file (projenv:StandardProjEnv,
                         settings:BuildSettings,
                         comp-result:CompilationResult,
                         proj:ProjFile,
                         auxfile:AuxFile) :
    val errors = Vector<LinkingError>()
    val linkenv = new LinkerEnv :
      defmethod issue-error (this, err:LinkingError) :
        add(errors, err)
      defmethod foreign-package-manager-dependencies (this,
                                                      params:ForeignPackageParamsStmt,
                                                      platform:Symbol) :
        val pm = package-manager(projenv, package-manager(params))
        system-dependencies(pm, to-params(params, platform))
      defmethod satisfy-foreign-packages (this,
                                          files:ForeignPackageFiles,
                                          params:ForeignPackageParamsStmt,
                                          platform:Symbol) :
        val pm = package-manager(projenv, package-manager(files))
        satisfy-dependencies(pm, /files(files), to-params(params, platform), package-manager-system())
      defmethod computed-dependencies (this, deps:ProjDependencies) :
        if external-dependencies(settings) is String :
          val filename = external-dependencies(settings) as String
          spit(filename, format-report(deps))
      defmethod notify-external-dependency-up-to-date (this, file?:True|False, name:String) :
        if verbose? :
          val type-str = "file" when file? else "flag"
          println("External dependency: %_ %~ is up-to-date." % [type-str, name])
      defmethod call-shell (this, platform:Symbol, command:String) :
        call-shell(system, platform, command)
      defmethod call-cc (this,
                         platform:Symbol,
                         asm:String,
                         ccfiles:Tuple<String>,
                         ccflags:Tuple<String>,
                         exefile:String) :
        call-cc(system, platform, asm,  ccfiles,ccflags, exefile)
      defmethod update-aux-file (this,
                                 records:Tuple<AuxRecord>) :
        do(add{auxfile, _}, records)
        save(auxfile)
    val input = LinkerInput(settings,
                            comp-result,
                            proj,
                            auxfile)
    link(input, linkenv)
    throw-linker-errors?(errors)

  ;Launch!
  main()

;============================================================
;===================== System Flags =========================
;============================================================

defn setup-system-flags (settings:BuildSettings) :
  ;Platform setting
  OUTPUT-PLATFORM = platform(settings) as Symbol

  ;Platform flag
  add-flag $ platform-flag(platform(settings) as Symbol)

  ;Optimization flag
  add-flag(`OPTIMIZE) when optimize?(settings)

  ;Add custom build flags
  do(add-flag, flags(settings))

  ;Update pkg path
  val pkg-dir = pkg-dir(settings)
  match(pkg-dir:String) :
    STANZA-PKG-DIRS = cons(pkg-dir, STANZA-PKG-DIRS)

;============================================================
;====================== Utilities ===========================
;============================================================

defn has-extension? (s:String) :
  index-of-char(s, '.') is Int

defn string-or? (a:String|False, b:String|False) :
  match(a:False) : b
  else : a

defn proj-file? (s:String|Symbol) :
  match(s:String) : suffix?(s, ".proj")

defn proj-files (ss:Tuple<String|Symbol>) :
  filter(proj-file?, ss) as Seq<String>

defn non-proj-files (ss:Tuple<String|Symbol>) :
  filter({not proj-file?(_)}, ss)

defn non-files-to-symbols (ss:Seqable<String|Symbol>) :
  for s in ss seq :
    match(s) :
      (s:String) : s when has-extension?(s) else to-symbol(s)
      (s:Symbol) : s

;Convert a BuildSettings into a BuildRecordSettings object
;that we can use to query the aux file with.
defn BuildRecordSettings (settings:BuildSettings) -> BuildRecordSettings :
  BuildRecordSettings(
    build-inputs!(settings)
    vm-packages(settings)
    platform(settings)
    original-asm(settings)
    output(settings)
    external-dependencies(settings)
    pkg-dir(settings)
    optimize?(settings)
    ccfiles(settings)
    ccflags(settings)
    flags(settings))