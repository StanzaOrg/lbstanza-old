defpackage stz/parsed-path :
  import core
  import collections

;============================================================
;==================== Path Datastructure ====================
;============================================================
public defstruct ParsedPath :
  entries: Tuple<PathElement>

public deftype PathElement
public defstruct NamedPath <: PathElement: (name: String)
public defstruct UpPath <: PathElement
public defstruct CurrentPath <: PathElement
public defstruct RootPath <: PathElement

defmethod print (o:OutputStream, p:ParsedPath) :
  val es = entries(p)
  let loop (i:Int = 0, separator?:True|False = false) :
    if i < length(es) :
      print(o, '/') when separator?
      match(es[i]) :
        (e:RootPath) :
          print(o, '/')
          loop(i + 1, false)
        (e:CurrentPath) :
          print(o, '.')
          loop(i + 1, true)
        (e:UpPath) :
          print(o, "..")
          loop(i + 1, true)
        (e:NamedPath) :
          for c in name(e) do :
            val escape? = contains?(`('/' '\\' '\'' '\"'), c)
            print(o, '\\') when escape?
            print(o, c)
          loop(i + 1, true)

;============================================================
;===================== Parsing Function =====================
;============================================================
public defn parse-path (path:String) -> ParsedPath :
  val elements = Vector<PathElement>()
  val buffer = StringBuffer()
  defn make-path-element () :
    val name = to-string(buffer)
    clear(buffer)
    switch(name) :
      "" : false
      "." : add(elements, CurrentPath())
      ".." : add(elements, UpPath())
      else : add(elements, NamedPath(name))

  ;Parse header
  val start-index = 
    if prefix?(path, "/") :
      add(elements, RootPath())
      1
    else :
      0

  ;Parse remaining path
  val len = length(path)
  let loop (i:Int = start-index) :
    if i < len :
      val c = path[i]
      switch(path[i]) :
        '/' :
          make-path-element()
          loop(i + 1)
        '\\' :
          if i + 1 < len :
            add(buffer, path[i + 1])
            loop(i + 2)
          else :
            add(buffer, c)
            loop(i + 1)
        else :
          add(buffer, c)
          loop(i + 1)
    else :
      make-path-element()

  ;Form and normalize path
  normalize(ParsedPath(to-tuple(elements)))

;============================================================
;==================== Normalization =========================
;============================================================
public defn normalize (path:ParsedPath) -> ParsedPath :
  val elements = Vector<PathElement>()
  for e in entries(path) do :
    match(e) :
      (e:NamedPath|RootPath) :
        add(elements, e)
      (e:CurrentPath) :
        false
      (e:UpPath) :
        if empty?(elements) :
          add(elements, e)
        else :
          match(peek(elements)) :
            (top:RootPath) : throw(UpPastRoot(path))
            (top:UpPath) : add(elements,e)
            (top:NamedPath) : pop(elements)
  add(elements, CurrentPath()) when empty?(elements)
  ParsedPath(to-tuple(elements))

;============================================================
;====================== Predicates ==========================
;============================================================

public defn absolute? (path:ParsedPath) :
  not empty?(entries(path)) and entries(path)[0] is RootPath

;============================================================
;===================== Utility Functions ====================
;============================================================

public defn relative-to-dir (dir:ParsedPath, path:ParsedPath) -> ParsedPath :
  val elements = Vector<PathElement>()
  if absolute?(path) :
    path
  else :
    normalize $ ParsedPath $ to-tuple $
    cat(entries(dir), entries(path))

public defn enclosing-dir (path:ParsedPath) -> ParsedPath :
  relative-to-dir(path, ParsedPath([UpPath()]))

;============================================================
;====================== Errors ==============================
;============================================================

public defstruct UpPastRoot <: Exception :
  path: ParsedPath

defmethod print (o:OutputStream, e:UpPastRoot) :
  print(o, "Path '%_' uses '..' entries to traverse past the root directory." % [
    path(e)])