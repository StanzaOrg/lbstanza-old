defpackage stz/safepoint-table-creator :
  import core
  import collections
  import stz/vm-ir

;<doc>=======================================================
;================== Documentation ===========================
;============================================================

Purpose: This is a utility class for helping to easily create a
VMSafepointTable during compilation of EL-IR.

;============================================================
;=======================================================<doc>

;Helper type
public deftype VMSafepointTableCreator

;Add a new entry to the table. Returns the SafepointIns that references
;the new entry.
public defmulti add (table:VMSafepointTableCreator, entry:SafepointEntry) -> SafepointIns

;Compile the information into the safepoint table.
public defmulti compile (table:VMSafepointTableCreator) -> VMSafepointTable

;Represents the information in a single entry.
public defstruct SafepointEntry :
  base:String
  filename:String
  line:Int
  column:Int
  group:Int

;============================================================
;===================== Implementation =======================
;============================================================

public defn VMSafepointTableCreator (makeid:() -> Int) -> VMSafepointTableCreator :
  ;Hold the entries for a given file.
  val file-entries =
    within [base, filename] = HashTable-init<[String,String],EntryTable>() :
      EntryTable(base, filename, makeid)

  new VMSafepointTableCreator :
    ;Adding a new safepoint to the table.
    defmethod add (this, entry:SafepointEntry) :
      val entries = file-entries[[base(entry), filename(entry)]]
      val entry-id = id(entries, line(entry), column(entry), group(entry))
      SafepointIns(entry-id)

    ;Compile the VMSafepointTable.
    defmethod compile (this) :
      val files = to-tuple $ seq(compile, values(file-entries))
      VMSafepointTable(files)

;============================================================
;================= Entries within a File ====================
;============================================================

deftype EntryTable
defmulti id (t:EntryTable, line:Int, column:Int, group:Int) -> Int
defmulti compile (t:EntryTable) -> VMFileSafepoints

defn EntryTable (base:String,
                 filename:String,
                 makeid:() -> Int) :
  val table = HashTable-init<[Int,Int,Int],Int>(makeid{})
  new EntryTable :
    defmethod id (this, line:Int, column:Int, group:Int) :
      table[[line,column,group]]
    defmethod compile (this) :
      val entries = to-tuple $
        for entry in table seq :
          val [line, column, group] = key(entry)
          val id = value(entry)
          VMSafepointInfo(id, line, column, group)
      VMFileSafepoints(base, filename, entries)