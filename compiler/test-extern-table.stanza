defpackage stz/test-extern-table :
  import core
  import collections
  import stz/extern-defn-table
  import stz/code-template-table
  import stz/backend
  import stz/vm-ir

;# How to compile #
;
;stanza stz/test-extern-table -o test-extern-table -ccfiles c-extern-code.s -pkg pkgs -s test-extern-table.s

;Return an appropriate backend for the current platform.
defn current-backend () -> Backend :
  switch(CURRENT-PLATFORM) :
    Windows: W64Backend()
    OS-X: X64Backend()
    Linux: L64Backend()

;Hold the arguments here.
lostanza val NUM-ARGS:long = 12
lostanza val ARGS:ptr<long> = call-c clib/malloc(NUM-ARGS * 8)

;Print out the entry point.
extern defn myentrypoint (f:long) -> long :
  call-c clib/printf("myentrypoint(%ld)\n", f)
  for (var i:long = 0, i < NUM-ARGS, i = i + 1) :
    val x = ARGS[i]
    val fx = ($ls-prim fnum x)
    call-c clib/printf("  ARGS[%ld] = %lld (%g)\n", i, x, fx)
    ARGS[i] = 0
  if f < 5 :
    ARGS[0] = f * 100 + 1
  else :
    val v = f as double * 100.0 + 0.1
    ARGS[0] = ($ls-prim bits v)
  return 41

;Initialize the trampoline.
lostanza let :
  ;Initialize the trampoline to call myentrypoint.
  initialize-extern-trampoline(addr(myentrypoint), ARGS)

;Utility: Call the given id with one Int.
lostanza defn call (table:ref<ExternDefnTable>, id:ref<Int>,
                    x0:ref<Int>) -> ref<Int> :
  val f = address(table,id)
       as ptr<((long) -> long)>
  val result = call-c [f](x0.value)
  return new Int{result as int}

;Utility: Call the given id with one Int and one Double.
lostanza defn call (table:ref<ExternDefnTable>, id:ref<Int>,
                    x0:ref<Int>, x1:ref<Double>) -> ref<Int> :
  val f = address(table,id)
       as ptr<((long, double) -> long)>
  val result = call-c [f](x0.value, x1.value)
  return new Int{result as int}

;Utility: Call the given id with one Int and one Double.
lostanza defn call (table:ref<ExternDefnTable>, id:ref<Int>,
                    x0:ref<Double>, x1:ref<Int>) -> ref<Int> :
  val f = address(table,id)
       as ptr<((double, long) -> long)>
  val result = call-c [f](x0.value, x1.value)
  return new Int{result as int}

;Utility: Call the given id with one Int and one Double.
lostanza defn call (table:ref<ExternDefnTable>, id:ref<Int>,
                    x0:ref<Int>, x1:ref<Int>, x2:ref<Double>,
                    x3:ref<Int>, x4:ref<Int>, x5:ref<Double>) -> ref<Int> :
  val f = address(table,id)
       as ptr<((long, long, double, long, long, double) -> long)>
  val result = call-c [f](x0.value, x1.value, x2.value, x3.value, x4.value, x5.value)
  return new Int{result as int}

;Utility: Call the given id with 10 ints.
lostanza defn call (table:ref<ExternDefnTable>, id:ref<Int>,
                    x0:ref<Int>, x1:ref<Int>, x2:ref<Int>, x3:ref<Int>, x4:ref<Int>,
                    x5:ref<Int>, x6:ref<Int>, x7:ref<Int>, x8:ref<Int>, x9:ref<Int>) -> ref<Double> :
  val f = address(table,id)
       as ptr<((long, long, long, long, long, long, long, long, long, long) -> double)>
  val result = call-c [f](x0.value, x1.value, x2.value, x3.value, x4.value,
                          x5.value, x6.value, x7.value, x8.value, x9.value)
  return new Double{result}


;Main test
defn main () :
  val table = ExternDefnTable(current-backend())
  
  val f-1i = id(table, false)
  set-signature(table, f-1i, 0, [VMLong()], VMLong())

  val f-1i1f = id(table, false)
  set-signature(table, f-1i1f, 1, [VMLong(), VMDouble()], VMLong())

  val f-1f1i = id(table, false)
  set-signature(table, f-1f1i, 2, [VMDouble(), VMLong()], VMLong())

  val f-4i2f = id(table, false)
  set-signature(table, f-4i2f, 3, [VMLong(), VMLong(), VMDouble(),
                                   VMLong(), VMLong(), VMDouble()], VMLong())

  val f-10i = id(table, false)
  set-signature(table, f-10i, 47, [VMLong(), VMLong(), VMLong(), VMLong(), VMLong()
                                   VMLong(), VMLong(), VMLong(), VMLong(), VMLong()], VMDouble())

  call(table, f-1i, 42)
  call(table, f-1i1f, 42, 4.3)
  call(table, f-1f1i, 4.3, 42)
  call(table, f-4i2f, 13, 17, 19.3, -19, -13, -12.2)
  val result-d = call(table, f-10i, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50)
  println("Result of f-10i = %_" % [result-d])


;Launch!
main()