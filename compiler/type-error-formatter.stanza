defpackage stz/type-error-formatter :
  import core
  import collections
  import stz/tl-ir2
  import stz/type-errors

;============================================================
;==================== Public API ============================
;============================================================

;Type for computing human-readable versions of type errors.
public deftype TypeErrorFormatter

;Format a type error to be human-readable.
public defmulti format (f:TypeErrorFormatter, e:TypeError) -> ?

;============================================================
;==================== Formatting ============================
;============================================================

public defn TypeErrorFormatter () :

  new TypeErrorFormatter :

    defmethod format (this, e:TypeError) :
      defn temp-message (info:FileInfo|False) :
        "%_ at %_" % [object-type(e), info]

      match(e) :      
        (e:NoInferredType) :
          temp-message(info(comm(e)))

        (e:NoInferredArg) :
          temp-message(info(exp(e)))

        (e:NoInferredReturn) :
          temp-message(info(comm(e)))

        (e:BadDetuple) :
          temp-message(info(comm(e)))

        (e:BadAssign) :
          temp-message(info(comm(e)))

        (e:BadReturn) :
          temp-message(info(exp(e)))

        (e:BadLSReturn) :
          temp-message(info(exp(e)))

        (e:UnboundedDef) :
          temp-message(info(comm(e)))

        (e:UnboundedArg) :
          temp-message(info(comm(e)))
          
        (e:UnboundedReturn) :
          temp-message(info(comm(e)))

        (e:UnboundedStruct) :
          temp-message(info(exp(e)))

        (e:UnboundedDeref) :
          temp-message(info(exp(e)))

        (e:UnboundedDeslot) :
          temp-message(info(exp(e)))

        (e:UnboundedField) :
          temp-message(info(exp(e)))

        (e:UnboundedCast) :
          temp-message(info(exp(e)))

        (e:BadExternfnArg) :
          temp-message(info(comm(e)))

        (e:BadExternfnReturn) :
          temp-message(info(comm(e)))

        (e:BadUpCast) :
          temp-message(info(exp(e)))

        (e:BadSetRef) :
          temp-message(info(exp(e)))

        (e:BadSetValue) :
          temp-message(info(exp(e)))

        (e:BadLValue) :
          temp-message(info(exp(e)))

        (e:BadArgTypes) :
          temp-message(info(exp(e)))

        (e:NotFunction) :
          temp-message(info(exp(e)))

        (e:BadPrimitive) :
          temp-message(info(exp(e)))

        (e:BadGotoArity) :
          temp-message(info(exp(e)))

        (e:BadGotoArgs) :
          temp-message(info(exp(e)))

        (e:BadPred) :
          temp-message(info(exp(e)))

        (e:BadHiStanzaRef) :
          temp-message(info(ref(e)))

        (e:BadObjectTArity) :
          temp-message(info(exp(e)))

        (e:BadObjectArity) :
          temp-message(info(exp(e)))

        (e:BadObjectArgs) :
          temp-message(info(exp(e)))

        (e:UnsupportedNew) :
          temp-message(info(exp(e)))

        (e:UnstableAddr) :
          temp-message(info(exp(e)))

        (e:BadDeref) :
          temp-message(info(exp(e)))

        (e:BadDeslot) :
          temp-message(info(exp(e)))

        (e:BadIndex) :
          temp-message(info(exp(e)))

        (e:BadField) :
          temp-message(info(exp(e)))

        (e:BadSize) :
          temp-message(info(exp(e)))

        (e:BadCast) :
          temp-message(info(exp(e)))

        (e:BadBranchArg) :
          temp-message(info(exp(e)))

        (e:BadMatchArg) :
          temp-message(info(exp(e)))

        (e:FunctionRefInInvalidCtxt) :
          temp-message(info(exp(e)))

        (e:UnselectedMix) :
          temp-message(info(exp(e)))

        (e:NoMix) :
          temp-message(info(exp(e)))

        (e:NoMulti) :
          temp-message(info(exp(e)))

        (e:AmbMulti) :
          temp-message(info(exp(e)))

        (e:BadSubmethod) :
          temp-message(info(comm(e)))

