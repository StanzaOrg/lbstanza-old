defpackage stz/type-error-formatter :
  import core
  import collections
  import stz/tl-ir2
  import stz/type-errors
  import stz/namemap
  import stz/type-formatter
  import stz/types
  import stz/type-fargs
  import stz/primitives
  import stz/type-hierarchy
  import stz/type-utils

;============================================================
;==================== Public API ============================
;============================================================

;Type for computing human-readable versions of type errors.
public deftype TypeErrorFormatter

;Format a type error to be human-readable.
public defmulti format (f:TypeErrorFormatter, e:TypeError) -> ?

;============================================================
;==================== Formatting ============================
;============================================================

public defn TypeErrorFormatter (namemap:NameMap, hier:TypeHierarchy) :

  ;Return a human-readable name for the given identifier.
  defn def-name (n:Int) -> Symbol :
    if key?(namemap, n) : name(namemap[n])
    else : to-symbol("$v%_" % [n])

  ;Create a formatter for formatting types.
  val type-formatter = TypeFormatter(def-name)

  ;Return a human-readable string representing the definition
  ;name.
  defn def-description (e:TDef|TDefTuple|TDefVar|TLet|TLetVar|TLetTuple|LSDef|LSDefVar|
                          TDefn|TDefmethod|TFn|TLDef|TLDefVar|TLDefn|TLDefmethod|TLExternFn) :
    defn fmt (s:String, n:Int|Tuple<Int>) :
      match(n) :
        (n:Int) : s % [def-name(n)]
        (ns:Tuple<Int>) : s % [seq(quotes{def-name(_)}, ns)]
    match(e) :
      (e:TDef) : fmt("global variable '%_'", n(e))
      (e:TDefTuple) : fmt("global variables %,", ns(e))
      (e:TDefVar) : fmt("global mutable variable '%_'", n(e))
      (e:TLet) : fmt("variable '%_'", n(e))
      (e:TLetVar) : fmt("mutable variable '%_'", n(e))
      (e:TLetTuple) : fmt("variables %,", ns(e))
      (e:TLDef) : fmt("LoStanza global variable '%_'", n(e))
      (e:TLDefVar) : fmt("LoStanza global mutable variable '%_'", n(e))
      (e:LSDef) : fmt("LoStanza global variable '%_'", n(e))
      (e:LSDefVar) : fmt("LoStanza global mutable variable '%_'", n(e))
      (e:TDefn) : fmt("function '%_'", n(e))
      (e:TLDefn) : fmt("LoStanza global function '%_'", n(e))
      (e:TDefmethod) : fmt("method '%_'", first-n(multi(e)))
      (e:TLDefmethod) : fmt("LoStanza method '%_'", first-n(multi(e)))
      (e:TFn) : "anonymous function"
      (e:TLExternFn) : fmt("externfn '%_'", n(e))

  ;Return a human-readable string representing the given LValue.
  defn loc-description (e:LSExp|TRef) :
    defn fmt (s:String, n:Int) : s % [def-name(n)]
    match(e) :
      (e:TRef) : fmt("variable %_", n(e))
      (e:LSVar) : fmt("LoStanza variable %_", n(e))
      (e:LSDeref) : "dereferenced location"
      (e:LSSlot) : "indexed slot"
      (e:LSField) : "field '.%_'" % [name(e)]

  ;Return a human-readable string describing the given expression.
  defn exp-description (e:TExp|LSExp) :
    defn fmt (s:String, n:Int) : s % [def-name(n)]
    match(e) :
      (e:TRef) : fmt("variable '%_'", n(e))
      (e:TMix) : fmt("function '%_'", n(refs(e)[0]))
      (e:LSVar) : fmt("variable '%_'", n(e))
      (e:LSMix) : fmt("function '%_'", n(refs(e)[0]))
      (e) : "expression"

  ;Return a human-readable listing of arguments and their expected types.
  defn arg-descriptions (es:Tuple<KeyValue<Int,TExp|LSExp>>) :
    val entries = for e in es seq :
      val index = key(e)
      val type = type-description(type!(value(e)))
      val exp-type = type-description(expected(ctxt(value(e)) as ExpCtxt|LSExpCtxt))
      Indented("Argument %_: Passing type '%_' to expected type '%_'." % [index, type, exp-type])
    "%n" % [entries]

  ;Retrieve human-readable description of the given type.
  defn type-description (t:Type|LSType) :
    format(type-formatter, t)

  ;Retrieve human-readable description of the given argument.
  defn arg-description (a:FArg<Type|LSType>) :
    defn qmark (b:True|False) : " = ?" when b else ""
    match(a) :
      (a:PositionalArg<Type|LSType>) :
        "%_%_" % [type-description(type(a)), qmark(optional?(a))]
      (a:KeywordArg<Type|LSType>) :
        "%_:%_%_" % [name(a), type-description(type(a)), qmark(optional?(a))]
      (a:VarArg<Type|LSType>) :
        "%_:%_ ..." % [name(a), type-description(type(a))]

  ;Retrieve a sentence fragment to indicate the passed type arguments.
  defn type-arg-str (targs:Tuple<Type>) :
    if empty?(targs) : ""
    else : "for type arguments (%,) and " % [seq(type-description,targs)]    

  ;Retrieve a human-readable sentence fragment for describing a context.
  ;Used like this: "No appropriate multi 'mymulti'{DESCRIPTION}."
  defn ctxt-description (ctxt:Context|LSContext) :
    match(ctxt) :
      (ctxt:ExpCtxt) :
        " for expected type '%_'" % [type-description(expected(ctxt))]
      (ctxt:CallCtxt) :
        " %_for argument types (%,)" % [type-arg-str(targs(ctxt)),
                                        seq(arg-description, fargs(ctxt))]
      (ctxt:MultiCtxt) :
        " %_for method types (%,) -> %_" % [type-arg-str(targs(ctxt))
                                            seq(arg-description, fargs(ctxt))
                                            type-description(a2(ctxt))]
      (ctxt:LSMultiCtxt) :
        " %_for method types (%,) -> %_" % [type-arg-str(targs(ctxt))
                                            seq(arg-description, fargs(ctxt))
                                            type-description(a2(ctxt))]
      (ctxt:LSExpCtxt) :
        " for expected type '%_'" % [type-description(expected(ctxt))]
      (ctxt:LSBlankExpCtxt) :
        ""
      (ctxt:LSCallCtxt) :
        " %_for argument types (%,)" % [type-arg-str(targs(ctxt)),
                                        seq(arg-description, fargs(ctxt))]
      (ctxt:LSAddrCtxt) :
        " for retrieving address of type '%_'" % [type-description(expected(ctxt))]
      (ctxt:LSBadCtxt) :
        ""

  ;Returns a human-readable sentence fragment for describing where a definition comes from.
  ;Used like this: "myfunc:Int{DESCRIPTION}"
  defn def-info-str (n:Int) :
    if key?(namemap, n) :
      val e = namemap[n]
      if info(e) is False : " in package '%_'" % [package(e)]
      else : " at %_" % [info(e)]
    else :
      ""

  ;Returns a human-readable listing of the defining information of a tuple
  ;of references.
  defn possibilities (refs:Tuple<TRef|LSVar>) :
    val entries = for r in refs seq :
      Indented("%_: %_%_" % [def-name(n(r)),
                             type-description(true-type(r) as Type|LSType),
                             def-info-str(n(r))])
    "%n" % [entries]

  ;Return the first identifier within the TMix.
  ;Used to retrieve a human-readable name for the mix.
  defn first-n (e:TExp|LSExp) -> Int :
    match(e) :
      (e:TMix) : n(refs(e)[0])
      (e:LSMix) : n(refs(e)[0])

  ;Return a human-readable prefix for the file information.
  defn info-str (info:FileInfo|False) :
    "" when info is False else "%_: " % [info]
  defn info-str (e:TExp|TComm|LSExp|LSComm) :
    info-str(info(e))

  new TypeErrorFormatter :

    defmethod format (this, e:TypeError) :
      defn temp-message (info:FileInfo|False) :
        "%_ at %_" % [object-type(e), info]

      match(e) :
      
        (e:NoInferredType) :
          "%_Could not infer type of %_." % [
          info-str(info(comm(e))), def-description(comm(e))]

        (e:NoInferredArg) :
          "%_Could not infer type of function argument '%_'" % [
          info-str(info(exp(e))), def-name(arg(e))]

        (e:NoInferredReturn) :
          "%_Could not infer return type of %_." % [
          info-str(comm(e)), def-description(comm(e))]

        (e:BadDetuple) :
          val arity = length(ns(comm(e)))
          "%_Cannot detuple expression of type '%_' into a tuple of %_ elements." % [
          info-str(comm(e)), type-description(type!(value(comm(e)))), arity]

        (e:BadAssign) :
          val value-type = type!(value(comm(e)) as TExp|LSExp)
          val exp-type = match(comm(e)) :
            (c:TDef|TDefVar|TLDef|TLDefVar) : type(c) as Type|LSType
            (c:TLet|TLetVar) : ntype(c) as Type
            (c:LSDef|LSDefVar) : type(c) as LSType
            (c:TDefTuple) : TTuple(types(c) as Tuple<Type>)
            (c:TLetTuple) : TTuple(ntypes(c) as Tuple<Type>)
          "%_Cannot assign expression of type '%_' to %_ with expected type '%_'." % [
          info-str(comm(e)), type-description(value-type), def-description(comm(e)), type-description(exp-type)]

        (e:BadReturn) :
          "%_Cannot return expression of type '%_' from function with declared return type '%_'." % [
          info-str(exp(e)), type-description(type!(exp(e))), type-description(return-type(e))]

        (e:BadLSReturn) :
          val v = exp(exp(e))
          val exp-type = expected(ctxt(v) as LSExpCtxt)
          "%_Cannot return expression of type '%_' from function with declared return type '%_'." % [
          info-str(exp(e)), type-description(type!(v)), type-description(exp-type)]

        (e:UnboundedDef) :
          "%_Cannot declare %_ with unbounded type '%_'." % [
          info-str(comm(e)), def-description(comm(e)), type-description(type(comm(e)))]

        (e:UnboundedArg) :
          val arg-index = index-of!(args(comm(e)), arg(e))
          val arg-type = type(a1(comm(e))[arg-index])
          "%_Cannot declare argument %_ with unbounded type '%_' in %_." % [
          info-str(comm(e)), def-name(arg(e)), type-description(arg-type), def-description(comm(e))]

        (e:UnboundedReturn) :
          "%_Cannot declare %_ with unbounded return type '%_'." % [
          info-str(comm(e)), def-description(comm(e)), type-description(a2(comm(e)))]

        (e:UnboundedStruct) :
          "%_Cannot directly allocate struct '%_' of unbounded size." % [
          info-str(exp(e)), def-name(n(exp(e)))]

        (e:UnboundedDeref) :
          val v = exp(exp(e))
          "%_Cannot dereference expression of type '%_' of unbounded size." % [
          info-str(exp(e)), type-description(type!(v))]

        (e:UnboundedDeslot) :
          val v = exp(exp(e))
          "%_Cannot access indexed slot in expression of type '%_' of unbounded size." % [
          info-str(exp(e)), type-description(type!(v))]

        (e:UnboundedField) :
          val v = exp(exp(e))
          "%_Cannot access named field '.%_' in expression of type '%_'. Field has unbounded size." % [
          info-str(exp(e)), name(exp(e)), type-description(type!(v))]

        (e:UnboundedCast) :
          "%_Cannot cast expression to unbounded type '%_'." % [
          info-str(exp(e)), type-description(targ(exp(e)))]

        (e:BadExternfnArg) :
          val arg-index = index-of!(args(comm(e)), arg(e))
          val arg-type = a1(comm(e))[arg-index]
          "%_Argument '%_' in %_ declared with invalid type '%_'." % [
          info-str(comm(e)), def-name(arg(e)), def-description(comm(e)), type-description(arg-type)]

        (e:BadExternfnReturn) :
          val ret-type = a2(comm(e))
          "%_Cannot declare %_ with invalid return type '%_'." % [
          info-str(comm(e)), def-description(comm(e)), type-description(ret-type)]

        (e:BadUpCast) :
          val v = exp(exp(e))
          "%_Expression of type '%_' cannot be upcasted to type '%_'." % [
          info-str(exp(e)), type-description(type!(v)), type-description(targ(exp(e)))]

        (e:BadSetRef) :
          val v = ref(exp(e))
          "%_The variable '%_' of type '%_' cannot be assigned to in HiStanza context." % [
          info-str(exp(e)), def-name(n(v)), type-description(true-type(v) as Type|LSType)]

        (e:BadSetValue) :
          val value-type = type!(value(exp(e)))
          val loc = match(exp(e)) :
            (e:TSet) : ref(e)
            (e:LSSet) : exp(e)
          val loc-type = type!(loc)
          "%_Cannot assign expression of type '%_' to %_ of type '%_'." % [
          info-str(exp(e)), type-description(value-type), loc-description(loc), type-description(loc-type)]

        (e:BadLValue) :
          val loc = exp(exp(e))
          "%_Cannot assign to non-mutable %_." % [
          info-str(exp(e)), loc-description(loc)]

        (e:InvalidOptionalArg) :
          val arg-index = index-of!(args(comm(e)), arg(e))
          val arg-type = type(a1(comm(e))[arg-index])
          "%_Invalid Lostanza argument '%_' of type '%_'. LoStanza optional and vararg arguments \
           are required to be a 'ref<?>' type." % [
           info-str(comm(e)), def-name(arg(e)), type-description(arg-type)]

        (e:BadArgTypes) :
          val func = func(exp(e))
          val arg-exps = map(type, args(exp(e)))
          val arg-entries = for i in arg-indices(e) map : i => arg-exps[i]
          if func is TMix|LSMix :          
            "%_Cannot call %_ with given arguments:\n%_" % [
            info-str(exp(e)), exp-description(func), arg-descriptions(arg-entries)]
          else :
            "%_Cannot call %_ of type '%_' with given arguments:\n%_" % [
            info-str(exp(e)), exp-description(func), type-description(type!(func)),
            arg-descriptions(arg-entries)]

        (e:NotFunction) :
          val func = func(exp(e))
          val [num-targs, num-args] = match(exp(e)) :
            (e:TDo|LSDo) : [length(targs(e)), length(args(e))]
            (e:LSCallC) : [0, length(args(e))]
          "%_Cannot call %_ of type '%_' with %_ type arguments and %_ value arguments" % [
          info-str(exp(e)), exp-description(func), type-description(type!(func)), num-targs, num-args]

        (e:BadPrimitive) :
          val prim = op(exp(e))
          val arg-types = map(type!, args(exp(e)))
          "%_Cannot call primitive '%_' with arguments of type (%,)." % [
          info-str(exp(e)), name(prim), seq(type-description,arg-types)]

        (e:BadGotoArity) :
          val lbl = n(exp(e))
          val num-args = length(args(exp(e)))
          "%_Cannot goto labeled block '%_' using %_ arguments." % [
          info-str(exp(e)), def-name(lbl), num-args]

        (e:BadGotoArgs) :
          val lbl = n(exp(e))
          val arg-exps = args(exp(e))
          val arg-entries = for i in arg-indices(e) map : i => arg-exps[i]
          "%_Cannot goto labeled block '%_' with given arguments:\n%_" % [
          info-str(exp(e)), def-name(lbl), arg-descriptions(arg-entries)]

        (e:BadIfPred) :
          "%_Invalid expression of type %_ for 'if' condition. Expected a 'long'." % [
          info-str(exp(e)), type-description(type!(exp(e)))]

        (e:BadAndArg) :
          "%_Invalid expression of type %_ in 'and' expression. Expected a 'long'." % [
          info-str(exp(e)), type-description(type!(exp(e)))]

        (e:BadOrArg) :
          "%_Invalid expression of type %_ in 'or' expression. Expected a 'long'." % [
          info-str(exp(e)), type-description(type!(exp(e)))]

        (e:BadHiStanzaRef) :
          val v = ref(e)
          "%_Cannot reference variable '%_' of type '%_' from HiStanza context." % [
          info-str(v), def-name(n(v)), type-description(true-type(v) as Type|LSType)]

        (e:BadObjectTArity) :
          val n = n(exp(e))
          val num-expected-targs = type-arity(hier, n)
          val num-targs = length(targs(exp(e)))
          "%_The type '%_' expects %_ type arguments but received %_ arguments." % [
          info-str(exp(e)), num-expected-targs, num-targs]

        (e:BadObjectArity) :
          val n = n(exp(e))
          val num-fields = length(args(exp(e)))
          if rest-object?(hier, n) :
            "%_The type '%_' expects at least %_ fields but received %_ fields." % [
            info-str(exp(e)), def-name(n), num-required-fields(hier,n), num-fields]
          else :
            "%_The type '%_' expects %_ fields but received %_ fields." % [
            info-str(exp(e)), def-name(n), num-required-fields(hier,n), num-fields]

        (e:BadObjectArgs) :
          val n = n(exp(e))
          val arg-exps = args(exp(e))
          val arg-entries = for i in arg-indices(e) map : i => arg-exps[i]
          "%_Cannot initialize type '%_' with given fields:\n%_" % [
          info-str(exp(e)), def-name(n), arg-descriptions(arg-entries)]

        (e:UnsupportedNew) :
          val n = n(exp(e))
          "%_The type '%_' cannot be instantiated using the 'new' operator. The first field \
           in a variable-sized type must be 'long'." % [
           info-str(exp(e)), def-name(n)]

        (e:UnstableAddr) :
          "%_Cannot retrieve the address of unstable heap location using 'addr' operator. \
           To forcefully the address use the 'addr!' operator." % [
           info(exp(e))]

        (e:BadDeref) :
          val v = exp(exp(e))
          "%_Cannot dereference expression of type '%_'." % [
          info(exp(e)), type-description(type!(v))]

        (e:BadDeslot) :
          val v = exp(exp(e))
          "%_Cannot access indexed slot in expression of type '%_'." % [
          info(exp(e)), type-description(type!(v))]

        (e:BadIndex) :
          val v = index(exp(e))
          "%_Cannot use expression of type '%_' as index. Index must be a 'long'." % [
          info(v), type-description(type!(v))]

        (e:BadField) :
          val v = exp(exp(e))
          val field-name = name(exp(e))
          "%_Cannot access named field '.%_' in expression of type '%_'." % [
          info-str(exp(e)), field-name, type-description(type!(v))]

        (e:BadSize) :
          "%_The type '%_' does not have a fixed size." % [
          info-str(exp(e)), type-description(targ(exp(e)))]

        (e:BadCast) :
          val v = exp(exp(e))
          "%_Expression of type '%_' cannot be cast to type '%_'." % [
          info-str(exp(e)), type-description(type!(v)), type-description(targ(exp(e)))]

        (e:BadBranchArg) :
          val branch = branches(exp(e))[branch(e)]
          val match-arg = args(exp(e))[arg-index(e)]
          val arg = args(branch)[arg-index(e)]
          val arg-type = atypes(branch)[arg-index(e)] as Type|LSType
          val match-arg-type = type!(match-arg)
          
          "%_Invalid argument '%_' of type '%_'. This type cannot match argument %_ given to the \
           match expression of type '%_'" % [
           info-str(branch), def-name(arg), type-description(arg-type),
           arg-index(e), type-description(match-arg-type)]

        (e:BadMatchArg) :
          val arg = args(exp(e))[arg-index(e)]          
          "%_Argument of type '%_' cannot be used in a 'match' expression." % [
          info-str(arg), type-description(type!(arg))]

        (e:FunctionRefInInvalidCtxt) :
          val n = first-n(exp(e))
          "%_Cannot directly reference function '%_' in this context." % [
          info-str(exp(e)), def-name(n)]

        (e:AmbMix) :
          val refs = refs(exp(e))
          val ctxt = ctxt(exp(e))
          "%_Ambiguous reference to overloaded function '%_'%_. Possibilities are:\n%_" % [
          info-str(exp(e)), def-name(first-n(exp(e))), ctxt-description(ctxt as Context|LSContext),
          possibilities(refs)]

        (e:NoMix) :
          val refs = refs(exp(e))
          val ctxt = ctxt(exp(e))
          "%_No appropriate function '%_'%_. Possibilities are:\n%_" % [
          info-str(exp(e)), def-name(first-n(exp(e))), ctxt-description(ctxt as Context|LSContext),
          possibilities(refs)]

        (e:AmbMulti) :
          val refs = refs(exp(e))
          val ctxt = ctxt(exp(e))
          "%_Multiple appropriate multis '%_'%_. Possibilities are:\n%_" % [
          info-str(exp(e)), def-name(first-n(exp(e))), ctxt-description(ctxt as Context),
          possibilities(refs)]

        (e:NoMulti) :
          val refs = refs(exp(e))
          val ctxt = ctxt(exp(e))
          "%_No appropriate multi '%_'%_. Possibilities are:\n%_" % [
          info-str(exp(e)), def-name(first-n(exp(e))), ctxt-description(ctxt as Context),
          possibilities(refs)]

        (e:BadSubmethod) :
          val multi = first-n(multi(comm(e)))
          val multi-t = type!(/multi(comm(e)))
          val a1 = map(type, a1(comm(e)))
          val a2 = a2(comm(e))
          val method-t = match(comm(e)) :
            (c:TDefmethod) : TArrow(a1 as Tuple<Type>, a2 as Type)
            (c:TLDefmethod) : FnT(a1 as Tuple<LSType>, false, a2 as LSType)
          "%_Method with type '%_' cannot attach to multi '%_' of type '%_'." % [
          info-str(comm(e)), type-description(method-t), def-name(multi), type-description(multi-t)]

        (e:BadThisType) :
          val index = index-of!(args(comm(e)), thisn(comm(e)))
          val this-type = type(a1(comm(e))[index]) as Type
          "%_The 'this' argument has invalid type '%_'. The object has type '%_'." % [
          info-str(comm(e)), type-description(this-type), type-description(new-type(e))]

;Helper: Add single-quotes around x.
defn quotes (x) :
  "'%_'" % [x]

;============================================================
;==================== Error Pruning =========================
;============================================================

;If there are errors that satisfy ready-to-display? then this
;function keeps only those errors. Otherwise, the errors are
;left unchanged.
public defn prune-errors (es:TypeErrors) -> TypeErrors :
  val new-es = filter(ready-to-display?, errors(es))
  if empty?(new-es) : es
  else : TypeErrors(to-tuple(new-es))

;Represents an item that plays a part in the condition
;that is tested for before a type error is issued.
;We prefer to show type errors dependent on items that are
;fully resolved before showing type errors dependent on
;partial resolved items.
deftype ErrorItem :
  TExp <: ErrorItem
  LSExp <: ErrorItem
  Context <: ErrorItem
  LSContext <: ErrorItem
  False <: ErrorItem
  FArg<T> <: ErrorItem

;Returns true if the error is ready to show to the user: i.e.
;it is likely not caused by a cascading chain of other errors.
;Our heuristic is to identify the items that the error
;tests for before it is issued. If the items are fully resolved
;and known, then the error is ready to be displayed.
defn ready-to-display? (e:TypeError) -> True|False :

  ;Retrieve the dependent items of a type error.
  defn dependent-items (e:TypeError) -> Tuple<ErrorItem|Tuple<ErrorItem>> :
    match(e) :
      (e:NoInferredType) : [value(comm(e))]
      (e:NoInferredArg) : [ctxt(exp(e))]
      (e:NoInferredReturn) : [body(comm(e))]
      (e:BadDetuple) : [value(comm(e))]
      (e:BadAssign) : [value(comm(e))]
      (e:BadReturn) : [exp(e)]
      (e:BadLSReturn) : [exp(exp(e))]
      (e:UnboundedDef) : []
      (e:UnboundedArg) : []      
      (e:UnboundedReturn) : []
      (e:UnboundedStruct) : []
      (e:UnboundedDeref) : [exp(exp(e))]
      (e:UnboundedDeslot) : [exp(exp(e))]
      (e:UnboundedField) : [exp(exp(e))]
      (e:UnboundedCast) : []
      (e:BadExternfnArg) : []
      (e:BadExternfnReturn) : []
      (e:BadUpCast) : [exp(exp(e))]
      (e:BadSetRef) : []
      (e:BadSetValue) : [value(exp(e))]
      (e:BadLValue) : []
      (e:BadArgTypes) : [func(exp(e)), args(exp(e))]
      (e:NotFunction) : [func(exp(e)), args(exp(e))]
      (e:BadPrimitive) : [args(exp(e))]
      (e:BadGotoArity) : []
      (e:BadGotoArgs) : [args(exp(e))]
      (e:BadIfPred) : [exp(e)]
      (e:BadAndArg) : [exp(e)]
      (e:BadOrArg) : [exp(e)]
      (e:BadHiStanzaRef) : []
      (e:BadObjectTArity) : []
      (e:BadObjectArity) : []
      (e:BadObjectArgs) : [args(exp(e))]
      (e:UnsupportedNew) : []
      (e:UnstableAddr) : [exp(exp(e))]
      (e:BadDeref) : [exp(exp(e))]
      (e:BadDeslot) : [exp(exp(e))]
      (e:BadIndex) : [index(exp(e))]
      (e:BadField) : [exp(exp(e))]
      (e:BadSize) : []
      (e:BadCast) : [exp(exp(e))]
      (e:BadBranchArg) : [args(exp(e))]
      (e:BadMatchArg) : [args(exp(e))]
      (e:FunctionRefInInvalidCtxt) : []
      (e:AmbMix) : [ctxt(exp(e))]
      (e:NoMix) : [ctxt(exp(e))]
      (e:NoMulti) : [ctxt(exp(e))]
      (e:AmbMulti) : [ctxt(exp(e))]
      (e:BadSubmethod) : [multi(comm(e))]
      (e:BadThisType) : [multi(comm(e))]
      (e:InvalidOptionalArg) : []

  ;Classify an error item as resolved or not.
  defn resolved? (item:ErrorItem|Type|LSType) -> True|False :
    match(item) :
      (item:TExp) : resolved?(type!(item))
      (item:LSExp) : resolved?(type!(item))
      (item:ExpCtxt): resolved?(expected(item))
      (item:CallCtxt): all?(resolved?, cat(targs(item), fargs(item)))
      (item:MultiCtxt): all?(resolved?, fargs(item)) and resolved?(a2(item))
      (item:LSMultiCtxt): all?(resolved?, fargs(item)) and resolved?(a2(item))
      (item:LSExpCtxt) : resolved?(expected(item))
      (item:LSBlankExpCtxt) : true
      (item:LSCallCtxt) : all?(resolved?, cat(targs(item), fargs(item)))
      (item:LSAddrCtxt) : resolved?(expected(item))
      (item:LSBadCtxt) : false
      (item:FArg) : resolved?(type(item))
      (item:False) : true
      (item:Type|LSType) : /resolved?(item)

  ;Launch!
  for item in dependent-items(e) all? :
    match(item) :
      (item:ErrorItem) : resolved?(item)
      (item:Tuple<ErrorItem>) : all?(resolved?, item)
