defpackage stz/bb :
   import core
   import verse
   import stz/algorithms
   import stz/ids
   import stz/utils
   import stz/tgt with :
      prefix => tgt-
   import stz/tgt-ir with :
      prefix => tgt-
   import stz/bb-ir
   import stz/asm-ir with :
      prefix => asm-
   import stz/padder
   import stz/backend

;                            Main Driver
;                            ===========

public defn compile (def:tgt-DefFn, backend:Backend, output:Vector<asm-Ins>, infos:Vector<KeyValue<Int,FileInfo>>) -> False :
   headline("Spill call arguments")
   val d = spill-call-args(def, backend)
   println(d)

   headline("Compile to Basic Block IR")
   val [tt, bb-ir] = to-bb-ir(d)
   println(bb-ir)
   
   var u:Unit = bb-ir
   u = remove-critical-edges(u)
   u = analyze-liveness(u)
   
   headline("Early Saves")
   u = map(emit-early-saves, u)
   println(u)
   
   headline("Allocate Classes")
   u = map(allocate-classes{tt, _, backend}, u)
   println(u)

   headline("Propagate Assumptions")
   u = map(propagate-assumptions, u)
   println(u)

   headline("Register Assignment")
   u = register-assignment(tt, backend, u)
   println(u)
   
   do(verify-register-assignment{_, backend}, blocks(u) as Vector<WBlock>)
   val stack-map = calculate-stack-map(tt, u)
   val ins = collapse-blocks(u)

   headline("Block Collapsing")
   do(println, ins)

   compile(tgt-n(d), tt, backend, ins, stack-map, output, infos)


;                          Various Utilities
;                          =================

defn make-table<?K,?V,?T> (xs:Streamable<?T>,
                           k: T -> ?K,
                           v: T -> ?V,
                           hash: K -> Int) :
   val table = HashTable<K,V>(hash)
   for x in xs do : table[k(x)] = v(x)
   table

defn map (f: WBlock -> Block, u:Unit) :
   Unit(defs(u),
        map(f, blocks(u) as Vector<WBlock>))

defn reverse-post-order (bs:Vector<Block>) -> Vector<Block> :
   ;Block Table
   val block = HashTable<Int,Block>({_})
   for b in bs do : block[n(b)] = b

   ;Mark Table
   val mark-table = HashTable<Int,True>({_})
   defn marked? (b:Block) : key?(mark-table, n(b))
   defn mark (b:Block) : mark-table[n(b)] = true

   ;Add blocks to ys
   val ys = Vector<Block>()
   defn* loop (b:Block) :
      if not marked?(b) :
         mark(b)
         do(loop{block[_]}, next(b))
         add(ys, b)
   loop(bs[0])

   ;Return reversed
   reverse!(ys)
   ys


;                         Spilling Call Arguments
;                         =======================

defn spill-call-args (def:tgt-DefFn, backend:Backend) :
   ;     Type Layer
   ;     ----------
   val int-values = HashTable<Int,True|False>({_})
   for d in tgt-defs(def) do :
      int-values[tgt-n(d)] = tgt-int?(tgt-type(d))

   defn int? (x:tgt-Imm) :
      match(x) :
         (x:tgt-Var) : int-values[tgt-n(x)]
         (x) : true
      
   ;     Output State
   ;     ------------
   val output = Vector<tgt-Ins>()
   val defvars = Vector<tgt-DefVar>()
   do(add{defvars, _}, tgt-defs(def))
   defn emit (i:tgt-Ins) :
      add(output, i)
   defn make-var (t:tgt-TgtType) :
      val n = fresh-id()
      add(defvars, tgt-DefVar(n, t))
      tgt-Var(n)

   ;     Split Locations
   ;     ---------------
   ;Split a group of values into which go into memory, and which go
   ;into registers.
   defn split-mem-locs<?T> (xs:List<?T&tgt-Imm>, nregs:Int, nfregs:Int) :
      defn cms (xs) : join(xs, ", ")
      val regs = to-stream(0 to nregs)
      val fregs = to-stream(0 to nfregs)
      val reg-xs = Vector<T&tgt-Imm>()
      val mem-xs = Vector<T&tgt-Imm>()
      for x in xs do :
         if int?(x) :
            if more?(regs) :
               next(regs)
               add(reg-xs, x)
            else :
               add(mem-xs, x)
         else :
            if more?(fregs) :
               next(fregs)
               add(reg-xs, x)
            else :
               add(mem-xs, x)
      [to-list(reg-xs), to-list(mem-xs)]
   defn split-call-locs<?T> (xs:List<?T&tgt-Imm>) :
      split-mem-locs(xs, length(call-regs(backend)), length(call-fregs(backend)))
   defn split-callc-locs<?T> (xs:List<?T&tgt-Imm>) :
      split-mem-locs(xs, length(callc-regs(backend)), length(callc-fregs(backend)))

   ;     Main Algorithm
   ;     --------------
   ;Convert calls
   for e in tgt-body(def) do :
      match(e) :
         (e:tgt-ArgsIns) :
            val [xs, mxs] = split-call-locs(tgt-xs(e))
            emit(tgt-ArgsIns(xs))
            for (x in mxs, o in 0 to false by 8) do :
               emit(tgt-Load(x, tgt-Mem(ARG-LBL,0), o))
         (e:tgt-Return) :
            val [xs, mxs] = split-call-locs(tgt-xs(e))
            for (x in mxs, o in 0 to false by 8) do :
               emit(tgt-Store(x, tgt-Mem(ARG-LBL,0), o))
            emit(tgt-Return(xs))   
         (e:tgt-Call) :
            val [ys, mys] = split-call-locs(tgt-ys(e))
            val [xs, mxs] = split-call-locs(tgt-xs(e))
            for (y in mys, o in 0 to false by 8) do :
               emit(tgt-Store(tgt-Mem(ARG-LBL,0), y, o))
            emit(tgt-Call(tgt-arity(e), xs, tgt-f(e), ys, tgt-new-stack?(e), tgt-info(e)))
            for (x in mxs, o in 0 to false by 8) do :
               emit(tgt-Load(x, tgt-Mem(ARG-LBL,0), o))            
         (e:tgt-CallStack) :
            val [ys, mys] = split-call-locs(tgt-ys(e))
            val [xs, mxs] = split-call-locs(tgt-xs(e))
            for (y in mys, o in 0 to false by 8) do :
               emit(tgt-Store(tgt-Mem(ARG-LBL,0), y, o))
            emit(tgt-CallStack(xs, tgt-f(e), ys, tgt-info(e)))
            for (x in mxs, o in 0 to false by 8) do :
               emit(tgt-Load(x, tgt-Mem(ARG-LBL,0), o))               
         (e:tgt-TCall) :
            val [ys, mys] = split-call-locs(tgt-ys(e))
            for (y in mys, o in 0 to false by 8) do :
               emit(tgt-Store(tgt-Mem(ARG-LBL,0), y, o))
            emit(tgt-TCall(tgt-arity(e), tgt-f(e), ys, tgt-new-stack?(e)))            
         (e:tgt-TCallStack) :
            val [ys, mys] = split-call-locs(tgt-ys(e))
            for (y in mys, o in 0 to false by 8) do :
               emit(tgt-Store(tgt-Mem(ARG-LBL,0), y, o))
            emit(tgt-TCallStack(tgt-f(e), ys))            
         (e:tgt-CallC) :
            val [ys, mys] = split-callc-locs(tgt-ys(e))
            if empty?(mys) :
               emit(tgt-CallC(1, tgt-xs(e), tgt-f(e), ys))
            else :
               val n = if length(mys) % 2 == 0 : length(mys) + 1
                       else : length(mys)
               val p = make-var(tgt-LONG-TYPE)
               emit(tgt-Load(p, tgt-Mem(C-RSP-LBL,0), 0))
               for (y in mys, i in 0 to false) do :
                  emit(tgt-Store(p, y, 8 * (i - n)))
               emit(tgt-CallC(n, tgt-xs(e), tgt-f(e), ys))
         (e) :
            emit(e)

   ;Return result   
   tgt-DefFn(tgt-n(def), defvars, output)



;                           Translation to IR
;                           =================

defn to-bb-ir (d:tgt-DefFn) -> [HashTable<Int,tgt-TgtType>, Unit] :
   ;State
   val defs = Vector<tgt-DefVar>()
   val block-list = Vector<Block>()
   val type-table = HashTable<Int,tgt-TgtType>({_})

   ;Helpers
   defn imm-type (i:tgt-Imm) :
      match(i) :
         (i:tgt-ByteImm) : tgt-BYTE-TYPE
         (i:tgt-IntImm) : tgt-INT-TYPE
         (i:tgt-LongImm) : tgt-LONG-TYPE
         (i:tgt-RSP) : tgt-LONG-TYPE
         (i:tgt-Var) : type-table[tgt-n(i)]
         (i:tgt-Mem) : tgt-LONG-TYPE
         (i:tgt-ExMem) : tgt-LONG-TYPE

   defn fresh-block (n:Int) :
      Block(n, Vector<Ins>(), List())

   var active-block = fresh-block(fresh-id())
   
   defn emit (i:Ins) :
      add(ins(active-block), i)

   defn to-var (x:tgt-Var) :
      Var(tgt-n(x))

   defn to-imm (x:tgt-Imm) :
      val max = 1 << 16
      val min = -1 << 16
      defn large? (v:Int) : (v < min) or (v > max)
      defn large? (v:Long) : (v < to-long(min)) or (v > to-long(max))
      
      match(x) :
         (x:tgt-Var) : to-var(x)
         (x:tgt-IntImm|tgt-LongImm) :
            if large?(tgt-value(x)) : force-var(Val(x))
            else : Val(x)
         (x) : Val(x)

   defn close-block (ns:List<Int>) :
      val ab = active-block
      add(block-list, Block(n(ab), ins(ab), ns))

   defn force-var (x:Imm) :
      match(x) :
         (x:Var) :
            x
         (x:Val) :
            val v = fresh(imm-type(value(x)))
            emit(Set(v, x))
            v

   defn force-operand (x:Imm) :
      match(x) :
         (x:Var) : x
         (x:Val) :
            match(value(x)) :
               (v:tgt-Mem|tgt-ExMem) : force-var(x)
               (v) : x

   defn fresh (t:tgt-TgtType) :
      val n = fresh-id()
      add(defs, tgt-DefVar(n, t))
      type-table[n] = t
      Var(n)

   ;Add unit defs
   for def in tgt-defs(d) do :
      add(defs, def)
      type-table[tgt-n(def)] = tgt-type(def)

   ;Translate instructions
   for i in tgt-body(d) do :
      match(i) :
         (i:tgt-ArgsIns) :
            val xs* = map(to-var, tgt-xs(i))
            emit(Args(xs*))
         (i:tgt-SetIns) :
            val x* = to-var(tgt-x(i))
            val y* = to-imm(tgt-y(i))
            emit(Set(x*, y*))
         (i:tgt-BinOp) :
            val t = imm-type(tgt-x(i))
            val top = tgt-op(i)
            val x* = to-var(tgt-x(i))
            val y* = force-operand(to-imm(tgt-y(i)))
            val z* = force-operand(to-imm(tgt-z(i)))

            defn cast-to-int (f: (tgt-TgtType, Var, Var, Var) -> False) :
               val ix = fresh(tgt-INT-TYPE)
               val iy = fresh(tgt-INT-TYPE)
               val iz = fresh(tgt-INT-TYPE)
               emit(Op(tgt-CONV-OP, list(iy), list(force-var(y*))))
               emit(Op(tgt-CONV-OP, list(iz), list(force-var(z*))))
               f(tgt-INT-TYPE, ix, iy, iz)
               emit(Op(tgt-CONV-OP, list(x*), list(ix)))                  
            defn com-op () :
               emit(Op(top, list(x*), list(y*, z*)))
            defn cmp-op () :
               match(y*, z*) :
                  (y*:Val, z*:Val) : emit(Op(top, list(x*), list(force-var(y*), z*)))
                  (y*, z*) :emit(Op(top, list(x*), list(y*, z*)))
            defn ncom-op () :
               emit(Op(top, list(x*), list(y*, z*)))
               emit(Op(tgt-NO-OP, list(), list(z*)))
            defn mul-op () :
               if t == tgt-BYTE-TYPE :
                  cast-to-int $ fn (t, x*, y*, z*) :
                     emit(Op(top, list(x*), list(y*, z*)))
               else : emit(Op(top, list(x*), list(y*, z*)))
            defn div-op () :
               if tgt-float?(t) :
                  emit(Op(top, list(x*), list(y*, z*)))
                  emit(Op(tgt-NO-OP, list(), list(z*)))                  
               else if t == tgt-BYTE-TYPE :
                  cast-to-int $ fn (t, x*, y*, z*) :
                     emit(Op(tgt-DIVMOD-OP, list(x*, fresh(t)), list(y*, z*)))   
               else :
                  val y* = force-var(y*)
                  val z* = force-var(z*)
                  emit(Op(tgt-DIVMOD-OP, list(x*, fresh(t)), list(y*, z*)))
            defn mod-op () :
               if t == tgt-BYTE-TYPE :
                  cast-to-int $ fn (t, x*, y*, z*) :
                     emit(Op(tgt-DIVMOD-OP, list(fresh(t), x*), list(y*, z*)))   
               else :
                  val y* = force-var(y*)
                  val z* = force-var(z*)
                  emit(Op(tgt-DIVMOD-OP, list(fresh(t), x*), list(y*, z*)))
                     
            switch {top == _} :
               tgt-ADD-OP : com-op()
               tgt-SUB-OP : ncom-op()
               tgt-MUL-OP : mul-op()
               tgt-DIV-OP : div-op()
               tgt-MOD-OP : mod-op()
               tgt-AND-OP : com-op()
               tgt-OR-OP : com-op()
               tgt-XOR-OP : com-op()
               tgt-SHL-OP : ncom-op()
               tgt-SHR-OP : ncom-op()
               tgt-ASHR-OP : ncom-op()
               tgt-EQ-OP : cmp-op()
               tgt-NE-OP : cmp-op()
               tgt-LT-OP : cmp-op()
               tgt-GT-OP : cmp-op()
               tgt-LE-OP : cmp-op()
               tgt-GE-OP : cmp-op()
               tgt-ULE-OP : cmp-op()
               tgt-ULT-OP : cmp-op()
               tgt-UGT-OP : cmp-op()
               tgt-UGE-OP : cmp-op()
               
         (i:tgt-ConvertIns) :
            val xt = imm-type(tgt-x(i))
            val yt = imm-type(tgt-y(i))
            val x* = to-var(tgt-x(i))
            val y* = force-var(to-imm(tgt-y(i)))
            if tgt-int?(xt) and tgt-int?(yt) :
               emit(Op(tgt-CONV-OP, list(x*), list(y*)))
            else if tgt-float?(xt) and tgt-float?(yt) :   
               emit(Op(tgt-CONV-OP, list(x*), list(y*)))
            else if tgt-int?(xt) and tgt-float?(yt) :
               if xt == tgt-BYTE-TYPE :
                  val ix = fresh(tgt-INT-TYPE)
                  emit(Op(tgt-CONV-OP, list(ix), list(y*)))
                  emit(Op(tgt-CONV-OP, list(x*), list(ix)))               
               else :
                  emit(Op(tgt-CONV-OP, list(x*), list(y*)))
            else if tgt-float?(xt) and tgt-int?(yt) :
               if yt == tgt-BYTE-TYPE :
                  val iy = fresh(tgt-INT-TYPE)
                  emit(Op(tgt-CONV-OP, list(iy), list(y*)))
                  emit(Op(tgt-CONV-OP, list(x*), list(iy)))
               else :
                  emit(Op(tgt-CONV-OP, list(x*), list(y*)))

         (i:tgt-InterpretIns) :
            val xt = imm-type(tgt-x(i))
            val yt = imm-type(tgt-y(i))
            val x* = to-var(tgt-x(i))
            val y* = force-var(to-imm(tgt-y(i)))
            emit(Op(tgt-INTERPRET-OP, list(x*), list(y*)))
                  
         (i:tgt-Load) :
            val x* = to-var(tgt-x(i))
            val y* = to-imm(tgt-y(i))
            emit(Op(tgt-LoadOp(tgt-offset(i)), list(x*), list(y*)))
         (i:tgt-Store) :
            val x* = to-imm(tgt-x(i))
            val y* = force-operand(to-imm(tgt-y(i)))
            emit(Op(tgt-StoreOp(tgt-offset(i)), List(), list(x*, y*)))
         (i:tgt-Addr) :
            val x* = to-var(tgt-x(i))
            emit(Op(tgt-AddrOp(tgt-n(i)), list(x*), List()))
         (i:tgt-Call) :
            val xs = map(to-var, tgt-xs(i))
            val f = to-imm(tgt-f(i))
            val ys = map(to-imm, tgt-ys(i))
            val type = StanzaCall(tgt-arity(i), false, tgt-new-stack?(i), tgt-info(i))
            emit(Call(xs, f, ys, type))
         (i:tgt-CallStack) :
            val xs = map(to-var, tgt-xs(i))
            val f = to-imm(tgt-f(i))
            val ys = map(to-imm, tgt-ys(i))
            val type = StackCall(false, tgt-info(i))
            emit(Call(xs, f, ys, type))
         (i:tgt-CallC) :
            val xs = map(to-var, tgt-xs(i))
            val f = to-imm(tgt-f(i))
            val ys = map(to-imm, tgt-ys(i))
            emit(Call(xs, f, ys, CCall(tgt-n(i))))
         (i:tgt-TCall) :
            val f = to-imm(tgt-f(i))
            val ys = map(to-imm, tgt-ys(i))
            val type = StanzaCall(tgt-arity(i), true, tgt-new-stack?(i), false)
            emit(Call(List(), f, ys, type))
            close-block(List())
            active-block = fresh-block(fresh-id())
         (i:tgt-TCallStack) :
            val f = to-imm(tgt-f(i))
            val ys = map(to-imm, tgt-ys(i))
            val type = StackCall(true, false)
            emit(Call(List(), f, ys, type))
            close-block(List())
            active-block = fresh-block(fresh-id())
         (i:tgt-Return) :
            val xs = map(to-imm, tgt-xs(i))
            emit(Return(xs))
            close-block(List())
            active-block = fresh-block(fresh-id())
         (i:tgt-Label) :
            close-block(list(tgt-n(i)))
            active-block = fresh-block(tgt-n(i))
         (i:tgt-Goto) :
            close-block(list(tgt-n(i)))
            active-block = fresh-block(fresh-id())
         (i:tgt-Branch) :
            val x* = to-imm(tgt-x(i))
            val y* = to-imm(tgt-y(i))
            val xs* = match(x*, y*) :
               (x*:Val, y*:Val) : list(force-var(x*), y*)
               (x*, y*) : list(x*, y*)
            emit(Branch(tgt-op(i), xs*))
            val alt = fresh-id()
            close-block(list(tgt-n(i), alt))
            active-block = fresh-block(alt)
         (i:tgt-SpecialBranch) :
            emit(Branch(tgt-op(i), List()))
            val alt = fresh-id()
            close-block(list(tgt-n(i), alt))
            active-block = fresh-block(alt)
         (i:tgt-SpecialOp) :
            emit(Op(tgt-op(i), List(), List()))

   ;Return
   [type-table, Unit(defs, block-list)]


;                       Critical Edge Removal
;                       =====================

defn remove-critical-edges (u:Unit) :
   ;     Forward past empty blocks
   ;     -------------------------
   val forwards = HashTable<Int,Int>({_})

   defn resolve (n:Int) :
      match(get?(forwards, n, false)) :
         (f:False) :
            n
         (f:Int) :
            val n* = resolve(f)
            forwards[n] = n*
            n*

   for b in blocks(u) do :
      if empty?(ins(b)) :
         if length(next(b)) == 1 :
            forwards[n(b)] = head(next(b))

   defn next* (b:Block) :
      map(resolve, next(b))

   ;     Count predecessors for blocks
   ;     -----------------------------      
   val num-preds = HashTable<Int,Int>({_})

   for b in blocks(u) do :
      num-preds[n(b)] = get?(num-preds, n(b), 0)
      if not empty?(ins(b)) :
         for n in next*(b) do :
            num-preds[n] = 1 + get?(num-preds, n, 0)

   ;     Insert safe blocks
   ;     ------------------
   val safe-blocks = Vector<Block>()
   val blocks-list = Vector<Block>()

   defn safe-block (next:Int) :
      val n = fresh-id()
      add(safe-blocks, Block(n, Vector<Ins>(), list(next)))
      n

   for b in blocks(u) map :
      add{blocks-list, Block(n(b), ins(b), _)} $
         if length(next(b)) > 1 :
            for n in next*(b) map :
               if num-preds[n] > 1 : safe-block(n)
               else : n
         else :
            next*(b)
   do(add{blocks-list, _}, safe-blocks)

   ;     Return result
   ;     -------------
   Unit(defs(u), blocks-list)



;                       Working IR
;                       ==========

;     Working Instructions
;     --------------------
definterface Working
defstruct Save <: Ins&Working :
   x: Var
defstruct Load <: Ins&Working :
   x: Var
defstruct Unload <: Ins&Working :
   x: Var
defstruct Xchg <: Ins&Working :
   x: Var
   y: Var
   swap: Reg|False
defstruct Glue <: Ins&Working :
   xs: List<Var>
   ys: List<Var>
defstruct Label <: Ins&Working :
   n: Int
defstruct Goto <: Ins&Working :
   n: Int
defstruct Break <: Ins&Working :
   n: Int
   op: tgt-TgtOp
   xs: List<Imm>
   flip?: True|False

defn cms (xs) : join(xs, ", ")
defmethod print (o:OutputStream, i:Ins&Working) :
   print{o, _} $ match(i) :
      (i:Save) : "save ~" << [x(i)]
      (i:Load) : "load ~" << [x(i)]
      (i:Unload) : "unload ~" << [x(i)]
      (i:Xchg) : "xchg ~ ~ through ~" << [x(i), y(i), swap(i)]
      (i:Glue) : "shuffle (~@) = (~@)" << [cms(xs(i)), cms(ys(i))]
      (i:Label) : "label<~>" << [n(i)]
      (i:Goto) : "goto label<~>" << [n(i)]
      (i:Break) : "break label<~> when ~(~@) (flip:~)" << [n(i), op(i), cms(xs(i)), flip?(i)]

;     Any Value
;     ---------
defstruct Any
defmethod print (o:OutputStream, x:Any) :
   print(o, "any")

;     Port Definition
;     ---------------
defstruct Port :
   n: Int
   saved?: True|False|Any
   loaded?: True|False|Any
   loc: Loc

defmethod print (o:OutputStream, p:Port) :
   print(o, "~ (s:~, l:~, at:~)" << [n(p), saved?(p), loaded?(p), loc(p)])

;     Working Block
;     -------------
defstruct WBlock <: Block :
   n: Int with : (as-method => true)
   ins: Vector<Ins> with : (as-method => true)
   next: List<Int> with : (as-method => true)
   in: List<Port>
   out: List<Port>
   dist: List<Int>

defmethod print (o:OutputStream, b:WBlock) :
   val io = IndentedStream(o, 3)
   print(o, "block B~ :" << [n(b)])
   print(io, "\nin: ~@" << [cms(in(b))])
   for e in ins(b) do :
      print(io, "\n~" << [e])
   print(io, "\nnext ~@" << [cms(next(b))])
   print(io, "\nout: ~@" << [cms(out(b))])
   print(io, "\ndist: ~@" << [cms(dist(b))])

;     Useful Doers
;     ------------
defn do-defined (f: Var -> False, e:Ins) :
   match(e) :
      (e:Set) : f(x(e))
      (e:Args) : do(f, xs(e))
      (e:Call) : do(f, xs(e))
      (e:Return) : false
      (e:Op) : do(f, xs(e))
      (e:Branch) : false
      (e:Save) : false
      (e:Load) : f(x(e))


defn do-used (g: Imm -> False, e:Ins) :
   match(e) :
      (e:Set) : g(y(e))
      (e:Args) : false
      (e:Call) : (g(f(e)), do(g, ys(e)))
      (e:Return) : do(g, xs(e))
      (e:Op) : do(g, ys(e))
      (e:Branch) : do(g, xs(e))
      (e:Save) : g(x(e))
      (e:Load) : false

;                       Block Liveness
;                       ==============

defn analyze-liveness (u:Unit) :
   ;     Gathering Summaries
   ;     -------------------
   defn bhash ([b,x]:[Int,Int]) : 7 * b + x
   val defs-tab = HashTable<[Int,Int],True>(bhash)
   val ins-tab = HashTable<[Int,Int],False|Int>(bhash)
   val preds = HashTable<Int,List<Int>>({_})
   val lengths = HashTable<Int,Int>({_})

   for b in blocks(u) do :
      ;Gather length
      val len = length(ins(b))
      lengths[n(b)] = len
      
      ;Gather predecessors
      preds[n(b)] = get?(preds, n(b), List())
      for nx in next(b) do :
         preds[nx] = List(n(b), get?(preds, nx, List()))
         
      ;Gather defs and ins
      for (e in in-reverse(ins(b)), i in (len - 1) through 0 by -1) do :
         defn key (x:Var) : [n(b), n(x)]
         for x in e do-defined :
            defs-tab[key(x as Var)] = true
            ins-tab[key(x as Var)] = false
         for x in e do-used :
            if x typeof Var :
               ins-tab[key(x as Var)] = i

   ;     Propagation
   ;     -----------
   ;Helper: Iterate through a table of live vars
   defn do-live (f: [Int,Int,Int] -> False,
                     es: HashTable<[Int,Int],False|Int>) :
      for entry in es do :
         if value(entry) != false :
            val [b,x] = key(entry)
            f([b, x, value(entry) as Int])

   ;Propagate block liveness results
   val outs-tab = HashTable<[Int,Int],Int>(bhash)
   fixpoint $ fn (progress) :
      defn add-live (live:HashTable<[Int,Int],False|Int>,
                     b:Int, x:Int, d:Int) :
         val d2 = get?(live, [b,x], false)
         if (d2 == false) or (d < d2 as Int) :
            live[[b,x]] = d
            progress()

      for [b,x,d] in ins-tab do-live :
         for p in preds[b] do : add-live(outs-tab, p, x, d)
      for [b,x,d] in outs-tab do-live :
         if not key?(defs-tab, [b,x]) :
            add-live(ins-tab, b, x, d + lengths[b])

   ;     Create results table
   ;     --------------------
   defn to-port (x:Int) : Port(x, Any(), Any(), NoLoc())
   val in-lists = HashTable<Int,List<Int>>({_})
   val out-lists = HashTable<Int,List<Int>>({_})
   val dist-lists = HashTable<Int,List<Int>>({_})
   for [b,x,d] in ins-tab do-live :
      in-lists[b] = List(x, get?(in-lists, b, List()))
   for [b,x,d] in outs-tab do-live :
      out-lists[b] = List(x, get?(out-lists, b, List()))
      dist-lists[b] = List(d, get?(dist-lists, b, List()))

   val blocks* = for b in blocks(u) map :
      WBlock(n(b),
             ins(b),
             next(b),
             map(to-port, get?(in-lists, n(b), List()))
             map(to-port, get?(out-lists, n(b), List()))
             get?(dist-lists, n(b), List()))

   Unit(defs(u), blocks*)


;                             Position Marker
;                             ===============

defstruct Pos :
   index: Int
   mid?: True|False

defn hash (p:Pos) :
   match(mid?(p)) :
      (m:True) : index(p) * 2 + 1
      (m:False) : index(p) * 2

defn less? (a:Pos, b:Pos) :
   hash(a) < hash(b)

defn less-eq? (a:Pos, b:Pos) :
   hash(a) <= hash(b)

defmethod print (o:OutputStream, p:Pos) :
   print(o, "~~" << [
      index(p),
      ".5" when mid?(p) else ""])



;                             List Table
;                             ==========

defclass ListTable<K,V>
defmulti get<?K,?V> (t:ListTable<?K,?V>, k:K) -> Streamable<V>
defmulti get<?K,?V> (t:ListTable<?K,?V>, k:K, i:Int) -> V
defmulti add<?K,?V> (t:ListTable<?K,?V>, k:K, v:V) -> False
defmulti length<?K> (t:ListTable<?K, ?>, k:K) -> Int

defn ListTable<K,V> (hash: K -> Int) :
   defn pos-hash ([k,i]:[K,Int]) : 7 * hash(k) + i
   val item-table = HashTable<[K,Int], V>(pos-hash)
   val len-table = HashTable<K,Int>(hash)

   new ListTable<K,V> :
      defmethod get (this, k:K, i:Int) :
         if (i < 0) or (i >= len-table[k]) :
            error("Index ~ out of bounds." % [i])
         item-table[[k,i]]

      defmethod get (this, k:K) :
         match(get?(len-table, k, false)) :
            (n:Int) :
               new Streamable<V> :
                  defmethod to-stream (this) :
                     for i in 0 to n stream :
                        item-table[[k,i]]
            (n:False) :
               List()

      defmethod add (this, k:K, v:V) :
         val n = length(this, k)
         item-table[[k,n]] = v
         len-table[k] = n + 1

      defmethod length (this, k:K) :
         get?(len-table, k, 0)


;                             Usage Table
;                             ===========

;     Interface
;     ---------
defclass UsageTable
defmulti order-by-usage (t:UsageTable, xs:Streamable<Int>, p:Pos) -> Stream<Int>

;     Type of Usage
;     -------------
definterface Usage
defmulti pos (u:Usage) -> Pos
defstruct UsedUsage <: Usage : (pos:Pos with: (as-method => true))
defstruct KillUsage <: Usage : (pos:Pos with: (as-method => true))

;     Analysis
;     --------
defn usage-table (b:WBlock) :
   ;     Computing List of Usages
   ;     ------------------------
   val usages = ListTable<Int, Usage>({_})

   defn add-usage (x:Int|Imm|Port, u:Usage) :
      match(x) :
         (x:Int) : add(usages, x, u)
         (x:Var) : add-usage(n(x), u)
         (x:Port) : add-usage(n(x), u)
         (x) : false

   for (e in ins(b), i in 0 to false) do :
      if e not-typeof Save :
         for x in e do-used :
            add-usage(x, UsedUsage(Pos(i, false)))
      for x in e do-defined :
         add-usage(x, KillUsage(Pos(i, true)))

   val n = length(ins(b))
   for (x in out(b), d in dist(b)) do :
      add-usage(x, UsedUsage(Pos(d + n, false)))


   ;     Order by Distance
   ;     -----------------
   defn use-pos (x:Int, p:Pos) :
      val use = find({p <= pos(_)}, usages[x])
      match(use) :
         (use:UsedUsage) :
            index(pos(use))
         (use:KillUsage|False) :
            error("Variable ~ is not used after ~." % [x, p])

   val ordering-buffer = Vector<Int>()
   new UsageTable :
      defmethod order-by-usage (this, xs:Streamable<Int>, p:Pos) :
         clear(ordering-buffer)
         for x in xs do : add(ordering-buffer, x)
         sort-by-key!(ordering-buffer, use-pos{_, p})
         in-reverse(ordering-buffer)


;                      Release Table
;                      =============

;     Interface
;     ---------
defclass ReleaseTable
defmulti get (t:ReleaseTable, a:Pos, b:Pos) -> Streamable<Int>

;     Analysis
;     --------
defn release-table (b:WBlock) :
   ;     Computing Releases and Positions
   ;     --------------------------------
   val load-table = HashTable<Int,True|False>({_})
   val release-list = Vector<KeyValue<Pos,Int>>()

   defn clear-loaded () :
      clear(load-table)

   defn mark-loaded (x:Int|Imm, v:True|False) :
      match(x) :
         (x:Int) : load-table[x] = v
         (x:Var) : load-table[n(x)] = v
         (x) : false

   defn release-if-not-loaded (p:Pos, x:Int|Imm) :
      match(x) :
         (x:Int) :
            if not get?(load-table, x, false) :
               add(release-list, p => x)
         (x:Var) : release-if-not-loaded(p, n(x))
         (x) : false

   ;Initialize live-out as live
   for x in out(b) do :
      mark-loaded(n(x), true) when loaded?(x) != false

   ;Analyze expression list
   val n = length(ins(b))
   for (e in in-reverse(ins(b)), i in (n - 1) through 0 by -1) do :
      for x in e do-defined :
         release-if-not-loaded(Pos(i + 1, false), x)
         mark-loaded(x, false)
      clear-loaded() when e typeof Call
      for x in e do-used :
         release-if-not-loaded(Pos(i, true), x)
         mark-loaded(x, true)
   reverse!(release-list)

   ;     Compute releases to a given position
   ;     ------------------------------------
   var cached-pos = Pos(0, false)
   var cached-i = 0
   defn pos-index (p:Pos) :
      defn* loop (i:Int) :
         if i < length(release-list) :
            val r = release-list[i]
            if p < key(r) : i
            else : loop(i + 1)
         else : i
      ;Optimization
      cached-i =
         if cached-pos <= p : loop(cached-i)
         else : loop(0)
      cached-pos = p
      cached-i

   new ReleaseTable :
      defmethod get (this, a:Pos, b:Pos) :
         val ai = pos-index(a)
         val bi = pos-index(b)
         new Streamable<Int> :
            defmethod to-stream (this) :
               for i in ai to bi stream :
                  value(release-list[i])

      defmethod print (o:OutputStream, this) :
         val io = IndentedStream(o, 3)
         print(o, "Release Table:")
         for i in 0 to length(ins(b)) do :
            print("\nInstruction: ~" << [ins(b)[i]])
            print("\n   Before Def: ~@" << [cms(this[Pos(i,false), Pos(i,true)])])
            print("\n   After Def: ~@" << [cms(this[Pos(i,true), Pos(i + 1, false)])])

;                       Save Emission
;                       =============

defn emit-early-saves (b:WBlock) :
   ;Algorithm state
   val requires-save = HashTable<Int,True|False>({_})
   val prefers-load = HashTable<Int,True|False>({_})
   val is-live = HashTable<Int,True|False>({_})
   val output = Vector<Ins>()

   defn emit (i:Ins) :
      add(output, i)

   ;Overall algorithm      
   for p in out(b) do :
      is-live[n(p)] = true

   for e in in-reverse(ins(b)) do :         
      for x in e do-defined :
         if get?(requires-save, n(x), false) :
            emit(Save(x as Var))
            
      emit(e)      

      for x in e do-defined :
         is-live[n(x)] = false
         requires-save[n(x)] = false
         prefers-load[n(x)] = false

      if e typeof Call :
         val live = stream(key, filter(value, is-live))
         for x in live do :
            requires-save[x] = true
            prefers-load[x] = false

      for x in e do-used :
         if x typeof Var :
            val n = n(x as Var)
            is-live[n] = true
            prefers-load[n] = true               

   ;Entry ports
   val in* = for x in in(b) map :
      val sv = get?(requires-save, n(x), false)
      val ld = get?(prefers-load, n(x), true)
      val sv-x = true when sv else Any()
      val ld-x = Any() when ld else false
      Port(n(x), sv-x, ld-x, NoLoc())

   ;Result
   reverse!(output)
   WBlock(n(b),
          output,
          next(b),
          in*,
          out(b),
          dist(b))

;                       Class Allocation
;                       ================

;     Allocate classes
;     ----------------
defn allocate-classes (tt:HashTable<Int,tgt-TgtType>, b:WBlock, backend:Backend) -> WBlock :
   ;     Layer 1
   ;     -------
   ;Algorithm state
   val saved = HashTable<Int, True|False|Any>({_})
   val loaded = HashTable<Int, True|False|Any>({_})
   var num-free-reg = num-regs(backend)
   var num-free-freg = num-fregs(backend)
   val output = Vector<Ins>()

   defn print-regs () :
      println("~ Regs Available. ~ FRegs Available." << [num-free-reg, num-free-freg])

   ;Utilities
   defn inc-reg (n:Int, t:tgt-TgtType) :
      if tgt-int?(t) : num-free-reg = num-free-reg + n
      else if tgt-float?(t) : num-free-freg = num-free-freg + n
      else : error("Unreachable")

   ;Raw Fundamental Language
   defn emit (i:Ins) :
      add(output, i)

   defn kill (x:Int) :
      match(loaded[x]) :
         (l:True|Any) : inc-reg(1, tt[x])
         (l:False) : false
      loaded[x] = false
      
;      println("Killed ~" << [x])
;      print-regs()

   defn save (x:Int) :
      match(saved[x]) :
         (s:True) : false
         (s:False|Any) : emit(Save(Var(x)))
      saved[x] = true

;      println("Save ~" << [x])
;      print-regs()

   defn load (x:Int) :
      match(loaded[x]) :
         (l:True) : false
         (l:False) :
            emit(Load(Var(x)))
            inc-reg(-1, tt[x])
         (l:Any) :
            emit(Load(Var(x)))
      loaded[x] = true

;      println("Load ~" << [x])
;      print-regs()

   defn unload (x:Int) :
      match(loaded[x]) :
         (l:True|Any) :
            emit(Unload(Var(x)))
            inc-reg(1, tt[x])
         (l:False) : false
      loaded[x] = false

;      println("Unload ~" << [x])
;      print-regs()

   defn define (x:Var) :
      val n = n(x)
      loaded[n] = true
      saved[n] = false
      inc-reg(-1, tt[n])

;      println("Define ~" << [x])
;      print-regs()

   defn define (x:Port) :
      loaded[n(x)] = loaded?(x) as False|Any
      saved[n(x)] = saved?(x) as True|Any
      inc-reg(-1, tt[n(x)]) when loaded?(x) typeof Any

;      println("Define ~" << [x])
;      print-regs()

   defn currently-loaded () :
      stream{key, _} $
      for e in loaded filter :
         value(e) typeof True|Any

   ;Convenience
   defn save (x:Var) : save(n(x))
   defn load (x:Imm) : load(n(x as Var)) when x typeof Var
   defn load (xs:Streamable<Imm>) : do(load, xs)
   defn kill (xs:Streamable<Int>) : do(kill, xs)
   defn define (xs:Streamable<Var>) : do(define, xs)
   defn define (xs:Streamable<Port>) : do(define, xs)


   ;     Layer 2
   ;     -------
   defn num-spills-required (used:Streamable<Imm>,
                             released:Streamable<Int>,
                             defined:List<Var>) :
      ;Track whether a variable is projected to be loaded
      val proj-loaded = HashTable<Int,True|False>({_})
      defn proj-loaded? (x:Int) :
         if key?(proj-loaded, x) : proj-loaded[x]
         else : loaded[x] != false

      ;Track the net use count
      var net-reg-use = 0
      var net-freg-use = 0
      var peak-reg-use = 0
      var peak-freg-use = 0

      defn inc-reg-use (n:Int, t:tgt-TgtType) :
         if tgt-int?(t) :
            net-reg-use = net-reg-use + n
            peak-reg-use = max(peak-reg-use, net-reg-use)
         else if tgt-float?(t) :
            net-freg-use = net-freg-use + n
            peak-freg-use = max(peak-freg-use, net-freg-use)
         else : error("Unreachable")

      ;Increment register use for used
      for u in used do :
         if u typeof Var :
            val u = u as Var
            if not proj-loaded?(n(u)) :
               proj-loaded[n(u)] = true
               inc-reg-use(1, tt[n(u)])

      ;Decrement register use for released
      for r in released do :
         if proj-loaded?(r) :
            proj-loaded[r] = false
            inc-reg-use(-1, tt[r])

      ;Increment register use for defined
      for d in defined do :
         inc-reg-use(1, tt[n(d)])

      ;Return number of spills needed of each type
      val num-spills = max(0, peak-reg-use - num-free-reg)
      val num-fspills = max(0, peak-freg-use - num-free-freg)

      println("Number of Spills required for: used: ~@, rs: ~@, def: ~@ = ~, ~" << [
         cms(used), cms(released), cms(defined), num-spills, num-fspills])

      [num-spills, num-fspills]

   val ut = usage-table(b)
   defn spill (p:Pos, nr:Int, nf:Int) :
      if (nr > 0) or (nf > 0) :
         ;Get the currently loaded variables ordered by
         ;distance to usage (farthest first).
         val vs = order-by-usage(ut, currently-loaded(), p)

         ;Track the number of each type to spill
         var num-r = nr
         var num-f = nf
         var total = nr + nf

         ;Spill until we've spilled the total number
         while total > 0 :
            val v = next(vs)
            if tgt-int?(tt[v]) and num-r > 0 :
               save(v)
               unload(v)
               num-r = num-r - 1
               total = total - 1
            else if tgt-float?(tt[v]) and num-f > 0 :
               save(v)
               unload(v)
               num-f = num-f - 1
               total = total - 1

   defn spill-overcommitted (p:Pos) :
      val nr = max(0, neg(num-free-reg))
      val nf = max(0, neg(num-free-freg))
      spill(p, nr, nf)

   ;     Layer 3
   ;     -------
   ;Define incoming ports
   define(in(b))
   spill-overcommitted(Pos(0, false))

   ;Iterate through block instructions
   val rt = release-table(b)
   for (e in ins(b), i in 0 to false) do :
;      println("Allocating ~" << [e])
;      print-regs()
      match(e) :
         (e:Set) :
            val rs = rt[Pos(i,false), Pos(i,true)]
            val [nr,nf] = num-spills-required(List(), rs, list(x(e)))
            spill(Pos(i,false), nr, nf)
            kill(rs)
            define(x(e))
            emit(e)
         (e:Op) :
            val rs = rt[Pos(i,false), Pos(i,true)]
            val [nr,nf] = num-spills-required(ys(e), rs, xs(e))
            spill(Pos(i,false), nr, nf)
            load(ys(e))
            kill(rs)
            define(xs(e))
            emit(e)
         (e:Branch) :
            val rs = rt[Pos(i,false), Pos(i,true)]
            val [nr,nf] = num-spills-required(xs(e), rs, List())
            spill(Pos(i,false), nr, nf)
            load(xs(e))
            kill(rs)
            emit(e)
         (e:Return) :
            val rs = rt[Pos(i,false), Pos(i,true)]
            val [nr,nf] = num-spills-required(xs(e), rs, List())
            spill(Pos(i,false), nr, nf)
            load(xs(e))
            kill(rs)
            emit(e)
         (e:Save) :
            kill(rt[Pos(i,false), Pos(i,true)])
            save(x(e))
         (e:Args) :
            kill(rt[Pos(i,false), Pos(i,true)])
            emit(e)
            define(xs(e))
         (e:Call) :
            val rs = rt[Pos(i,false), Pos(i,true)]
            val [nr,nf] = num-spills-required(List(f(e), ys(e)), rs, List())
            spill(Pos(i,false), nr, nf)
            load(f(e))
            load(ys(e))
            kill(rs)
            emit(e)
            define(xs(e))
      kill(rt[Pos(i,true), Pos(i + 1,false)])

   ;Read state of outgoing ports
   val out* = for x in out(b) map :
      Port(n(x), saved[n(x)], loaded[n(x)], loc(x))

   ;Return result
   WBlock(n(b), output, next(b),
          in(b), out*, dist(b))



;                    Assumption Propagation
;                    ======================

definterface Assumption
defstruct Accept <: Assumption
defstruct Assume <: Assumption : (value: True|False|Any)

defn propagate-assumptions (b:WBlock) :
   val save-assumptions = HashTable<Int, Assumption>({_})
   val load-assumptions = HashTable<Int, Assumption>({_})
   val output = Vector<Ins>()

   defn emit (i:Ins) :
      add(output, i)

   ;Incoming assumptions on ports
   for x in in(b) do :
      load-assumptions[n(x)] = match(loaded?(x)) :
         (l:False) : Assume(l)   ;DEBUG: Used to say l:True|False
         (l:Any) : Accept()
      save-assumptions[n(x)] = match(saved?(x)) :
         (s:True) : Assume(s)      ;DEBUG: Used to say s:True|False
         (s:Any) : Accept()

   ;Process assumptions on each instruction
   val instructions = to-stream(ins(b))
   while more?(instructions) :
      match(next(instructions)) :
         (e:Save) :            
            val x = n(x(e))
            match(get?(save-assumptions, x, false)) :
               (a:Accept) : save-assumptions[x] = Assume(true)
               (a:Assume|False) : emit(Save(Var(x)))
         (e:Load) :
            val x = n(x(e))
            match(get?(load-assumptions, x, false)) :
               (a:Accept) : load-assumptions[x] = Assume(true)
               (a:Assume|False) : emit(Load(Var(x)))
         (e:Unload) :
            val x = n(x(e))
            match(get?(load-assumptions, x, false)) :
               (a:Accept) : load-assumptions[x] = Assume(false)
               (a:Assume|False) : false
         (e:Args|Call) :
            emit(e)
            while more?(instructions) :
               emit(next(instructions))
         (e) :
            emit(e)

   ;Propagated assumptions on ports
   val in* = for x in in(b) map :
      defn get-value (x:Assumption) :
         match(x) :
            (x:Assume) : value(x)
            (x:Accept) : Any()
      Port(n(x),
           get-value(save-assumptions[n(x)]),
           get-value(load-assumptions[n(x)]),
           loc(x))   

   ;Return result
   WBlock(n(b), output, next(b),
          in*, out(b), dist(b))


;                      Register Assignment
;                      ===================

;     Assignment Mini-Language
;     ------------------------
defstruct FreeReg <: Loc :
   prefer: List<Int>

defn FreeReg () : FreeReg(List())

defmethod print (o:OutputStream, f:FreeReg) :
   print(o, "FreeReg(~@)" << [cms(prefer(f))])

;     Algorithm
;     ---------
defn register-assignment (tt:HashTable<Int,tgt-TgtType>,
                          backend:Backend,
                          b:WBlock,
                          ports-in:List<Port>) :
   ;     Layer 1
   ;     -------
   val locs = HashTable<Int,Loc>({_})
   val reg-slots = Array<False|Int>(num-regs(backend), false)
   val freg-slots = Array<False|Int>(num-fregs(backend), false)
   val output = Vector<Ins>()
   
   ;Debugging
   defn print-slots () :
      defn pr (a:Array) :
         println{"[~@]" << [join(_, " ")]} $
            for x in a stream :
               match(x) :
                  (x:Int) : x
                  (x:False) : "_"
      print("Regs: ")
      pr(reg-slots)
      print("FRegs: ")
      pr(freg-slots)

   ;Emitting updated instruction
   defn emit (i:Ins) :
      add(output, i)

   ;Fill variable with location
   defn fill<?T> (x:?T&(Imm|Port)) :
      val r = match(x) :
         (x:Var) :
            Var(n(x), locs[n(x)])
         (x:Port) :
            val loc = locs[n(x)]
            val sv = (saved?(x) == true) or (loc typeof Stack)
            val ld = loc typeof Reg|FReg
            Port(n(x), sv, ld, loc)
         (x) : x
      r as T&(Imm|Port)
   defn fill<?T> (xs:List<?T&(Imm|Port)>) -> List<T> :
      map(fill, xs)

   ;Free register for use
   defn free (x:Int) :      
      match(locs[x]) :
         (loc:Reg) :
            reg-slots[n(loc)] = false
            locs[x] = Stack(x)
         (loc:FReg) :
            freg-slots[n(loc)] = false
            locs[x] = Stack(x)
         (loc) : false
;      println("Freed value ~" << [x])
;      print-slots()
   defn free (xs:Streamable<Int>) :
      do(free, xs)

   ;Assign a value to a location
   defn assign (x:Int, l:Loc) :
      defn next-free-reg (int?:True|False, pref:List<Int>) :
         label<Reg|FReg> return :
            ;Differentiate between integer and floating point
            val slots = reg-slots when int? else freg-slots
            defn XReg (i:Int) : Reg(i) when int? else FReg(i)
            ;Search through preferences first
            for r in pref do :
               return(XReg(r)) when slots[r] == false
            ;Otherwise return next free register
            XReg(index-of(slots, false) as Int)

      match(l) :
         (l:FreeReg) :
            val int? = tgt-int?(tt[x])
            assign(x, next-free-reg(int?, prefer(l)))
         (l:Stack) :
            locs[x] = l
         (l:Reg) :
            locs[x] = l
            reg-slots[n(l)] = x
         (l:FReg) :
            locs[x] = l
            freg-slots[n(l)] = x
;      println("Assigned ~ to ~" << [x, l])
;      print-slots()

   defn assign (x:Port, l:Loc) : assign(n(x), l)
   defn assign (x:Var, l:Loc) : assign(n(x), l)

   defn assign (xs:List<Var|Port>, ls:List<Loc>) :
      ;First assign stacks and regs
      for (x in xs, l in ls) do :
         assign(x, l) when l typeof Stack|Reg|FReg
      ;Next assign free registers
      for (x in xs, l in ls) do :
         assign(x, l) when l typeof FreeReg      


   ;     Layer 2
   ;     -------
   ;Helper: Swap contents from src to dst
   defn swap-reg (src:Int, dst:Int) :
      ;If the destination is free, then issue Set
      if reg-slots[dst] == false :
         val x = reg-slots[src] as Int
         emit(Set(Var(x, Reg(dst)), Var(x, Reg(src))))
         free(x)
         assign(x, Reg(dst))
      ;If the destination is not free, then issue Xchg
      else :
         defn free? (i:Int) :
            (i != src) and (i != dst) and
            (reg-slots[i] == false)
         val x = reg-slots[src] as Int
         val y = reg-slots[dst] as Int
         val s = index-when(free?, 0 to length(reg-slots))
         emit(Xchg(Var(x, Reg(src)), Var(y, Reg(dst)),
                   Reg(s as Int) when s != false))
         free(x)
         free(y)
         assign(x, Reg(dst))
         assign(y, Reg(src))

   ;Ensure that the given registers are free after release
   defn ensure-free-reg (reg:List<Int>, rs:Streamable<Int>) :
      defn* loop (reg:List<Int>, veto:List<Int>) :
         ;Will register r be free?
         defn free? (r:Int) :
            (reg-slots[r] == false) or
            contains?(rs, reg-slots[r])

         ;Find a free register that is not vetoed.         
         defn free-reg () :
            label<Int> return :
               for i in 0 to length(reg-slots) do :
                  if (not contains?(veto, i)) and
                     reg-slots[i] == false :
                     return(i)
               for i in 0 to length(reg-slots) find! :
                  (not contains?(veto, i)) and
                  contains?(rs, reg-slots[i])
                  
         if not empty?(reg) :
            val r = head(reg)
            if not free?(r) :
               swap-reg(r, free-reg())
            loop(tail(reg), List(r, veto))
      loop(reg, List())

   ;Ensure that the following value is in a certain register
   defn ensure-reg (x:Int, r:Int) :
      val src = n(locs[x] as Reg)
      swap-reg(src, r) when src != r
      

   ;     Layer 3
   ;     -------  
   ;Assign initial registers   
   val in* = let :
      val pt = make-table(ports-in, n, loc, {_})
      val locs = for x in in(b) map :
         match(loaded?(x), pt[n(x)]) :
            (ld:True, loc:Reg|FReg) : loc
            (ld:True, loc:Stack) : FreeReg()
            (ld:False, loc) : Stack(n(x))
            (ld:Any, loc) : loc
      assign(in(b), locs)
      fill(in(b))

   ;Assign concrete locations
   val rt = release-table(b)
   for (e in ins(b), i in 0 to false) do :
      ;Helper: Registers in given immediates
      defn reg? (x:Imm) :
         (x typeof Var) and
         loc(x as Var) typeof Reg|FReg
      defn reg! (x:Imm) :
         n(loc(x as Var) as Reg|FReg)
         
      defn regs-in (xs:List<Imm>) -> List<Int> :
         to-list(stream(reg!, filter(reg?, xs)))
      defn regs-in (x:Imm) -> List<Int> :
         if reg?(x) : list(reg!(x))
         else : List()
         
      println("Assigning ~" << [e])
      match(e) :
         (e:Set) :
            val y* = fill(y(e))
            free(rt[Pos(i,false), Pos(i,true)])
            assign(x(e), FreeReg(regs-in(y*)))
            emit(Set(fill(x(e)), y*))
         (e:Op) :
            defn no-xs () :
               val ys* = fill(ys(e))
               free(rt[Pos(i,false), Pos(i,true)])
               emit(Op(op(e), List(), ys*))               
            defn x-prefers-any () :
               val ys* = fill(ys(e))
               free(rt[Pos(i,false), Pos(i,true)])
               assign(head(xs(e)), FreeReg(regs-in(ys*)))
               emit(Op(op(e), fill(xs(e)), ys*))
            defn x-prefers-arg0 () :
               val ys* = fill(ys(e))
               free(rt[Pos(i,false), Pos(i,true)])
               assign(head(xs(e)), FreeReg(regs-in(head(ys*))))
               emit(Op(op(e), fill(xs(e)), ys*))
            defn x-no-preference () :
               val ys* = fill(ys(e))
               free(rt[Pos(i,false), Pos(i,true)])
               assign(head(xs(e)), FreeReg())
               emit(Op(op(e), fill(xs(e)), ys*))
            defn ignore () :
               free(rt[Pos(i,false), Pos(i,true)])
            defn x-reqs-r0-r3 () :
               ensure-free-reg(list(0,3), rt[Pos(i,false), Pos(i,true)])
               val ys* = fill(ys(e))
               free(rt[Pos(i,false), Pos(i,true)])
               assign(xs(e), list(Reg(0), Reg(3)))
               emit(Op(op(e), fill(xs(e)), ys*))
            defn z-in-r2 () :
               val z = ys(e)[1]
               ensure-reg(n(z as Var), 2) when z typeof Var
               x-prefers-arg0()
            
            match(op(e)) :
               (opc:tgt-LoadOp) : x-prefers-any()
               (opc:tgt-StoreOp) : no-xs()
               (opc:tgt-AddrOp) : x-prefers-any()
               (opc) :
                  switch {opc == _} :
                     tgt-ADD-OP : x-prefers-any()
                     tgt-SUB-OP : x-prefers-arg0()
                     tgt-MUL-OP : x-prefers-any()
                     tgt-DIV-OP : x-prefers-arg0()
                     tgt-AND-OP : x-prefers-any()
                     tgt-OR-OP : x-prefers-any()
                     tgt-XOR-OP : x-prefers-any()
                     tgt-SHL-OP : z-in-r2()
                     tgt-SHR-OP : z-in-r2()
                     tgt-ASHR-OP : z-in-r2()
                     tgt-EQ-OP : x-no-preference()
                     tgt-NE-OP : x-no-preference()
                     tgt-LT-OP : x-no-preference()
                     tgt-GT-OP : x-no-preference()
                     tgt-LE-OP : x-no-preference()
                     tgt-GE-OP : x-no-preference()
                     tgt-ULE-OP : x-no-preference()
                     tgt-ULT-OP : x-no-preference()
                     tgt-UGT-OP : x-no-preference()
                     tgt-UGE-OP : x-no-preference()
                     tgt-DIVMOD-OP : x-reqs-r0-r3()
                     tgt-CONV-OP : x-no-preference()
                     tgt-INTERPRET-OP : x-no-preference()
                     tgt-SWITCH-STACK-OP : no-xs()
                     tgt-NO-OP : ignore()
         (e:Branch) :
            emit(Branch(op(e), fill(xs(e))))
            free(rt[Pos(i,false), Pos(i,true)])
         (e:Return) :
            emit(Return(fill(xs(e))))
            free(rt[Pos(i,false), Pos(i,true)])
         (e:Save) :
            emit(Save(fill(x(e))))
            free(rt[Pos(i,false), Pos(i,true)])
         (e:Load) :
            free(rt[Pos(i,false), Pos(i,true)])
            assign(x(e), FreeReg())
            emit(Load(fill(x(e))))
         (e:Args) :
            free(rt[Pos(i,false), Pos(i,true)])
            assign(xs(e), map(FreeReg{}, xs(e)))
            emit(Args(fill(xs(e))))
         (e:Call) :
            val f* = fill(f(e))
            val ys* = fill(ys(e))
            free(rt[Pos(i,false), Pos(i,true)])
            assign(xs(e), map(FreeReg{}, xs(e)))
            emit(Call(fill(xs(e)), f*, ys*, type(e)))

      ;Free any unused defines
      free(rt[Pos(i,true), Pos(i + 1,false)])

   ;Output locations
   val out* = fill(out(b))

   ;Return result
   WBlock(n(b), output, next(b),
          in*, out*, dist(b))


;Block stitching
defn register-assignment (tt:HashTable<Int,tgt-TgtType>, backend:Backend, p:Unit) :
   val block-table = make-table(blocks(p), n, {_ as False|WBlock}, {_})
   val blocks* = Vector<Block>()

   ;Assign registers to the given block
   defn assign-regs (b:WBlock, ports-in:List<Port>) :
      val b* = register-assignment(tt, backend, b, ports-in)
      add(blocks*, b*)
      block-table[n(b*)] = false
      b*

   ;Assign registers to successors
   defn* assign-successors (b:WBlock) :
      for n in next(b) do :
         match(block-table[n]) :
            (s:WBlock) : assign-successors(assign-regs(s, out(b)))
            (s:False) : false

   ;Driver
   val b0 = blocks(p)[0] as WBlock
   val b0* = assign-regs(b0, List())
   assign-successors(b0*)
   Unit(defs(p), blocks*)
          

;                   Register Assignment Verification
;                   ================================

defn verify-register-assignment (b:WBlock, backend:Backend) :
   ;     Layer 1
   ;     -------
   val regs = Array<False|Int>(num-regs(backend), false)
   val fregs = Array<False|Int>(num-fregs(backend), false)
   val saved = HashTable<Int,True|False>({_})

   ;Helper: Setting and Retrieving register contents
   defn get-reg (r:Reg|FReg) :
      match(r) :
         (r:Reg) : regs[n(r)]
         (r:FReg) : fregs[n(r)]

   defn set-reg (r:Reg|FReg, v:Int|False) :
      match(r) :
         (r:Reg) : regs[n(r)] = v
         (r:FReg) : fregs[n(r)] = v

   ;State updaters
   defn define (x:Port) :
      match(saved?(x), loaded?(x), loc(x)) :
         (sv:True, ld:True, loc:FReg|Reg) :
            set-reg(loc, n(x))
            saved[n(x)] = true
         (sv:False, ld:True, loc:FReg|Reg) :
            set-reg(loc, n(x))
            saved[n(x)] = false
         (sv:True, ld:False, loc:Stack) :
            saved[n(x)] = true
         (sv, ld, loc) :
            error("Unreachable combination: (~, ~, ~)" % [sv, ld, loc])

   defn define (x:Var) :
      val r = loc(x) as FReg|Reg
      set-reg(r, n(x))
      saved[n(x)] = false

   defn mov (x:Var, y:Imm) :
      val r = loc(x) as FReg|Reg
      set-reg(r, n(x))
      match(y) :
         (y:Val) :
            saved[n(x)] = false
         (y:Var) :
            if n(x) != n(y) :
               saved[n(x)] = false

   defn load (x:Var) :
      val r = loc(x) as FReg|Reg
      set-reg(r, n(x))

   defn save (x:Var) :
      saved[n(x)] = true

   defn clear-registers () :
      for i in 0 to length(regs) do :
         regs[i] = false
      for i in 0 to length(fregs) do :
         fregs[i] = false

   defn xchg (x:Var, y:Var, s:Reg|FReg|False) :
      match(loc(x), loc(y), s) :
         (lx:Reg, ly:Reg, s:Reg|False) : false
         (lx:FReg, ly:FReg, s:FReg|False) : false
      val lx = loc(x) as Reg|FReg
      val ly = loc(y) as Reg|FReg
      val vx = get-reg(lx)
      val vy = get-reg(ly)
      set-reg(lx, vy)
      set-reg(ly, vx)
      set-reg(s as Reg|FReg, false) when s != false

   ;Checkers
   defn saved! (x:Int) : saved[x] as True
   defn saved! (x:Var) : saved!(n(x))

   defn not-saved! (x:Int) : saved[x] as False

   defn holds! (r:FReg|Reg, x:Int) :
      val y = get-reg(r)
      if y != x :
         error("Register ~ should hold ~ but holds ~." % [r, x, y])

   defn check! (p:Port) :
      match(saved?(p), loaded?(p), loc(p)) :
         (sv:True, ld:True, lc:FReg|Reg) :
            holds!(lc, n(p))
            saved!(n(p))
         (sv:False, ld:True, lc:FReg|Reg) :
            holds!(lc, n(p))
            not-saved!(n(p))
         (sv:True, ld:False, lc:Stack) :
            saved!(n(p))            

   defn check! (x:Imm) :
      match(x) :
         (x:Var) :
            match(loc(x)) :
               (l:FReg|Reg) : holds!(l, n(x))
               (l:Stack) : saved!(n(x))
         (x:Val) : false   

   ;     Layer 2
   ;     -------
   ;Input ports
   do(define, in(b))

   ;Check each instruction
   for e in ins(b) do :
      match(e) :
         (e:Set) :
            check!(y(e))
            mov(x(e), y(e))
         (e:Xchg) :
            check!(x(e))
            check!(y(e))
            xchg(x(e), y(e), swap(e))
         (e:Op) :
            do(check!, ys(e))
            do(define, xs(e))
         (e:Branch) :
            do(check!, xs(e))
         (e:Return) :
            do(check!, xs(e))
         (e:Save) :
            check!(x(e))
            save(x(e))
         (e:Load) :
            saved!(x(e))
            load(x(e))
         (e:Args) :
            do(define, xs(e))
         (e:Call) :
            check!(f(e))
            do(check!, ys(e))
            clear-registers()
            do(define, xs(e))

   ;Output ports
   do(check!, out(b))




;                    Stack Map Calculation
;                    =====================

;     Interval Structure
;     ------------------
definterface Interval
defstruct StartInterval <: Interval :
   n: Int
defstruct EndInterval <: Interval :
   n: Int

defmethod print (o:OutputStream, i:Interval) :
   print{o, _} $ match(i) :
      (i:StartInterval) : "Start(~)" << [n(i)]
      (i:EndInterval) : "End(~)" << [n(i)]


;     Calculating Stack Intervals
;     ---------------------------
defn stack-intervals (p:Unit) :
   ;     Algorithm State
   ;     ---------------
   val var-start = HashTable<Int,Int>({_})
   val var-end = HashTable<Int,Int>({_})

   defn note-usage (x:Int, i:Int) :
      if key?(var-start, x) :
         var-start[x] = min(i, var-start[x])
         var-end[x] = max(i, var-end[x])
      else :
         var-start[x] = i
         var-end[x] = i

   ;     Usages in Various Items
   ;     -----------------------
   defn note-usage (x:Imm|Port, i:Int) :
      match(x) :
         (x:Port) :
            if saved?(x) == true :
               note-usage(n(x), i)
         (x:Var) :
            match(loc(x)) :
               (l:Stack) : note-usage(n(x), i)
               (l) : false
         (x) : false

   defn note-usage (xs:Streamable<Imm|Port>, i:Int) :
      for x in xs do :
         note-usage(x, i)

   defn note-usage (e:Ins, i:Int) :
      match(e) :
         (e:Set) : note-usage(y(e), i)
         (e:Xchg) : false
         (e:Op) : false
         (e:Branch) : false
         (e:Return) : false
         (e:Save) : note-usage(n(x(e)), i)
         (e:Load) : note-usage(n(x(e)), i)
         (e:Args) : false
         (e:Call) : false

   ;     Note variable start and end stack usages
   ;     ----------------------------------------
   val ins-counter = to-stream(0 to false)
   for b in reverse-post-order(blocks(p)) as Vector<WBlock> do :
      note-usage(in(b), next(ins-counter))
      for e in ins(b) do :
         note-usage(e, next(ins-counter))
      note-usage(out(b), next(ins-counter))
   val num-pos = next(ins-counter)


   ;     Sort start and end intervals by position
   ;     ----------------------------------------
   val intervals = Array<List<Interval>>(num-pos, List())
   defn add-interval (i:Int, int:Interval) :
      intervals[i] = List(int, intervals[i])
   for e in var-end do :
      add-interval(value(e), EndInterval(key(e)))
   for e in var-start do :
      add-interval(value(e), StartInterval(key(e)))
   concat-all(intervals)


;     Calculating Stack Map
;     ---------------------

;Interface
defclass StackMap
defmulti ref-offsets (s:StackMap) -> Stream<Int>
defmulti mask (s:StackMap) -> [Int, List<Long>]
defmulti offset (s:StackMap, x:Stack) -> Int
defmulti size (s:StackMap) -> Int

;Location Calculation
defn calculate-stack-map (tt:HashTable<Int,tgt-TgtType>, u:Unit) :
   ;     Assigning Stack Locations
   ;     -------------------------
   val occupied = Vector<False|True>()      ;(occupied[i] = true) => location i is occupied.
   val types = Vector<tgt-TgtType>()        ;type of location i = types[i]
   val var-locs = HashTable<Int,Int>({_})   ;(var-locs[s] = i) => stack(s) is at location i

   ;Get the next free location
   defn next-free-loc (t:tgt-TgtType) :
      defn to-int-type (t:tgt-TgtType) :
         if tgt-float?(t) : tgt-IntType(tgt-size(t))
         else : t
      label<Int> return :
         ;Get exemplar type
         val t* = to-int-type(t)
         ;Find unoccupied location
         val n = length(occupied)
         for i in 0 to n do :
            if (occupied[i] == false) and types[i] == t* :
               return(i)
         ;Or create a new location
         add(occupied, false)
         add(types, t*)
         n

   ;Assign stack locations to variables
   for i in stack-intervals(u) do :
      match(i) :
         (i:StartInterval) :
            val l = next-free-loc(tt[n(i)])
            var-locs[n(i)] = l
            occupied[l] = true
         (i:EndInterval) :
            val l = var-locs[n(i)]
            occupied[l] = false

   ;     Compute Stack Offsets
   ;     ---------------------
   ;Pad stack items
   ;item.data holds the location id
   val [items*, aln] = let :
      val items = Vector<Item>()
      for (t in types, i in 0 to false) do :
         add(items, Item(tgt-size(t), i))
      sort-by-key!(items, alignment)
      pad(items, 8)

   ;Compute cumulative offsets
   var accum = 16 ;[Ret, Map]
   val offsets = Array<Int>(length(occupied)) ;(offsets[i] = off) => offset of location i is off
   for it in items* do :
      match(it) :
         (it:Item) :
            val i = data(it) as Int
            offsets[i] = accum
            accum = accum + alignment(it)
         (it:Padding) :
            accum = accum + size(it)

   ;     Return table
   ;     ------------
   new StackMap :
      defmethod ref-offsets (this) :
         generate<Int> :
            for item in items* do :
               if item typeof Item :
                  val loc = data(item as Item) as Int
                  val t = types[loc]
                  yield(offsets[loc]) when t == tgt-REF-TYPE                              
      defmethod mask (this) :
         val refs = tgt-ref-mask $
            for item in items* stream :
               match(item) :
                  (item:Item) : types[data(item) as Int]
                  (item:Padding) : tgt-IntType(size(item))
         val bits = tgt-to-bitmask(refs)
         val n = length(refs)
         [n, bits]
      defmethod offset (this, x:Stack) :
         val i = var-locs[n(x)]
         offsets[i]
      defmethod size (this) :
         accum




;                      Block Collapsing
;                      ================

defn collapse-blocks (u:Unit) :
   ;     Glue Port Discovery
   ;     -------------------
   val glue-entry = HashTable<Int, List<Port>>({_})
   val glue-exit = HashTable<Int, List<Port>>({_})
   val wblocks = blocks(u) as Vector<WBlock>
   val block-table = make-table(wblocks, n, {_}, {_})

   defn in-ports (n:Int) :
      in(block-table[n])

   val port-table = HashTable<Int,Port>({_})
   defn reorder (xs:List<Port>, ys:List<Port>) :
      clear(port-table)
      for x in xs do : port-table[n(x)] = x
      for y in ys map : port-table[n(y)]

   for b in wblocks do :
      if length(next(b)) == 1 :
         val nb = head(next(b))
         glue-exit[n(b)] = reorder(in-ports(nb), out(b))
      else if length(next(b)) > 1 :
         for n in next(b) do :
            glue-entry[n] = reorder(out(b), in-ports(n))

   ;     Instruction Emission
   ;     --------------------
   val output = Vector<Ins>()
   defn emit (i:Ins) :
      add(output, i)

   defn glue-ports (xs:List<Port>, ys:List<Port>) :
      ;Ensure ports properly reordered
      for (x in xs, y in ys) do :
         error("Ports improperly ordered") when n(x) != n(y)
         
      ;1. Emit any saves required
      for (x in xs, y in ys) do :
         match(saved?(x), saved?(y)) :
            (sx:True, sy:False) : emit(Save(Var(n(y), loc(y))))
            (sx, sy) : false
            
      ;2. Emit shuffles
      val xs* = Vector<Var>()
      val ys* = Vector<Var>()
      for (x in xs, y in ys) do :
         match(loc(x), loc(y)) :
            (lx:Reg|FReg, ly:Reg|FReg) :
               add(xs*, Var(n(x), lx))
               add(ys*, Var(n(y), ly))
            (lx, ly) : false   
      emit(Glue(to-list(xs*), to-list(ys*)))
         
      ;3. Emit any loads required
      for (x in xs, y in ys) do :
         match(loaded?(x), loaded?(y)) :
            (lx:True, ly:False) : emit(Load(Var(n(x), loc(x))))
            (lx, ly) : false

   for (b in wblocks, i in 0 to false) do :
      ;Check whether block n is upcoming
      defn upcoming? (b:Int) :
         if i < length(wblocks) - 1 :
            val upcoming = n(wblocks[i + 1])
            upcoming == b

      ;Emit block label
      emit(Label(n(b)))

      ;Emit entry glue
      if key?(glue-entry, n(b)) :
         glue-ports(in(b), glue-entry[n(b)])

      for e in ins(b) do :
         match(e) :
            (e:Branch) :
               val conseq = next(b)[0]
               val alt = next(b)[1]
               match(upcoming?(conseq), upcoming?(alt)) :
                  (fc:True, fa:False) :
                     emit(Break(alt, op(e), xs(e), true))
                  (fc:False, fa:True) :
                     emit(Break(conseq, op(e), xs(e), false))
                  (fc:False, fa:False) :
                     emit(Break(conseq, op(e), xs(e), false))
                     emit(Goto(alt))
            (e) :
               emit(e)

      ;Emit exit glue
      if key?(glue-exit, n(b)) :
         glue-ports(glue-exit[n(b)], out(b))

      ;Emit goto if necessary
      if length(next(b)) == 1 :
         val n = head(next(b))
         emit(Goto(n)) when not upcoming?(n)

   output


;                    Compilation to ASM
;                    ==================

;     Argument Value Language
;     -----------------------
definterface AVal
defmulti type (a:AVal) -> asm-AsmType
defstruct StackAV <: AVal :
   offset: Int
   type: asm-AsmType with: (as-method => true)
defstruct RegAV <: AVal :
   n: Int
   type: asm-AsmType with: (as-method => true)
defstruct FRegAV <: AVal :
   n: Int
   type: asm-AsmType with: (as-method => true)
defstruct RSPAV <: AVal
defstruct ImmAV <: AVal :
   value: Int|Long
   type: asm-AsmType with: (as-method => true)
defstruct NoneAV <: AVal :
   type: asm-AsmType with: (as-method => true)
defstruct MemAV <: AVal :
   n: Int
   offset: Int
defstruct ExMemAV <: AVal :
   name: Symbol
   offset: Int
defstruct Swap <: AVal :
   type: asm-AsmType with: (as-method => true)

defmethod type (x:RSPAV) : asm-LONG-TYPE
defmethod type (x:MemAV) : asm-LONG-TYPE
defmethod type (x:ExMemAV) : asm-LONG-TYPE

defn imm! (v:AVal) :
   match(v) :
      (v:RSPAV) : asm-RegSP()
      (v:RegAV) : asm-Reg(n(v))
      (v:FRegAV) : asm-FReg(n(v))
      (v:ImmAV) : asm-IntImm(value(v))
      (v:MemAV) : asm-Mem(n(v), offset(v))
      (v:ExMemAV) : asm-ExMem(name(v), offset(v))      

defn loc! (v:AVal) :
   imm!(v) as asm-Loc

defmethod print (o:OutputStream, v:AVal) :
   print{o, _} $ match(v) :
      (v:StackAV) : "stk(~,~)" << [offset(v), type(v)]
      (v:RegAV) : "reg(~,~)" << [n(v), type(v)]
      (v:FRegAV) : "freg(~,~)" << [n(v), type(v)]
      (v:RSPAV) : "rsp"
      (v:ImmAV) : "imm(~, ~)" << [value(v), type(v)]
      (v:NoneAV) : "none(~)" << [type(v)]
      (v:MemAV) : "mem(~ + ~)" << [n(v), offset(v)]
      (v:ExMemAV) : "mem(~ + ~)" << [name(v), offset(v)]
      (v:Swap) : "swap(~)" << [type(v)]

;     Compilation
;     -----------
defn compile (func-id:Int,
              tt:HashTable<Int,tgt-TgtType>,
              backend:Backend,
              ins:Vector<Ins>,
              stackmap:StackMap,
              output:Vector<asm-Ins>,
              infos:Vector<KeyValue<Int,FileInfo>>) -> False :

   ;     Output State
   ;     ------------
   defn emit (i:asm-Ins) :
      add(output, i)

   ;     Types Classification
   ;     --------------------
   defn int? (t:asm-AsmType) :
      contains?([asm-BYTE-TYPE, asm-INT-TYPE, asm-LONG-TYPE], t)
   defn float? (t:asm-AsmType) :
      contains?([asm-FLOAT-TYPE, asm-DOUBLE-TYPE], t)
   defn int? (x:AVal) : int?(type(x))
   defn float? (x:AVal) : float?(type(x))

   ;     Calling Convention
   ;     ------------------
   defn call-locations (xs:List<AVal>) :
      val regs = to-stream(call-regs(backend))
      val fregs = to-stream(call-fregs(backend))
      for x in xs map :
         if int?(x) : RegAV(next(regs), type(x))
         else : FRegAV(next(fregs), type(x))
   defn call-locations (f:AVal, xs:List<AVal>) :
      List(RegAV(1, asm-LONG-TYPE), call-locations(xs))

   defn callc-locations (xs:List<AVal>) :
      val regs = to-stream(callc-regs(backend))
      val fregs = to-stream(callc-fregs(backend))
      for x in xs map :
         if int?(x) : RegAV(next(regs), type(x))
         else : FRegAV(next(fregs), type(x))
   defn callc-locations (f:AVal, xs:List<AVal>) :
      List(RegAV(1, asm-LONG-TYPE), callc-locations(xs))         
   defn callc-ret-locations (xs:List<AVal>) :
      error("Wrong number of returns.") when length(xs) > 1
      for x in xs map :
         if int?(x) : RegAV(0, type(x))
         else : FRegAV(0, type(x))

   ;     Value Engine
   ;     ------------
   defn aval (x:Imm|Port) :
      defn asm-type (t:tgt-TgtType) :
         switch {t == _} :
            tgt-BYTE-TYPE : asm-BYTE-TYPE
            tgt-INT-TYPE : asm-INT-TYPE
            tgt-LONG-TYPE : asm-LONG-TYPE
            tgt-REF-TYPE : asm-LONG-TYPE
            tgt-FLOAT-TYPE : asm-FLOAT-TYPE
            tgt-DOUBLE-TYPE : asm-DOUBLE-TYPE

      match(x) :
         (x:Var|Port) :
            val t = asm-type(tt[n(x)])
            match(loc(x)) :
               (l:Reg) : RegAV(n(l), t)
               (l:FReg) : FRegAV(n(l), t)
               (l:Stack) : StackAV(offset(stackmap, l), t)
         (x:Val) :
            match(value(x)) :               
               (x:tgt-ByteImm) : ImmAV(tgt-value(x), asm-BYTE-TYPE)
               (x:tgt-IntImm) : ImmAV(tgt-value(x), asm-INT-TYPE)
               (x:tgt-LongImm) : ImmAV(tgt-value(x), asm-LONG-TYPE)
               (x:tgt-Mem) : MemAV(tgt-n(x), tgt-offset(x))
               (x:tgt-ExMem) : ExMemAV(tgt-name(x), tgt-offset(x))
               (x:tgt-RSP) : RSPAV()

   defn stack-aval (x:Var) :
      aval(Var(n(x), Stack(n(x))))

   defn to-asm-op (op:tgt-TgtOp) :
      switch {op == _} :
         tgt-ADD-OP : asm-ADD-OP
         tgt-SUB-OP : asm-SUB-OP
         tgt-MUL-OP : asm-MUL-OP
         tgt-DIV-OP : asm-DIV-OP
         tgt-MOD-OP : asm-MOD-OP
         tgt-AND-OP : asm-AND-OP
         tgt-OR-OP : asm-OR-OP
         tgt-XOR-OP : asm-XOR-OP
         tgt-SHL-OP : asm-SHL-OP
         tgt-SHR-OP : asm-SHR-OP
         tgt-ASHR-OP : asm-ASHR-OP
         tgt-EQ-OP : asm-EQ-OP
         tgt-NE-OP : asm-NE-OP
         tgt-LT-OP : asm-LT-OP
         tgt-GT-OP : asm-GT-OP
         tgt-LE-OP : asm-LE-OP
         tgt-GE-OP : asm-GE-OP
         tgt-ULE-OP : asm-ULE-OP
         tgt-ULT-OP : asm-ULT-OP
         tgt-UGT-OP : asm-UGT-OP
         tgt-UGE-OP : asm-UGE-OP

   defn av-mov (x:AVal, y:AVal) :
      defn mem-base (x:AVal) :
         match(x) :
            (x:StackAV) : asm-RegSP()
            (x:Swap) : asm-Mem(SWAP-LBL, 0)
      defn mem-offset (x:AVal) :
         match(x) :
            (x:StackAV) : offset(x)
            (x) : 0
      match(x, y) :
         (x:RSPAV|RegAV|FRegAV, y:RSPAV|RegAV|FRegAV|ImmAV|MemAV|ExMemAV) :
            emit(asm-SetIns(type(x), loc!(x), imm!(y)))
         (x:RSPAV|RegAV|FRegAV, y:StackAV|Swap) :
            emit(asm-Load(type(x), loc!(x), mem-base(y), mem-offset(y)))
         (x:StackAV|Swap, y:RSPAV|RegAV|FRegAV|ImmAV) :
            emit(asm-Store(type(y), mem-base(x), imm!(y), mem-offset(x)))
         (x, y) :
            error("Illegal mov: ~ = ~" % [x, y])

   defn av-binop (x:AVal, op:tgt-TgtOp, y:AVal, z:AVal) :
      emit(asm-BinOp(type(y), loc!(x), to-asm-op(op), imm!(y), imm!(z)))

   defn av-add (x:AVal, y:AVal, z:AVal) :
      av-binop(x, tgt-ADD-OP, y, z)

   defn av-sub (x:AVal, y:AVal, z:AVal) :
      av-binop(x, tgt-SUB-OP, y, z)

   defn av-shl (x:AVal, y:AVal, z:AVal) :
      av-binop(x, tgt-SHL-OP, y, z)

   defn av-divmod (x1:AVal, x2:AVal, y:AVal, z:AVal) :
      emit(asm-DualOp(type(x1), loc!(x1), loc!(x2), asm-DIVMOD-OP, imm!(y), imm!(z)))

   defn av-load (v:AVal, a:AVal, o:Int) :
      emit(asm-Load(type(v), loc!(v), imm!(a), o))

   defn av-store (a:AVal, v:AVal, o:Int) :
      emit(asm-Store(type(v), imm!(a), imm!(v), o))

   defn av-conv (x:AVal, y:AVal) :
     emit(asm-ConvertIns(type(x), loc!(x), type(y), imm!(y)))

   defn av-interpret (x:AVal, y:AVal) :
     emit(asm-ReinterpretIns(type(x), loc!(x), type(y), imm!(y)))   

   defn av-label (n:Int) :
     emit(asm-Label(n))

   defn av-goto (v:AVal) :
      emit(asm-Goto(imm!(v)))

   defn av-break (n:Int, op:tgt-TgtOp, x:AVal, y:AVal) :
      emit(asm-Branch(type(x), asm-Mem(n,0), to-asm-op(op), imm!(x), imm!(y)))

   defn av-long (v:Int) :
      ImmAV(v, asm-LONG-TYPE)

   defn av-return () :
      emit(asm-Return())

   defn av-call (f:AVal) :
      emit(asm-Call(imm!(f)))

   defn av-xchg (x:AVal, y:AVal) :
      emit(asm-XchgIns(loc!(x), loc!(y)))

   defn av-data () : emit(asm-DefData())
   defn av-text () : emit(asm-DefText())
   defn av-lit-long (i:Long) : emit(asm-DefLong(i))

   ;     Shuffle Engine
   ;     --------------
   defn shuffle (int?:True|False, xs:List<Int>, ys:List<Int>, nreg:Int) :
      val LT = asm-LONG-TYPE
      val DT = asm-DOUBLE-TYPE
               
      ;Predecessor and Successor table
      val pred = Array<False|Int>(nreg, false)
      val succs = Array<List<Int>>(nreg, List())

      ;Fill tables
      for (x in xs, y in ys) do :
         pred[x] = y
         succs[y] = List(x, succs[y])
         
      ;Find swap
      match(index-of(pred, false)) :
         (s:Int) :
            ;Mov from y to x
            defn mov (x:Int, y:Int) :
               if int? : av-mov(RegAV(x,LT), RegAV(y,LT))
               else : av-mov(FRegAV(x,DT), FRegAV(y,DT))
               
            ;Resolve a cycle
            defn* cycle (xs:List<Int>) :
               val x0 = head(xs)
               mov(s, x0)
               for x in xs do :
                  val p = if pred[x] == x0 : s
                          else : pred[x] as Int
                  mov(x, p)

            ;Do in topological order
            val graph = stream(KeyValue, 0 to false, succs)
            for c in strong-components(graph) do :
               match(c) :
                  (c:List<Int>) : cycle(c) when not empty?(tail(c))
                  (c:Int) : mov(c, pred[c] as Int) when pred[c] != false
 
         (s:False) :
            error("Untested.")
            ;Free register 0
            if int? : av-mov(Swap(LT), RegAV(0,LT))
            else : av-mov(Swap(DT), FRegAV(0,DT))
            
            ;Register shuffle
            var xs* = List<Int>()
            var ys* = List<Int>()
            var ld = List<Int>()
            for (x in xs, y in ys) do :
               if y == 0 :
                  ld = List(x, ld)
               else :
                  xs* = List(x, xs*)
                  ys* = List(y, ys*)
            shuffle(int?, xs*, ys*, nreg)
            
            ;Load register 0
            for x in ld do :
               if int? : av-mov(RegAV(x,LT), Swap(LT))
               else : av-mov(FRegAV(x,DT), Swap(DT))
               
   defn shuffle (xs:List<AVal>, ys:List<AVal>) :
      val rxs = Vector<Int>()
      val rys = Vector<Int>()
      val fxs = Vector<Int>()
      val fys = Vector<Int>()
      val oxs = Vector<AVal>()
      val oys = Vector<AVal>()
      for (x in xs, y in ys) do :
         match(x, y) :
            (x:RegAV, y:RegAV) :
               add(rxs, n(x))
               add(rys, n(y))
            (x:FRegAV, y:FRegAV) :
               add(fxs, n(x))
               add(fys, n(y))
            (x, y) :
               add(oxs, x)
               add(oys, y)
      shuffle(true, to-list(rxs), to-list(rys), num-regs(backend))
      shuffle(false, to-list(fxs), to-list(fys), num-fregs(backend))
      do(av-mov, oxs, oys)

   ;     Generate Header
   ;     ---------------
   val stack-map-id = fresh-id()
   let :
      val [n, bits] = mask(stackmap)
      av-data()
      av-label(stack-map-id)
      av-lit-long(to-long(n))
      do(av-lit-long, bits)
      av-text()
      av-label(func-id)   

   ;     Convert Instructions
   ;     --------------------
   for e in ins do :
      match(e) :
         (e:Set) :
            av-mov(aval(x(e)), aval(y(e)))
         (e:Return) :
            val xs* = map(aval, xs(e))
            val ts* = call-locations(xs*)
            shuffle(ts*, xs*)
            av-return()
         (e:Op) :               
            match(op(e)) :
               (op:tgt-LoadOp) :
                  val [x, y, o] = [xs(e)[0], ys(e)[0], tgt-offset(op)]
                  av-load(aval(x), aval(y), o)
               (op:tgt-StoreOp) :
                  val [x, y, o] = [ys(e)[0], ys(e)[1], tgt-offset(op)]
                  av-store(aval(x), aval(y), o)
               (op:tgt-AddrOp) :
                  val x = xs(e)[0]
                  av-mov(aval(x), MemAV(tgt-n(op), 0))
               (op) :
                  switch {op == _} :
                     tgt-DIVMOD-OP : 
                        val [x1, x2, y, z] = [xs(e)[0], xs(e)[1], ys(e)[0], ys(e)[1]]
                        av-divmod(aval(x1), aval(x2), aval(y), aval(z))
                        
                     tgt-CONV-OP : 
                        val [x, y] = [head(xs(e)), head(ys(e))]
                        av-conv(aval(x), aval(y))
                        
                     tgt-INTERPRET-OP :
                        val [x, y] = [head(xs(e)), head(ys(e))]
                        av-interpret(aval(x), aval(y))
                        
                     tgt-SWITCH-STACK-OP :
                        val R0 = RegAV(0, asm-LONG-TYPE)
                        val R1 = RegAV(1, asm-LONG-TYPE)
                        val RSP = RSPAV()

                        ;1. Decrement number of free stacks
                        av-load(R0, MemAV(NUM-FREE-STACKS-LBL,0), 0)
                        av-sub(R0, R0, av-long(1))
                        av-store(MemAV(NUM-FREE-STACKS-LBL,0), R0, 0)

                        ;2. Retrieve the next free stack
                        ;R0 = next free stack
                        ;temporary R1 = stack pool
                        av-load(R1, MemAV(FREE-STACKS-LBL,0), 0)
                        av-load(R0, R1, 0)
                        av-add(R1, R1, av-long(8))
                        av-store(MemAV(FREE-STACKS-LBL,0), R1, 0)
                        
                        ;3. Cap the current stack. Set current stack as parent of new stack.
                        ;R1 = current stack
                        ;preserve R0 = free stack
                        av-load(R1, MemAV(STACK-LBL,0), 0)
                        av-store(R1, RSP, STACK-SP-OFFSET - REF-TAG-BITS)
                        av-store(R0, R1, STACK-PARENT-OFFSET - REF-TAG-BITS)

                        ;4. update the current stack and limits
                        ;preserve R0 = free stack
                        ;temporary R1 = stack limit
                        ;Update stack register
                        av-add(RSP, R0, av-long(STACK-ITEMS-OFFSET - REF-TAG-BITS))
                        ;Update stack limit, and current stack
                        av-add(R1, R0, av-long(STACK-SIZE - REF-TAG-BITS))
                        av-store(MemAV(STACK-LIM-LBL,0), R1, 0)
                        av-store(MemAV(STACK-LBL,0), R0, 0)
                        ;Intercept return code
                        av-mov(R1, MemAV(RETRACT-STACK-LBL,0))
                        av-store(RSP, R1, 0) 
                        
                     else : 
                        val [x, y, z] = [xs(e)[0], ys(e)[0], ys(e)[1]]
                        av-binop(aval(x), op, aval(y), aval(z))
         (e:Args) :            
            ;Write stack map
            val R0 = RegAV(0, asm-LONG-TYPE)
            val RSP = RSPAV()
            av-mov(R0, MemAV(stack-map-id,0))
            av-store(RSP, R0, 8)
            
            ;Null out stack
            for off in ref-offsets(stackmap) do :
               av-store(RSP, av-long(VOID-TAG), off)
            
            ;Save argument values
            val xs* = map(aval, xs(e))
            val ts* = call-locations(xs*)
            shuffle(xs*, ts*)            
         (e:Call) :
            match(type(e)) :
               (t:StanzaCall) :
                  ;Convert to AVals
                  val ys* = map(aval, ys(e))

                  ;Call in new stack?
                  if new-stack?(t) :
                     av-store(MemAV(STACK-LIM-LBL,0), av-long(0), 0)

                  ;Move arguments into position and call
                  val f* = match(aval(f(e))) :
                     (f*:MemAV|ExMemAV) :
                        val ts* = call-locations(ys*)
                        shuffle(ts*, ys*)
                        f*
                     (f*) :
                        val ts* = call-locations(f*, ys*)
                        shuffle(ts*, List(f*,ys*))
                        head(ts*)

                  ;Arity register
                  val R0 = RegAV(0, asm-LONG-TYPE)
                  if tail?(t) :
                     ;Call
                     av-mov(R0, av-long(arity(t)))
                     av-goto(f*)
                  else :
                     ;Call
                     av-mov(R0, av-long(arity(t)))
                     av-add(RSPAV(), RSPAV(), av-long(size(stackmap) + 8))
                     av-call(f*)
                     if info(t) typeof FileInfo :
                        val lbl = fresh-id()
                        add(infos, lbl => info(t) as FileInfo)
                        av-label(lbl)
                     av-sub(RSPAV(), RSPAV(), av-long(size(stackmap) + 8))

                     ;Move return values out from Args
                     val xs* = map(aval, xs(e))
                     val ts* = call-locations(xs*)
                     shuffle(xs*, ts*)
               
               (t:StackCall) :
                  ;Convert to AVals
                  val ys* = map(aval, ys(e))
                  
                  ;Move arguments into position
                  val ts* = call-locations(aval(f(e)), ys*)
                  shuffle(ts*, List(aval(f(e)),ys*))
                        
                  val R0 = RegAV(0, asm-LONG-TYPE)
                  val R1 = RegAV(1, asm-LONG-TYPE)
                  val RSP = RSPAV()
                  
                  if tail?(t) :                     
                     ;Cap the current stack
                     ;R0 = current stack
                     av-load(R0, MemAV(STACK-LBL,0), 0)
                     av-store(R0, RSP, STACK-SP-OFFSET - REF-TAG-BITS)
                     
                     ;Update the current stack and limits
                     ;R1 = target stack
                     ;temporary R0 = stack limit
                     ;Update stack limit, and current stack
                     av-add(R0, R1, av-long(STACK-SIZE - REF-TAG-BITS))
                     av-store(MemAV(STACK-LIM-LBL,0), R0, 0)
                     av-store(MemAV(STACK-LBL,0), R1, 0)
                     ;Recover stack register
                     av-load(RSP, R1, STACK-SP-OFFSET - REF-TAG-BITS)
                     av-return()
                  
                  else :
                     ;Cap the current stack
                     ;R0 = current stack
                     val ret-lbl = fresh-id()
                     av-add(RSP, RSP, av-long(size(stackmap)))
                     av-load(R0, MemAV(STACK-LBL,0), 0)
                     av-store(R0, RSP, STACK-SP-OFFSET - REF-TAG-BITS)

                     ;Write return address
                     av-mov(R0, MemAV(ret-lbl,0))
                     av-store(RSP, R0, 0)

                     ;Update the current stack and limits
                     ;R1 = target stack
                     ;temporary R0 = stack limit
                     ;Update stack limit, and current stack
                     av-add(R0, R1, av-long(STACK-SIZE - REF-TAG-BITS))
                     av-store(MemAV(STACK-LIM-LBL,0), R0, 0)
                     av-store(MemAV(STACK-LBL,0), R1, 0)
                     ;Recover stack register
                     av-load(RSP, R1, STACK-SP-OFFSET - REF-TAG-BITS)
                     av-return()

                     ;Move return values out from Args
                     av-label(ret-lbl)
                     if info(t) typeof FileInfo :
                        add(infos, ret-lbl => info(t) as FileInfo)
                     av-sub(RSP, RSP, av-long(size(stackmap) + 8))
                     val xs* = map(aval, xs(e))
                     val ts* = call-locations(xs*)
                     shuffle(xs*, ts*)
                  
               (t:CCall) :
                  ;Convert to AVals
                  val ys* = map(aval, ys(e))

                  ;Move arguments into position and call
                  val f* = match(aval(f(e))) :
                     (f*:MemAV|ExMemAV) :
                        val ts* = callc-locations(ys*)
                        shuffle(ts*, ys*)
                        f*
                     (f*) :
                        val ts* = callc-locations(f*, ys*)
                        shuffle(ts*, List(f*,ys*))
                        head(ts*)

                  ;Calculate number of floating point registers
                  val num-fregs = count({_ typeof FRegAV}, ys*)

                  ;Call
                  val R0 = RegAV(0, asm-LONG-TYPE)
                  val SPL = MemAV(STACK-PTR-LBL,0)
                  av-mov(R0, av-long(num-fregs))
                  av-store(SPL, RSPAV(), 0)
                  av-load(RSPAV(), MemAV(C-RSP-LBL,0), 0)
                  av-sub(RSPAV(), RSPAV(), av-long(8 * num-on-stack(t)))
                  av-call(f*)
                  av-load(RSPAV(), SPL, 0)

                  ;Move return values out from Args
                  val xs* = map(aval, xs(e))
                  val ts* = callc-ret-locations(xs*)
                  shuffle(xs*, ts*)
         (e:Save) :
            val x* = aval(x(e))
            val sx* = stack-aval(x(e))
            av-mov(sx*, x*)
         (e:Load) :
            val x* = aval(x(e))
            val sx* = stack-aval(x(e))
            av-mov(x*, sx*)
         (e:Xchg) :
            av-xchg(aval(x(e)), aval(y(e)))
         (e:Glue) :
            val xs* = map(aval,xs(e))
            val ys* = map(aval,ys(e))
            shuffle(xs*, ys*)
         (e:Label) :
            av-label(n(e))
         (e:Goto) :
            av-goto(MemAV(n(e),0))
         (e:Break) :
            defn flip (op:tgt-TgtOp) :
               switch {op == _} :
                  tgt-EQ-OP : tgt-NE-OP
                  tgt-NE-OP : tgt-EQ-OP
                  tgt-LT-OP : tgt-GE-OP
                  tgt-GT-OP : tgt-LE-OP
                  tgt-LE-OP : tgt-GT-OP
                  tgt-GE-OP : tgt-LT-OP
                  tgt-ULE-OP : tgt-UGT-OP
                  tgt-ULT-OP : tgt-UGE-OP
                  tgt-UGT-OP : tgt-ULE-OP
                  tgt-UGE-OP : tgt-ULT-OP
            defn flip-op? (op:tgt-TgtOp) :
               if flip?(e) : flip(op)
               else : op
                        
            switch {op(e) == _} :
               tgt-STACK-HAS-SPACE :
                  val R0 = RegAV(0, asm-LONG-TYPE)
                  val R1 = RegAV(1, asm-LONG-TYPE)
                  val RSP = RSPAV()
                  av-add(R0, RSP, av-long(size(stackmap) + 8)) ;+8 for extra return address
                  av-load(R1, MemAV(STACK-LIM-LBL,0), 0)
                  av-break(n(e), flip-op?(tgt-LE-OP), R0, R1)                  
                  
               else :
                  match(op(e)) :
                     (op:tgt-ArityNEqOp) :
                        val R0 = RegAV(0, asm-LONG-TYPE)
                        av-break(n(e), flip-op?(tgt-NE-OP), R0, av-long(tgt-arity(op)))
                     (op) :
                        val [x, y] = [xs(e)[0], xs(e)[1]]
                        av-break(n(e), flip-op?(op), aval(x), aval(y))