defpackage stz/bb :
   import core
   import collections
   import stz/algorithms
   import stz/ids
   import stz/utils
   import stz/tgt-ir with :
      prefix => tgt-
   import stz/bb-ir
   import stz/asm-ir with :
      prefix => asm-
   import stz/padder
   import stz/backend
   import stz/params

;============================================================
;==================== Main Driver ===========================
;============================================================

val normalize-timer = MillisecondTimer("Normalize")
val spill-timer = MillisecondTimer("Spill")
val to-bb-timer = MillisecondTimer("To Bb")
val critical-edges-timer = MillisecondTimer("Critical Edges")
val index-timer = MillisecondTimer("Index")
val new-early-saves-timer = MillisecondTimer("New Early Saves")
val annotation-timer = MillisecondTimer("Annotation")
val new-class-allocation-timer = MillisecondTimer("Class Allocation")
val new-reg-assignment-timer = MillisecondTimer("Register Assignment")
val new-stack-map-timer = MillisecondTimer("Stack Map")
val clearing-timer = MillisecondTimer("Clearing")
val collapse-timer = MillisecondTimer("Collapse Block")
val new-assemble-timer = MillisecondTimer("Assemble")

public defn print-timing () :
   val total = sum $ seq{time, _} $ [
               normalize-timer spill-timer to-bb-timer critical-edges-timer index-timer
               new-early-saves-timer annotation-timer new-class-allocation-timer
               new-reg-assignment-timer new-stack-map-timer clearing-timer
               collapse-timer new-assemble-timer]
   defn print-percentage (t:Timer, total:Long) :
      println("%_ (%_%%)" % [t, time(t) * 100L / total])
   println("Total = %_" % [total])   
   print-percentage(normalize-timer, total)
   print-percentage(spill-timer, total)
   print-percentage(to-bb-timer, total)
   print-percentage(critical-edges-timer, total)
   print-percentage(index-timer, total)
   print-percentage(new-early-saves-timer, total)
   print-percentage(annotation-timer, total)
   print-percentage(new-class-allocation-timer, total)
   print-percentage(new-reg-assignment-timer, total)
   print-percentage(new-stack-map-timer, total)
   print-percentage(clearing-timer, total)
   print-percentage(collapse-timer, total)
   print-percentage(new-assemble-timer, total)

public defn compile (def:tgt-DefFn,
                     backend:Backend,
                     output:Vector<asm-Ins>,
                     infos:Vector<KeyValue<Int,FileInfo>>) -> False :
   defn vheadline (name:String) :
      if flag-defined?(`VERBOSE) :
         header(name)
      false
   defn verbose (f: () -> ?) :
      if flag-defined?(`VERBOSE) :
         f()
      false   

   vheadline("Normalize")
   start(normalize-timer)
   var d = normalize(def)
   stop(normalize-timer)

   vheadline("Spill call arguments")
   start(spill-timer)
   d = spill-call-args(d, backend)
   stop(spill-timer)

   vheadline("Compile to Basic Block IR")
   start(to-bb-timer)
   val [tt, bb-ir] = to-bb-ir(d)
   stop(to-bb-timer)

   ;Track changes
   var u:Unit = bb-ir

   vheadline("Critical Edges")
   start(critical-edges-timer)
   u = remove-critical-edges(u)
   stop(critical-edges-timer)

   vheadline("Index Program")
   start(index-timer)
   index-prog(u)
   stop(index-timer)
   verbose(print-indexed-prog)

   vheadline("Add Annotations")
   start(annotation-timer)
   add-annotations()
   stop(annotation-timer)
   verbose(print-indexed-prog)

   vheadline("Allocate Classes")
   start(new-class-allocation-timer)
   new-allocate-classes(backend)
   stop(new-class-allocation-timer)
   verbose(print-indexed-prog)

   vheadline("Assign Registers")
   start(new-reg-assignment-timer)
   #register-assignment(backend)
   stop(new-reg-assignment-timer)
   verbose(print-indexed-prog)

   #if-not-defined(OPTIMIZE) :
      #verify-register-assignment(backend)

   vheadline("Calculate Stack Map")
   start(new-stack-map-timer)
   val smap = #calculate-stack-map()
   stop(new-stack-map-timer)

   vheadline("Enforce Stack Clearing")
   start(clearing-timer)
   #enforced-clearing(smap)
   stop(clearing-timer)
   verbose(print-indexed-prog)

   vheadline("Collapse Blocks")
   start(collapse-timer)
   val #ins = #collapse-blocks(smap)
   stop(collapse-timer)
   verbose(do{println, #ins})

   vheadline("Assemble")
   start(new-assemble-timer)
   assemble(tgt-n(d), backend, #ins, smap, output, infos)
   stop(new-assemble-timer)

;============================================================
;====================== Utilities ===========================
;============================================================

defn make-table<?K,?V,?T> (xs:Seqable<?T>,
                           k: T -> ?K,
                           v: T -> ?V,
                           hash: K -> Int) :
   val table = HashTable<K,V>(hash)
   for x in xs do : table[k(x)] = v(x)
   table

defn post-order (bs:Vector<Block>, cull?:True|False) -> Vector<Block> :
   ;Block Table
   val block = HashTable<Int,Block>()
   for b in bs do : block[n(b)] = b

   ;Mark Table
   val mark-table = HashTable<Int,True>()
   defn marked? (b:Block) : key?(mark-table, n(b))
   defn mark (b:Block) : mark-table[n(b)] = true

   ;Add blocks to ys
   val ys = Vector<Block>()
   defn* loop (b:Block) :
      if not marked?(b) :
         mark(b)
         do(loop{block[_]}, next(b))
         add(ys, b)
   loop(bs[0])

   ;Add non-reachable blocks
   if not cull? :
      for b in bs do :
         add(ys, b) when not marked?(b)

   ;Return
   ys

defn post-order (bs:Vector<Block>) -> Vector<Block> :
   post-order(bs, true)

defn reverse-post-order (bs:Vector<Block>) -> Vector<Block> :
   val bs* = post-order(bs)
   reverse!(bs*)
   bs*

;============================================================
;================= Spill Call Arguments =====================
;============================================================

defn spill-call-args (def:tgt-DefFn, backend:Backend) :
   ;     Type Layer
   ;     ----------
   val int-values = HashTable<Int,True|False>()
   for d in tgt-defs(def) do :
      int-values[tgt-n(d)] = tgt-int?(tgt-type(d))

   defn int? (x:tgt-Imm) :
      match(x) :
         (x:tgt-Var) : int-values[tgt-n(x)]
         (x) : true

   ;     Output State
   ;     ------------
   val output = Vector<tgt-Ins>()
   val defvars = Vector<tgt-DefVar>()
   do(add{defvars, _}, tgt-defs(def))
   defn emit (i:tgt-Ins) :
      add(output, i)
   defn make-var (t:tgt-TgtType) :
      val n = fresh-id()
      add(defvars, tgt-DefVar(n, t))
      tgt-Var(n)

   var cached-c-rsp : False|tgt-Var = false
   defn saved-c-rsp () :
      if cached-c-rsp is False :
         cached-c-rsp = make-var(tgt-LONG-TYPE)
      cached-c-rsp as tgt-Var

   ;     Split Locations
   ;     ---------------
   ;Split a group of values into which go into memory, and which go
   ;into registers.
   defn split-mem-locs<?T> (xs:List<?T&tgt-Imm>, nregs:Int, nfregs:Int) :
      defn cms (xs) : join(xs, ", ")
      val regs = to-seq(0 to nregs)
      val fregs = to-seq(0 to nfregs)
      val reg-xs = Vector<T&tgt-Imm>()
      val mem-xs = Vector<T&tgt-Imm>()
      for x in xs do :
         if int?(x) :
            if empty?(regs) :
               add(mem-xs, x)
            else :
               next(regs)
               add(reg-xs, x)

         else :
            if empty?(fregs) :
               add(mem-xs, x)
            else :
               next(fregs)
               add(reg-xs, x)

      [to-list(reg-xs), to-list(mem-xs)]
   defn split-call-locs<?T> (xs:List<?T&tgt-Imm>) :
      split-mem-locs(xs, length(call-regs(backend)), length(call-fregs(backend)))
   defn split-callc-locs<?T> (xs:List<?T&tgt-Imm>) :
      split-mem-locs(xs, length(callc-regs(backend)), length(callc-fregs(backend)))

   ;     Main Algorithm
   ;     --------------
   ;Convert calls
   for e in tgt-body(def) do :
      match(e) :
         (e:tgt-ArgsIns) :
            val [xs, mxs] = split-call-locs(tgt-xs(e))
            emit(tgt-ArgsIns(xs))
            for (x in mxs, o in 0 to false by 8) do :
               emit(tgt-Load(x, tgt-Mem(ARG-LBL,0), o))
         (e:tgt-Return) :
            val [xs, mxs] = split-call-locs(tgt-xs(e))
            for (x in mxs, o in 0 to false by 8) do :
               emit(tgt-Store(x, tgt-Mem(ARG-LBL,0), o))
            emit(tgt-Return(xs))
         (e:tgt-CArgsIns) :
            val sp = make-var(tgt-LONG-TYPE)
            val [xs, mxs] = split-callc-locs(tgt-xs(e))
            emit(tgt-CArgsIns(cons(sp, xs)))
            for (x in mxs, i in 0 to false) do :
               emit(tgt-Load(x, sp, 8 * (i + 1)))
            emit(tgt-Load(saved-c-rsp(), tgt-Mem(C-RSP-LBL,0), 0))
            emit(tgt-Store(tgt-Mem(C-RSP-LBL,0), sp, 0))
         (e:tgt-CReturn) :
            val sp = make-var(tgt-LONG-TYPE)
            emit(tgt-Load(sp, tgt-Mem(C-RSP-LBL,0), 0))
            emit(tgt-Store(tgt-Mem(C-RSP-LBL,0), saved-c-rsp(), 0))
            emit(tgt-CReturn(cons(sp, tgt-xs(e))))
         (e:tgt-Call) :
            val [ys, mys] = split-call-locs(tgt-ys(e))
            val [xs, mxs] = split-call-locs(tgt-xs(e))
            for (y in mys, o in 0 to false by 8) do :
               emit(tgt-Store(tgt-Mem(ARG-LBL,0), y, o))
            emit(tgt-Call(tgt-arity(e), xs, tgt-f(e), ys, tgt-new-stack?(e), tgt-info(e)))
            for (x in mxs, o in 0 to false by 8) do :
               emit(tgt-Load(x, tgt-Mem(ARG-LBL,0), o))
         (e:tgt-CallStack) :
            val [ys, mys] = split-call-locs(tgt-ys(e))
            val [xs, mxs] = split-call-locs(tgt-xs(e))
            for (y in mys, o in 0 to false by 8) do :
               emit(tgt-Store(tgt-Mem(ARG-LBL,0), y, o))
            emit(tgt-CallStack(xs, tgt-f(e), ys, tgt-info(e)))
            for (x in mxs, o in 0 to false by 8) do :
               emit(tgt-Load(x, tgt-Mem(ARG-LBL,0), o))
         (e:tgt-TCall) :
            val [ys, mys] = split-call-locs(tgt-ys(e))
            for (y in mys, o in 0 to false by 8) do :
               emit(tgt-Store(tgt-Mem(ARG-LBL,0), y, o))
            emit(tgt-TCall(tgt-arity(e), tgt-f(e), ys, tgt-new-stack?(e)))
         (e:tgt-TCallStack) :
            val [ys, mys] = split-call-locs(tgt-ys(e))
            for (y in mys, o in 0 to false by 8) do :
               emit(tgt-Store(tgt-Mem(ARG-LBL,0), y, o))
            emit(tgt-TCallStack(tgt-f(e), ys))
         (e:tgt-CallC) :
            val [ys, mys] = split-callc-locs(tgt-ys(e))
            val spl = make-var(tgt-LONG-TYPE)
            emit(tgt-Load(spl, tgt-Mem(STACK-PTR-LBL,0), 0))
            if empty?(mys) :
               emit(tgt-CallC(1, tgt-xs(e), tgt-f(e), ys))
            else :
               val n = length(mys) | 1
               val sp = make-var(tgt-LONG-TYPE)
               emit(tgt-Load(sp, tgt-Mem(C-RSP-LBL,0), 0))
               for (y in mys, i in 0 to false) do :
                  emit(tgt-Store(sp, y, 8 * (i - 6 - n)))
               emit(tgt-CallC(n, tgt-xs(e), tgt-f(e), ys))
            emit(tgt-Store(tgt-Mem(STACK-PTR-LBL,0), spl, 0))
         (e) :
            emit(e)

   ;Return result
   tgt-DefFn(tgt-n(def), defvars, output)


;============================================================
;================== Normalization ===========================
;============================================================

defn normalize (d:tgt-DefFn) -> tgt-DefFn :

   ;                   State
   ;                   =====
   ;(clones[x] = ys) => ys are all clones of x
   val clones = HashTable<Int,List<Int>>()
   val body* = Vector<tgt-Ins>()
   val defs* = Vector<tgt-DefVar>()

   ;                   Helpers
   ;                   =======

   defn operands (i:tgt-Ins) -> List<tgt-Imm> :
      match(i) :
         (i:tgt-ConvertIns) : List(tgt-y(i))
         (i:tgt-InterpretIns) : List(tgt-y(i))
         (i:tgt-BinOp) : List(tgt-y(i), tgt-z(i))
         (i:tgt-UnaOp) : List(tgt-y(i))
         (i:tgt-Load) : List(tgt-y(i))
         (i) : fatal("Not needed.")

   defn update-x (i:tgt-Ins, x:tgt-Var) :
      match(i) :
         (i:tgt-ConvertIns) : tgt-ConvertIns(x, tgt-y(i))
         (i:tgt-InterpretIns) : tgt-InterpretIns(x, tgt-y(i))
         (i:tgt-BinOp) : tgt-BinOp(x, tgt-op(i), tgt-y(i), tgt-z(i))
         (i:tgt-UnaOp) : tgt-UnaOp(x, tgt-op(i), tgt-y(i))
         (i:tgt-Load) : tgt-Load(x, tgt-y(i), tgt-offset(i))
         (i) : fatal("Not needed.")

   defn matches? (x:tgt-Var, y:tgt-Imm) :
      match(y) :
         (y:tgt-Var) : tgt-n(x) == tgt-n(y)
         (y) : false

   defn matches? (x:tgt-Var, ys:List<tgt-Imm>) :
      for y in ys any? :
         matches?(x, y)

   defn clone (x:tgt-Var) :
      val n* = fresh-id()
      clones[tgt-n(x)] = cons(n*, get?(clones, tgt-n(x), List()))
      tgt-Var(n*)

   ;                   Driver
   ;                   ======

   ;Normalize instructions
   for i in tgt-body(d) do :
      match(i) :
         (i:tgt-SetIns) :
            if not matches?(tgt-x(i), tgt-y(i)) :
               add(body*, i)
         (i:tgt-Load|tgt-BinOp|tgt-UnaOp|tgt-InterpretIns|tgt-ConvertIns) :
            if matches?(tgt-x(i), operands(i)) :
               val x* = clone(tgt-x(i))
               add(body*, update-x(i, x*))
               add(body*, tgt-SetIns(tgt-x(i), x*))
            else :
               add(body*, i)
         (i) :
            add(body*, i)

   ;Copy defs with clones
   for def in tgt-defs(d) do :
      add(defs*, def)
      if key?(clones, tgt-n(def)) :
         for y in clones[tgt-n(def)] do :
            add(defs*, tgt-DefVar(y, tgt-type(def)))

   ;Return normalized DefFn
   tgt-DefFn(tgt-n(d), defs*, body*)



;============================================================
;============== Translation to BB IR=========================
;============================================================

defn to-bb-ir (d:tgt-DefFn) -> [HashTable<Int,tgt-TgtType>, Unit] :
   ;State
   val defs = Vector<tgt-DefVar>()
   val block-list = Vector<Block>()
   val type-table = HashTable<Int,tgt-TgtType>()

   ;Helpers
   defn imm-type (i:tgt-Imm) :
      match(i) :
         (i:tgt-ByteImm) : tgt-BYTE-TYPE
         (i:tgt-IntImm) : tgt-INT-TYPE
         (i:tgt-LongImm) : tgt-LONG-TYPE
         (i:tgt-RSP) : tgt-LONG-TYPE
         (i:tgt-Var) : type-table[tgt-n(i)]
         (i:tgt-Mem) : tgt-LONG-TYPE
         (i:tgt-ExMem) : tgt-LONG-TYPE

   defn fresh-block (n:Int) :
      Block(n, Vector<Ins>(), List())

   var active-block = fresh-block(fresh-id())

   defn emit (i:Ins) :
      add(ins(active-block), i)

   defn to-var (x:tgt-Var) :
      Var(tgt-n(x))

   defn to-imm (x:tgt-Imm) :
      val max = 1 << 16
      val min = -1 << 16
      defn large? (v:Int) : (v < min) or (v > max)
      defn large? (v:Long) : (v < to-long(min)) or (v > to-long(max))

      match(x) :
         (x:tgt-Var) : to-var(x)
         (x:tgt-IntImm|tgt-LongImm) :
            if large?(tgt-value(x)) : force-var(Val(x))
            else : Val(x)
         (x) : Val(x)

   defn close-block (ns:List<Int>) :
      val ab = active-block
      add(block-list, Block(n(ab), ins(ab), ns))

   defn force-var (x:Imm) :
      match(x) :
         (x:Var) :
            x
         (x:Val) :
            val v = fresh(imm-type(value(x)))
            emit(Set(v, x))
            v

   defn force-operand (x:Imm) :
      match(x) :
         (x:Var) : x
         (x:Val) :
            match(value(x)) :
               (v:tgt-Mem|tgt-ExMem) : force-var(x)
               (v) : x

   defn fresh (t:tgt-TgtType) :
      val n = fresh-id()
      add(defs, tgt-DefVar(n, t))
      type-table[n] = t
      Var(n)

   ;Add unit defs
   for def in tgt-defs(d) do :
      add(defs, def)
      type-table[tgt-n(def)] = tgt-type(def)

   ;Translate instructions
   for i in tgt-body(d) do :
      match(i) :
         (i:tgt-ArgsIns) :
            val xs* = map(to-var, tgt-xs(i))
            emit(Args(xs*, StanzaContext()))
         (i:tgt-CArgsIns) :
            val xs* = map(to-var, tgt-xs(i))
            emit(Args(xs*, CContext()))
         (i:tgt-SetIns) :
            val x* = to-var(tgt-x(i))
            val y* = to-imm(tgt-y(i))
            emit(Set(x*, y*))
         (i:tgt-BinOp) :
            val t = imm-type(tgt-x(i))
            val top = tgt-op(i)
            val x* = to-var(tgt-x(i))
            val y* = force-operand(to-imm(tgt-y(i)))
            val z* = force-operand(to-imm(tgt-z(i)))

            defn cast-to-int (f: (tgt-TgtType, Var, Var, Var) -> False) :
               val ix = fresh(tgt-INT-TYPE)
               val iy = fresh(tgt-INT-TYPE)
               val iz = fresh(tgt-INT-TYPE)
               emit(Op(tgt-CONV-OP, List(iy), List(force-var(y*))))
               emit(Op(tgt-CONV-OP, List(iz), List(force-var(z*))))
               f(tgt-INT-TYPE, ix, iy, iz)
               emit(Op(tgt-CONV-OP, List(x*), List(ix)))
            defn com-op () :
               emit(Op(top, List(x*), List(y*, z*)))
            defn cmp-op () :
               match(y*, z*) :
                  (y*:Val, z*:Val) : emit(Op(top, List(x*), List(force-var(y*), z*)))
                  (y*, z*) :emit(Op(top, List(x*), List(y*, z*)))
            defn ncom-op () :
               emit(Op(top, List(x*), List(y*, z*)))
               emit(Op(tgt-NO-OP, List(), List(z*)))
            defn mul-op () :
               if t == tgt-BYTE-TYPE :
                  cast-to-int $ fn (t, x*, y*, z*) :
                     emit(Op(top, List(x*), List(y*, z*)))
               else : emit(Op(top, List(x*), List(y*, z*)))
            defn div-op () :
               if tgt-float?(t) :
                  emit(Op(top, List(x*), List(y*, z*)))
                  emit(Op(tgt-NO-OP, List(), List(z*)))
               else if t == tgt-BYTE-TYPE :
                  cast-to-int $ fn (t, x*, y*, z*) :
                     emit(Op(tgt-DIVMOD-OP, List(x*, fresh(t)), List(y*, z*)))
                     emit(Op(tgt-NO-OP, List(), List(z*)))
               else :
                  val y* = force-var(y*)
                  val z* = force-var(z*)
                  emit(Op(tgt-DIVMOD-OP, List(x*, fresh(t)), List(y*, z*)))
                  emit(Op(tgt-NO-OP, List(), List(z*)))
            defn mod-op () :
               if t == tgt-BYTE-TYPE :
                  cast-to-int $ fn (t, x*, y*, z*) :
                     emit(Op(tgt-DIVMOD-OP, List(fresh(t), x*), List(y*, z*)))
                     emit(Op(tgt-NO-OP, List(), List(z*)))
               else :
                  val y* = force-var(y*)
                  val z* = force-var(z*)
                  emit(Op(tgt-DIVMOD-OP, List(fresh(t), x*), List(y*, z*)))
                  emit(Op(tgt-NO-OP, List(), List(z*)))

            switch {top == _} :
               tgt-ADD-OP : com-op()
               tgt-SUB-OP : ncom-op()
               tgt-MUL-OP : mul-op()
               tgt-DIV-OP : div-op()
               tgt-MOD-OP : mod-op()
               tgt-AND-OP : com-op()
               tgt-OR-OP : com-op()
               tgt-XOR-OP : com-op()
               tgt-SHL-OP : ncom-op()
               tgt-SHR-OP : ncom-op()
               tgt-ASHR-OP : ncom-op()
               tgt-EQ-OP : cmp-op()
               tgt-NE-OP : cmp-op()
               tgt-LT-OP : cmp-op()
               tgt-GT-OP : cmp-op()
               tgt-LE-OP : cmp-op()
               tgt-GE-OP : cmp-op()
               tgt-ULE-OP : cmp-op()
               tgt-ULT-OP : cmp-op()
               tgt-UGT-OP : cmp-op()
               tgt-UGE-OP : cmp-op()
         (i:tgt-UnaOp) :
            val t = imm-type(tgt-x(i))
            val top = tgt-op(i)
            val x* = to-var(tgt-x(i))
            val y* = force-var(to-imm(tgt-y(i)))

            defn cast-to-int (f: (tgt-TgtType, Var, Var) -> False) :
               val ix = fresh(tgt-INT-TYPE)
               val iy = fresh(tgt-INT-TYPE)
               emit(Op(tgt-CONV-OP, List(iy), List(force-var(y*))))
               f(tgt-INT-TYPE, ix, iy)
               emit(Op(tgt-CONV-OP, List(x*), List(ix)))

            if t == tgt-BYTE-TYPE :
               cast-to-int $ fn (t, x*, y*) :
                  emit(Op(top, List(x*), List(y*)))
            else : emit(Op(top, List(x*), List(y*)))
         (i:tgt-ConvertIns) :
            val xt = imm-type(tgt-x(i))
            val yt = imm-type(tgt-y(i))
            val x* = to-var(tgt-x(i))
            val y* = force-var(to-imm(tgt-y(i)))
            if tgt-int?(xt) and tgt-int?(yt) :
               emit(Op(tgt-CONV-OP, List(x*), List(y*)))
            else if tgt-float?(xt) and tgt-float?(yt) :
               emit(Op(tgt-CONV-OP, List(x*), List(y*)))
            else if tgt-int?(xt) and tgt-float?(yt) :
               if xt == tgt-BYTE-TYPE :
                  val ix = fresh(tgt-INT-TYPE)
                  emit(Op(tgt-CONV-OP, List(ix), List(y*)))
                  emit(Op(tgt-CONV-OP, List(x*), List(ix)))
               else :
                  emit(Op(tgt-CONV-OP, List(x*), List(y*)))
            else if tgt-float?(xt) and tgt-int?(yt) :
               if yt == tgt-BYTE-TYPE :
                  val iy = fresh(tgt-INT-TYPE)
                  emit(Op(tgt-CONV-OP, List(iy), List(y*)))
                  emit(Op(tgt-CONV-OP, List(x*), List(iy)))
               else :
                  emit(Op(tgt-CONV-OP, List(x*), List(y*)))
         (i:tgt-InterpretIns) :
            val xt = imm-type(tgt-x(i))
            val yt = imm-type(tgt-y(i))
            val x* = to-var(tgt-x(i))
            val y* = force-var(to-imm(tgt-y(i)))
            emit(Op(tgt-INTERPRET-OP, List(x*), List(y*)))
         (i:tgt-Load) :
            val x* = to-var(tgt-x(i))
            val y* = to-imm(tgt-y(i))
            emit(Op(tgt-LoadOp(tgt-offset(i)), List(x*), List(y*)))
         (i:tgt-Store) :
            val x* = to-imm(tgt-x(i))
            val y* = force-operand(to-imm(tgt-y(i)))
            emit(Op(tgt-StoreOp(tgt-offset(i)), List(), List(x*, y*)))
         (i:tgt-Addr) :
            val x* = to-var(tgt-x(i))
            emit(Op(tgt-AddrOp(tgt-n(i)), List(x*), List()))
         (i:tgt-Call) :
            val xs = map(to-var, tgt-xs(i))
            val f = to-imm(tgt-f(i))
            val ys = map(to-imm, tgt-ys(i))
            val type = StanzaCall(tgt-arity(i), false, tgt-new-stack?(i), tgt-info(i))
            emit(Call(xs, f, ys, type))
         (i:tgt-CallStack) :
            val xs = map(to-var, tgt-xs(i))
            val f = to-imm(tgt-f(i))
            val ys = map(to-imm, tgt-ys(i))
            val type = StackCall(false, tgt-info(i))
            emit(Call(xs, f, ys, type))
         (i:tgt-CallC) :
            val xs = map(to-var, tgt-xs(i))
            val f = to-imm(tgt-f(i))
            val ys = map(to-imm, tgt-ys(i))
            emit(Call(xs, f, ys, CCall(tgt-n(i))))
         (i:tgt-TCall) :
            val f = to-imm(tgt-f(i))
            val ys = map(to-imm, tgt-ys(i))
            val type = StanzaCall(tgt-arity(i), true, tgt-new-stack?(i), false)
            emit(Call(List(), f, ys, type))
            close-block(List())
            active-block = fresh-block(fresh-id())
         (i:tgt-TCallStack) :
            val f = to-imm(tgt-f(i))
            val ys = map(to-imm, tgt-ys(i))
            val type = StackCall(true, false)
            emit(Call(List(), f, ys, type))
            close-block(List())
            active-block = fresh-block(fresh-id())
         (i:tgt-Return) :
            val xs = map(to-imm, tgt-xs(i))
            emit(Return(xs, StanzaContext()))
            close-block(List())
            active-block = fresh-block(fresh-id())
         (i:tgt-CReturn) :
            val xs = map(to-imm, tgt-xs(i))
            emit(Return(xs, CContext()))
            close-block(List())
            active-block = fresh-block(fresh-id())
         (i:tgt-Label) :
            close-block(List(tgt-n(i)))
            active-block = fresh-block(tgt-n(i))
         (i:tgt-Goto) :
            close-block(List(tgt-n(i)))
            active-block = fresh-block(fresh-id())
         (i:tgt-Branch) :
            val x* = to-imm(tgt-x(i))
            val y* = to-imm(tgt-y(i))
            val xs* = match(x*, y*) :
               (x*:Val, y*:Val) : List(force-var(x*), y*)
               (x*, y*) : List(x*, y*)
            emit(Branch(tgt-op(i), xs*))
            val alt = fresh-id()
            close-block(List(tgt-n(i), alt))
            active-block = fresh-block(alt)
         (i:tgt-SpecialBranch) :
            emit(Branch(tgt-op(i), List()))
            val alt = fresh-id()
            close-block(List(tgt-n(i), alt))
            active-block = fresh-block(alt)
         (i:tgt-SpecialOp) :
            emit(Op(tgt-op(i), List(), List()))

   ;Return
   close-block(List())
   [type-table, Unit(defs, block-list)]

;============================================================
;=============== Critical Edge Removal ======================
;============================================================

defn remove-critical-edges (u:Unit) :
   ;     Forward past empty blocks
   ;     -------------------------
   val forwards = HashTable<Int,Int>()

   defn resolve (n:Int) :
      match(get?(forwards, n, false)) :
         (f:False) :
            n
         (f:Int) :
            val n* = resolve(f)
            forwards[n] = n*
            n*

   for b in blocks(u) do :
      if empty?(ins(b)) :
         if length(next(b)) == 1 :
            forwards[n(b)] = head(next(b))

   defn next* (b:Block) :
      map(resolve, next(b))

   ;     Count predecessors for blocks
   ;     -----------------------------
   val num-preds = HashTable<Int,Int>()

   for b in blocks(u) do :
      num-preds[n(b)] = get?(num-preds, n(b), 0)
      if not empty?(ins(b)) :
         for n in next*(b) do :
            num-preds[n] = 1 + get?(num-preds, n, 0)

   ;     Insert safe blocks
   ;     ------------------
   val safe-blocks = Vector<Block>()
   val blocks-list = Vector<Block>()

   defn safe-block (next:Int) :
      val n = fresh-id()
      add(safe-blocks, Block(n, Vector<Ins>(), List(next)))
      n

   for b in blocks(u) do :
      add{blocks-list, Block(n(b), ins(b), _)} $
         if length(next(b)) > 1 :
            for n in next*(b) map :
               if num-preds[n] > 1 : safe-block(n)
               else : n
         else :
            next*(b)
   do(add{blocks-list, _}, safe-blocks)

   ;     Return result
   ;     -------------
   Unit(defs(u), blocks-list)


;============================================================
;==================== Index =================================
;============================================================

val VAR-INDICES = IntTable<Int>()
val BLOCK-INDICES = IntTable<Int>()
val BLOCK-TABLE = IntTable<False|Block>()
val VAR-TYPES = Vector<tgt-TgtType>()
val BLOCKS = Vector<Block>()
val PREDECESSORS = Vector<List<Int>>()
var BLOCK-DEFS = BitArray(1024 * 1024)
val BLOCK-INS = Vector<List<Port>>()
val BLOCK-OUTS = Vector<List<Port>>()

val VAR-USES = Vector<List<KeyValue<Int,Int>>>()
val LIVE-IN-BUFFER = Vector<Int>()
val LIVE-OUT-BUFFER = Vector<Int>()
val DIRTY-LIVE-INS = Vector<Int>()
val DIRTY-LIVE-OUTS = Vector<Int>()

defn index-prog (u:Unit) :
   ;Clear Vars and Blocks
   clear(VAR-INDICES)
   clear(BLOCK-INDICES)
   clear(VAR-TYPES)
   clear(BLOCKS)
   clear(BLOCK-TABLE)
   BLOCK-FLAGS = fresh-bit-array(BLOCK-FLAGS, length(blocks(u)), false)

   ;Populate Block Table
   for b in blocks(u) do :
      BLOCK-TABLE[n(b)] = b
   ;Populate Variables
   for def in defs(u) do :
      val [n, t] = [tgt-n(def), tgt-type(def)]
      val n* = length(VAR-TYPES)
      VAR-INDICES[n] = n*
      add(VAR-TYPES, t)      
   ;Populate Blocks in Reverse Post Order
   defn order (n:Int) :
      match(BLOCK-TABLE[n]) :
         (b:Block) :
            BLOCK-TABLE[n] = false
            do(order, next(b))
            add(BLOCKS, b)
         (b:False) :
            false
   order(n(blocks(u)[0]))         
   reverse!(BLOCKS)
   for (b in BLOCKS, i in 0 to false) do :
      BLOCK-INDICES[n(b)] = i

   ;Clear block defs
   val nblocks = length(BLOCKS)
   val nvars = length(VAR-TYPES)
   BLOCK-DEFS = fresh-bit-array(BLOCK-DEFS, nblocks * nvars, false)

   ;Clear block uses
   clear(VAR-USES)
   set-length(VAR-USES, nvars, List())
   ;Clear predecessors
   clear(PREDECESSORS)
   set-length(PREDECESSORS, nblocks, List())

   ;Rename Instruction
   defn rename (i:Ins) :
      for imm in i map :
         match(imm) :
            (imm:Var) : Var(VAR-INDICES[n(imm)])
            (imm) : imm

   ;Rename Blocks
   for blk in BLOCKS map! :
      ;Rename block indices
      val next* = map({BLOCK-INDICES[_]}, next(blk))
      val n* = BLOCK-INDICES[n(blk)]

      ;Mark definitions and usages
      defn mark-defined (v:Var) : BLOCK-DEFS[n* * nvars + n(v)] = true
      defn defined? (v:Var) : BLOCK-DEFS[n* * nvars + n(v)]
      defn mark-used (v:Imm, d:Int) :
         if v is Var :
            val v = v as Var
            if not defined?(v) :
               VAR-USES[n(v)] = cons(n* => d, VAR-USES[n(v)])

      val idx-counter = to-seq(0 to false)
      val ins* = for i in ins(blk) map<Ins> :
         val idx = next(idx-counter)
         val i* = rename(i)
         do-used(mark-used{_, idx}, i*)
         do-defined(mark-defined, i*)
         i*
      for n in next* do :
         PREDECESSORS[n] = cons(n*, PREDECESSORS[n])
      Block(n(blk), ins*, next*)

   ;Propagate liveness
   clear(BLOCK-INS)
   clear(BLOCK-OUTS)
   set-length(BLOCK-INS, nblocks, List())
   set-length(BLOCK-OUTS, nblocks, List())
   if length(LIVE-IN-BUFFER) < nblocks :
      lengthen(LIVE-IN-BUFFER, nblocks, INT-MAX)
      lengthen(LIVE-OUT-BUFFER, nblocks, INT-MAX)

   defn save-lives (v:Int) :
      for b in DIRTY-LIVE-INS do :
         BLOCK-INS[b] = cons(DPort(v, Any(), Any(), NoLoc(), LIVE-IN-BUFFER[b]), BLOCK-INS[b])
         LIVE-IN-BUFFER[b] = INT-MAX
      clear(DIRTY-LIVE-INS)

      for b in DIRTY-LIVE-OUTS do :
         BLOCK-OUTS[b] = cons(DPort(v, Any(), Any(), NoLoc(), LIVE-OUT-BUFFER[b]), BLOCK-OUTS[b])
         LIVE-OUT-BUFFER[b] = INT-MAX
      clear(DIRTY-LIVE-OUTS)

   for v in 0 to nvars do :
      if not empty?(VAR-USES[v]) :
         for entry in VAR-USES[v] do :
            val [b, d] = [key(entry), value(entry)]
            mark-live-in(b, v, d)
         save-lives(v)

lostanza defn mark-live-out (b:ref<Int>, v:ref<Int>, d:ref<Int>) -> ref<False> :   
   val old-value = get(LIVE-OUT-BUFFER, b).value
   if d.value < old-value :
      if old-value == INT-MAX.value :
         add(DIRTY-LIVE-OUTS, b)
      set(LIVE-OUT-BUFFER, b, d)

      val idx = b.value * length(VAR-TYPES).value + v.value
      if get(BLOCK-DEFS, new Int{idx}) == false :
         val d* = new Int{d.value + length(ins(get(BLOCKS, b))).value}
         mark-live-in(b, v, d*)
   return false

lostanza defn mark-live-in (b:ref<Int>, v:ref<Int>, d:ref<Int>) -> ref<False> :
   if get(LIVE-IN-BUFFER, b) == INT-MAX :
      add(DIRTY-LIVE-INS, b)
   set(LIVE-IN-BUFFER, b, d)
   labels :
      begin :
         goto loop(get(PREDECESSORS, b))
      loop (preds:ref<List<Int>>) :
         match(preds) :
            (preds:ref<FullList<Int>>) :
               mark-live-out(head(preds), v, d)
               goto loop(tail(preds))
            (preds:ref<NilList>) :
               return false

defn print-indexed-prog () :
   println("VARS = %_" % [VAR-TYPES])
   for b in 0 to length(BLOCKS) do :
      println("Block %_" % [b])
      println("Predecessors: %_" % [PREDECESSORS[b]])
      println("Ins: %_" % [BLOCK-INS[b]])
      println(BLOCKS[b])
      println("Outs: %_" % [BLOCK-OUTS[b]])
      println("")

;============================================================
;=================== Annotations ============================
;============================================================

var USAGE-BUFFER = Array<False|Int>(1024, false)
var NEW-REQUIRES-SAVE = BitArray(1024)
var NEW-PREFERS-LOAD = Array<True|False|Any>(1024, Any())
val DIRTY-LIVE-LIST = Vector<Int>()
val INS-BUFFER = Vector<Ins>()

defn fresh-array<?T> (a:Array<?T>, n:Int, x:T) :
   if length(a) < n :
      val n* = max(2 * length(a), n)
      Array<T>(n*, x)
   else :
      set-all(a, 0 to n, x)
      a

defn fresh-array<?T> (a:Array<?T>, n:Int) :
   if length(a) < n : 
      val n* = max(2 * length(a), n)
      Array<T>(n*)
   else : a   

defn fresh-bit-array (a:BitArray, n:Int, init:True|False) :
   if n < length(a) :
      clear(a, n, init)
      a
   else :
      val n* = max(2 * length(a), n)
      BitArray(n*, init)

defn give-killed (e:Ins, ks:List<Int>) :
   match(e) :
      (e:Set) : Set(x(e), y(e), ks)
      (e:Args) : Args(xs(e), ctxt(e), ks)
      (e:Return) : Return(xs(e), ctxt(e), ks)
      (e:Call) : Call(xs(e), f(e), ys(e), type(e), ks)
      (e:Op) : Op(op(e), xs(e), ys(e), ks)
      (e:Branch) : Branch(op(e), xs(e), ks)

;TODO: Follow block chain backwards for earlier saves.
defn add-annotations (bi:Int) :
   ;Retrieve block
   val blk = BLOCKS[bi]

   ;Clear state
   val nvars = length(VAR-TYPES)
   USAGE-BUFFER = fresh-array(USAGE-BUFFER, nvars, false)
   NEW-REQUIRES-SAVE = fresh-bit-array(NEW-REQUIRES-SAVE, nvars, false)
   NEW-PREFERS-LOAD = fresh-array(NEW-PREFERS-LOAD, nvars, Any())
   clear(DIRTY-LIVE-LIST)

   ;Clear instruction buffer
   clear(INS-BUFFER)
   defn emit (e:Ins) : add(INS-BUFFER, e)

   ;Live variable management
   defn live? (n:Int) :
      USAGE-BUFFER[n] is Int
      
   defn mark-live (n:Int, i:Int) :
      add(DIRTY-LIVE-LIST, n) when not live?(n)         
      USAGE-BUFFER[n] = i
         
   defn mark-dead (n:Int) :
      USAGE-BUFFER[n] = false

   defn do-live (f: Int -> ?) :
      for x in DIRTY-LIVE-LIST remove-when :
         if live?(x) : (f(x), false)
         else : true

   ;Note usages of output ports
   val num-ins = length(ins(blk))
   for p in BLOCK-OUTS[bi] do :
      mark-live(n(p), dist(p) + num-ins)

   ;Sweep through instructions backwards
   for (e in in-reverse(ins(blk)), i in (num-ins - 1) through 0 by -1) do :
      defn touched (x:Var) :
         ;Unload live variables that do not need loading
         if live?(n(x)) and NEW-PREFERS-LOAD[n(x)] is False :
            emit(Unload(x))
         ;Note usages for defined nad used variables
         val d = USAGE-BUFFER[n(x)]
         if d is Int :
            emit(NextUsed(n(x), d as Int))
            
      defn defined (x:Var) :
         ;Save defined variables that need saving
         if NEW-REQUIRES-SAVE[n(x)] :
            emit(Save(x))
         ;Otherwise kill variables that are never used   
         else if not live?(n(x)) :
            emit(Kill(n(x)))
            
         ;Variable is no longer live
         mark-dead(n(x))
         NEW-REQUIRES-SAVE[n(x)] = false
         NEW-PREFERS-LOAD[n(x)] = false
            
      defn emitted (e:Ins) :
         ;Compute killed
         var killed = List()
         for x in e do-used :
            match(x) :
               (x:Var) :
                  if USAGE-BUFFER[n(x)] is False :
                     killed = cons(n(x), killed)
               (x) : false               
         emit(give-killed(e, killed))

         ;Cross Call Boundary
         if e is Call :
            do-live $ fn (x) :
               NEW-REQUIRES-SAVE[x] = true
               NEW-PREFERS-LOAD[x] = false
      
      defn used (x:Var) :
         mark-live(n(x), i)
         NEW-PREFERS-LOAD[n(x)] = true

      reverse-sweep(e, touched, defined, emitted, used)
      
   ;Update block instructions
   clear(ins(blk))
   add-all(ins(blk), in-reverse(INS-BUFFER))

   ;Update block input ports
   BLOCK-INS[bi] = for x in BLOCK-INS[bi] map :
      val sv-x = NEW-REQUIRES-SAVE[n(x)]
      val ld-x = NEW-PREFERS-LOAD[n(x)]
      DPort(n(x), sv-x, ld-x, NoLoc(), dist(x))

defn add-annotations () :
   do(add-annotations, 0 to length(BLOCKS))


;============================================================
;================== Class Allocation ========================
;============================================================

val DIRTY-LOADED = Vector<Int>()
val DELAY-INS-BUFFER = Vector<Ins>()

defn new-allocate-classes (bi:Int, backend:Backend) :
   ;Retrieve block
   val blk = BLOCKS[bi]

   ;Algorithm State
   val nvars = length(VAR-TYPES)
   clear(INS-BUFFER)
   clear(DIRTY-LOADED)
   NEW-PREFERS-LOAD = fresh-array(NEW-PREFERS-LOAD, nvars, false)
   NEW-REQUIRES-SAVE = fresh-bit-array(NEW-REQUIRES-SAVE, nvars, false)
   USAGE-BUFFER = fresh-array(USAGE-BUFFER, nvars, false)

   ;Track number of registers used
   var num-free-reg = num-regs(backend)
   var num-free-freg = num-fregs(backend)
   defn inc-reg (n:Int) :
      if tgt-int?(VAR-TYPES[n]) : num-free-reg = num-free-reg + 1
      else : num-free-freg = num-free-freg + 1
   defn dec-reg (n:Int) :
      if tgt-int?(VAR-TYPES[n]) : num-free-reg = num-free-reg - 1
      else : num-free-freg = num-free-freg - 1

   ;Track loads
   defn mark-loaded (n:Int) -> True|False :
      if NEW-PREFERS-LOAD[n] is False :
         add(DIRTY-LOADED, n)
         NEW-PREFERS-LOAD[n] = true
         dec-reg(n)
         true
   defn mark-unloaded (n:Int) -> True|False :
      if NEW-PREFERS-LOAD[n] is True :
         NEW-PREFERS-LOAD[n] = false
         inc-reg(n)
         true
   defn do-loaded (f: Int -> ?) :
      for x in DIRTY-LOADED remove-when :
         if NEW-PREFERS-LOAD[x] is True : (f(x), false)
         else : true
   defn mark-all-unloaded () :
      do-loaded(mark-unloaded)

   defn define (x:Var) :
      val n = n(x)
      mark-loaded(n)
      NEW-REQUIRES-SAVE[n] = false      
   defn save (x:Int, buffer:Vector<Ins>) :
      if NEW-REQUIRES-SAVE[x] is False :
         add(buffer, Save(Var(x)))
      NEW-REQUIRES-SAVE[x] = true   
   defn load (x:Int, buffer:Vector<Ins>) :
      if mark-loaded(x) :
         add(buffer, Load(Var(x)))
   defn unload (x:Int, buffer:Vector<Ins>) :
      if mark-unloaded(x) :
         add(buffer, Unload(Var(x)))

   ;Spill
   defn next-spill-reg (type?: tgt-TgtType -> True|False) :
      var reg = false
      var dist = 0
      do-loaded $ fn (x) :
         if type?(VAR-TYPES[x]) :
            val dist* = USAGE-BUFFER[x] as Int
            if dist* > dist :
               reg = x
               dist = dist*
      reg as Int
      
   defn* spill (nr:Int, nf:Int, buffer:Vector<Ins>) :
      if nr > 0 :
         val reg = next-spill-reg(tgt-int?)
         save(reg, buffer)
         unload(reg, buffer)
         spill(nr - 1, nf, buffer)
      else if nf > 0 :
         val reg = next-spill-reg(tgt-float?)
         save(reg, buffer)
         unload(reg, buffer)
         spill(nr, nf - 1, buffer)

   defn* reserve (n:Int, buffer:Vector<Ins>) :
      if tgt-int?(VAR-TYPES[n]) :
         spill(1, 0, buffer) when num-free-reg < 1
      else :
         spill(0, 1, buffer) when num-free-freg < 1

   defn spill-overcommitted (buffer:Vector<Ins>) :
      val nr = max(0, (- num-free-reg))
      val nf = max(0, (- num-free-freg))
      spill(nr, nf, buffer)

   ;Define Entry Ports
   defn fill (p:Port) :
      val ld = NEW-PREFERS-LOAD[n(p)]
      val sv = NEW-REQUIRES-SAVE[n(p)]
      DPort(n(p), sv, ld, loc(p), dist(p))
      
   for p in BLOCK-INS[bi] do :
      val n = n(p)
      mark-loaded(n) when loaded?(p) is True|Any         
      NEW-REQUIRES-SAVE[n] = saved?(p) is True
      USAGE-BUFFER[n] = dist(p)
   spill-overcommitted(DELAY-INS-BUFFER)
   BLOCK-INS[bi] = map(fill, BLOCK-INS[bi])

   ;Sweep through instructions
   for e in ins(blk) do :
      match(e) :
         (e:NextUsed) :
            USAGE-BUFFER[n(e)] = pos(e)
         (e:Unload) :
            unload(n(x(e)), INS-BUFFER)
         (e:Save) :
            save(n(x(e)), INS-BUFFER)
         (e:Kill) :
            mark-unloaded(n(e))
            add(INS-BUFFER,e)
         (e) :
            clear(DELAY-INS-BUFFER)
            ;Load arguments
            for x in e do-used-var :
               reserve(n(x), INS-BUFFER)
               load(n(x), DELAY-INS-BUFFER)
            ;Emit instruction   
            add(DELAY-INS-BUFFER, e)
            ;Unload registers
            if e is Call : mark-all-unloaded()
            else : do(mark-unloaded, killed(e))
            ;Define new variables
            for x in e do-defined :
               reserve(n(x), INS-BUFFER)
               define(x)
            ;Add delayed instructions to buffer
            add-all(INS-BUFFER, DELAY-INS-BUFFER)

   ;Update instructions in block
   clear(ins(blk))
   add-all(ins(blk), INS-BUFFER)

   ;Update output ports
   BLOCK-OUTS[bi] = map(fill, BLOCK-OUTS[bi])

defn new-allocate-classes (backend:Backend) :
   do(new-allocate-classes{_, backend}, 0 to length(BLOCKS))

;============================================================
;=============== Register Assignment ========================
;============================================================

var #VAR-LOCS = Array<Loc>(1024, NoLoc())
var #REG-SLOTS = Array<False|Int>(0)
var #FREG-SLOTS = Array<False|Int>(0)
var #PORT-TABLE = Array<Port>(1024)

defn PrefReg (xs:List<Imm>) :
   val regs = for x in xs seq? :
      match(x) :
         (x:Var) :
            match(loc(x)) :
               (l:Reg|FReg) : One(n(l))
               (l) : None()
         (x) : None()
   FreeReg(to-list(regs))

defn PrefReg (x:Imm) :
   match(x) :
      (x:Var) :
         match(loc(x)) :
            (l:Reg|FReg) : FreeReg(List(n(l)))
            (l) : FreeReg()
      (x) : FreeReg()

defn #register-assignment (bi:Int, ports-in:List<Port>, backend:Backend) :
   ;Retrieve block
   val blk = BLOCKS[bi]
   
   ;Algorithm state
   val nvars = length(VAR-TYPES)
   clear(INS-BUFFER)
   #VAR-LOCS = fresh-array(#VAR-LOCS, nvars, NoLoc())
   #REG-SLOTS = fresh-array(#REG-SLOTS, num-regs(backend), false)
   #FREG-SLOTS = fresh-array(#FREG-SLOTS, num-fregs(backend), false)
   #PORT-TABLE = fresh-array(#PORT-TABLE, nvars)

   ;Emit to instruction buffer
   defn emit (e:Ins) :
      add(INS-BUFFER, e)

   ;Fill an immediate or port with 
   defn fill (x:Port) :
      val loc = #VAR-LOCS[n(x)]
      fatal("Port %_ has not been assigned a location." % [n(x)]) when loc is NoLoc ;DEBUG
      val sv = (saved?(x) is True) or (loc is Stack)
      val ld = loc is Reg|FReg
      DPort(n(x), sv, ld, loc, dist(x))
   defn fill<?T> (x:?T&Imm) -> T :     
      {_ as T&Imm} $ match(x) :
         (x:Var) :
            fatal("Var %_ has no location." % [n(x)]) when #VAR-LOCS[n(x)] is NoLoc ;DEBUG
            Var(n(x), #VAR-LOCS[n(x)])
         (x) : x

   ;Free a register
   defn free (x:Int) :
      match(#VAR-LOCS[x]) :
         (loc:Reg) :
            #REG-SLOTS[n(loc)] = false
            #VAR-LOCS[x] = Stack(x)
         (loc:FReg) :
            #FREG-SLOTS[n(loc)] = false
            #VAR-LOCS[x] = Stack(x)
         (loc) : false

   ;Free all registers
   defn free-all () :
      defn free-regs (regs:Array<Int|False>, nregs:Int) :
         for i in 0 to nregs do :
            match(regs[i]) :
               (x:Int) :
                  regs[i] = false
                  #VAR-LOCS[x] = Stack(x)
               (x:False) : false
      free-regs(#REG-SLOTS, num-regs(backend))
      free-regs(#FREG-SLOTS, num-fregs(backend))

   ;Find the next free register
   ;TODO: Use a free list
   defn free-reg (pref:List<Int>) :
      val reg = for i in pref first :
         One(Reg(i)) when #REG-SLOTS[i] is False else None()
      if empty?(reg) : Reg(index-of!(#REG-SLOTS, false))
      else : value!(reg)
   defn free-freg (pref:List<Int>) :
      val reg = for i in pref first :
         One(FReg(i)) when #FREG-SLOTS[i] is False else None()
      if empty?(reg) : FReg(index-of!(#FREG-SLOTS, false))
      else : value!(reg)

   ;Assign a location
   defn assign (x:Int, l:Loc) :
      match(l) :
         (l:FreeReg) :
            val reg = if tgt-int?(VAR-TYPES[x]) : free-reg(prefer(l))
                      else : free-freg(prefer(l))
            assign(x, reg)          
         (l:Stack) :
            #VAR-LOCS[x] = l
         (l:Reg) :
            #VAR-LOCS[x] = l
            #REG-SLOTS[n(l)] = x
         (l:FReg) :
            #VAR-LOCS[x] = l
            #FREG-SLOTS[n(l)] = x
         (l) :
            fatal("%_ not supported." % [l])

   ;Convenience assigners
   defn assign (x:Var|Port, l:Loc) :
      assign(n(x), l)
   defn assign (xs:List<Var|Port>, l:Loc) :
      do(assign{_, l}, xs)

   ;Assign several locations   
   defn assign (xs:List<Var|Port>, ls:List<Loc>) :
      ;First assign stacks and regs
      for (x in xs, l in ls) do :
         assign(n(x), l) when l is-not FreeReg
      ;Next assign free registers
      for (x in xs, l in ls) do :
         assign(n(x), l) when l is FreeReg

   ;Helper: Move whatever was in src to dst
   defn swap-reg (src:Int, dst:Int) :
      val x = #REG-SLOTS[src] as Int
      match(#REG-SLOTS[dst]) :
         (y:Int) :
            match(index-of(#REG-SLOTS, false)) :
               (s:Int) :
                  emit(Set(Var(y, Reg(s)), Var(y, Reg(dst))))
                  emit(Set(Var(x, Reg(dst)), Var(x, Reg(src))))
                  free(x)
                  free(y)
                  assign(x, Reg(dst))
                  assign(y, Reg(s))
               (s:False) :
                  emit(Xchg(Var(x, Reg(src)), Var(y, Reg(dst)), false))
                  free(x)
                  free(y)
                  assign(x, Reg(dst))
                  assign(y, Reg(src))
         (y:False) :
            emit(Set(Var(x, Reg(dst)), Var(x, Reg(src))))
            free(x)
            assign(x, Reg(dst))
            
   defn ensure-free-regs (regs:List<Int>, ks:List<Int>) :
      ;Will be free after release
      defn free? (r:Int) :
         (#REG-SLOTS[r] is False) or
         contains?(ks, #REG-SLOTS[r])
      ;Safe position to swap with
      defn swap? (r:Int) :
         free?(r) and not contains?(regs, r)
      val swaps = filter(swap?, 0 to length(#REG-SLOTS))
      ;Swap out registers to ensure free
      for r in regs do :
         swap-reg(r, next(swaps)) when not free?(r)

   ;Ensure that the value x is in register r
   defn ensure-reg (x:Int, r:Int) :
      val src = n(#VAR-LOCS[x] as Reg)
      swap-reg(src, r) when src != r

   ;Assign initial ports
   for p in ports-in do :
      #PORT-TABLE[n(p)] = p
   val locs = for p in BLOCK-INS[bi] map :
      match(loaded?(p), loc(#PORT-TABLE[n(p)])) :
         (ld:True, loc:Reg|FReg) : loc
         (ld:True, loc:Stack) : FreeReg()
         (ld:False, loc) : Stack(n(p))
   assign(BLOCK-INS[bi], locs)
   BLOCK-INS[bi] = map(fill, BLOCK-INS[bi])

   ;Sweep through instructions and assign locations
   for e in ins(blk) do :
      match(e) :
         (e:Set) :
            val y* = fill(y(e))
            do(free, killed(e))
            assign(x(e), PrefReg(y*))
            emit(Set(fill(x(e)), y*))
         (e:Op) :
            defn xs-prefers-arg () :
               val ys* = map(fill,ys(e))
               do(free, killed(e))
               assign(xs(e), PrefReg(ys*))
               emit(Op(op(e), map(fill,xs(e)), ys*))
            defn xs-prefers-arg0 () :
               val ys* = map(fill,ys(e))
               do(free, killed(e))
               assign(xs(e), PrefReg(head(ys*)))
               emit(Op(op(e), map(fill,xs(e)), ys*))
            defn xs-prefers-none () :
               val ys* = map(fill,ys(e))
               do(free, killed(e))
               assign(xs(e), FreeReg())
               emit(Op(op(e), map(fill,xs(e)), ys*))
            defn xs-requires-r0-r3 () :
               ensure-free-regs(List(0,3), killed(e))
               val ys* = map(fill,ys(e))
               do(free, killed(e))
               assign(xs(e), List(Reg(0), Reg(3)))
               emit(Op(op(e), map(fill,xs(e)), ys*))
            defn z-in-r2 () :
               match(ys(e)[1]) :
                  (z:Var) : ensure-reg(n(z), 2)
                  (z) : false
               xs-prefers-arg0()                  
            match(op(e)) :
               (opc:tgt-LoadOp) : xs-prefers-arg()
               (opc:tgt-StoreOp) : xs-prefers-none()
               (opc:tgt-AddrOp) : xs-prefers-arg()
               (opc) :
                  switch {opc == _} :
                     tgt-ADD-OP : xs-prefers-arg()
                     tgt-SUB-OP : xs-prefers-arg0()
                     tgt-MUL-OP : xs-prefers-arg()
                     tgt-DIV-OP : xs-prefers-arg0()
                     tgt-AND-OP : xs-prefers-arg()
                     tgt-OR-OP : xs-prefers-arg()
                     tgt-XOR-OP : xs-prefers-arg()
                     tgt-NOT-OP : xs-prefers-arg()
                     tgt-NEG-OP : xs-prefers-arg()
                     tgt-SHL-OP : z-in-r2()
                     tgt-SHR-OP : z-in-r2()
                     tgt-ASHR-OP : z-in-r2()
                     tgt-EQ-OP : xs-prefers-none()
                     tgt-NE-OP : xs-prefers-none()
                     tgt-LT-OP : xs-prefers-none()
                     tgt-GT-OP : xs-prefers-none()
                     tgt-LE-OP : xs-prefers-none()
                     tgt-GE-OP : xs-prefers-none()
                     tgt-ULE-OP : xs-prefers-none()
                     tgt-ULT-OP : xs-prefers-none()
                     tgt-UGT-OP : xs-prefers-none()
                     tgt-UGE-OP : xs-prefers-none()
                     tgt-DIVMOD-OP : xs-requires-r0-r3()
                     tgt-CONV-OP : xs-prefers-arg()
                     tgt-INTERPRET-OP : xs-prefers-arg()
                     tgt-SWITCH-STACK-OP : xs-prefers-none()
                     tgt-ENTER-FROM-C : xs-prefers-none()
                     tgt-NO-OP : false
         (e:Branch) :
            emit(Branch(op(e), map(fill, xs(e))))
            do(free, killed(e))
         (e:Return) :
            emit(Return(map(fill,xs(e)), ctxt(e)))
            do(free, killed(e))
         (e:Args) :
            do(free, killed(e))
            assign(xs(e), FreeReg())
            emit(Args(map(fill,xs(e)), ctxt(e)))
         (e:Call) :
            val f* = fill(f(e))
            val ys* = map(fill,ys(e))
            free-all()
            assign(xs(e), FreeReg())
            emit(Call(map(fill,xs(e)), f*, ys*, type(e)))
         (e:Save) :
            emit(Save(fill(x(e))))
         (e:Load) :
            assign(x(e), FreeReg())
            emit(Load(fill(x(e))))
         (e:Kill) :
            free(n(e))
         (e:Unload) :
            free(n(x(e)))
         (e) :
            fatal("%_ not supported." % [e])

   ;Update block instructions
   clear(ins(blk))
   add-all(ins(blk), INS-BUFFER)

   ;Fill output ports
   BLOCK-OUTS[bi] = map(fill, BLOCK-OUTS[bi])

var BLOCK-FLAGS = BitArray(1024)
defn #register-assignment (backend:Backend) :
   BLOCK-FLAGS = fresh-bit-array(BLOCK-FLAGS, length(BLOCKS), false)
   
   defn assign-regs (bi:Int, ports-in:List<Port>) :
      if not BLOCK-FLAGS[bi] :         
         #register-assignment(bi, ports-in, backend)
         BLOCK-FLAGS[bi] = true
         for n in next(BLOCKS[bi]) do :
            assign-regs(n, BLOCK-OUTS[bi])         

   assign-regs(0, List())

;============================================================
;=========== Register Assignment Verification ===============
;============================================================

defn #verify-register-assignment (bi:Int, backend:Backend) :   
   ;Retrieve block
   val blk = BLOCKS[bi]

   ;Clear state
   val nvars = length(VAR-TYPES)
   #REG-SLOTS = fresh-array(#REG-SLOTS, num-regs(backend), false)
   #FREG-SLOTS = fresh-array(#FREG-SLOTS, num-fregs(backend), false)
   NEW-REQUIRES-SAVE = fresh-bit-array(NEW-REQUIRES-SAVE, nvars, false)
   
   ;Helper: Setting and Retrieving register contents
   defn get-reg (r:Reg|FReg) :
      match(r) :
         (r:Reg) : #REG-SLOTS[n(r)]
         (r:FReg) : #FREG-SLOTS[n(r)]

   defn set-reg (r:Reg|FReg, v:Int|False) :
      match(r) :
         (r:Reg) : #REG-SLOTS[n(r)] = v
         (r:FReg) : #FREG-SLOTS[n(r)] = v

   ;State updaters
   defn define (x:Port) :
      match(saved?(x), loaded?(x), loc(x)) :
         (sv:True, ld:True, loc:FReg|Reg) :
            set-reg(loc, n(x))
            NEW-REQUIRES-SAVE[n(x)] = true
         (sv:False, ld:True, loc:FReg|Reg) :
            set-reg(loc, n(x))
            NEW-REQUIRES-SAVE[n(x)] = false
         (sv:True, ld:False, loc:Stack) :
            NEW-REQUIRES-SAVE[n(x)] = true
         (sv, ld, loc) :
            fatal("Unreachable combination: (%_, %_, %_)" % [sv, ld, loc])

   defn define (x:Var) :
      set-reg(reg!(x), n(x))
      NEW-REQUIRES-SAVE[n(x)] = false

   defn mov (x:Var, y:Imm) :
      set-reg(reg!(x), n(x))
      match(y) :
         (y:Val) :
            NEW-REQUIRES-SAVE[n(x)] = false
         (y:Var) :
            if n(x) != n(y) :
               NEW-REQUIRES-SAVE[n(x)] = false

   defn load (x:Var) :
      set-reg(reg!(x), n(x))

   defn save (x:Var) :
      NEW-REQUIRES-SAVE[n(x)] = true

   defn clear-registers () :
      for i in 0 to num-regs(backend) do :
         #REG-SLOTS[i] = false
      for i in 0 to num-fregs(backend) do :
         #FREG-SLOTS[i] = false

   defn xchg (x:Var, y:Var) :
      match(loc(x), loc(y)) :
         (lx:Reg, ly:Reg) : false
         (lx:FReg, ly:FReg) : false
      val lx = reg!(x)
      val ly = reg!(y)
      val vx = get-reg(lx)
      val vy = get-reg(ly)
      set-reg(lx, vy)
      set-reg(ly, vx)

   ;Checkers   
   defn reg! (x:Var) :
      match(loc(x)) :
         (l:FReg|Reg) : l
         (l) : fatal("Block %_: Variable %_ is not in a register." % [n(blk), x])
         
   defn saved! (x:Int) :
      if NEW-REQUIRES-SAVE[x] is-not True :
         fatal("Block %_: %~ has not been saved." % [n(blk), x])
   defn saved! (x:Var) : saved!(n(x))

   defn not-saved! (x:Int) :
      if NEW-REQUIRES-SAVE[x] is-not False :
         fatal("Block %_: %~ should not be saved." % [n(blk), x])

   defn holds! (r:FReg|Reg, x:Int) :
      val y = get-reg(r)
      if y != x :
         fatal("Block %_: Register %_ should hold %_ but holds %_." % [n(blk), r, x, y])

   defn check! (p:Port) :
      match(saved?(p), loaded?(p), loc(p)) :
         (sv:True, ld:True, lc:FReg|Reg) :
            holds!(lc, n(p))
            saved!(n(p))
         (sv:False, ld:True, lc:FReg|Reg) :
            holds!(lc, n(p))
            not-saved!(n(p))
         (sv:True, ld:False, lc:Stack) :
            saved!(n(p))

   defn check! (x:Imm) :
      match(x) :
         (x:Var) :
            match(loc(x)) :
               (l:FReg|Reg) : holds!(l, n(x))
               (l:Stack) : saved!(n(x))
         (x:Val) : false

   ;     Layer 2
   ;     -------
   ;Input ports
   do(define, BLOCK-INS[bi])

   ;Check each instruction
   for e in ins(blk) do :
      match(e) :
         (e:Set) :
            check!(y(e))
            mov(x(e), y(e))
         (e:Xchg) :
            check!(x(e))
            check!(y(e))
            xchg(x(e), y(e))
         (e:Op) :
            do(check!, ys(e))
            do(define, xs(e))
         (e:Branch) :
            do(check!, xs(e))
         (e:Return) :
            do(check!, xs(e))
         (e:Save) :
            check!(x(e))
            save(x(e))
         (e:Load) :
            saved!(x(e))
            load(x(e))
         (e:Args) :
            do(define, xs(e))
         (e:Call) :
            check!(f(e))
            do(check!, ys(e))
            clear-registers()
            do(define, xs(e))

   ;Output ports
   do(check!, BLOCK-OUTS[bi])

defn #verify-register-assignment (backend:Backend) :
   do(#verify-register-assignment{_, backend}, 0 to length(BLOCKS))

;============================================================
;============== Stack Interval Calculation ==================
;============================================================

var #VAR-START = Array<Int>(1024)
var #VAR-END = Array<Int>(1024)
var #IN-PORT-POS = Array<Int>(1024)
var #OUT-PORT-POS = Array<Int>(1024)
var #INTERVALS = Vector<List<Interval>>()

defn #stack-intervals () :
   ;Clear algorithm state
   val nvars = length(VAR-TYPES)
   val nblocks = length(BLOCKS)
   #VAR-START = fresh-array(#VAR-START, nvars, INT-MAX)
   #VAR-END = fresh-array(#VAR-END, nvars, INT-MIN)
   clear(#INTERVALS)

   ;Compute port positions
   #IN-PORT-POS = fresh-array(#IN-PORT-POS, nblocks, 0)
   #OUT-PORT-POS = fresh-array(#OUT-PORT-POS, nblocks, 0)
   var pos = 0
   for b in 0 to length(BLOCKS) do :
      #IN-PORT-POS[b] = pos
      #OUT-PORT-POS[b] = pos + length(ins(BLOCKS[b]))
      pos = pos + length(ins(BLOCKS[b]))
      
   ;For each block
   val pos-counter = to-seq(0 to false)
   for bi in 0 to length(BLOCKS) do :
      ;Retrieve block
      val blk = BLOCKS[bi]
      
      ;Note usages
      defn note-usage (x:Int, i:Int) :
         #VAR-START[x] = min(i,#VAR-START[x])
         #VAR-END[x] = max(i,#VAR-END[x])
         
      defn note-in-port-usage (x:Int) :
         note-usage(x, #IN-PORT-POS[bi])
         for pred in PREDECESSORS[bi] do :
            note-usage(x, #OUT-PORT-POS[pred])
            
      defn note-out-port-usage (x:Int) :
         note-usage(x, #OUT-PORT-POS[bi])
         for succ in next(blk) do :
            note-usage(x, #IN-PORT-POS[succ])

      ;Note input port usages
      ;TODO: Saved is never Any so just get rid of that.
      for p in BLOCK-INS[bi] do :
         note-in-port-usage(n(p)) when saved?(p) is True
      ;Note instruction usages   
      for e in ins(blk) do :
         val pos = next(pos-counter)
         match(e) :
            (e:Save) : note-usage(n(x(e)), pos)
            (e:Load) : note-usage(n(x(e)), pos)
            (e) : false
      ;Note output port usages      
      for p in BLOCK-OUTS[bi] do :
         note-out-port-usage(n(p)) when saved?(p) is True

   ;Retrieve number of positions
   val num-pos = next(pos-counter) + 1
   set-length(#INTERVALS, num-pos, List())
   defn add-interval (p:Int, int:Interval) :
      #INTERVALS[p] = cons(int, #INTERVALS[p])
   defn stack-allocated? (v:Int) :
      #VAR-START[v] <= #VAR-END[v]
   for v in 0 to nvars do :
      add-interval(#VAR-END[v], EndInterval(v)) when stack-allocated?(v)
   for v in 0 to nvars do :
      add-interval(#VAR-START[v], StartInterval(v)) when stack-allocated?(v)

defn print-stack-intervals () :
   println("Stack Intervals")
   for (ints in #INTERVALS, i in 0 to false) do :
      for int in ints do :
         println("%_: %_" % [i, int])

;============================================================
;==================== Stack Map =============================
;============================================================

var #OCCUPIED-LOCS = Vector<True|False>() ;(occupied[i] = true) => location i is occupied
val #LOC-TYPES = Vector<tgt-TgtType>()    ;type of location i = types[i]
var #VAR-STACK-LOCS = Array<Int>(1024)    ;(var-loc[x] = i) => variable x is at location i
val #ITEM-BUFFER = Vector<Item>()
var #LOC-OFFSETS = Array<Int>(16)          ;(offset[i] = off) => offset of location i is off

defn #calculate-stack-map () :
   ;Clear state
   val nvars = length(VAR-TYPES)
   clear(#OCCUPIED-LOCS)
   clear(#LOC-TYPES)
   #VAR-STACK-LOCS = fresh-array(#VAR-STACK-LOCS, nvars)

   ;Get next free location
   defn next-free-loc (t:tgt-TgtType) :
      val t* = tgt-IntType(t)
      val n = length(#OCCUPIED-LOCS)
      val i = for i in 0 to n find :
         (not #OCCUPIED-LOCS[i]) and
         #LOC-TYPES[i] == t*
      match(i) :
         (i:Int) : i
         (i:False) :
            add(#OCCUPIED-LOCS, false)
            add(#LOC-TYPES, t*)
            n
            
   ;Assign stack locations to variables
   #stack-intervals()
   for ints in #INTERVALS do :
      for int in ints do :
         match(int) :
            (int:StartInterval) :
               val loc = next-free-loc(VAR-TYPES[n(int)])
               #VAR-STACK-LOCS[n(int)] = loc
               #OCCUPIED-LOCS[loc] = true
            (int:EndInterval) :
               val loc = #VAR-STACK-LOCS[n(int)]
               #OCCUPIED-LOCS[loc] = false
               
   ;Compute stack offsets
   clear(#ITEM-BUFFER)
   for (t in #LOC-TYPES, i in 0 to false) do :
      add(#ITEM-BUFFER, Item(tgt-size(t), i))
   qsort!(alignment, #ITEM-BUFFER)
   val [items, aln] = pad(#ITEM-BUFFER, 8)

   ;Compute cumulative offsets
   var accum = 16 ;[Return, StackMap]
   #LOC-OFFSETS = fresh-array(#LOC-OFFSETS, length(#LOC-TYPES), 0)
   for it in items do :
      match(it) :
         (it:Item) :
            val i = data(it) as Int
            #LOC-OFFSETS[i] = accum
            accum = accum + alignment(it)
         (it:Padding) :
            accum = accum + size(it)
   if accum % 8 != 0 :
      fatal("Stack has not been padded to multiple of 8.")

   ;Return table
   new StackMap :
      defmethod ref-offsets (this) :
         for item in items seq? :
            if item is Item :
               val loc = data(item as Item) as Int
               if #LOC-TYPES[loc] == tgt-REF-TYPE :
                  One(#LOC-OFFSETS[loc])
               else : None()
            else : None()
      defmethod mask (this) :
         val stack-types = to-list $ for item in items seq :
            match(item) :
               (item:Item) : #LOC-TYPES[data(item) as Int]
               (item:Padding) : tgt-IntType(size(item))
         val refs = tgt-ref-mask(stack-types)
         val bits = tgt-to-bitmask(refs)
         val n = length(refs)
         [n, bits]
      defmethod location (this, n:Int) :
         #VAR-STACK-LOCS[n]
      defmethod num-locations (this) :
         length(#LOC-TYPES)
      defmethod type (this, n:Int) :
         #LOC-TYPES[location(this, n)]
      defmethod offset (this, x:Stack) :
         #LOC-OFFSETS[location(this, n(x))]
      defmethod size (this) :
         accum

;============================================================
;================= Enforce Clearing =========================
;============================================================

var #LOC-LIVE = BitArray(1024)

defn #enforced-clearing (bi:Int, smap:StackMap) :
   ;Retrieve block
   val blk = BLOCKS[bi]
   
   ;Live Stack Locations
   #LOC-LIVE = fresh-bit-array(#LOC-LIVE, num-locations(smap), false)
   defn mark-live (n:Int) : #LOC-LIVE[location(smap, n)] = true
   defn mark-dead (n:Int) : #LOC-LIVE[location(smap, n)] = false
   defn var-live? (x:Var) : #LOC-LIVE[location(smap, n(x))]

   ;Utilities
   defn ref-var? (x:Var) : VAR-TYPES[n(x)] == tgt-REF-TYPE

   ;Initialize location liveness according to ports
   for port in BLOCK-OUTS[bi] do :
      mark-live(n(port)) when saved?(port) is True

   ;Sweep through instructions in reverse
   clear(INS-BUFFER)
   for e in in-reverse(ins(blk)) do :
      if e is Load :
         val e = e as Load
         if ref-var?(x(e)) and not var-live?(x(e)) :
            add(INS-BUFFER, Clear(x(e)))
      add(INS-BUFFER, e)
      match(e) :
         (e:Load) : mark-live(n(x(e)))
         (e:Save) : mark-dead(n(x(e)))
         (e) : false

   ;Update block instructions
   clear(ins(blk))
   add-all(ins(blk), in-reverse(INS-BUFFER))

defn #enforced-clearing (smap:StackMap) :
   do(#enforced-clearing{_, smap}, 0 to length(BLOCKS))


;============================================================
;================= Block Collapsing =========================
;============================================================

val #LOAD-BUFFER = Vector<Ins>()
val #SAVE-BUFFER = Vector<Ins>()
val #CLEAR-BUFFER = Vector<Ins>()
val #BLOCK-IDX-BUFFER = Vector<Int>()

defn ordered-block-indices () :
   ;Clear block flags
   BLOCK-FLAGS = fresh-bit-array(BLOCK-FLAGS, length(BLOCKS), false)
   clear(#BLOCK-IDX-BUFFER)
   defn order (bi:Int) :
      if not BLOCK-FLAGS[bi] :
         BLOCK-FLAGS[bi] = true
         do(order, next(BLOCKS[bi]))
         add(#BLOCK-IDX-BUFFER, bi)
   order(0)
   reverse!(#BLOCK-IDX-BUFFER)
   #BLOCK-IDX-BUFFER

defn #collapse-blocks (smap:StackMap) :
   ;     Manage instruction buffer
   clear(INS-BUFFER)
   defn emit (e:Ins) : add(INS-BUFFER, e)
   defn emit-all (es:Seqable<Ins>) : add-all(INS-BUFFER, es)
   
   ;     Parallel Port Glue Engine
   ;     -------------------------
   ;Perform xs = ys in parallel, with handling of loads, stores, and clears
   defn glue-ports (xs:List<Port>, ys:List<Port>) :
      ;Clear state
      val nvars = length(VAR-TYPES)
      #PORT-TABLE = fresh-array(#PORT-TABLE, nvars)
      clear(#LOAD-BUFFER)
      clear(#SAVE-BUFFER)
      clear(#CLEAR-BUFFER)
      var shuffle-xs = List()
      var shuffle-ys = List()
      var fshuffle-xs = List()
      var fshuffle-ys = List()

      ;Utilities
      defn ref-var? (n:Int) : VAR-TYPES[n] == tgt-REF-TYPE

      ;Populate port table
      for y in ys do :
         #PORT-TABLE[n(y)] = y

      ;Populate instruction buffers
      for x in xs do :
         val y = #PORT-TABLE[n(x)]
         val vx = Var(n(x), loc(x))
         val vy = Var(n(y), loc(y))         
         ;1. Emit any saves or clears required
         match(saved?(x), saved?(y)) :
            (sx:True, sy:False) : add(#SAVE-BUFFER, Save(vy))
            (sx:False, sy:True) : add(#CLEAR-BUFFER, Clear(vx)) when ref-var?(n(x))
            (sx, sy) : false
         ;2. Emit any loads required
         match(loaded?(x), loaded?(y)) :
            (lx:True, ly:False) : add(#LOAD-BUFFER, Load(vx))
            (lx, ly) : false
         ;3. Emit any shuffles required
         match(loc(x), loc(y)) :
            (lx:Reg, ly:Reg) :
               shuffle-xs = cons(n(lx), shuffle-xs)
               shuffle-ys = cons(n(ly), shuffle-ys)
            (lx:FReg, ly:FReg) :
               fshuffle-xs = cons(n(lx), fshuffle-xs)
               fshuffle-ys = cons(n(ly), fshuffle-ys)
            (lx, ly) : false
            
      ;Output buffers to main instruction buffer
      emit-all(#SAVE-BUFFER)
      emit(ShuffleReg(shuffle-xs, shuffle-ys)) when not empty?(shuffle-xs)
      emit(ShuffleFReg(fshuffle-xs, fshuffle-ys)) when not empty?(fshuffle-xs)
      emit-all(#LOAD-BUFFER)
      emit-all(#CLEAR-BUFFER)

   ;     Collapse all Blocks
   ;     -------------------
   defn block-lbl (b:Int) : n(BLOCKS[b])
   
   val ordered-indices = ordered-block-indices()
   for (bi in ordered-indices, i in 0 to false) do :
      ;Retrieve block
      val blk = BLOCKS[bi]
      
      ;Determine whether block bi is coming up next
      defn upcoming? (bi:Int) :
         if i < length(ordered-indices) - 1 :
            bi == ordered-indices[i + 1]
            
      ;Emit block label
      emit(Label(n(blk)))
      
      ;Emit entry glue logic
      if length(PREDECESSORS[bi]) == 1 :
         val pred = head(PREDECESSORS[bi])
         if length(next(BLOCKS[pred])) > 1 :
            glue-ports(BLOCK-INS[bi], BLOCK-OUTS[pred])

      ;Emit instructions
      for e in ins(blk) do :
         match(e) :
            ;Branches need to be laid out
            (e:Branch) :
               val conseq = next(blk)[0]
               val alt = next(blk)[1]
               match(upcoming?(conseq), upcoming?(alt)) :
                  (fc:True, fa:False) :
                     emit(Break(block-lbl(alt), op(e), xs(e), true))
                  (fc:False, fa:True) :
                     emit(Break(block-lbl(conseq), op(e), xs(e), false))
                  (fc:False, fa:False) :
                     emit(Break(block-lbl(conseq), op(e), xs(e), false))
                     emit(Goto(block-lbl(alt)))
            (e) : emit(e)

      ;Emit exit glue logic
      if length(next(blk)) == 1 :
         val n = head(next(blk))
         glue-ports(BLOCK-INS[n], BLOCK-OUTS[bi])
         emit(Goto(block-lbl(n))) when not upcoming?(n)            

   ;Return instruction buffer
   INS-BUFFER

;============================================================
;================= Shuffling Engine =========================
;============================================================

deftype ShuffleIns
defstruct ShfMove <: ShuffleIns :
   dst:Int
   src:Int
defstruct ShfSave <: ShuffleIns :
   n:Int
defstruct ShfLoad <: ShuffleIns :
   n:Int

defmethod print (o:OutputStream, i:ShuffleIns) :
   print{o, _} $ match(i) :
      (i:ShfMove) : "%~ = %~" % [dst(i), src(i)]
      (i:ShfSave) : "save %~" % [n(i)]
      (i:ShfLoad) : "load %~" % [n(i)]

;Buffers
var PRED = Array<False|Int>(0)
var DONE = BitArray(64)
var LOADS = BitArray(64)
var SUCC? = BitArray(64) ;(Succ?[r] = true) => Register r has a successor

defn shuffle (xs:List<Int>, ys:List<Int>, nreg:Int, f: ShuffleIns -> ?) :
   ;Predecessor and Successor table
   PRED = fresh-array(PRED, nreg, false)
   DONE = fresh-bit-array(DONE, nreg, false)
   LOADS = fresh-bit-array(LOADS, nreg, false)
   SUCC? = fresh-bit-array(SUCC?, nreg, false)

   ;Initialize Predecessors
   for (x in xs, y in ys) do :
      if x == y : DONE[x] = true
      else : PRED[x] = y

   ;Find a simple destination.
   ;A destination that has no successor.
   defn simple-dst () :
      ;Determine which registers have successors
      for i in 0 to nreg do :
         SUCC?[i] = false
      for i in 0 to nreg do :
         match(PRED[i]) :
            (p:Int) : SUCC?[p] = true
            (p:False) : false
      ;Find a register with a predecessor but no successor      
      for i in 0 to nreg find :
         PRED[i] is-not False and 
         (not SUCC?[i])

   ;Find a remaining destination.
   defn remaining-dst () :
      for i in 0 to nreg find :
         PRED[i] is-not False
         
   ;Find a swap register
   ;It cannot be fulfilled as a destination (done)
   ;and it cannot have a successor.
   defn swap-reg () :
      for i in 0 to nreg find :
         (not SUCC?[i]) and
         DONE[i] is False

   ;Iterate until predecessors fulfilled.
   defn* loop () :
      ;Move src to dst and update pred table
      defn move (dst:Int, src:Int) :
         f(ShfMove(dst, src))
         for i in 0 to nreg do :
            if PRED[i] == src :
               PRED[i] = dst

      ;Save register and update pred table
      defn save (r:Int) :
         f(ShfSave(r))
         for i in 0 to nreg do :
            if PRED[i] == r :
               PRED[i] = false
               LOADS[i] = true               

      ;Fills the dst register with its final value
      defn* fill (r:Int) :
         match(PRED[r]) :
            (p:Int) :
               move(r, p)
               PRED[r] = false
               DONE[r] = true
               fill(p)
            (p:False) :
               false
               
      match(simple-dst()) :
         (r:Int) :
            fill(r)
            loop()
         (r:False) :
            match(remaining-dst(), swap-reg()) :
               (r:Int, s:Int) :
                  move(s, r)
                  loop()
               (r:Int, s:False) :
                  save(r)
                  loop()
               (r, s) :
                  false
   loop()

   ;Load saved registers
   for i in 0 to nreg do :
      if LOADS[i] :
         f(ShfLoad(i))

;============================================================
;============================================================
;============================================================



;     Compilation
;     -----------
defn assemble (func-id:Int,
               backend:Backend,
               ins:Vector<Ins>,
               stackmap:StackMap,
               output:Vector<asm-Ins>,
               infos:Vector<KeyValue<Int,FileInfo>>) -> False :

   ;     Output State
   ;     ------------
   defn emit (i:asm-Ins) :
      add(output, i)

   ;     Types Classification
   ;     --------------------
   defn int? (t:asm-AsmType) :
      contains?([asm-BYTE-TYPE, asm-INT-TYPE, asm-LONG-TYPE], t)
   defn float? (t:asm-AsmType) :
      contains?([asm-FLOAT-TYPE, asm-DOUBLE-TYPE], t)
   defn int? (x:AVal) : int?(type(x))
   defn float? (x:AVal) : float?(type(x))

   ;     Calling Convention
   ;     ------------------
   defn call-locations (xs:List<AVal>) :
      val regs = to-seq(call-regs(backend))
      val fregs = to-seq(call-fregs(backend))
      for x in xs map :
         if int?(x) : RegAV(next(regs), type(x))
         else : FRegAV(next(fregs), type(x))
   defn call-locations (f:AVal, xs:List<AVal>) :
      cons(RegAV(1, asm-LONG-TYPE), call-locations(xs))

   defn callc-locations (xs:List<AVal>) :
      val regs = to-seq(callc-regs(backend))
      val fregs = to-seq(callc-fregs(backend))
      for x in xs map :
         if int?(x) : RegAV(next(regs), type(x))
         else : FRegAV(next(fregs), type(x))
   defn callc-locations (f:AVal, xs:List<AVal>) :
      cons(RegAV(1, asm-LONG-TYPE), callc-locations(xs))
   defn callc-ret-locations (xs:List<AVal>) :
      fatal("Wrong number of returns.") when length(xs) > 1
      for x in xs map :
         if int?(x) : RegAV(0, type(x))
         else : FRegAV(0, type(x))

   defn carg-locations (xs:List<AVal>) :
      val [sp, args] = [head(xs), tail(xs)]
      cons(RegAV(6, type(sp))
           callc-locations(args))

   ;     Value Engine
   ;     ------------
   defn aval (x:Imm|Port) :
      defn asm-type (t:tgt-TgtType) :
         switch {t == _} :
            tgt-BYTE-TYPE : asm-BYTE-TYPE
            tgt-INT-TYPE : asm-INT-TYPE
            tgt-LONG-TYPE : asm-LONG-TYPE
            tgt-REF-TYPE : asm-LONG-TYPE
            tgt-FLOAT-TYPE : asm-FLOAT-TYPE
            tgt-DOUBLE-TYPE : asm-DOUBLE-TYPE

      match(x) :
         (x:Var|Port) :
            val t = asm-type(VAR-TYPES[n(x)])
            match(loc(x)) :
               (l:Reg) : RegAV(n(l), t)
               (l:FReg) : FRegAV(n(l), t)
               (l:Stack) : StackAV(offset(stackmap, l), t)
         (x:Val) :
            match(value(x)) :
               (x:tgt-ByteImm) : ImmAV(to-int(tgt-value(x)), asm-BYTE-TYPE)
               (x:tgt-IntImm) : ImmAV(tgt-value(x), asm-INT-TYPE)
               (x:tgt-LongImm) : ImmAV(tgt-value(x), asm-LONG-TYPE)
               (x:tgt-Mem) : MemAV(tgt-n(x), tgt-offset(x))
               (x:tgt-ExMem) : ExMemAV(tgt-name(x), tgt-offset(x))
               (x:tgt-RSP) : RSPAV()

   defn stack-aval (x:Var) :
      aval(Var(n(x), Stack(n(x))))

   defn to-asm-op (op:tgt-TgtOp) :
      switch {op == _} :
         tgt-ADD-OP : asm-ADD-OP
         tgt-SUB-OP : asm-SUB-OP
         tgt-MUL-OP : asm-MUL-OP
         tgt-DIV-OP : asm-DIV-OP
         tgt-MOD-OP : asm-MOD-OP
         tgt-AND-OP : asm-AND-OP
         tgt-OR-OP : asm-OR-OP
         tgt-XOR-OP : asm-XOR-OP
         tgt-SHL-OP : asm-SHL-OP
         tgt-SHR-OP : asm-SHR-OP
         tgt-ASHR-OP : asm-ASHR-OP
         tgt-EQ-OP : asm-EQ-OP
         tgt-NE-OP : asm-NE-OP
         tgt-LT-OP : asm-LT-OP
         tgt-GT-OP : asm-GT-OP
         tgt-LE-OP : asm-LE-OP
         tgt-GE-OP : asm-GE-OP
         tgt-ULE-OP : asm-ULE-OP
         tgt-ULT-OP : asm-ULT-OP
         tgt-UGT-OP : asm-UGT-OP
         tgt-UGE-OP : asm-UGE-OP
         tgt-NOT-OP : asm-NOT-OP
         tgt-NEG-OP : asm-NEG-OP

   defn av-mov (x:AVal, y:AVal) :
      defn mem-base (x:AVal) :
         match(x) :
            (x:StackAV) : asm-RegSP()
            (x:Swap) : asm-Mem(SWAP-LBL, 0)
      defn mem-offset (x:AVal) :
         match(x) :
            (x:StackAV) : offset(x)
            (x) : 0
      match(x, y) :
         (x:RSPAV|RegAV|FRegAV, y:RSPAV|RegAV|FRegAV|ImmAV|MemAV|ExMemAV) :
            emit(asm-SetIns(type(x), loc!(x), imm!(y)))
         (x:RSPAV|RegAV|FRegAV, y:StackAV|Swap) :
            emit(asm-Load(type(x), loc!(x), mem-base(y), mem-offset(y)))
         (x:StackAV|Swap, y:RSPAV|RegAV|FRegAV|ImmAV) :
            emit(asm-Store(type(y), mem-base(x), imm!(y), mem-offset(x)))
         (x, y) :
            fatal("Illegal mov: %_ = %_" % [x, y])

   defn av-binop (x:AVal, op:tgt-TgtOp, y:AVal, z:AVal) :
      emit(asm-BinOp(type(y), loc!(x), to-asm-op(op), imm!(y), imm!(z)))

   defn av-unaop (x:AVal, op:tgt-TgtOp, y:AVal) :
      emit(asm-UnaOp(type(y), loc!(x), to-asm-op(op), imm!(y)))

   defn av-add (x:AVal, y:AVal, z:AVal) :
      av-binop(x, tgt-ADD-OP, y, z)

   defn av-sub (x:AVal, y:AVal, z:AVal) :
      av-binop(x, tgt-SUB-OP, y, z)

   defn av-shl (x:AVal, y:AVal, z:AVal) :
      av-binop(x, tgt-SHL-OP, y, z)

   defn av-divmod (x1:AVal, x2:AVal, y:AVal, z:AVal) :
      emit(asm-DualOp(type(x1), loc!(x1), loc!(x2), asm-DIVMOD-OP, imm!(y), imm!(z)))

   defn av-load (v:AVal, a:AVal, o:Int) :
      emit(asm-Load(type(v), loc!(v), imm!(a), o))

   defn av-store (a:AVal, v:AVal, o:Int) :
      emit(asm-Store(type(v), imm!(a), imm!(v), o))

   defn av-conv (x:AVal, y:AVal) :
     emit(asm-ConvertIns(type(x), loc!(x), type(y), imm!(y)))

   defn av-interpret (x:AVal, y:AVal) :
     emit(asm-ReinterpretIns(type(x), loc!(x), type(y), imm!(y)))

   defn av-label (n:Int) :
     emit(asm-Label(n))

   defn av-goto (v:AVal) :
      emit(asm-Goto(imm!(v)))

   defn av-break (n:Int, op:tgt-TgtOp, x:AVal, y:AVal) :
      emit(asm-Branch(type(x), asm-Mem(n,0), to-asm-op(op), imm!(x), imm!(y)))

   defn av-long (v:Int) :
      ImmAV(v, asm-LONG-TYPE)

   defn av-return () :
      emit(asm-Return())

   defn av-call (f:AVal) :
      emit(asm-Call(imm!(f)))

   defn av-xchg (x:AVal, y:AVal) :
      emit(asm-XchgIns(loc!(x), loc!(y)))

   defn av-data () : emit(asm-DefData())
   defn av-text () : emit(asm-DefText())
   defn av-lit-long (i:Long) : emit(asm-DefLong(i))

   ;     Shuffle Engine
   ;     --------------
   defn shuffle-reg (xs:List<Int>, ys:List<Int>) :
      shuffle{xs, ys, num-regs(backend), _} $ fn (i) :
         val LT = asm-LONG-TYPE
         match(i) :
            (i:ShfMove) : av-mov(RegAV(dst(i), LT), RegAV(src(i), LT))
            (i:ShfSave) : av-mov(Swap(LT), RegAV(n(i), LT))
            (i:ShfLoad) : av-mov(RegAV(n(i), LT), Swap(LT))
            
   defn shuffle-freg (xs:List<Int>, ys:List<Int>) :
      shuffle{xs, ys, num-fregs(backend), _} $ fn (i) :
         val DT = asm-DOUBLE-TYPE
         match(i) :
            (i:ShfMove) : av-mov(FRegAV(dst(i), DT), FRegAV(src(i), DT))
            (i:ShfSave) : av-mov(Swap(DT), FRegAV(n(i), DT))
            (i:ShfLoad) : av-mov(FRegAV(n(i), DT), Swap(DT))

   defn shuffle-vals (xs:List<AVal>, ys:List<AVal>) :
      var rxs:List<Int> = List()
      var rys:List<Int> = List()
      var fxs:List<Int> = List()
      var fys:List<Int> = List()
      var oxs:List<AVal> = List()
      var oys:List<AVal> = List()      

      for (x in xs, y in ys) do :
         match(x, y) :
            (x:RegAV, y:RegAV) :
               rxs = cons(n(x), rxs)
               rys = cons(n(y), rys)
            (x:FRegAV, y:FRegAV) :
               fxs = cons(n(x), fxs)
               fys = cons(n(y), fys)
            (x, y) :
               oxs = cons(x, oxs)
               oys = cons(y, oys)
               
      shuffle-reg(rxs, rys) when not empty?(rxs)
      shuffle-freg(fxs, fys) when not empty?(rys)
      do(av-mov, oxs, oys)

   ;     Generate Header
   ;     ---------------
   val stack-map-id = fresh-id()
   let :
      val [n, bits] = mask(stackmap)
      av-data()
      av-label(stack-map-id)
      av-lit-long(to-long(n))
      do(av-lit-long, bits)
      av-text()
      av-label(func-id)

   ;     Convert Instructions
   ;     --------------------
   for e in ins do :
      match(e) :
         (e:Set) :
            av-mov(aval(x(e)), aval(y(e)))
         (e:Return) :
            val xs* = map(aval, xs(e))
            match(ctxt(e)) :
               (c:StanzaContext) :
                  val ts* = call-locations(xs*)
                  shuffle-vals(ts*, xs*)
                  av-return()
               (c:CContext) :
                  ;Convenient registers
                  val RSP = RSPAV()
                  val R1 = RegAV(1, asm-LONG-TYPE)
                  val R6 = RegAV(6, asm-LONG-TYPE)
                  val R11 = RegAV(11, asm-LONG-TYPE)
                  val R12 = RegAV(12, asm-LONG-TYPE)
                  val R13 = RegAV(13, asm-LONG-TYPE)
                  val R14 = RegAV(14, asm-LONG-TYPE)

                  ;First argument is the stack pointer
                  val [sp, rets] = [head(xs*), tail(xs*)]
                  ;Restore c stack pointer
                  av-mov(RSP, sp)
                  ;Shuffle return arguments to correct location
                  shuffle-vals(callc-ret-locations(rets), rets)
                  ;Restore C context
                  av-load(R1, RSP, -8)
                  av-load(R6, RSP, -16)
                  av-load(R11, RSP, -24)
                  av-load(R12, RSP, -32)
                  av-load(R13, RSP, -40)
                  av-load(R14, RSP, -48)
                  ;Return to C
                  av-return()
         (e:Op) :
            match(op(e)) :
               (op:tgt-LoadOp) :
                  val [x, y, o] = [xs(e)[0], ys(e)[0], tgt-offset(op)]
                  av-load(aval(x), aval(y), o)
               (op:tgt-StoreOp) :
                  val [x, y, o] = [ys(e)[0], ys(e)[1], tgt-offset(op)]
                  av-store(aval(x), aval(y), o)
               (op:tgt-AddrOp) :
                  val x = xs(e)[0]
                  av-mov(aval(x), MemAV(tgt-n(op), 0))
               (op) :
                  if op == tgt-DIVMOD-OP :
                     val [x1, x2, y, z] = [xs(e)[0], xs(e)[1], ys(e)[0], ys(e)[1]]
                     av-divmod(aval(x1), aval(x2), aval(y), aval(z))

                  else if op == tgt-CONV-OP :
                     val [x, y] = [head(xs(e)), head(ys(e))]
                     av-conv(aval(x), aval(y))

                  else if op == tgt-INTERPRET-OP :
                     val [x, y] = [head(xs(e)), head(ys(e))]
                     av-interpret(aval(x), aval(y))

                  else if op == tgt-SWITCH-STACK-OP :
                     val R0 = RegAV(0, asm-LONG-TYPE)
                     val R1 = RegAV(1, asm-LONG-TYPE)
                     val RSP = RSPAV()

                     ;1. Decrement number of free stacks
                     av-load(R0, MemAV(NUM-FREE-STACKS-LBL,0), 0)
                     av-sub(R0, R0, av-long(1))
                     av-store(MemAV(NUM-FREE-STACKS-LBL,0), R0, 0)

                     ;2. Retrieve the next free stack
                     ;R0 = next free stack
                     ;temporary R1 = stack pool
                     av-load(R1, MemAV(FREE-STACKS-LBL,0), 0)
                     av-load(R0, R1, 0)
                     av-add(R1, R1, av-long(8))
                     av-store(MemAV(FREE-STACKS-LBL,0), R1, 0)

                     ;3. Cap the current stack. Set current stack as parent of new stack.
                     ;R1 = current stack
                     ;preserve R0 = free stack
                     av-load(R1, MemAV(STACK-LBL,0), 0)
                     av-store(R1, RSP, STACK-SP-OFFSET - REF-TAG-BITS)
                     av-store(R0, R1, STACK-PARENT-OFFSET - REF-TAG-BITS)

                     ;4. update the current stack and limits
                     ;preserve R0 = free stack
                     ;temporary R1 = stack limit
                     ;Update stack register
                     av-add(RSP, R0, av-long(STACK-ITEMS-OFFSET - REF-TAG-BITS))
                     ;Update stack limit, and current stack
                     av-add(R1, R0, av-long(STACK-SIZE - REF-TAG-BITS))
                     av-store(MemAV(STACK-LIM-LBL,0), R1, 0)
                     av-store(MemAV(STACK-LBL,0), R0, 0)
                     ;Intercept return code
                     av-mov(R1, MemAV(RETRACT-STACK-LBL,0))
                     av-store(RSP, R1, 0)

                  else if op == tgt-ENTER-FROM-C :
                     val RSP = RSPAV()
                     val R1 = RegAV(1, asm-LONG-TYPE)
                     val R6 = RegAV(6, asm-LONG-TYPE)
                     val R11 = RegAV(11, asm-LONG-TYPE)
                     val R12 = RegAV(12, asm-LONG-TYPE)
                     val R13 = RegAV(13, asm-LONG-TYPE)
                     val R14 = RegAV(14, asm-LONG-TYPE)

                     ;Store C preserved registers
                     av-store(RSP, R1, -8)
                     av-store(RSP, R6, -16)
                     av-store(RSP, R11, -24)
                     av-store(RSP, R12, -32)
                     av-store(RSP, R13, -40)
                     av-store(RSP, R14, -48)

                     ;Move RSP to R6 for CArgs
                     av-mov(R6, RSP)

                     ;Restore Stanza context
                     av-load(RSP, MemAV(STACK-PTR-LBL,0), 0)

                  else if length(ys(e)) == 2 :
                     val [x, y, z] = [xs(e)[0], ys(e)[0], ys(e)[1]]
                     av-binop(aval(x), op, aval(y), aval(z))

                  else if length(ys(e)) == 1 :
                     val [x, y] = [xs(e)[0], ys(e)[0]]
                     av-unaop(aval(x), op, aval(y))

                  else :
                     fatal("Unsupported Op: %_" % [e])
         (e:Args) :
            ;Write stack map
            val R0 = RegAV(0, asm-LONG-TYPE)
            val RSP = RSPAV()
            av-mov(R0, MemAV(stack-map-id,0))
            av-store(RSP, R0, 8)

            ;Null out stack
            for off in ref-offsets(stackmap) do :
               av-store(RSP, av-long(VOID-TAG), off)

            ;Save argument values
            val xs* = map(aval, xs(e))
            val ts* = match(ctxt(e)) :
               (c:StanzaContext) : call-locations(xs*)
               (c:CContext) : carg-locations(xs*)
            shuffle-vals(xs*, ts*)
         (e:Call) :
            match(type(e)) :
               (t:StanzaCall) :
                  ;Convert to AVals
                  val ys* = map(aval, ys(e))

                  ;Call in new stack?
                  if new-stack?(t) :
                     av-store(MemAV(STACK-LIM-LBL,0), av-long(0), 0)

                  ;Move arguments into position and call
                  val f* = match(aval(f(e))) :
                     (f*:MemAV|ExMemAV) :
                        val ts* = call-locations(ys*)
                        shuffle-vals(ts*, ys*)
                        f*
                     (f*) :
                        val ts* = call-locations(f*, ys*)
                        shuffle-vals(ts*, cons(f*,ys*))
                        head(ts*)

                  ;Arity register
                  val R0 = RegAV(0, asm-LONG-TYPE)
                  if tail?(t) :
                     ;Call
                     av-mov(R0, av-long(arity(t)))
                     av-goto(f*)
                  else :
                     ;Call
                     av-mov(R0, av-long(arity(t)))
                     av-add(RSPAV(), RSPAV(), av-long(size(stackmap) + 8))
                     av-call(f*)
                     if info(t) is FileInfo :
                        val lbl = fresh-id()
                        add(infos, lbl => info(t) as FileInfo)
                        av-label(lbl)
                     av-sub(RSPAV(), RSPAV(), av-long(size(stackmap) + 8))

                     ;Move return values out from Args
                     val xs* = map(aval, xs(e))
                     val ts* = call-locations(xs*)
                     shuffle-vals(xs*, ts*)

               (t:StackCall) :
                  ;Convert to AVals
                  val ys* = map(aval, ys(e))

                  ;Move arguments into position
                  val ts* = call-locations(aval(f(e)), ys*)
                  shuffle-vals(ts*, cons(aval(f(e)),ys*))

                  val R0 = RegAV(0, asm-LONG-TYPE)
                  val R1 = RegAV(1, asm-LONG-TYPE)
                  val RSP = RSPAV()

                  if tail?(t) :
                     ;Cap the current stack
                     ;R0 = current stack
                     av-load(R0, MemAV(STACK-LBL,0), 0)
                     av-store(R0, RSP, STACK-SP-OFFSET - REF-TAG-BITS)

                     ;Update the current stack and limits
                     ;R1 = target stack
                     ;temporary R0 = stack limit
                     ;Update stack limit, and current stack
                     av-add(R0, R1, av-long(STACK-SIZE - REF-TAG-BITS))
                     av-store(MemAV(STACK-LIM-LBL,0), R0, 0)
                     av-store(MemAV(STACK-LBL,0), R1, 0)
                     ;Recover stack register
                     av-load(RSP, R1, STACK-SP-OFFSET - REF-TAG-BITS)
                     av-return()

                  else :
                     ;Cap the current stack
                     ;R0 = current stack
                     val ret-lbl = fresh-id()
                     av-add(RSP, RSP, av-long(size(stackmap)))
                     av-load(R0, MemAV(STACK-LBL,0), 0)
                     av-store(R0, RSP, STACK-SP-OFFSET - REF-TAG-BITS)

                     ;Write return address
                     av-mov(R0, MemAV(ret-lbl,0))
                     av-store(RSP, R0, 0)

                     ;Update the current stack and limits
                     ;R1 = target stack
                     ;temporary R0 = stack limit
                     ;Update stack limit, and current stack
                     av-add(R0, R1, av-long(STACK-SIZE - REF-TAG-BITS))
                     av-store(MemAV(STACK-LIM-LBL,0), R0, 0)
                     av-store(MemAV(STACK-LBL,0), R1, 0)
                     ;Recover stack register
                     av-load(RSP, R1, STACK-SP-OFFSET - REF-TAG-BITS)
                     av-return()

                     ;Move return values out from Args
                     av-label(ret-lbl)
                     if info(t) is FileInfo :
                        add(infos, ret-lbl => info(t) as FileInfo)
                     av-sub(RSP, RSP, av-long(size(stackmap) + 8))
                     val xs* = map(aval, xs(e))
                     val ts* = call-locations(xs*)
                     shuffle-vals(xs*, ts*)

               (t:CCall) :
                  ;Convert to AVals
                  val ys* = map(aval, ys(e))

                  ;Move arguments into position and call
                  val f* = match(aval(f(e))) :
                     (f*:MemAV|ExMemAV) :
                        val ts* = callc-locations(ys*)
                        shuffle-vals(ts*, ys*)
                        f*
                     (f*) :
                        val ts* = callc-locations(f*, ys*)
                        shuffle-vals(ts*, cons(f*,ys*))
                        head(ts*)

                  ;Calculate number of floating point registers
                  val num-fregs = count({_ is FRegAV}, ys*)

                  ;Call
                  val R0 = RegAV(0, asm-LONG-TYPE)
                  val SPL = MemAV(STACK-PTR-LBL,0)
                  av-mov(R0, av-long(num-fregs))
                  av-store(SPL, RSPAV(), 0)
                  av-load(RSPAV(), MemAV(C-RSP-LBL,0), 0)
                  av-sub(RSPAV(), RSPAV(), av-long(8 * (6 + num-on-stack(t))))
                  av-call(f*)
                  av-load(RSPAV(), SPL, 0)

                  ;Move return values out from Args
                  val xs* = map(aval, xs(e))
                  val ts* = callc-ret-locations(xs*)
                  shuffle-vals(xs*, ts*)
         (e:Save) :
            val x* = aval(x(e))
            val sx* = stack-aval(x(e))
            av-mov(sx*, x*)
         (e:Clear) :
            val sx* = stack-aval(x(e))
            av-mov(sx*, av-long(VOID-TAG))
         (e:Load) :
            val x* = aval(x(e))
            val sx* = stack-aval(x(e))
            av-mov(x*, sx*)
         (e:Xchg) :
            av-xchg(aval(x(e)), aval(y(e)))
         (e:ShuffleReg) :
            shuffle-reg(xs(e), ys(e))
         (e:ShuffleFReg) :
            shuffle-freg(xs(e), ys(e))
         (e:Label) :
            av-label(n(e))
         (e:Goto) :
            av-goto(MemAV(n(e),0))
         (e:Break) :
            defn flip (op:tgt-TgtOp) :
               switch {op == _} :
                  tgt-EQ-OP : tgt-NE-OP
                  tgt-NE-OP : tgt-EQ-OP
                  tgt-LT-OP : tgt-GE-OP
                  tgt-GT-OP : tgt-LE-OP
                  tgt-LE-OP : tgt-GT-OP
                  tgt-GE-OP : tgt-LT-OP
                  tgt-ULE-OP : tgt-UGT-OP
                  tgt-ULT-OP : tgt-UGE-OP
                  tgt-UGT-OP : tgt-ULE-OP
                  tgt-UGE-OP : tgt-ULT-OP
            defn flip-op? (op:tgt-TgtOp) :
               if flip?(e) : flip(op)
               else : op

            switch {op(e) == _} :
               tgt-STACK-HAS-SPACE :
                  val R0 = RegAV(0, asm-LONG-TYPE)
                  val R1 = RegAV(1, asm-LONG-TYPE)
                  val RSP = RSPAV()
                  av-add(R0, RSP, av-long(size(stackmap) + 8)) ;+8 for extra return address
                  av-load(R1, MemAV(STACK-LIM-LBL,0), 0)
                  av-break(n(e), flip-op?(tgt-LE-OP), R0, R1)

               else :
                  match(op(e)) :
                     (op:tgt-ArityNEqOp) :
                        val R0 = RegAV(0, asm-LONG-TYPE)
                        av-break(n(e), flip-op?(tgt-NE-OP), R0, av-long(tgt-arity(op)))
                     (op) :
                        val [x, y] = [xs(e)[0], xs(e)[1]]
                        av-break(n(e), flip-op?(op), aval(x), aval(y))


;============================================================
;====================== Working IR ==========================
;============================================================

;     Working Instructions
;     --------------------
deftype Working
defstruct Save <: Ins&Working :
   x: Var
defstruct Load <: Ins&Working :
   x: Var
defstruct Clear <: Ins&Working :
   x: Var
defstruct Unload <: Ins&Working :
   x: Var
defstruct NextUsed <: Ins&Working :
   n: Int
   pos: Int
defstruct Kill <: Ins&Working :
   n: Int
defstruct Xchg <: Ins&Working :
   x: Var
   y: Var
   swap: Reg|False
defstruct ShuffleReg <: Ins&Working :
   xs: List<Int>
   ys: List<Int>
defstruct ShuffleFReg <: Ins&Working :
   xs: List<Int>
   ys: List<Int>
defstruct Label <: Ins&Working :
   n: Int
defstruct Goto <: Ins&Working :
   n: Int
defstruct Break <: Ins&Working :
   n: Int
   op: tgt-TgtOp
   xs: List<Imm>
   flip?: True|False

defn cms (xs) : join(xs, ", ")
defmethod print (o:OutputStream, i:Ins&Working) :
   print{o, _} $ match(i) :
      (i:NextUsed) : "next used %_ at %_" % [n(i), pos(i)]
      (i:Kill) : "kill %_" % [n(i)]
      (i:Save) : "save %~" % [x(i)]
      (i:Load) : "load %~" % [x(i)]
      (i:Clear) : "clear %~" % [x(i)]
      (i:Unload) : "unload %~" % [x(i)]
      (i:Xchg) : "xchg %~ %~ through %~" % [x(i), y(i), swap(i)]
      (i:ShuffleReg) : "shuffle reg (%*) = (%*)" % [cms(xs(i)), cms(ys(i))]
      (i:ShuffleFReg) : "shuffle freg (%*) = (%*)" % [cms(xs(i)), cms(ys(i))]
      (i:Label) : "label<%~>" % [n(i)]
      (i:Goto) : "goto label<%~>" % [n(i)]
      (i:Break) : "break label<%~> when %~(%*) (flip:%~)" % [n(i), op(i), cms(xs(i)), flip?(i)]

;     Any Value
;     ---------
defstruct Any <: Equalable
defmethod equal? (a:Any, b:Any) :
   true
defmethod print (o:OutputStream, x:Any) :
   print(o, "any")

;     Port Definition
;     ---------------
deftype Port
defmulti n (p:Port) -> Int
defmulti saved? (p:Port) -> True|False|Any
defmulti loaded? (p:Port) -> True|False|Any
defmulti loc (p:Port) -> Loc
defmulti dist (p:Port) -> Int

defmethod print (o:OutputStream, p:Port) :
   print(o, "%~ (s:%~, l:%~, at:%~)" % [n(p), saved?(p), loaded?(p), loc(p)])

defn DPort (n:Int, saved?:True|False|Any, loaded?:True|False|Any, loc:Loc, dist:Int) :
   new Port :
      defmethod n (this) : n
      defmethod saved? (this) : saved?
      defmethod loaded? (this) : loaded?
      defmethod loc (this) : loc
      defmethod dist (this) : dist
      defmethod print (o:OutputStream, this) :
         print(o, "%~ (s:%~, l:%~, at:%~, dist:%~)" % [n, saved?, loaded?, loc, dist])

;     Useful Doers
;     ------------
defn* do-list<?T,?S> (f: (T, S) -> ?, xs:List<?T>, a:?S) -> False :
   match(xs) :
      (xs:FullList) :
         f(head(xs), a)
         do-list(f, tail(xs), a)
      (xs:NilList) : false
      
defn do-defined (f: Var -> False, e:Ins) :
   match(e) :
      (e:Set) : f(x(e))
      (e:Args) : do(f, xs(e))
      (e:Call) : do(f, xs(e))
      (e:Return) : false
      (e:Op) : do(f, xs(e))
      (e:Branch) : false
      (e:Save) : false
      (e:Load) : f(x(e))

defn do-defined<?T> (f: (Var, T) -> False, e:Ins, a:?T) :
   match(e) :
      (e:Set) : f(x(e), a)
      (e:Args) : do-list(f, xs(e), a)
      (e:Call) : do-list(f, xs(e), a)
      (e:Return) : false
      (e:Op) : do-list(f, xs(e), a)
      (e:Branch) : false
      (e:Save) : false
      (e:Load) : f(x(e), a)

defn do-used (g: Imm -> False, e:Ins) :
   match(e) :
      (e:Set) : g(y(e))
      (e:Args) : false
      (e:Call) : (g(f(e)), do(g, ys(e)))
      (e:Return) : do(g, xs(e))
      (e:Op) : do(g, ys(e))
      (e:Branch) : do(g, xs(e))
      (e:Save) : g(x(e))
      (e:Load) : false

defn do-used<?T> (g: (Imm, T) -> False, e:Ins, a:?T) :
   match(e) :
      (e:Set) : g(y(e), a)
      (e:Args) : false
      (e:Call) : (g(f(e), a), do-list(g, ys(e), a))
      (e:Return) : do-list(g, xs(e), a)
      (e:Op) : do-list(g, ys(e), a)
      (e:Branch) : do-list(g, xs(e), a)
      (e:Save) : g(x(e), a)
      (e:Load) : false

defn do-used-var (g: Var -> False, e:Ins) :
   for imm in e do-used :
      match(imm) :
         (imm:Var) : g(imm)
         (imm) : false

defn reverse-sweep (e:Ins, touched: Var -> ?, defined:Var -> ?, emit:Ins -> ?, used:Var -> ?) :
   defn touch-imm (x:Imm) : touched(x as Var) when x is Var
   defn use-imm (x:Imm) : used(x as Var) when x is Var
   match(e) :
      (e:Set) :
         touched(x(e))
         touch-imm(y(e))
         defined(x(e))
         emit(e)
         use-imm(y(e))
      (e:Args) :
         do(touched, xs(e))
         do(defined, xs(e))
         emit(e)
      (e:Call) :
         do(touched, xs(e))
         touch-imm(f(e))
         do(touch-imm, ys(e))
         do(defined, xs(e))
         emit(e)
         use-imm(f(e))
         do(use-imm, ys(e))
      (e:Return) :
         do(touch-imm, xs(e))
         emit(e)
         do(use-imm, xs(e))
      (e:Op) :
         do(touched, xs(e))
         do(touch-imm, ys(e))
         do(defined, xs(e))
         emit(e)
         do(use-imm, ys(e))
      (e:Branch) :
         do(touch-imm, xs(e))
         emit(e)
         do(use-imm, xs(e))

;                      Register Assignment
;                      ===================

;     Assignment Mini-Language
;     ------------------------
defstruct FreeReg <: Loc :
   prefer: List<Int>

defn FreeReg () : FreeReg(List())

defmethod print (o:OutputStream, f:FreeReg) :
   print(o, "FreeReg(%*)" % [cms(prefer(f))])

;                    Stack Map Calculation
;                    =====================

;     Interval Structure
;     ------------------
deftype Interval
defstruct StartInterval <: Interval :
   n: Int
defstruct EndInterval <: Interval :
   n: Int

defmethod print (o:OutputStream, i:Interval) :
   print{o, _} $ match(i) :
      (i:StartInterval) : "Start(%_)" % [n(i)]
      (i:EndInterval) : "End(%_)" % [n(i)]


;     Calculating Stack Map
;     ---------------------

;Interface
deftype StackMap
defmulti ref-offsets (s:StackMap) -> Seq<Int>
defmulti mask (s:StackMap) -> [Int, List<Long>]
defmulti offset (s:StackMap, x:Stack) -> Int
defmulti type (s:StackMap, n:Int) -> tgt-TgtType
defmulti location (s:StackMap, n:Int) -> Int
defmulti num-locations (s:StackMap) -> Int
defmulti size (s:StackMap) -> Int

;                    Compilation to ASM
;                    ==================

;     Argument Value Language
;     -----------------------
deftype AVal
defmulti type (a:AVal) -> asm-AsmType
defstruct StackAV <: AVal :
   offset: Int
   type: asm-AsmType with: (as-method => true)
defstruct RegAV <: AVal :
   n: Int
   type: asm-AsmType with: (as-method => true)
defstruct FRegAV <: AVal :
   n: Int
   type: asm-AsmType with: (as-method => true)
defstruct RSPAV <: AVal
defstruct ImmAV <: AVal :
   value: Int|Long
   type: asm-AsmType with: (as-method => true)
defstruct NoneAV <: AVal :
   type: asm-AsmType with: (as-method => true)
defstruct MemAV <: AVal :
   n: Int
   offset: Int
defstruct ExMemAV <: AVal :
   name: Symbol
   offset: Int
defstruct Swap <: AVal :
   type: asm-AsmType with: (as-method => true)

defmethod type (x:RSPAV) : asm-LONG-TYPE
defmethod type (x:MemAV) : asm-LONG-TYPE
defmethod type (x:ExMemAV) : asm-LONG-TYPE

defn imm! (v:AVal) :
   match(v) :
      (v:RSPAV) : asm-RegSP()
      (v:RegAV) : asm-Reg(n(v))
      (v:FRegAV) : asm-FReg(n(v))
      (v:ImmAV) : asm-IntImm(value(v))
      (v:MemAV) : asm-Mem(n(v), offset(v))
      (v:ExMemAV) : asm-ExMem(name(v), offset(v))
      (v) : fatal("Not supported: %_" % [v])

defn loc! (v:AVal) :
   imm!(v) as asm-Loc

defmethod print (o:OutputStream, v:AVal) :
   print{o, _} $ match(v) :
      (v:StackAV) : "stk(%_,%_)" % [offset(v), type(v)]
      (v:RegAV) : "reg(%_,%_)" % [n(v), type(v)]
      (v:FRegAV) : "freg(%_,%_)" % [n(v), type(v)]
      (v:RSPAV) : "rsp"
      (v:ImmAV) : "imm(%_, %_)" % [value(v), type(v)]
      (v:NoneAV) : "none(%_)" % [type(v)]
      (v:MemAV) : "mem(%_ + %_)" % [n(v), offset(v)]
      (v:ExMemAV) : "mem(%_ + %_)" % [name(v), offset(v)]
      (v:Swap) : "swap(%_)" % [type(v)]

