defpackage stz/type-instfns :
  import core
  import collections
  import stz/types
  import stz/type-fargs

;============================================================
;====== Representation of an Instantiated Function ==========
;============================================================

;Represents an instantiated function.
;- n: An identifier used to indicate the original function that
;  this instantiation is from.
;- pattern: The pattern of instantiation. False if we forced
;  an instantiation through that doesn't apply to the given arguments.
;- capvars: The captured variables from the instantation. Initialized
;  to Tuple<TUVar> after instantiation. 
;- type: The resulting arrow type after instantiation.
public defstruct InstFn :
  n:Int
  pattern:ArgPattern
  capvars:Tuple<Type>
  type:TArrow
  exp-args:Tuple<Type>
with:
  printer => true

;Represents an instantiated function.
;- n: An identifier used to indicate the original function that
;  this instantiation is from.
;- pattern: The pattern of instantiation. False if it is an 'extern' function,
;  and the FnT is known directly.
;- capvars: The captured variables from the instantation. Initialized
;  to Tuple<TUVar> after instantiation. 
;- type: The resulting arrow type after instantiation.
public defstruct LSInstFn :
  n:Int
  pattern:ArgPattern|False
  capvars:Tuple<Type>
  type:FnT
  exp-args:Tuple<LSType>
with:
  printer => true

;============================================================
;====================== Mappers =============================
;============================================================

;Call 'f' on all type subfields in InstFn.
public defn map (f:Type -> Type, func:InstFn) -> InstFn :
  InstFn(n(func),
         pattern(func),
         map(f,capvars(func)),
         f(type(func)) as TArrow,
         map({f(_) as Type}, exp-args(func)))

;Call 'f' on all type subfields in LSInstFn.
public defn map (f:LSType|Type -> LSType|Type, func:LSInstFn) -> LSInstFn :
  LSInstFn(n(func),
           pattern(func),
           map({f(_) as Type},capvars(func)),
           f(type(func)) as FnT,
           map({f(_) as LSType}, exp-args(func)))