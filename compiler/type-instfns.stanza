defpackage stz/type-instfns :
  import core
  import collections
  import stz/types

;============================================================
;====== Representation of an Instantiated Function ==========
;============================================================

;Represents an instantiated function.
;- n: An identifier used to indicate the original function that
;  this instantiation is from.
;- pattern: The pattern of instantiation. False if we forced
;  an instantiation through that doesn't apply to the given arguments.
;- capvars: The captured variables from the instantation. Initialized
;  to Tuple<TCap> after instantiation. Expected to be filled in with
;  TUVar after type equation generation.
;- type: The resulting arrow type after instantiation.
public defstruct InstFn :
  n:Int
  pattern:InstPattern
  capvars:Tuple<Type>
  type:TArrow
with:
  printer => true

;Represents an instantiated function.
;- n: An identifier used to indicate the original function that
;  this instantiation is from.
;- pattern: The pattern of instantiation. 
;- capvars: The captured variables from the instantation. Initialized
;  to Tuple<TCap> after instantiation. Expected to be filled in with
;  TUVar after type equation generation.
;- type: The resulting arrow type after instantiation.
public defstruct LSInstFn :
  n:Int
  pattern:InstPattern
  capvars:Tuple<Type>
  type:FnT
with:
  printer => true

;============================================================
;====================== Mappers =============================
;============================================================

;Call 'f' on all type subfields in InstFn.
public defn map (f:Type -> Type, func:InstFn) -> InstFn :
  InstFn(n(func),
         pattern(func),
         map(f,capvars(func)),
         f(type(func)) as TArrow)

;Call 'f' on all type subfields in LSInstFn.
public defn map (f:LSType|Type -> LSType|Type, func:LSInstFn) -> LSInstFn :
  LSInstFn(n(func),
           pattern(func),
           map({f(_) as Type},capvars(func)),
           f(type(func)) as FnT)

;============================================================
;======= Representation of an Instantiation Pattern =========
;============================================================

;Represents one particular pattern of instantiation of a TFunction or TLFunction.
;If args[1] = 4, it means that the second argument passed to the
;instantiated function actually corresponds to argument 5 in the original
;function.
public defstruct InstPattern :
  args:Tuple<InstArg>
with:
  printer => true

;Represents which function arg a value is provided to.
public defstruct InstArg :
  arg-index:Int|False
  mode:ArgMode
with:
  printer => true

;Represents the mode in which a provided value is passed to
;a function argument.
;- BadArg: Represents a forced mismatch instantiation. Guaranteed
;  not to be used in a good instantiation.
public defenum ArgMode :
  ToPositionalArg
  ToVarArg
  ToKeywordArg
  ToKeywordVarArg
  BadArg