defpackage stz/type-fnarities :
  import core
  import collections
  import stz/type-fargs

;============================================================
;====================== Arity Summary =======================
;============================================================

;Represent the arities of a function.
;- keywords: An entry, name => optional?, indicates that the
;  function accepts a keyword 'name', and 'optional?' indicates
;  whether the keyword is required or optional.
public defstruct FnArities :
  targ-arity:Int
  min-arity:Int
  max-arity:Int
  num-optional:Int
  num-required-keywords:Int
  positional:Vector<PositionalArg<Int>>
  keywords:HashTable<Symbol,KeywordArg<Int>>
  vararg:VarArg<Int>|RestArg<Int>|False

;Represent the known arities that we need.
public defenum AritySpecifier :
  AllArities
  UnknownArity

;Return true if FnArities represents a fixed arity function.
public defn fixed-arity? (a:FnArities) -> True|False :
  num-optional(a) == 0 and vararg(a) is False

;Return the name of the variable arity argument.
public defn vararg-name? (a:FnArities) -> Symbol|False :
  match(vararg(a)) :
    (v:VarArg<Int>) : name(v)
    (v:RestArg<Int>) : false
    (f:False) : false

;============================================================
;====================== Summarize Arities ===================
;============================================================

;Compute the arities of a function given the
;number of targs and the argument specifiers.
public defn arities (tarity:Int, args:Tuple<FArg>) -> FnArities :
  val num-required = to-seq(0 to false)
  val num-optional = to-seq(0 to false)
  val positional = Vector<PositionalArg<Int>>()
  val keywords = HashTable<Symbol,KeywordArg<Int>>()
  var vararg:VarArg<Int>|RestArg<Int>|False = false
  val num-required-keywords = to-seq(0 to false)

  for (arg in args, index in 0 to false) do :
    match(arg) :
      (arg:PositionalArg) :
        if optional?(arg) : next(num-optional)
        else : next(num-required)
        add(positional, PositionalArg<Int>(optional?(arg), index))
      (arg:KeywordArg) :
        keywords[name(arg)] = KeywordArg<Int>(name(arg), optional?(arg), index)
        if not optional?(arg) : next(num-required-keywords)
      (arg:VarArg) :
        vararg = VarArg<Int>(name(arg), index)
      (arg:RestArg) :
        vararg = RestArg<Int>(index)
        
  FnArities(tarity,
            peek(num-required),
            peek(num-required) + peek(num-optional),
            peek(num-optional),
            peek(num-required-keywords),
            positional,
            keywords,            
            vararg)  

;Compute the arities of a simple FnT type.
public defn arities (num-args:Int, rest-arg:True|False) -> FnArities :
  val positional = to-vector<PositionalArg<Int>> $
    for i in 0 to num-args seq : PositionalArg<Int>(false, i)
  val keywords = HashTable<Symbol,KeywordArg<Int>>()
  val rest = RestArg<Int>(num-args) when rest-arg 
  FnArities(0,
            num-args,
            num-args,
            0,
            0,
            positional,
            keywords,
            rest)

;============================================================
;====================== Arity Satisfied? ====================
;============================================================

;Returns true if the given call signature satisfies the
;function arities.
public defn satisfies-arity? (arities:FnArities,
                              num-targs:Int,
                              num-args:Int,
                              keywords:Tuple<Symbol>) -> True|False :

  ;Returns true if the right positional arguments
  ;were passed in.
  defn pos-arity-satisfied? () :
    if targ-arity(arities) == num-targs :
      ;Determine whether the function's variable-arity
      ;feature is used.
      val variable? = vararg(arities) is-not False and
                      not contains?(keywords, vararg-name?(arities))
      if variable? :
        num-args >= min-arity(arities)
      else :
        num-args >= min-arity(arities) and
        num-args <= max-arity(arities)

  ;Returns true if the right keyword arguments
  ;were passed in.
  defn keywords-satisfied? () :
    if num-required-keywords(arities) == 0 and empty?(keywords) :
      true
    else :
      val num-required-provided = to-seq(0 to false)
      val good-keywords? = for name in keywords all? :
        if key?(/keywords(arities), name) :
          val optional? = optional?(/keywords(arities)[name])
          next(num-required-provided) when not optional?
          true
        else if vararg-name?(arities) == name :
          true
      val enough-keywords? = peek(num-required-provided) == num-required-keywords(arities)
      good-keywords? and enough-keywords?

  ;Launch!
  pos-arity-satisfied?() and
  keywords-satisfied?()

;============================================================
;================= Matching Signatures ======================
;============================================================

;Return true if the signature of the two functions matches.
public defn matching-signature? (a:FnArities, b:FnArities) -> True|False :
  targ-arity(a) == targ-arity(b) and
  min-arity(a) == min-arity(b) and
  num-optional(a) == num-optional(b) and
  same-contents?(positional(a), positional(b)) and
  same-contents?(remove-indices(keywords(a)), remove-indices(keywords(b))) and
  vararg(a) == vararg(b)

;Remove the indices from the keywords so that they can be
;compared without fixed ordering.
defn remove-indices (keywords:HashTable<Symbol,KeywordArg<Int>>) ->
                    HashTable<Symbol,KeywordArg<False>> :
  to-hashtable<Symbol,KeywordArg<False>> $
    for entry in keywords seq :
      val new-value = sub-type(value(entry), false) as KeywordArg<False>
      key(entry) => new-value

;============================================================
;================= Instantiated Arities =====================
;============================================================

;Compute set of all arities applicable out of the desired specifiers.
;Returns None() to indicate that there is insufficient information to compute.
public defn instantiate-arities (arities:FnArities, specs:Collection<Int|AritySpecifier>) -> Maybe<Tuple<Int>> :
  ;If type arguments or keyword arguments required, then no instantiation
  ;is possible.
  if targ-arity(arities) > 0 or num-required-keywords(arities) > 0 :
    One([])
  ;Otherwise:
  else :
    ;Case: Fixed arity functions can only be instantiated in one way.
    if fixed-arity?(arities) :
      One([min-arity(arities)])
    ;Case: Finite arity functions can always be instantiated if
    ;AllArities is one of the specifiers.
    else if vararg(arities) is False and contains?(specs, AllArities) :
      One(to-tuple(min-arity(arities) through max-arity(arities)))
    ;Case: Otherwise, functions can be instantiated only if
    ;the specifiers are known.
    else if not contains?(specs, UnknownArity) :
      ;Compute set of desired arities.
      val arity-set = HashSet<Int>()
      for spec in specs do :
        match(spec) :
          (spec:Int) : add(arity-set, spec)
          (spec:AllArities) : add-all(arity-set, min-arity(arities) through max-arity(arities))
      ;Keep the good arities out of the given set.
      One $ to-tuple $ for n in arity-set filter :
        satisfies-arity?(arities, 0, n, [])
    ;Case: Insufficient information to instantiate.
    else :
      None()

