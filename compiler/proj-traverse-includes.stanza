defpackage stz/proj-traverse-includes :
  import core
  import collections
  import stz/proj-ir
  import stz/proj-stage0
  import stz/proj-errors
  import core/parsed-path

;Read all the included `stanza.proj` files and import them into the file.
;For processing include statements, the `read-file` callback is used
;to read another ProjFileS0. It is assumed that the return result is
;wellformed.
;
;After this pass there will exist no more IncludeStmtS0, and they will be
;replaced with IncludedStmtsS0.

public defn traverse-includes (f:ProjFileS0,
                               read-wellformed-file:String -> ProjFileS0) -> ProjFileS0 :
  ;Process the given proj statement. If it is a IncludeStmtS0,
  ;then pull in the referenced statements.
  ;- parent-paths: The paths to the chain of parent files that
  ;  eventually led to this statement.
  defn process (s:ProjStmt, parent-paths:List<ResolvedPath>) -> ProjStmt :
    match(s:IncludeStmtS0) :
      val parent-path = head(parent-paths)
      val full-path = resolved-path $
        relative-to-file(path(parent-path), path(s))
      if not exists?(full-path) :
        if optional?(s) :
          EmptyStmtS0()
        else :
          throw(CannotFindIncludeProj(info(s), path(parent-path), path(full-path)))
      else if included?(parent-paths, full-path) :
        throw(IncludeCycle(info(s), path(full-path), map(path,parent-paths)))
      else :
        included-stmts(cons(full-path, parent-paths), info(s))
    else :
      s
      
  ;Pull in the statements from the head(parent-paths).
  defn included-stmts (parent-paths:List<ResolvedPath>, info:FileInfo|False) -> IncludedStmtsS0 :
    val ipath = head(parent-paths)
    val file = read-wellformed-file(path(ipath))
    val stmts* = map(process{_, parent-paths}, stmts(file))
    IncludedStmtsS0(info, id(file), path(ipath), full-path(ipath) as String, stmts*)

  ;Launch!
  val path* = resolved-path(path(f))
  fatal("Project file no longer resolvable.") when not exists?(path*)
  val stmts* = map(process{_, List(path*)}, stmts(f))
  sub-stmts(f, stmts*)

;Helper: Assuming that 'relpath' is a path specified relative
;to 'file' return the full path.
defn relative-to-file (file:String, relpath:String) -> String :
  to-string(relative-to-file(parse-path(file), relpath))

;============================================================
;================= ResolvedPath Utilities ===================
;============================================================

;Represent the original and its fully-resolved path.
defstruct ResolvedPath :
  path: String
  full-path: String|False
with:
  printer => true

;Resolve the path.
defn resolved-path (path:String) -> ResolvedPath :
  ResolvedPath(path, resolve-path(path))

;Return true if the path resolved successfully.
defn exists? (p:ResolvedPath) -> True|False :
  full-path(p) is String

;Return true if the given resolved paths contains the
;the path p.
defn included? (paths:List<ResolvedPath>, p:ResolvedPath) -> True|False :
  for p1 in paths any? :
    full-path(p1) == full-path(p)