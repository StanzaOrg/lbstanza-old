;See License.txt for details about licensing.

defpackage stz/padder :
   import core
   import collections

public defstruct Padding :
  size: Int

public defn pad<?T> (alignment:T -> Int,
                     size:T -> Int,
                     xs:Collection<?T>,
                     min-aln:Int) ->
                     [Seq<T|Padding>, Int] :
  val aln = maximum(min-aln, seq(alignment, xs))
  val xs* = generate<T|Padding> :
    var accum = 0
    defn align-accum (a:Int) :
      val over = accum % a
      if over > 0 :
        yield(Padding(a - over))
        accum = accum + a - over
    for x in xs do :
      align-accum(alignment(x))
      yield(x)
      accum = accum + size(x)
    align-accum(aln)
  [xs*, aln]

