;See License.txt for details about licensing.

defpackage stz/utils :
   import core
   import collections
   import stz/params

;============================================================
;===================== Arithmetic ===========================
;============================================================

public defn ceil8 (x:Int) :
   (x + 7) & -8

;============================================================
;===================== Header ===============================
;============================================================

public defn header (msg:String) :
   val l = length(msg)
   val n1 = 30 - 1 - (l / 2)
   val n2 = 60 - (n1 + 2 + l)
   println("\n\n\n")
   println(String(60, '='))
   println-all([String(n1, '='), ' ', msg, ' ', String(n2, '=')])
   println(String(60, '='))

public defn vheader (msg:String) :
   header(msg) when flag-defined?(`VERBOSE)      

;============================================================
;================== Minima Calculation ======================
;============================================================

public defn minima<?T> (xs: List<?T>, less?: (T T) -> True|False) -> List<T> :
   defn* find-min (m: T, rest: List<T>, check: List<T>) -> List<T> :
      if empty?(rest) :
         cons(m, minima(check, less?))
      else if m < head(rest) :
         find-min(m, tail(rest), check)
      else if head(rest) < m :
         find-min(head(rest), tail(rest), check)
      else :
         find-min(m, tail(rest), cons(head(rest), check))
   if empty?(xs) : xs
   else : find-min(head(xs), tail(xs), List())