;See License.txt for details about licensing.

defpackage stz/utils :
   import core
   import collections
   import stz/algorithms
   import core/sha256

;============================================================
;====================== SORTED-SETS =========================
;============================================================

public defn assert-sorted (t:Tuple<Int>) :
  let loop (i:Int = 1) :
    if i < length(t) :
      if t[i - 1] > t[i] :
        fatal("UNSORTED %_" % [t])
      loop(i + 1)

public defn overlap? (a:Tuple<Int>, b:Tuple<Int>) -> True|False :
  val [na, nb] = [length(a), length(b)]
  let loop (i:Int = 0, j:Int = 0) :
    if i < na and j < nb :
      val [ai, bj] = [a[i], b[j]]
      if ai < bj :
        loop(i + 1, j)
      else if bj < ai :
        loop(i, j + 1)
      else :
        true
    else :
      false

public defn subset? (a:Tuple<Int>, b:Tuple<Int>) -> True|False :
  val [na, nb] = [length(a), length(b)]
  let loop (i:Int = 0, j:Int = 0) :
    if i < na and j < nb :
      val [ai, bj] = [a[i], b[j]]
      if ai < bj :
        false
      else if bj < ai :
        loop(i, j + 1)
      else :
        loop(i + 1, j + 1)
    else :
      i >= na

public defn union (a:Seqable<Int>, b:Seqable<Int>) -> Seq<Int> :
  generate<Int> :
    val [sa, sb] = [to-seq(a), to-seq(b)]
    while not empty?(sa) and not empty?(sb) :
      val [ai, bj] = [peek(sa), peek(sb)]
      if ai < bj :
        yield(next(sa))
      else if bj < ai :
        yield(next(sb))
      else :
        yield(next(sa))
        next(sb)
    while not empty?(sa) :
      yield(next(sa))
    while not empty?(sb) :
      yield(next(sb))

public defn intersect (a:Seqable<Int>, b:Seqable<Int>) -> Seq<Int> :
  generate<Int> :
    val [sa, sb] = [to-seq(a), to-seq(b)]
    while not empty?(sa) and not empty?(sb) :
      val [ai, bj] = [peek(sa), peek(sb)]
      if ai < bj :
        next(sa)
      else if bj < ai :
        next(sb)
      else :
        yield(next(sa))
        next(sb)

public defn union (elts:Seqable<Seqable<Int>>) -> Seqable<Int> :
  reduce(union, elts)

public defn intersect (elts:Seqable<Seqable<Int>>) -> Seqable<Int> :
  reduce(intersect, elts)

;============================================================
;======================= FileStamp ==========================
;============================================================

public defstruct FileStamp <: Hashable & Equalable :
  filename: String
  hashstamp: ByteArray

public defn filestamp (filename:String) :
  val path = resolve-path!(filename)
  val hashstamp = sha256-hash-file(filename)
  FileStamp(path as String, hashstamp)

defmethod equal? (a:FileStamp, b:FileStamp) :
  filename(a) == filename(b) and
  hash-equal?(hashstamp(a), hashstamp(b))

defmethod hash (a:FileStamp) :
  hash $ [filename(a), hash-hash(hashstamp(a))]

defmethod print (o:OutputStream, s:FileStamp) :
  print(o, "%~ (%_)" % [filename(s), hashstamp(s)])

public defn hash-equal? (a:ByteArray|False, b:ByteArray|False) :
  match(a,b) :
    (a:ByteArray, b:ByteArray) :
      length(a) == length(b) and
      all?(equal?, a, b)
    (a:False, b:False) : true
    (a, b) : false

public defn hash-hash (a:ByteArray) :
  var i = 1
  for b in a do :
    i = (7 * i) + to-int(b)
  i

;============================================================
;=================== Name Mangling ==========================
;============================================================

val VALID-FILENAME-CHARS = BitArray(256, false)
set-all(VALID-FILENAME-CHARS, to-int('0') through to-int('9'), true)
set-all(VALID-FILENAME-CHARS, to-int('a') through to-int('z'), true)
set-all(VALID-FILENAME-CHARS, to-int('A') through to-int('Z'), true)
VALID-FILENAME-CHARS[to-int('-')] = true
VALID-FILENAME-CHARS[to-int('.')] = true

val HEX-CHARS = ['0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F']
defn to-hex (c:Char) -> String :
  val i = to-int(c)
  val c1 = HEX-CHARS[i & 0xF]
  val c2 = HEX-CHARS[(i >> 4) & 0xF]
  String([c2, c1])

public defn mangle-as-filename (name:Symbol) :
  val buffer = StringBuffer()
  for c in to-string(name) do :
    if VALID-FILENAME-CHARS[to-int(c)] :
      add(buffer, c)
    else if c == '/' :
      add(buffer, '$')
    else :
      print(buffer, "_%_" % [to-hex(c)])
  to-string(buffer)

;============================================================
;=============== Low-Level Expanding Buffer =================
;============================================================

public lostanza deftype Buffer :
  size:long
  capacity:long
  mem:ptr<?>

public lostanza defn Buffer () -> ref<Buffer> :
  val cap = 1024L
  val mem = call-c clib/stz_malloc(cap)
  return new Buffer{0L, cap, mem}

public lostanza defn alloc (b:ref<Buffer>, size:long) -> long :
  val size2 = b.size + size
  ensure-capacity(b, size2)
  val offset = b.size
  b.size = size2
  return offset

lostanza defn ensure-capacity (b:ref<Buffer>, capacity:long) -> int :
  if b.capacity >= capacity : return 0
  var c:long = b.capacity * 2L
  while c < capacity : c = c * 2L
  val mem2 = call-c clib/stz_malloc(c)
  call-c memcpy(mem2, b.mem, b.size)
  call-c clib/stz_free(b.mem)
  b.capacity = c
  b.mem = mem2
  return 0

public lostanza defn alloc (b:ref<Buffer>, size:ref<Int>) -> ref<Int> :
  return new Int{alloc(b, size.value) as int}

public lostanza defn get-int (buffer:ref<Buffer>, i:ref<Int>) -> ref<Int> :
  val data = buffer.mem as ptr<int>
  return new Int{data[i.value]}

public lostanza defn set-int (buffer:ref<Buffer>, i:ref<Int>, v:ref<Int>) -> ref<False> :
  val data = buffer.mem as ptr<int>
  data[i.value] = v.value
  return false

public lostanza defn append! (a:ref<Buffer>, b:ref<ByteBuffer>) -> ref<False> :
  val n = length(b).value
  val offset = alloc(a, n)
  val data = data(b)
  call-c memcpy(a.mem + offset, data, n)
  return false

extern memcpy : (ptr<?>, ptr<?>, long) -> int

;============================================================
;==================== Stable String =========================
;============================================================

public lostanza deftype StableString :
  chars: ptr<byte>

public lostanza defn StableString (s:ref<String>) -> ref<StableString> :
  val n = length(s).value
  val chars:ptr<byte> = call-c clib/stz_malloc(n + 1)
  call-c memcpy(chars, addr!(s.chars), n + 1)
  return new StableString{chars}

public lostanza defn free (s:ref<StableString>) -> ref<False> :
  call-c clib/stz_free(s.chars)
  return false

;============================================================
;================ Convert Bools to Bits =====================
;============================================================

public defn to-bitmask (xs:Seqable<True|False>) -> List<Long> :
  val sxs = to-seq(xs)
  defn bit (x:True|False) :
    1L when x else 0L
  defn loop (accum:Long, len:Int) :
    if len == 64 :
      cons(accum, loop(0L, 0))
    else if not empty?(sxs) :
      val mark = bit(next(sxs)) << to-long(len)
      loop(accum + mark, len + 1)
    else if len > 0 : List(accum)
    else : List()
  loop(0L, 0)

;============================================================
;======================= ListTable ==========================
;============================================================

public deftype ListTable<K,V> <: Collection<KeyValue<K,List<V>>>
public defmulti add<?K,?V> (t:ListTable<?K,?V>, k:K, v:V) -> False
public defmulti get<?K,?V> (t:ListTable<?K,?V>, k:K) -> List<V>

public defn ListTable<K,V> () :
  val table = HashTable<K,List<V>>(List())
  new ListTable<K,V> :
    defmethod add (this, k:K, v:V) :
      update(table, cons{v, _}, k)
      false
    defmethod get (this, k:K) :
      table[k]
    defmethod to-seq (this) :
      to-seq(table)

public deftype IntListTable<V> <: ListTable<Int,V>
public defn IntListTable<V> () :
  val table = IntTable<List<V>>(List())
  new IntListTable<V> :
    defmethod add (this, k:Int, v:V) :
      update(table, cons{v, _}, k)
      false
    defmethod get (this, k:Int) :
      table[k]
    defmethod to-seq (this) :
      to-seq(table)

;============================================================
;======================= Lists ==============================
;============================================================

public defn lastn<?T> (xs:List<?T>, n:Int) :
  val len = length(xs)
  if len < n : fatal("List has less than %_ elements." % [n])
  tailn(xs, len - n)

public defn select<?T> (xs:List<?T>, mask:List<True|False>) -> List<T> :
  to-list(filter(xs, mask))

public defn replace<?T> (xs:List<?T>, mask:List<True|False>, ys:List<?T>) -> List<T> :
  val ys-seq = to-seq(ys)
  for (x in xs, m in mask) map :
    next(ys-seq) when m else x

public defn wrap-in-list<T> (c:T|List<T>) -> List<T> :
  match(c) :
    (c:List<T>) : c
    (c:T) : List(c)

public defn accumulate<T> (f: (T -> False) -> ?) :
  val accum = Vector<T>()
  f(add{accum, _})
  to-list(accum)

public defn* sorted-merge<?T> (xs:List<Comparable<T> & ?T>, ys:List<T>) -> List<T> :
  let loop (xs:List = xs, ys:List = ys) :
    if empty?(xs) : ys
    else if empty?(ys) : xs
    else :
      val x = head(xs)
      val y = head(ys)
      switch(compare(x, y)) :
        -1 : cons(x, loop(tail(xs), ys))
        0 : loop(tail(xs), ys)
        1 : cons(y, loop(xs, tail(ys)))

public defn* sorted-merge<?T> (x:Comparable<T>&?T, ys:List<T>) -> List<T> :
  let loop (x = x, ys:List = ys) :
    if empty?(ys) : List(x)
    else :
      val y = head(ys)
      switch(compare(x, y)) :
        -1 : cons(x, ys)
        0 : ys
        1 : cons(y, loop(x, tail(ys)))

;============================================================
;===================== Table Convenience ====================
;============================================================

public defn to-inttable<?V> (key:V -> Int, values:Seqable<?V>) -> IntTable<V> :
  to-inttable<V> $
    for v in values seq :
      key(v) => v

public defn to-hashtable<?K,?V> (key:V -> ?K, values:Seqable<?V>) -> HashTable<K,V> :
  to-hashtable<K,V> $
    for v in values seq :
      key(v) => v

public defn update?<?K,?V> (f:() -> V, table:Table<?K,?V>, k:K) -> V :
  if key?(table, k) :
    table[k]
  else :
    val v = f()
    table[k] = v
    v

;============================================================
;==================== Vectors ===============================
;============================================================

public defn remove-duplicates! (xs:Vector<Equalable>) :
  if not empty?(xs) :
    let loop (n:Int = 1, i:Int = 1) :
      if i < length(xs) :
        if xs[i] == xs[n - 1] :
          loop(n, i + 1)
        else :
          xs[n] = xs[i]
          loop(n + 1, i + 1)
      else :
        shorten(xs, n)

;============================================================
;======================= Tuples =============================
;============================================================
public defn fst<?T> ([x y]:[?T ?]) : x
public defn snd<?T> ([x y]:[? ?T]) : y

;============================================================
;===================== Arithmetic ===========================
;============================================================

public defn ceil8 (x:Int) :
   (x + 7) & -8

;============================================================
;====================== Either ==============================
;============================================================

public deftype Either<A,B>
public defstruct Left<A> <: Either<A,Void> : (value: A)
public defstruct Right<B> <: Either<Void,B> : (value: B)
public defn Left<?A> (x:?A) : Left<A>(x)
public defn Right<?B> (x:?B) : Right<B>(x)

;============================================================
;======================= Counter ============================
;============================================================
public deftype Counter
public defmulti next (c:Counter, n:Int) -> Int
public defn value (c:Counter) : next(c, 0)
public defmulti set-value (c:Counter, x:Int) -> False

public defn Counter (init:Int) :
  var x = init
  new Counter :
    defmethod set-value (this, x2:Int) :
      x = x2
    defmethod next (this, n:Int) :
      val cur-x = x
      x = x + n
      cur-x

;============================================================
;======================= Lazy ===============================
;============================================================

public defn lazy<?T> (f: () -> ?T) -> () -> T :
  var x = None()
  fn () :
    if empty?(x) :
      x = One(f())
    value!(x)

;============================================================
;======================= Timing =============================
;============================================================
val TIMERS = HashTable<String,Long>(0L)
val TIMER-ORDER = Vector<String>()
val START = current-time-us()
var ACTIVE-TIMER = false

public defn time-ms!<?T> (f: () -> ?T, name:String) -> T :
  val t0 = current-time-ms()
  ;println("[%_] Begin execution" % [name])
  val result = f()
  val t1 = current-time-ms()
  ;println("[%_] Execution finished: %_ ms" % [name, t1 - t0])
  result

public defn time-ms<?T> (name:String, f: () -> ?T) -> T :
  ;Track new timers
  add(TIMER-ORDER,name) when not key?(TIMERS,name)

  ;Remember active timer
  val active = ACTIVE-TIMER
  ACTIVE-TIMER = name

  ;Time function
  val t0 = current-time-us()
  val result = f()
  val t1 = current-time-us()

  ;No longer active
  ACTIVE-TIMER = active

  ;Update timers
  update(TIMERS, {_ + t1 - t0}, name)
  update(TIMERS, {_ - (t1 - t0)}, active as String) when active is String

  ;Return result
  result

public defn print-timing-results () :
  val total = current-time-us() - START
  defn report (name:String) :
    val t = TIMERS[name]
    val percent = t * 1000L / total
    val n0 = percent / 10L
    val n1 = percent % 10L
    println("  %_ : %_ ms (%_.%_%% of total)" % [
      name, t, n0, n1])
  println("Total time: %_ ms" % [total])
  do(report, TIMER-ORDER)

;============================================================
;===================== Printing =============================
;============================================================

public defn lnprints (o:OutputStream, xs:Seqable) :
  do(lnprint{o, _}, xs)

;============================================================
;===================== Grouping =============================
;============================================================

public defn group-by<?T,?K,?V> (xkey:T -> ?K&Hashable&Equalable, xval:T -> ?V, xs:Seqable<?T>) :
  val table = HashTable<K,List<V>>(List())
  for x in xs do :
    update(table, cons{xval(x), _}, xkey(x))
  table

public defn group-by<?T,?K> (xkey:T -> ?K&Hashable&Equalable, xs:Seqable<?T>) :
  group-by(xkey, {_}, xs)

;============================================================
;============== Multilevel Stack/Table ======================
;============================================================

public deftype MultilevelStack<T>
public defmulti push-level (s:MultilevelStack) -> False
public defmulti pop-level<?T> (return:T -> ?, s:MultilevelStack<?T>) -> False
public defmulti peek-level<?T> (return:T -> ?, s:MultilevelStack<?T>) -> False
public defmulti add<?T> (s:MultilevelStack<?T>, v:T) -> False

public defn MultilevelStack<T> () :
  val items = Vector<T|Marker>()
  new MultilevelStack<T> :
    defmethod push-level (this) :
      add(items, Marker())
    defmethod pop-level (return:T -> ?, this) :
      let loop () :
        match(pop(items)) :
          (item:Marker) : false
          (item:T) : (return(item), loop())
    defmethod peek-level (return:T -> ?, this) :
      let loop (i:Int = length(items) - 1) :
        match(items[i]) :
          (item:Marker) : false
          (item:T) : (return(item), loop(i - 1))
    defmethod add (this, v:T) :
      add(items, v)
    defmethod print (o:OutputStream, this) :
      print(o, items)
      
defstruct Marker

;<Doc>=======================================================
;============================================================

Multilevel Table:
  A table with multiple levels that can be pushed or popped.
  Without using push-level, pop-level, the functions:
    set
    get
    key?
  are equivalent to those of a standard HashTable.

  When a new level is pushed onto the table, it is as though
  we created a new table as far as set/get/key? is concerned.

  The function that is affected is get-all, which returns all the
  bindings for a given key on every level.

  To remove all of the bindings declared at the most recent level, use
  the function pop-level.

  The initial level of a multilevel table is 0. 

;============================================================
;=======================================================<Doc>

public deftype MultilevelTable<K,V>
public defmulti set<?K,?V> (table:MultilevelTable<?K,?V>, k:K, v:V) -> False
public defmulti get<?K,?V> (table:MultilevelTable<?K,?V>, k:K) -> V
public defmulti key?<?K> (table:MultilevelTable<?K,?>, k:K) -> True|False
public defmulti get-all<?K,?V> (table:MultilevelTable<?K,?V>, k:K) -> List<V>
public defmulti push-level (table:MultilevelTable) -> False
public defmulti pop-level (table:MultilevelTable) -> False
public defmulti level (table:MultilevelTable) -> Int

public defn MultilevelTable<K,V> () :
  var level:Int = 0
  val table = HashTable<K,MTItem<V>>(MTItem<Void>(-1, List()))
  val restore = MultilevelStack<KeyValue<K,MTItem<V>>>()
  new MultilevelTable<K,V> :
    defmethod set (this, k:K, v:V) :
      val e = table[k]
      switch(compare(/level(e), level)) :
        ;Existing item is from a lower level: Restore it later
        -1 :
          add(restore, k => e)
          table[k] = MTItem<V>(level, cons(v, items(e)))
        ;Existing item is at the same level: Overwrite it
        0 :
          table[k] = MTItem<V>(level, cons(v, tail(items(e))))
        ;Invariant broken
        1 : fatal("Invariant broken")      
    defmethod get (this, k:K) :
      val e = table[k]
      if /level(e) != level :
        fatal("Key %_ does not exist in table." % [k])
      head(items(e))
    defmethod key? (this, k:K) :
      val e = table[k]
      /level(e) == level
    defmethod get-all (this, k:K) :
      items(table[k])
    defmethod push-level (this) :
      push-level(restore)
      level = level + 1
    defmethod pop-level (this) :
      fatal("Already at base level!") when level == 0
      within e = pop-level(restore) :
        table[key(e)] = value(e)          
      level = level - 1
    defmethod level (this) :
      level

public defstruct MTItem<V> :
  level: Int
  items: List<V>

public defn EmptyMTItem () :
  MTItem<Void>(-1, List())
