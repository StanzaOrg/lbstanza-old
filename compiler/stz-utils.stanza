defpackage stz/utils :
   import core
   import verse

;                 Failure Implementation
;                 ======================

var FAILURE-CLOSURE: () -> Void = fn* () :
   error("Uncaught failure.")

public defn fail () :
   FAILURE-CLOSURE()
   
public defn attempt-clause<?T> (conseq: () -> ?T, alt: () -> ?T) :
   val result = label<Option<T>> return :
      FAILURE-CLOSURE = fn* () : return(None())
      Some(conseq())
   match(result) :
      (r:Some<T>) : item(r)
      (r:None) : alt()

;                     ID Generation
;                     =============

val ID-COUNTER = to-stream(0 to false)

public defn fresh-id () :
   next(ID-COUNTER)

;                       Arithmetic
;                       ==========
public defn ceil8 (x:Int) :
   (x + 7) & -8