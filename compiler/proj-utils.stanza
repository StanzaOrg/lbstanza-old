defpackage stz/proj-utils :
  import core
  import collections
  import stz/proj

;============================================================
;===================== Algorithm ============================
;============================================================
;
;Start with knowing the full set of packages, including transitive
;dependencies, that the program depends upon:
;
;  core
;  collections
;  mypackage1
;  mypackage2
;
;Now we go through each ProjStmt and determine which ones are relevant
;to this set of packages. I.e. if the statement changes, it would
;affect the artifact produced by the build target.
;
;  DefinedInStmt
;  - Relevant if package is in the root set.
;
;  PackagesDefinedInStmt
;  - Relevant if packages is a prefix of any root set package.
;  
;  RequiresStmt
;  - Relevant if package is in the root set.
;  - If relevant, then also determine what affects ccfiles and ccflags.
;
;  ImportWhenStmt
;  - Relevant if package is in the root set.
;  - Relevant if any dependencies are in the root set.
;  
;  CompileStmt
;  - Relevant if file or flag is a ccfile/ccflag that affects the root set.
;  
;  BuildStmt
;  - These never affect another build target.

;============================================================
;=================== Project Isolate ========================
;============================================================

;Represents all the statements coming from the Stanza.proj files
;that are relevant to the dependencies calculated for the given
;packages.
public defstruct ProjIsolate :
  packages: Tuple<Symbol>
  stmts: Tuple<ProjStmt>
with:
  printer => true

public defn isolate-stmts (proj:ProjFile, root-packages:Tuple<Symbol>) -> ProjIsolate :
  ;Initialize root keys
  val root-keys = HashSet<StmtKey>()
  for p in root-packages do : add(root-keys, PackageKey(p))
  for stmt in filter-by<RequiresStmt>(stmts(proj)) do :
    if root-keys[PackageKey(package(stmt))] :
      for f in ccfiles(stmt) do : add(root-keys,FileKey(f))
      for f in ccflags(stmt) do : add(root-keys,FlagKey(f))

  ;Initialize package tree
  val package-tree = PackageTree(root-packages)

  ;Filter stmts. Return true if the given ProjStmt
  ;is relevant to the set of root packages. 
  defn relevant? (s:ProjStmt) -> True|False :
    match(s) :
      (s:PackagesDefinedInStmt) :
        non-empty-root?(package-tree, packages(s))
      (s) :
        label<True|False> return :
          within k = keys(s) :
            return(true) when root-keys[k]
        
  ;Return isolate
  ProjIsolate(
    root-packages, 
    to-tuple(filter(relevant?, stmts(proj))))

;------------------------------------------------------------
;--------------------- Graph Edges --------------------------
;------------------------------------------------------------
defn keys (return:StmtKey -> ?, s:ProjStmt) -> ? :
  match(s) :
    (s:DefinedInStmt) :
      return(PackageKey(package(s)))
    (s:RequiresStmt) :
      return(PackageKey(package(s)))
    (s:ImportWhenStmt) :
      return(PackageKey(package(s)))
      for d in dependencies(s) do : return(PackageKey(d))      
    (s:CompileStmt) :
      if file?(s) : return(FileKey(name(s)))
      else : return(FlagKey(name(s)))
    (s:BuildStmt) :
      false
  
;------------------------------------------------------------
;-------------------- StmtKey Utility -----------------------
;------------------------------------------------------------
deftype StmtKey <: Equalable & Hashable
defstruct PackageKey <: StmtKey :
  name:Symbol
with:
  equalable => true
  hashable => true
  
defstruct FileKey <: StmtKey :
  filename:String
with:
  equalable => true
  hashable => true
  
defstruct FlagKey <: StmtKey :
  name:String
with:
  equalable => true
  hashable => true

;============================================================
;==================== Package Tree ==========================
;============================================================

;Represents the tree of all root packages. 
defstruct PackageTree :
  children:HashTable<String,PackageTree> with:
    init => HashTable-init<String,PackageTree>(PackageTree{})

;Construct a PackageTree out of the given package names.
defn PackageTree (packages:Seqable<Symbol>) -> PackageTree :
  val tree = PackageTree()
  for package-name in packages do :
    add-to-tree(tree, split-package-name(package-name))
  tree

;Helper: Split a package a/b/c into its parts.
defn split-package-name (package:Symbol) -> Seq<String> :
  split(to-string(package), "/")

;Helper: Add a split up package into a tree.
defn add-to-tree (tree:PackageTree, names:Seq<String>) -> False :
  if not empty?(names) :
    val subtree = children(tree)[next(names)]
    add-to-tree(subtree, names)    

;Helper: Retrieve the subtree at the given path.
defn subtree (tree:PackageTree, names:Seq<String>) -> PackageTree|False :
  if empty?(names) :
    tree
  else :
    val name = next(names)
    match(get?(children(tree), name)) :
      (t:PackageTree) : subtree(t, names)
      (f:False) : false

;Returns true if there exists packages in the tree under
;the given root.
defn non-empty-root? (tree:PackageTree, root:Symbol|False) -> True|False :
  ;Retrieve the root split up into parts.
  val parts = match(root:Symbol) : split-package-name(root)
              else : to-seq([])

  ;Retrieve the subtree.
  match(subtree(tree, parts)) :
    (t:PackageTree) : not empty?(children(t))
    (f:False) : false

;============================================================
;=================== Isolate Isomorphism ====================
;============================================================

public defn isomorphic? (a:ProjIsolate, b:ProjIsolate) :
  if packages(a) == packages(b) :
    if length(stmts(a)) == length(stmts(b)) :
      val atable = to-hashtable<?,ProjStmt&Equalable> $
        for s in stmts(a) seq : key(s) => s as ProjStmt&Equalable
      for s in stmts(b) all? :
        (s as ProjStmt&Equalable) == get?(atable, key(s))

defn key (s:ProjStmt) -> ? :
  match(s) :
    (s:DefinedInStmt) :
      [`defined, package(s)]
    (s:PackagesDefinedInStmt) :
      [`packages-defined, packages(s)]
    (s:RequiresStmt) :
      [`requires, package(s)]
    (s:ImportWhenStmt) :
      [`import-when, package(s)]
    (s:CompileStmt) :
      [`compile-file when file?(s) else `compile-flag, name(s)]