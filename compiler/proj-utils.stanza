defpackage stz/proj-utils :
  import core
  import collections
  import stz/proj-ir
  import stz/printing-utils
  import stz/foreign-package-files

;============================================================
;===================== Algorithm ============================
;============================================================
;
;Start with knowing the full set of packages, including transitive
;dependencies, that the program depends upon:
;
;  core
;  collections
;  mypackage1
;  mypackage2
;
;Now we go through each ProjStmt and determine which ones are relevant
;to this set of packages. I.e. if the statement changes, it would
;affect the artifact produced by the build target.
;
;  DefinedInStmt
;  - Relevant if package is in the root set.
;
;  PackagesDefinedInStmt
;  - Relevant if packages is a prefix of any root set package.
;  
;  RequiresStmt
;  - Relevant if package is in the root set.
;  - If relevant, then also determine what affects ccfiles and ccflags.
;  - If relevant, then the foreign package manager is also relevant.
;
;  ImportWhenStmt
;  - Relevant if package is in the root set.
;  - Relevant if any dependencies are in the root set.
;  
;  CompileStmt
;  - Relevant if file or flag is a ccfile/ccflag that affects the root set.
;  - If relevant, then the foreign package manager is also relevant.
;
;  ForeignPackageParamsStmt
;  - Relevant if this foreign package manager has been deemed relevant.
;  
;  BuildStmt
;  - These never affect another build target.

;============================================================
;=================== Project Isolate ========================
;============================================================

;Represents all the statements coming from the Stanza.proj files
;that are relevant to the dependencies calculated for the given
;packages.
public defstruct ProjIsolate :
  packages: Tuple<Symbol>
  stmts: Tuple<ProjStmt>

;============================================================
;==================== Printers ==============================
;============================================================

defmethod print (o:OutputStream, p:ProjIsolate) :
  val items = [
    line-wrapped-field("packages", packages(p))
    named-list-fields("stmts", stmts(p))]
  print(o, "ProjIsolate%_" % [colon-field-list(items)])

;============================================================
;==================== Main Algorithm ========================
;============================================================

public defn isolate-stmts (proj:ProjFile, root-packages:Tuple<Symbol>) -> ProjIsolate :
  ;Initialize root keys
  val relevant-items = HashSet<ProjItem>()
  for p in root-packages do : add(relevant-items, PackageItem(p))
  for stmt in filter-by<RequiresStmt>(stmts(proj)) do :
    if relevant-items[PackageItem(package(stmt))] :
      for f in ccfiles(stmt) do :
        add(relevant-items,CCFileItem(f))
      for f in ccflags(stmt) do :
        add(relevant-items,CCFlagItem(f))
      for f in foreign-packages(stmt) do :
        add(relevant-items,PackageManagerItem(package-manager(f)))

  ;Initialize package tree
  val package-tree = PackageTree(root-packages)

  ;Filter stmts. Return true if the given ProjStmt
  ;is relevant to the set of root packages. 
  defn relevant? (s:ProjStmt) -> True|False :
    label<True|False> return :
      match(s) :
        (s:PackagesDefinedInStmt) :
          non-empty-root?(package-tree, packages(s))
        (s) :
          within item = main-items(s) :
            return(true) when relevant-items[item]
        
  ;Return isolate
  ProjIsolate(
    qsort(root-packages), 
    to-tuple(filter(relevant?, stmts(proj))))

;------------------------------------------------------------
;--------------------- Main Item ----------------------------
;------------------------------------------------------------
;Given the set of all relevant proj items in the program,
;we can sweep through each ProjStmt and ask whether it is relevant.
;We define a statement as "relevant" if any of its "main items"
;appear in the relevant item set.
;
;Here is a nuanced example: For the RequiresStmt, if the package
;appears in the set of relevant proj items, then obviously the RequiresStmt
;is relevant. However, even if the ccfiles themselves appear
;in the set of relevant proj items, it does *not* imply that the
;RequiresStmt is relevant.

defn main-items (return:ProjItem -> ?, s:ProjStmt) -> ? :
  match(s) :
    ;Additionally include the dependencies of an import-when statement.
    (s:ImportWhenStmt) :
      return(main-item(s))
      for d in dependencies(s) do : return(PackageItem(d))
    ;Build statements are never relevant.
    (s:BuildStmt) :
      false
    ;All other statements only have one main item.
    (s:ProjStmt) :
      return(main-item(s))

;The main-item of a statement is used to match one
;statement against another when comparing isolates.
defn main-item (s:ProjStmt) -> ProjItem :
  match(s) :
    (s:DefinedInStmt) : PackageItem(package(s))
    (s:RequiresStmt) : PackageItem(package(s))
    (s:ImportWhenStmt) : PackageItem(package(s))
    (s:CompileStmt) :
      if file?(s) : CCFileItem(name(s) as String)
      else : CCFlagItem(name(s))
    (s:ForeignPackageParamsStmt) :
      PackageManagerItem(package-manager(s))
  
;------------------------------------------------------------
;-------------------- ProjItem Utility ----------------------
;------------------------------------------------------------

;Structured representation of an 'item' in the .proj file.
;Used to indicate that an item is relevant.
deftype ProjItem <: Equalable & Hashable & Comparable<ProjItem>

;Represents a Stanza package.
defstruct PackageItem <: ProjItem :
  name:Symbol
with:
  equalable => true
  hashable => true
  
;Represents an external C file.
defstruct CCFileItem <: ProjItem :
  filename:String
with:
  equalable => true
  hashable => true
  
;Represents an external C flag.
defstruct CCFlagItem <: ProjItem :
  name:String|Tuple<String>
with:
  equalable => true
  hashable => true

;Represents a foreign package manager.
defstruct PackageManagerItem <: ProjItem :
  name:Symbol
with:
  equalable => true
  hashable => true

;============================================================
;==================== Package Tree ==========================
;============================================================

;Represents the tree of all root packages. 
defstruct PackageTree :
  children:HashTable<String,PackageTree> with:
    init => HashTable-init<String,PackageTree>(PackageTree{})

;Construct a PackageTree out of the given package names.
defn PackageTree (packages:Seqable<Symbol>) -> PackageTree :
  val tree = PackageTree()
  for package-name in packages do :
    add-to-tree(tree, split-package-name(package-name))
  tree

;Helper: Split a package a/b/c into its parts.
defn split-package-name (package:Symbol) -> Seq<String> :
  split(to-string(package), "/")

;Helper: Add a split up package into a tree.
defn add-to-tree (tree:PackageTree, names:Seq<String>) -> False :
  if not empty?(names) :
    val subtree = children(tree)[next(names)]
    add-to-tree(subtree, names)    

;Helper: Retrieve the subtree at the given path.
defn subtree (tree:PackageTree, names:Seq<String>) -> PackageTree|False :
  if empty?(names) :
    tree
  else :
    val name = next(names)
    match(get?(children(tree), name)) :
      (t:PackageTree) : subtree(t, names)
      (f:False) : false

;Returns true if there exists packages in the tree under
;the given root.
defn non-empty-root? (tree:PackageTree, root:Symbol|False) -> True|False :
  ;Retrieve the root split up into parts.
  val parts = match(root:Symbol) : split-package-name(root)
              else : to-seq([])

  ;Retrieve the subtree.
  match(subtree(tree, parts)) :
    (t:PackageTree) : not empty?(children(t))
    (f:False) : false

;============================================================
;=================== Isolate Isomorphism ====================
;============================================================

;Return true if two extracted isolates are equal to each other.
public defn isomorphic? (a:ProjIsolate, b:ProjIsolate) -> True|False :
  if packages(a) == packages(b) :
    if length(stmts(a)) == length(stmts(b)) :
      val atable = to-hashtable<ProjItem,ProjStmt&Equalable> $
        for s in stmts(a) seq : main-item(s) => s as ProjStmt&Equalable
      for s in stmts(b) all? :
        (s as ProjStmt&Equalable) == get?(atable, main-item(s))