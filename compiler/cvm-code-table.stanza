defpackage stz/cvm-code-table :
  import core
  import collections
  import stz/vm-ir
  import stz/code-table
  import stz/utils
  import stz/backend
  import stz/cvm-encoder
  import stz/vm-structures

;============================================================
;=================== Struct Definition ======================
;============================================================

public lostanza deftype CVMCodeTable <: CodeTable :
  bytecode:ref<Buffer>

public lostanza defn CVMCodeTable () -> ref<CVMCodeTable> :
  return new CVMCodeTable{Buffer()}

;============================================================
;================== Instruction Memory ======================
;============================================================

;Returns the address of the instructions in the code table.
lostanza defmethod instructions (t:ref<CVMCodeTable>) -> ref<Long> :
  return new Long{t.bytecode.mem as long}

;============================================================
;==================== Loading Functions =====================
;============================================================

lostanza defmethod load-function (table:ref<CVMCodeTable>,
                                  fid:ref<Int>,
                                  func:ref<VMFunction>,
                                  resolver:ref<EncodingResolver>,
                                  backend:ref<Backend>) -> ref<LoadedFunction> :
  ;Encode the function using the CVM encoder.
  val encoded-function = encode(func, resolver, backend)

  ;Load the bytecode into the bytecode vector.
  val num-bytes = length(buffer(encoded-function))
  val offset = alloc(table.bytecode, num-bytes.value)
  call-c clib/memcpy(table.bytecode.mem + offset, data(buffer(encoded-function)), num-bytes.value)

  ;Add the offset to the trace entries so that we know their absolute position.
  val relocated-trace-entries = add-offset(trace-entries(encoded-function), new Long{offset})

  ;Return the new loaded function
  return LoadedFunction(new Long{offset}, relocated-trace-entries)

;Add 'offset' to the 'pc' of every entry in 'trace-entries' and return
;the result.
defn add-offset (trace-entries:Seqable<TraceTableEntry>, offset:Long) -> Vector<TraceTableEntry> :
  to-vector<TraceTableEntry> $ for e in trace-entries seq :
    TraceTableEntry(pc(e) + offset, entry(e))

;============================================================
;================== Launch ==================================
;============================================================

extern vmloop: (ptr<VMState>, long, long) -> int

lostanza defmethod launch (vmstate-address:ref<Long>, table:ref<CVMCodeTable>, func-id:ref<Int>) -> ref<False> :
  val vmstate = vmstate-address.value as ptr<VMState>
  call-c vmloop(vmstate, call-prim crsp() as long, func-id.value)
  return false