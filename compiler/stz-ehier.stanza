defpackage stz/ehier :
  import core
  import collections
  import stz/dl-ir
  import stz/el-ir  

public deftype EHier
public defmulti subtype? (hier:EHier, a:EType, b:EType) -> True|False

public defn EHier (packageio:PackageIO, iotable:IOTable) :
  ;Hold the parent identifiers of all parents of each type
  val parent-table = IntTable<List<Int>>(List())

  ;Construct parent table
  defn add-to-parent-table (n:Int, p:Int) :
    update(parent-table, cons{p, _}, n)
  for e in cat(imports(packageio), exports(packageio)) do :
    val r = rec(e)
    match(r:StructRec|TypeRec|TypeDecl) :
      defn add-parent (t:False|DType) :
        match(t) :
          (t:DOf) : add-to-parent-table(n(e), n(iotable,id(t)))
          (t:DAnd) : do(add-parent, types(t))
          (t) : false
      add-parent(parent(r))
    match(r:TypeRec|TypeDecl) :
      for c in children(r) do :
        add-to-parent-table(n(iotable, id(c)), n(iotable, id(parent(c))))

  ;Subtype relation
  defn subtype? (x:EType, y:EType) :
    defn st (x:EType, y:EType) :
      match(x, y) :
        ;4. Top and Bottom Type: Fast Path
        (x, y:ETop) : true
        (x:EBot, y) : true
        ;3. Combinatory types
        (x:EOr, y) : st(a(x), y) and st(b(x), y)
        (x, y:EAnd) : st(x, a(y)) and st(x, b(y))
        (x:EAnd, y:EOr) : st(x,a(y)) or st(x,b(y)) or st(a(x),y) or st(b(x),y)
        (x, y:EOr) : st(x,a(y)) or st(x,b(y))
        (x:EAnd, y) : st(a(x),y) or st(b(x),y)
        ;2. Unitary types
        (x:EOf, y:EOf) :
          if n(x) == n(y) : true
          else : any?(st{EOf(_), y}, parent-table[n(x)])
        ;1. Ground types
        (x:ETVar, y:ETVar) : n(x) == n(y)
        ;Fall through
        (x, y) : false
    fatal("Not a reference type: %_" % [x]) when not reftype?(x)
    fatal("Not a reference type: %_" % [y]) when not reftype?(y)
    st(x,y)

  ;Return hierarchy
  new EHier :
    defmethod subtype? (this, a:EType, b:EType) : subtype?(a,b)