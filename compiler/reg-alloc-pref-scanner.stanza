defpackage stz/reg-alloc-pref-scanner :
  import core
  import collections
  import stz/reg-alloc-ir
  import stz/reg-alloc-ports
  import stz/reg-alloc-liveness-scanner
  import stz/reg-alloc-model-env

;Algorithm for computing preferred port preferences when instructions
;are processed in reverse order.
public deftype PrefScanner

;Initialize the algorithm by scanning the output ports.
public defmulti scan-output-ports (scanner:PrefScanner, ports:Collection<Port>) -> False

;Scan only the definitions of the operations.
public defmulti scan-defs (scanner:PrefScanner, index:Int, stmt:OperationStmt|SetStmt) -> False

;Scan only the arguments of the operations.
public defmulti scan-args (scanner:PrefScanner, index:Int, stmt:OperationStmt|SetStmt) -> False

;Retrieve the current preferences for the given variable.
public defmulti preference (scanner:PrefScanner, variable:Int) -> PortPref

;Retrieve the currently live variables.
;A variable is live if it is going to be used by one of the scanned
;statements.
public defmulti live-vars (s:PrefScanner) -> Seqable<KeyValue<Int,Int>>

;Retrieve the next usage of a variable.
;Returns false if the variable is not live.
public defmulti next-usage (s:PrefScanner, v:Int) -> Int|False

;Create the preference scanner.
public defn PrefScanner (models:ModelEnv) -> PrefScanner :
  ;Use a liveness scanner internally.
  val liveness-scanner = LivenessScanner()
  
  ;Record the save/load preferences of variables.
  val save-prefs = IntTable<SavePref>()
  val load-prefs = IntTable<LoadPref>()

  new PrefScanner :
    ;Initialize the scanner by scanning the given output ports.
    defmethod scan-output-ports (this, ports:Collection<Port>) :
      scan-output-ports(liveness-scanner, ports)
      for p in ports do :
        match(prefs(p)) :
          (prefs:PortPref) :
            save-prefs[id(p)] = save-pref(prefs)
            load-prefs[id(p)] = load-pref(prefs)
          (prefs:False) :
            save-prefs[id(p)] = PreferSaveIfSuccessor
            load-prefs[id(p)] = PreferUnloadIfSuccessor

    ;Scan only the definitions of an OperationStmt.
    defmethod scan-defs (this, index:Int, stmt:OperationStmt|SetStmt) :
      scan-defs(liveness-scanner, index, stmt)

      ;Remove the preferences for the def'd variables.
      for v in results(stmt) do :
        remove(save-prefs, v)
        remove(load-prefs, v)

    ;Scan only the arguments of an OperationStmt|SetStmt.
    defmethod scan-args (this, index:Int, stmt:OperationStmt|SetStmt) :
      ;If the operation clears all registers, then
      ;the live variables need to be saved, and the
      ;variables do not need to be loaded.
      match(stmt:OperationStmt) :
        if clears-registers?(models, op-id(stmt)) :
          for v in live-vars(liveness-scanner) do :
            save-prefs[key(v)] = PreferSave
            load-prefs[key(v)] = PreferUnload

      ;All the arguments to the operation are now live,
      ;so they do not prefer to be unloaded.
      for v in args(stmt) do :
        load-prefs[v] = NoPreferUnload

      ;Scan the liveness using the liveness scanner.
      scan-args(liveness-scanner, index, stmt)

    ;Retrieve the bundled preference for the given variable.
    defmethod preference (this, v:Int) :
      ;If variable is dead, then there's no preference for it to be
      ;saved: NoPreferSave.
      ;If variable is dead, then we prefer for it to be unloaded: PreferUnload.
      PortPref(
        get?(save-prefs, v, NoPreferSave)
        get?(load-prefs, v, PreferUnload)
        false)

    defmethod live-vars (this) :
      live-vars(liveness-scanner)
      
    defmethod next-usage (this, v:Int) :
      next-usage(liveness-scanner, v)

;Scan the given program statement at the given index.
public defn scan-stmt (s:PrefScanner, index:Int, stmt:ProgramStmt) :
  match(stmt:OperationStmt|SetStmt) :
    scan-defs(s, index, stmt)
    scan-args(s, index, stmt)