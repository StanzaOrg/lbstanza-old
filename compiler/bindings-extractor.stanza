defpackage stz/bindings-extractor :
  import core
  import collections
  import stz/pkg
  import stz/il-ir
  import stz/dl-ir
  import stz/vm-ir
  import stz/bindings
  import stz/utils
  import stz/namemap

;============================================================
;===================== Extraction ===========================
;============================================================
public defn extract-bindings (packages:Seqable<IPackage|Pkg>) -> Bindings :
  val externs = Vector<ExternBinding>()
  val extern-defns = Vector<ExternDefnBinding>()
  val errors = Vector<Exception>()
  defn add-binding (e:ExternBinding|ExternDefnBinding|Exception) :
    match(e) :
      (e:ExternBinding) : add(externs, e)
      (e:ExternDefnBinding) : add(extern-defns, e)
      (e:Exception) : add(errors, e)

  ;Scan all packages for bindings
  for p in packages do :
    match(p) :
      (p:IPackage) : scan-ipackage(add-binding, p)
      (p:Pkg) : scan-pkg(add-binding, p)

  ;Scan for inconsistent bindings
  val extern-lbls = to-hashset<Symbol>(seq(lbl, externs))
  for group in group-by(lbl, extern-defns) do :
    val lbl = key(group)
    val bindings = unique(seq(signature, value(group)))
    if extern-lbls[lbl] :
      add(errors, LblUsedForExtern(lbl))
    if length(bindings) > 1 :
      add(errors, InconsistentDefns(lbl, bindings))

  ;Throw errors
  if not empty?(errors) :
    throw(BindingException("%n" % [errors]))

  ;Remove duplicates
  val externs* = let :
    val lbl-set = HashSet<Symbol>()
    to-tuple $ for e in externs filter :
      add(lbl-set, lbl(e))
  val extern-defns* = let :
    val lbl-set = HashSet<Symbol>()
    to-tuple $ for e in extern-defns filter :
      add(lbl-set, lbl(e))

  ;Return bindings
  Bindings(to-tuple(externs*), to-tuple(extern-defns*))  

;============================================================
;================= Extraction from IPackage =================
;============================================================
defn scan-ipackage (return:ExternBinding|ExternDefnBinding|Exception -> ?, p:IPackage) :
  defn get-lbl (e:IExp) -> Symbol :
    name(namemap(p)[n(e as VarN)])
    
  defn scan (e:IExp) :
    match(e) :
      (e:ILSExtern) :
        return(ExternBinding(get-lbl(name(e))))
      (e:ILSExternFn) :
        val fname = get-lbl(name(e))
        attempt :
          defn to-vmtype! (e:IExp) :
            match(e) :
              (e:ILSByteT) : VMByte()
              (e:ILSIntT) : VMInt()
              (e:ILSLongT) : VMLong()
              (e:ILSFloatT) : VMFloat()
              (e:ILSDoubleT) : VMDouble()
              (e:ILSPtrT) : VMLong()
              (e:ILSRefT) : VMRef()
              (e) : fail()
          val a1* = to-tuple(seq(to-vmtype!, a1(e)))
          val a2* = to-vmtype!(a2(e))
          return(ExternDefnBinding(fname, a1*, a2*))
        else :
          return(BindingTypeError(name(p), fname))
      (e:IBegin) : do(scan,exps(e))
      (e:IVisibility) : scan(exp(e))
      (e) : false
  do(scan, exps(p))

;============================================================
;================== Extraction from Pkg =====================
;============================================================
defn scan-pkg (return:ExternBinding|ExternDefnBinding|Exception -> ?, p:Pkg) :
  scan-packageio(return, packageio(p))

;============================================================
;================= Extraction from PackageIO ================
;============================================================
defn scan-packageio (return:ExternBinding|ExternDefnBinding|Exception -> ?, p:PackageIO) :
  for e in exports(p) do :
    match(rec(e)) :
      (r:ExternFnRec) :
        attempt :
          defn to-vmtype! (t:DType) :
            match(t) :
              (t:DByte) : VMByte()
              (t:DInt) : VMInt()
              (t:DLong) : VMLong()
              (t:DFloat) : VMFloat()
              (t:DDouble) : VMDouble()
              (t:DPtrT) : VMLong()
              (t:DOf|DTVar|DCap|DAnd|DOr|DTop|DBot|DTuple|DArrow) : VMRef()
              (t) : fail()
          val a1* = map(to-vmtype!, a1(id(r) as FnId))
          val a2* = to-vmtype!(a2(r))
          return(ExternDefnBinding(lbl(r), a1*, a2*))
        else :
          return(BindingTypeError(package(p), name(id(r))))
      (r:ExternRec) :
        return(ExternBinding(lbl(r)))
      (r) : false

;============================================================
;======================= Errors =============================
;============================================================

public deftype BindingException <: Exception
public defn BindingException (msg) :
  val msg-str = to-string(msg)
  new BindingException :
    defmethod print (o:OutputStream, this) :
      print(o, msg-str)

defn BindingErrors (errors:Collection<BindingException>) :
  BindingException("%n" % [errors])

defn InconsistentDefns (lbl:Symbol, sigs:List<ExDefnSignature>) :
  new BindingException :
    defmethod print (o:OutputStream, this) :
      print(o, "There are multiple conflicting signatures for extern defn %~:" % [lbl])
      val o2 = IndentedStream(o)
      for s in sigs do : lnprint(o2, s) 

defn LblUsedForExtern (lbl:Symbol) :
  BindingException $ "Label '%~' is used as both an extern and extern defn binding." % [lbl]

defn BindingTypeError (package:Symbol, name:Symbol) :
  BindingException $ "Extern defn %~ in package %~ uses types that are unsupported by Stanza." % [package, name]
  