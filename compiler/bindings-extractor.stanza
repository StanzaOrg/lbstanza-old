defpackage stz/bindings-extractor :
  import core
  import collections
  import stz/pkg-ir
  import stz/pkg-errors
  import stz/il-ir
  import stz/dl-ir
  import stz/vm-ir
  import stz/bindings
  import stz/utils
  import stz/namemap
  import stz/visibility
  import stz/bindings-errors

;============================================================
;===================== Extraction ===========================
;============================================================

;Extract all bindings in the given packages.
;Throws a BindingException if there are inconsistencies in the labels.

public defn extract-bindings (packages:Seqable<IPackage|Pkg>) -> Bindings :

  ;Accumulate bindings here.
  val externs = HashTable<Symbol,ExternBinding>()
  val extern-defns = HashTable<Symbol,ExternDefnBinding>()

  ;Gather all bindings into the tables.
  for b in seq-cat(bindings, packages) do :
    match(b) :
      (b:ExternBinding) : externs[lbl(b)] = b
      (b:ExternDefnBinding) : extern-defns[lbl(b)] = b

  ;Scan for any inconsistencies.
  val errors = Vector<BindingException>()
  for lbl in keys(extern-defns) do :
    if key?(externs, lbl) :
      add(errors, LblUsedForExtern(lbl))
  throw(BindingErrors(errors)) when not empty?(errors)

  ;Return bindings
  Bindings(
    to-tuple(values(externs)),
    to-tuple(values(extern-defns)))

;============================================================
;================= Extraction from IPackage =================
;============================================================

;Retrieve all the bindings contained within the IPackage.
defn bindings (p:IPackage) -> Seqable<ExternBinding|ExternDefnBinding> :

  ;Retrieve the VarEntry for the given VarN. 
  defn varentry (e:IExp) -> VEntry :
    val n = n(e as VarN)
    namemap(p)[n]

  ;Scan through all top-level expressions in the package.
  for e in seq-cat(top-level-exps, exps(p)) seq? :
    match(e) :
    
      ;Case: extern binding
      (e:ILSExtern) :
        val ventry = varentry(name(e))
        One(ExternBinding(name(ventry)))
        
      ;Case: extern defn binding
      (e:ILSExternFn) :

        ;Private extern defns do not need a static label.
        val ventry = varentry(name(e))
        if visibility(ventry) is Private : None()
        else : One(ExternDefnBinding(name(ventry)))

      ;Case: other expression
      (e) :
        None()

;============================================================
;================== Extraction from Pkg =====================
;============================================================

;Retrieve all the bindings contained within the given Pkg structure.
defn bindings (p:Pkg) -> Seqable<ExternBinding|ExternDefnBinding> :
  bindings(packageio(p))

;============================================================
;================= Extraction from PackageIO ================
;============================================================

;Retrieve all the bindings contained within the given PackageIO structure.
defn bindings (p:PackageIO) -> Seqable<ExternBinding|ExternDefnBinding> :
  for e in exports(p) seq? :
    match(rec(e)) :

      ;Case: extern defn bindings.
      (r:ExternFnRec) :

        ;Create binding if it has exposed label.
        match(lbl(r)) :
          (lbl:Symbol) : One(ExternDefnBinding(lbl))
          (f:False) : None()

      ;Case: extern binding.
      (r:ExternRec) :
        One(ExternBinding(lbl(r)))
        
      ;Not an extern or extern defn definition.
      (r) :
        None()

