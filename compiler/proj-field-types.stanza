defpackage stz/proj-field-types :
  import core
  import collections
  import core/parsed-path
  import stz/proj-ir
  import stz/proj-stage0
  import stz/proj-value-types
  import stz/foreign-package-files

;============================================================
;======================= Mapper =============================
;============================================================

;Plug in different instantiations for different algorithms to map.
public deftype Mapper

;Map some operation onto the given value v which has type t.
public defmulti map-field (m:Mapper, v:ProjValue, t:ValueType) -> ProjValue

;Helper: Call map-field if v is not empty.
defn map-field (m:Mapper, v:Maybe<ProjValue>, t:ValueType) -> Maybe<ProjValue> :
  if empty?(v) : None()
  else : One(map-field(m, value!(v), t))

;============================================================
;===================== Extractor ============================
;============================================================

;Plug in different instantiations for different algorithms to extract.
public deftype Extractor

;Extract the value of the given field given its type.
public defmulti extract (e:Extractor, v:ProjValue, t:ValueType) -> ?

;Retrieve the absolute path of the working directory.
public defmulti workdir (e:Extractor) -> ParsedPath

;Helper: Return None() if v is empty and t is single.
;        Return () if v is empty and t is multiple.
defn extract (e:Extractor, v:Maybe<ProjValue>, t:ValueType) -> ? :
  if single?(t) :
    if empty?(v) : None()
    else : One(extract(e, value!(v), t))
  else :
    val value = ProjValues(false,[]) when empty?(v)
           else value!(v)
    extract(e, value, t)

;Helper: Force output to be a tuple.
;Used because .proj extractor uses List(...) to represent multiple
;values, but ProjIR usually uses Tuple for multiple things.
defn extract-tuple (e:Extractor, v:Maybe<ProjValue>, t:ValueType) -> Tuple :
  to-tuple(extract(e, v, t))
defn extract-tuple (e:Extractor, v:ProjValue, t:ValueType) -> Tuple :
  to-tuple(extract(e, v, t))

;============================================================
;=========== Field Types of ForeignPackageParams ============
;============================================================

;Retrieve the expected field types of a foreign package.
public defmulti field-types (c:Mapper|Extractor,
                             package-manager:Symbol) -> Tuple<TableEntry>

;============================================================
;=================== Field Types ============================
;============================================================

public defmulti map-fields (s:ProjStmt, mapper:Mapper) -> ProjStmt :
  s

public defmulti convert (s:ProjStmt, extractor:Extractor) -> ProjStmt|False :
  false

defmethod map-fields (s:DefinedInStmtS0, mapper:Mapper) :
  DefinedInStmtS0(
    info(s),
    package(s),
    map-field(mapper, filename(s), SINGLE-PATH))
defmethod convert (s:DefinedInStmtS0, extractor:Extractor) :
  DefinedInStmt(
    package(s),
    extract(extractor, filename(s), SINGLE-PATH))

defmethod map-fields (s:PackagesDefinedInStmtS0, mapper:Mapper) :
  PackagesDefinedInStmtS0(
    info(s),
    packages(s),
    map-field(mapper, filename(s), SINGLE-PATH))
defmethod convert (s:PackagesDefinedInStmtS0, extractor:Extractor) :
  val [package-without-star star] = qualifier(packages(s))
  PackagesDefinedInStmt(
    package-without-star,
    extract(extractor, filename(s), SINGLE-PATH))

defmethod map-fields (s:DylibDirectoryStmtS0, mapper:Mapper) :
  DylibDirectoryStmtS0(
    info(s),
    map-field(mapper, directories(s), MULTIPLE-PATHS))
defmethod convert (s:DylibDirectoryStmtS0, extractor:Extractor) :
  val dirs = extract-tuple(extractor, directories(s), MULTIPLE-PATHS)
  DylibDirectoryStmt(dirs)

defmethod map-fields (s:RequiresStmtS0, mapper:Mapper) :
  val dylib = map-field(mapper, dylib(s), SINGLE-PATH)
  val ccfiles = map-field(mapper, ccfiles(s), MULTIPLE-PATHS)
  val ccflags = map-field(mapper, ccflags(s), MULTIPLE-FLAGS)
  val fps = for fp in foreign-packages(s) map :
    val files = map-field(mapper, files(fp), MULTIPLE-STRINGS)
    ForeignPackageFilesS0(package-manager(fp), files)
  RequiresStmtS0(info(s), package(s), dylib, ccfiles, ccflags, fps)
defmethod convert (s:RequiresStmtS0, extractor:Extractor) :
  val dylib = extract(extractor, dylib(s), SINGLE-PATH)
  val ccfiles = extract-tuple(extractor, ccfiles(s), MULTIPLE-PATHS)
  val ccflags = extract-tuple(extractor, ccflags(s), MULTIPLE-FLAGS)
  val fps = for fp in foreign-packages(s) map :
    val files = extract-tuple(extractor, files(fp), MULTIPLE-STRINGS)
    ForeignPackageFiles(package-manager(fp), files)
  RequiresStmt(package(s), dylib, ccfiles, ccflags, fps)

defmethod map-fields (s:ImportWhenStmtS0, mapper:Mapper) :
  ImportWhenStmtS0(
    info(s),
    package(s),
    map-field(mapper, dependencies(s), MULTIPLE-SYMBOLS))
defmethod convert (s:ImportWhenStmtS0, extractor:Extractor) :
  ImportWhenStmt(
    package(s),
    extract-tuple(extractor, dependencies(s), MULTIPLE-SYMBOLS))

defmethod map-fields (s:CompileStmtS0, mapper:Mapper) :
  val name-type = SINGLE-PATH when file?(s) else SINGLE-FLAG
  val name = map-field(mapper, name(s), name-type)
  val deps = map-field(mapper, dependencies(s), MULTIPLE-PATHS)
  val fps = for fp in foreign-packages(s) map :
    val files = map-field(mapper, files(fp), MULTIPLE-STRINGS)
    ForeignPackageFilesS0(package-manager(fp), files)
  val commands = map-field(mapper, commands(s), MULTIPLE-STRINGS)
  CompileStmtS0(info(s), file?(s), name, deps, fps, commands)
defmethod convert (s:CompileStmtS0, extractor:Extractor) :
  val name-type = SINGLE-PATH when file?(s) else SINGLE-FLAG
  val name = extract(extractor, name(s), name-type)
  val deps = extract-tuple(extractor, dependencies(s), MULTIPLE-PATHS)
  val fps = for fp in foreign-packages(s) map :
    val files = extract-tuple(extractor, files(fp), MULTIPLE-STRINGS)
    ForeignPackageFiles(package-manager(fp), files)
  val commands = extract-tuple(extractor, commands(s), MULTIPLE-STRINGS)
  CompileStmt(file?(s), name, deps, fps, commands)

defmethod map-fields (s:BuildStmtS0, mapper:Mapper) :
  BuildStmtS0(
    info(s),
    name(s)
    type(s)
    map-field(mapper, inputs(s), MULTIPLE-STANZA-INPUTS)
    map-field(mapper, supported-vm-packages(s), MULTIPLE-STANZA-INPUTS)
    map-field(mapper, pkg(s), SINGLE-PATH)
    map-field(mapper, output(s), SINGLE-PATH)
    map-field(mapper, assembly(s), SINGLE-PATH)
    map-field(mapper, external-dependencies(s), SINGLE-PATH)
    map-field(mapper, ccfiles(s), MULTIPLE-PATHS)
    map-field(mapper, ccflags(s), MULTIPLE-FLAGS)
    map-field(mapper, flags(s), MULTIPLE-SYMBOLS)
    optimize(s))
defmethod convert (s:BuildStmtS0, extractor:Extractor) :
  BuildStmt(
    name(s)
    type(s)
    extract-tuple(extractor, inputs(s), MULTIPLE-STANZA-INPUTS)
    extract-tuple(extractor, supported-vm-packages(s), MULTIPLE-STANZA-INPUTS)
    extract(extractor, pkg(s), SINGLE-PATH)
    extract(extractor, output(s), SINGLE-PATH)
    extract(extractor, assembly(s), SINGLE-PATH)
    extract(extractor, external-dependencies(s), SINGLE-PATH)
    extract-tuple(extractor, ccfiles(s), MULTIPLE-PATHS)
    extract-tuple(extractor, ccflags(s), MULTIPLE-FLAGS)
    extract-tuple(extractor, flags(s), MULTIPLE-SYMBOLS)
    optimize(s))

defmethod map-fields (s:SyntaxPackagesDefinedInStmtS0, mapper:Mapper) :
  SyntaxPackagesDefinedInStmtS0(
    info(s),
    packages(s)
    map-field(mapper, filename(s), SINGLE-PATH))
defmethod convert (s:SyntaxPackagesDefinedInStmtS0, extractor:Extractor) :
  SyntaxPackagesDefinedInStmt(
    packages(s)
    extract(extractor, filename(s), SINGLE-PATH))

defmethod map-fields (s:ForeignPackageParamsStmtS0, mapper:Mapper) :
  val projdir = map-field(mapper, projdir(s), SINGLE-PATH)
  val entry-type = TableType(field-types(mapper, package-manager(s)))
  val stmt-value = ProjTableS0(info(s), entries(s))
  val new-value = map-field(mapper, stmt-value, entry-type) as ProjTableS0
  ForeignPackageParamsStmtS0(
    info(s),
    package-manager(s),
    projdir,
    values(new-value))
defmethod convert (s:ForeignPackageParamsStmtS0, extractor:Extractor) :
  ;To make it easier for the package manager, we resolve any
  ;paths in the parameters to absolute paths using the working directory.
  val projdir = add-workdir(extractor, extracted, SINGLE-PATH) where:
    val extracted = extract(extractor, projdir(s), SINGLE-PATH)
  val entry-type = TableType(field-types(extractor, package-manager(s)))
  val stmt-value = ProjTableS0(info(s), entries(s))
  val new-value = extract(extractor, stmt-value, entry-type) as ProjTable
  val resolved-value = add-workdir(extractor, new-value, entry-type) as ProjTable
  ForeignPackageParamsStmt(
    package-manager(s),
    projdir,
    entries(resolved-value))

;Follow the structure of the given type, and prefix
;the working directory to the value wherever type is a FilepathType,
;or a StanzaInputType.
;Safe to assume that v follows the structure of 'type'. The checking
;pass is guaranteed to run before this step.
defn add-workdir (extractor:Extractor, v, type:ValueType) -> ? :
  match(v, type) :
    ;Case: Add the working directory to strings.
    (v:String, type:FilepathType|StanzaInputType) :
      to-string(relative-to-dir(workdir(extractor), v))
    ;Case: Other atoms are unchanged.
    (v, type:AtomType) :
      v
    ;Case: Multiple values are processed recursively.
    (v:List, type:MultipleType) :
      map(add-workdir{extractor, _, /type(type)}, v)
    (v, type:MultipleType) :
      add-workdir(extractor, v, /type(type))
    ;Case: Tuple values are processed recursively.
    (v:Tuple, type:TupleType) :
      map(add-workdir{extractor, _, /type(type)}, v)
    ;Case: Table values are processed recursively.
    (v:ProjTable, type:TableType) :
      ;Create a quick table of expected field types.
      val field-types = to-hashtable<Symbol,ValueType> $
        for entry in entries(type) seq :
          name(entry) => /type(entry)
      ;Process each value using the corresponding type
      ;for that field.
      val new-entries = for entry in entries(v) map :
        val field-type = field-types[key(entry)]
        val new-value = add-workdir(extractor, value(entry), field-type)
        key(entry) => new-value
      ProjTable(new-entries)
    ;Case: Value is not welltyped. Checker has a bug.
    (v, type) :
      fatal("Value is not welltyped. Value has type %_, but expected to have type %_." % [
        object-type(v), object-type(type)])