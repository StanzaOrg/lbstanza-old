defpackage stz/dyn-tree :
  import core
  import collections
  import stz/utils
  import stz/dynamic-graph

;============================================================
;==================== Tree Interface ========================
;============================================================

public deftype DynTree
public defmulti add (t:DynTree, nodes:Seqable<NodeState>) -> False
public defmulti all-children (t:DynTree, n:Int) -> Tuple<Int>
public defmulti all-leaves (t:DynTree, n:Int) -> Tuple<Int>
public defmulti non-leaves (t:DynTree) -> IntSet
public defmulti add (t:DynTree, listener:TreeListener) -> False

public defstruct NodeState :
  id: Int
  parents: Tuple<Int>
  children: Tuple<Int>
  leaf?: True|False
with:
  printer => true

;============================================================
;=================== Listener Interface =====================
;============================================================

public deftype TreeListener
public defmulti node-changed (t:TreeListener, n:Int) -> False

;============================================================
;==================== Tree Implementation ===================
;============================================================

public defn DynTree () :
  val listeners = Vector<TreeListener>()
  val changed-nodes = Vector<Int>()
  val graph = DynamicGraph()

  defn make-root-node () :
    val root-node = new Node :
      defmethod id (this) :
        -1
      defmethod compute-value (this, v0:Maybe<IntSet>) :
        val non-leaves = IntSet()
        defn input-values () :
          for input in inputs(graph,-1) seq :
            value(graph,input) as AllChildren
        ;Add children
        for v in input-values() do :
          add-all(non-leaves, children(v))
        ;Remove leaves
        for v in input-values() do :
          for n in leaves(v) do :
            remove(non-leaves, n)
        ;Return non-leaves set
        non-leaves
    update(graph, GraphChange([root-node], []))

  defn add-nodes (node-states:Seqable<NodeState>) :
    defn make-edge-set (s:NodeState) :
      EdgeSet(
        id(s),
        to-tuple $ cat-all $ [
          [Edge(id(s), -1)]
          for p in parents(s) seq :
            Edge(id(s), p)
          for c in children(s) seq :
            Edge(c, id(s))])

    defn make-node (s:NodeState) :
      new Node :
        defmethod id (this) :
          id(s)
        defmethod compute-value (this, v0:Maybe<AllChildren>) :
          val children = Vector<Int>()
          val leaves = Vector<Int>()
          for input in inputs(graph, id(s)) do :
            val v = value(graph,input) as AllChildren
            add-all(children, /children(v))
            add-all(leaves, /leaves(v))
          add(children, id(s))
          add(leaves, id(s)) when leaf?(s)            
          val v* = AllChildren(sorted-tuple(children), sorted-tuple(leaves))
          add(changed-nodes, id(s)) when v0 != One(v*)
          v*

    ;Update the graph with the new nodes and edge set
    val change = GraphChange(nodes, edge-sets) where :
      val [nodes, edge-sets] = fork-on-seq(node-states,
        to-tuple{seq(make-node, _)}
        to-tuple{seq(make-edge-set, _)})
    update(graph, change)

    ;Notify listeners
    for n in changed-nodes do :
      for l in listeners do : node-changed(l,n)
    clear(changed-nodes)

  make-root-node()
  new DynTree : 
    defmethod add (this, nodes:Seqable<NodeState>) :
      add-nodes(nodes)
    defmethod all-children (this, node:Int) :
      children(value(graph, node) as AllChildren)
    defmethod all-leaves (this, node:Int) :
      leaves(value(graph, node) as AllChildren)
    defmethod add (this, listen:TreeListener) :
      add(listeners, listen)
    defmethod non-leaves (this) :
      value(graph, -1) as IntSet
    defmethod print (o:OutputStream, this) :
      print(o, graph)

;============================================================
;===================== Children =============================
;============================================================

defstruct AllChildren <: Equalable :
  children: Tuple<Int>
  leaves: Tuple<Int>
with:
  printer => true

defmethod equal? (a:AllChildren, b:AllChildren) :
  (children(a) == children(b)) and
  (leaves(a) == leaves(b))

;============================================================
;================== Convenience API =========================
;============================================================

public defn DynTree (s:Seqable<NodeState>) :
  val t = DynTree()
  add(t, s)
  t

;Return true if p is a parent of x.
;(or equivalently: whether x is a child of p)
public defn parent? (t:DynTree, x:Int, p:Int) :
  bsearch(all-children(t,p), x) is Int
   
;============================================================
;==================== Utilities =============================
;============================================================

defn bsearch (xs:Tuple<Int>, x:Int) -> Int|False :
  let loop (start:Int = 0, end:Int = length(xs)) :
    if end > start :
      val center = start + (end - start) / 2
      val y = xs[center]
      if x == y : center
      else if x < y : loop(start, center)
      else : loop(center + 1, end)

defn sorted-tuple (xs:Vector<Int>) :
  qsort!(xs)
  remove-duplicates!(xs)
  to-tuple(xs)