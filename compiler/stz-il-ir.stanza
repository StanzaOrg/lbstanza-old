#use-syntax(core, stz/ast-lang)

defpackage stz/il-ir :
   import core
   import verse

;General Multis for IExp
defmulti info (e:IExp) -> FileInfo
defmulti set-info (e:IExp, i:FileInfo) -> False

public defast :      
   deftype IExp :
      info: FileInfo with :
         as-method => true
         setter => set-info
         
   defnodes IExp :   
      ;=== Package Forms ===
      IPackage :
         name: Symbol
         imports: List<IImport>      
      IImport :
         package: Symbol
         prefix: List<IPrefix>      
      IPrefix :
         names: False|List<Symbol>
         prefix: Symbol         
      IExport :
         exp: IExp
      
      ;=== Declaration Forms ===
      IDefType :
         class: Symbol
         args: List<IVar>
         parent: IExp         
      IDef :
         name: IExp
         type: IExp
         value: IExp         
      IDefVar :
         name: Symbol
         type: IExp
         value: IExp      
      IDefn :
         name: Symbol
         targs: List<IVar>
         func: IFn         
      IDefmulti :
         name: Symbol
         targs: List<IVar>
         a1: List<IExp>
         a2: IExp      
      IDefmethod :
         multi: IExp
         this-var: False|Symbol
         targs: List<IVar>
         func: IFn
      
      ;=== Expression Forms ===
      IFn :
         tail?: True|False
         a1: List<IExp>
         a2: IExp
         args: List<IExp>
         body: IExp      
      IMulti :
         funcs: List<IFn>         
      IBegin :
         exps: List<IExp>      
      IMatch :
         args: List<IExp>
         branches: List<IBranch>         
      IBranch :
         types: List<IExp>
         args: List<IExp>
         body: IExp      
      INew :
         class: IExp
         methods: List<IDefmethod>      
      IVar :
         name: Symbol      
      ICast :
         exp: IExp
         type: IExp         
      ISet :
         name: Symbol
         value: IExp      
      IDo :
         func: IExp
         targs: List<IExp>
         args: List<IExp>      
      IPrim :
         function: Symbol
         args: List<IExp>      
      ICallLS :
         function: Symbol
         targs: List<IExp>
         args: List<IExp>         
      ILiteral :
         value      
      ITuple :
         exps: List<IExp>
         
      ;=== Type Forms ===      
      IOf :
         class: IExp
         args: List<IExp>      
      IAnd :
         a: IExp
         b: IExp      
      IOr :
         a: IExp
         b: IExp      
      IArrow :
         a1: List<IExp>
         a2: IExp      
      ICap :
         name: Symbol      
      IGradual         
      IVoid      
      INone

      ;=== LoStanza Expression Forms ===
      ILSRef :
         name: Symbol
         args: List<IExp>      
      ILSRefArray :
         name: Symbol
         length: List<IExp>
         args: List<IExp>      
      ILSStruct :
         name: Symbol
         args: List<IExp>      
      ILSPtr :
         exp: IExp      
      ILSDeref :
         exp: IExp      
      ILSSlot :
         exp: IExp
         index: IExp      
      ILSField :
         exp: IExp
         name: Symbol      
      ILSDo :
         func: IExp
         args: List<IExp>      
      ILSCallC :
         func: IExp
         args: List<IExp>      
      ILSPrim :
         op: Symbol
         args: List<IExp>      
      ILSSizeof :
         type: IExp      
      ILSTagof :
         name: Symbol      
      ILSAs :
         exp: IExp
         type: IExp      
      ILSSignedCast :
         exp: IExp
         type: IExp      
      ILSUnsignedCast :
         exp: IExp
         type: IExp      
      ILSValue :
         value
         type: IExp      
      ILSLetExp :
         comm: IExp
         exp: IExp      
      ILSAnd :
         a: IExp
         b: IExp      
      ILSOr :
         a: IExp
         b: IExp
      
      ;=== LoStanza Command Forms ===      
      ILSTCall :
         exp: IExp      
      ILSSet :
         exp: IExp
         value: IExp      
      ILSLabel :
         name: Symbol      
      ILSGoto :
         name: Symbol      
      ILSReturn :
         exp: IExp      
      ILSLet :
         body: IExp      
      ILSIf :
         pred: IExp
         conseq: IExp
         alt: IExp      
      ILSBegin :
         comms: List<IExp>      
      ILSMatch :
         exp: IExp
         branches: List<ILSBranch>      
      ILSBranch :
         types: List<IVar>
         body: IExp
      
      ;=== LoStanza Declaration Forms ===      
      ILSDef :
         name: Symbol
         type: IExp
         exp: IExp      
      ILSDefStruct :
         name: Symbol
         parents: List<IVar>
         fields: List<KeyValue<IVar, IExp>>
         rest: False|KeyValue<IVar, IExp>      
      ILSExtern :
         name: Symbol
         type: IExp      
      ILSExternFn :
         name: Symbol
         type: IExp      
      ILSDefn :
         name: Symbol
         a1: List<IExp>
         a2: IExp
         args: List<IVar>
         body: IExp
      
      ;=== LoStanza Type Forms ===
      ILSByteT      
      ILSIntT      
      ILSLongT      
      ILSFloatT      
      ILSDoubleT      
      ILSUnknownT      
      ILSPtrT :
         type: IExp      
      ILSRefT :
         type: IExp      
      ILSFnT :
         a1: List<IExp>
         ar: False|IExp
         a2: IExp
      
      ;=== LoStanza Intrinsics ===
      ILSIntrinsic :
         name: Symbol
         targs: List<IExp>
         args: List<IExp>