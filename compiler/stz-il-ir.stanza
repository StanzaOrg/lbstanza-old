;See License.txt for details about licensing.

defpackage stz/il-ir :
   import core
   import collections
   import stz/namemap
   import stz/visibility

;General Multis for IExp
public defmulti info (e:IExp) -> False|FileInfo

public defstruct IPackage :
  name: Symbol
  imports: Tuple<IImport> with: (updater => sub-imports)
  exps: List<IExp> with: (updater => sub-exps)
  info: FileInfo|False
  namemap: NameMap with: (default => void, updater => sub-namemap)
with:
  printer => true

public defstruct IImport :
  package: Symbol
  prefix: Tuple<IPrefix> with: (default => [])
  info: FileInfo|False with: (default => false)
  import-private?: True|False with: (default => false, updater => sub-import-private?)
with:
  printer => true

public defstruct IPrefix :
  names: False|Tuple<Symbol>
  prefix: String
with:
  printer => true

#with-added-syntax(stz-ast-lang) :
   public defast :
      ;=== Types ===
      deftype IExp :
         info: False|FileInfo with: (as-method => true)

      defnodes IExp :
         ;=== Package Forms ===
         IDefPackage :
            name: IExp
            imports: List<IExp>
         IImportExp :
            package: IExp
            prefix: List<IExp>
         IPrefixExp :
            names: False|List<IExp>
            prefix: IExp
         IVisibility :
            exp: IExp
            visibility: Visibility
         ILoadPackage :
            filename: String
            pkg: ? ;TGPackage|KPackage

         ;=== Doc Form ===
         IDoc :
            string: IExp

         ;=== Declaration Forms ===
         IDefType :
            class: IExp
            args: List<IExp>
            parent: IExp
            children: List<IExp>
         IDefChild :
            name: IExp
            args: List<IExp>
            parent: IExp
         IDef :
            name: IExp
            type: IExp
            value: IExp
         IDefVar :
            name: IExp
            type: IExp
            value: IExp
         IDefn :
            tail?: True|False
            name: IExp
            targs: List<IExp>
            a1: List<IExp>
            a2: IExp
            args: List<IExp>
            body: IExp
         IDefmulti :
            name: IExp
            targs: List<IExp>
            a1: List<IExp>
            a2: IExp
         IDefmethod :
            tail?: True|False
            multi: IExp
            thisn: False|Int
            targs: List<IExp>
            a1: List<IExp>
            a2: IExp
            args: List<IExp>
            body: IExp

         ;=== Expression Forms ===
         IFn :
            tail?: True|False
            a1: List<IExp>
            a2: IExp
            args: List<IExp>
            body: IExp
         IMulti :
            funcs: List<IExp>
         IBegin :
            exps: List<IExp>
         IMatch :
            args: List<IExp>
            branches: List<IExp>
         IBranch :
            types: List<IExp>
            args: List<IExp>
            body: IExp
         INew :
            class: IExp
            methods: List<IExp>
         IVar :
            name: Symbol
         ICast :
            exp: IExp
            type: IExp
         IUpCast :
            exp: IExp
            type: IExp
         ISet :
            name: IExp
            value: IExp
         IDo :
            func: IExp
            args: List<IExp>
         IPrim :
            op: IExp
            args: List<IExp>
         ILiteral :
            value: ?
            type: IExp
         ITuple :
            exps: List<IExp>
         ILet :
            exp: IExp

         ;=== Type Forms ===
         IOf :
            class: IExp
            args: List<IExp>
         IAnd :
            a: IExp
            b: IExp
         IOr :
            a: IExp
            b: IExp
         IArrow :
            a1: List<IExp>
            a2: IExp
         ICap :
            name: IExp
         IGradual
         IVoid
         INone

         ;=== LoStanza Expression Forms ===
         ILSNew :
            type: IExp
            args: List<IExp>
         ILSStruct :
            type: IExp
            args: List<IExp>
         ILSAddr :
            exp: IExp
            unstable?: True|False
         ILSDeref :
            exp: IExp
         ILSSlot :
            exp: IExp
            index: IExp
         ILSField :
            exp: IExp
            name: IExp
         ILSDo :
            func: IExp
            args: List<IExp>
         ILSCallC :
            func: IExp
            args: List<IExp>
         ILSPrim :
            op: IExp
            args: List<IExp>
         ILSSizeof :
            type: IExp
         ILSTagof :
            name: IExp
         ILSAs :
            exp: IExp
            type: IExp
         ILSAnd :
            a: IExp
            b: IExp
         ILSOr :
            a: IExp
            b: IExp
         ILSLetExp :
            comm: IExp
            exp: IExp
         ILSFn :
            ref: IExp

         ;=== LoStanza Command Forms ===
         ILSSet :
            exp: IExp
            value: IExp
         ILSLabels :
            blocks: List<IExp>
         ILSLabeledBlock :
            name: IExp
            args: List<IExp>
            types: List<IExp>
            body: IExp
         ILSGoto :
            name: IExp
            args: List<IExp>
         ILSReturn :
            exp: IExp
         ILSLet :
            comm: IExp
         ILSIf :
            pred: IExp
            conseq: IExp
            alt: IExp
         ILSMatch :
            args: List<IExp>
            branches: List<IExp>
         ILSBranch :
            types: List<IExp>
            args: List<IExp>
            body: IExp

         ;=== LoStanza Declaration Forms ===
         ILSDef :
            name: IExp
            type: IExp
            exp: IExp
         ILSDefVar :
            name: IExp
            type: IExp
            exp: IExp
         ILSDefField :
            mut : IExp
            type : IExp
            name : IExp
         ILSDefType :
            name: IExp
            args: List<IExp>
            parent: IExp
            fields : List<IExp>
            rfield : IExp
         ILSExtern :
            name: IExp
            type: IExp
         ILSDefn :
            tail?: True|False
            name: IExp
            targs: List<IExp>
            a1: List<IExp>
            a2: IExp
            args: List<IExp>
            body: IExp
         ILSExternFn :
            name: IExp
            a1: List<IExp>
            a2: IExp
            args: List<IExp>
            body: IExp
         ILSDefmethod :
            tail?: True|False
            multi: IExp
            targs: List<IExp>
            a1: List<IExp>
            a2: IExp
            args: List<IExp>
            body: IExp

         ;=== LoStanza Type Forms ===
         ILSByteT
         ILSIntT
         ILSLongT
         ILSFloatT
         ILSDoubleT
         ILSUnknownT
         ILSOfT :
            class: IExp
            args: List<IExp>
         ILSPtrT :
            type: IExp
         ILSRefT :
            type: IExp
         ILSFnT :
            a1: List<IExp>
            ar: IExp
            a2: IExp

         ;=== Working Nodes ===
         VarN :
            n: Int
         Raw :
            class: IExp
         Mix :
            exps: List<IExp>
         Let :
            def: IExp
            body: IExp
         LetRec :
            defns: List<IExp>
            body: IExp
         LetPackage :
            name: Symbol
            imports: List<IExp>
            body: IExp

      ;=== Mappers/Doers ===
      make-mapper(f:IExp -> IExp, e:IExp)
      make-doer(f:IExp -> ?, e:IExp)

      defmapper (f:IExp -> IExp) :
         (x:IExp) : f(x)
         (x:List<IExp>) : map(f, x)
         (x:False|IExp) : f(x as IExp) when x is-not False
         (x:False|List<IExp>) : map(f, x as List<IExp>) when x != false
      defdoer (f:IExp -> ?) :
         (x:IExp) : f(x)
         (x:List<IExp>) : do(f, x)
         (x:False|IExp) : f(x as IExp) when x is-not False
         (x:False|List<IExp>) : do(f, x as List<IExp>) when x != false

      ignore :
         True|False
         False|FileInfo
         False|Int
         Symbol
         String
         ?
         Int
         TGPackage|KPackage
         List<KeyValue<Symbol,?>>
         Visibility

;Printer
#with-added-syntax(stz-printer-lang) :
   defprinter (e:IExp) :
      IDefPackage :
         ($package name imports ...)
      IImportExp :
         ($import package prefix ...)
      IPrefixExp :
         if names(e) != false : ($prefix-of (names ...) prefix)
         else : ($prefix prefix)
      IVisibility :
         custom{
           "(%_ %_)" % [tag, exp(e)] where :
             val tag = match(visibility(e)) :
               (v:Public) : "$public"
               (v:Protected) : "$protected"
               (v:Private) : "$private"}
      ILoadPackage :
         ($loadpackage filename pkg)

      IDoc :
         ($doc string)

      IDefType :
         ($deftype class (args ...) parent children ...)
      IDefChild :
         ($defchild name (args ...) parent)
      IDef :
         ($def name type value)
      IDefVar :
         ($defvar name type value)
      IDefn :
         if tail?(e) : ($defn* name (targs ...) (a1 ...) a2 (args ...) body)
         else : ($defn name (targs ...) (a1 ...) a2 (args ...) body)
      IDefmulti :
         ($defmulti name (targs ...) (a1 ...) a2)
      IDefmethod :
         if tail?(e) : ($defmethod* multi (targs ...) (a1 ...) a2 (args ...) body)
         else : ($defmethod multi (targs ...) (a1 ...) a2 (args ...) body)

      IFn :
         if tail?(e) : ($fn* (a1 ...) a2 (args ...) body)
         else : ($fn (a1 ...) a2 (args ...) body)
      IMulti :
         ($multi funcs ...)
      IBegin :
         ($begin exps ...)
      IMatch :
         ($match (args ...) branches ...)
      IBranch :
         ($branch (types ...) (args ...) body)
      INew :
         ($new class methods ...)
      IVar :
         custom{name(e)}
      ICast :
         ($cast exp type)
      IUpCast :
         ($upcast exp type)
      ISet :
         ($set name value)
      IDo :
         ($do func args ...)
      IPrim :
         ($prim op args ...)
      ILiteral :
         ($literal value type)
      ITuple :
         ($tuple exps ...)
      ILet :
         ($let exp)

      IOf :
         ($of class args ...)
      IAnd :
         ($and a b)
      IOr :
         ($or a b)
      IArrow :
         ($-> (a1 ...) a2)
      ICap :
         ($cap name)
      IGradual :
         ($?)
      IVoid :
         ($void)
      INone :
         ($none)

      ILSNew :
         ($ls-new type args ...)
      ILSStruct :
         ($ls-struct type args ...)
      ILSAddr :
         ($ls-addr exp)
      ILSDeref :
         ($ls-deref exp)
      ILSSlot :
         ($ls-slot exp index)
      ILSField :
         ($ls-field exp name)
      ILSDo :
         ($ls-do func args ...)
      ILSCallC :
         ($ls-call-c func args ...)
      ILSPrim :
         ($ls-prim op args ...)
      ILSSizeof :
         ($ls-sizeof type)
      ILSTagof :
         ($ls-tagof name)
      ILSAs :
         ($ls-as exp type)
      ILSAnd :
         ($ls-and a b)
      ILSOr :
         ($ls-or a b)
      ILSLetExp :
         ($ls-letexp comm exp)
      ILSFn :
         ($ls-fn ref)

      ILSSet :
         ($ls-set exp value)
      ILSLabels :
         ($ls-labels blocks ...)
      ILSLabeledBlock :
         ($ls-block name (args ...) (types ...) body)
      ILSGoto :
         ($ls-goto name args ...)
      ILSReturn :
         ($ls-return exp)
      ILSLet :
         ($ls-let comm)
      ILSIf :
         ($ls-if pred conseq alt)
      ILSMatch :
         ($ls-match args branches ...)
      ILSBranch :
         ($ls-branch (types ...) (args ...) body)

      ILSDef :
         ($ls-def name type exp)
      ILSDefVar :
         ($ls-defvar name type exp)
      ILSDefField :
         ($ls-deffield mut type name)
      ILSDefType :
         ($ls-deftype name (args ...) parent (fields ...) rfield)
      ILSExtern :
         ($ls-extern name type)
      ILSDefn :
         if tail?(e) : ($ls-defn* name (targs ...) (a1 ...) a2 (args ...) body)
         else : ($ls-defn name (targs ...) (a1 ...) a2 (args ...) body)
      ILSExternFn :
         ($ls-extern-fn name (a1 ...) a2 (args ...) body)
      ILSDefmethod :
         if tail?(e) : ($ls-defmethod* multi (targs ...) (a1 ...) a2 (args ...) body)
         else : ($ls-defmethod multi (targs ...) (a1 ...) a2 (args ...) body)

      ILSByteT :
         ($ls-byte)
      ILSIntT :
         ($ls-int)
      ILSLongT :
         ($ls-long)
      ILSFloatT :
         ($ls-float)
      ILSDoubleT :
         ($ls-double)
      ILSUnknownT :
         ($ls-?)
      ILSOfT :
         ($ls-of class args ...)
      ILSPtrT :
         ($ls-ptr type)
      ILSRefT :
         ($ls-ref type)
      ILSFnT :
         ($ls-fn (a1 ...) ar a2)

      ;=== Working Nodes ===
      VarN :
         custom{"$v%_" % [n(e)]}
      Let :
         ($let def body)
      LetRec :
         ($letrec (defns ...) body)
      LetPackage :
         ($letpackage name (imports ...) body)
      Raw :
         ($raw class)
      Mix :
         ($mix exps ...)

public defn name! (e:IExp) -> Symbol :
   match(e) :
      (e:IVar|LetPackage) : name(e)
      (e:ILoadPackage) : name(pkg(e))
      (e:IDefType) : name!(class(e))
      (e:IDefPackage|IDefChild|IDef|IDefVar|IDefn|IDefmulti|
         ISet|ICap|ILSField|ILSTagof|ILSLabeledBlock|
         ILSGoto|ILSDef|ILSDefVar|ILSDefType|ILSDefField|
         ILSExtern|ILSDefn|ILSExternFn) : name!(name(e))
      (e) : fatal("No name field: %_" % [e])   

public defn subexps (e:IExp) -> Collection<IExp> & Lengthable :
   val es = Vector<IExp>(4)
   do(add{es, _}, e)
   es

public defn flatten (es:List<IExp>) :
   for e in es seq-append :
      match(e) :
         (e:IBegin) : exps(e)
         (e) : List(e)

;Adds only a single level of flattening and assumes nested levels are already flattened
public defn Begin (es:List<IExp>, info:False|FileInfo) :
   val es* = flatten(es)
   if empty?(es*) : IBegin(es*, info)
   else if empty?(tail(es*)) : head(es*)
   else : IBegin(es*, info)

;Flatten and remove private expressions
;Adds only a single level of flattening and assumes nested levels are already flattened
public defn scope-flatten (es:List<IExp>) :
   for e in es seq-append :
      match(e) :
         (e:IBegin) :
           scope-flatten(exps(e))
         (e:IVisibility) :
           if visibility(e) is Private :
             scope-flatten(List(exp(e)))
           else :
             List(e)
         (e) : List(e)

public defn ScopeBegin (es:List<IExp>, info:False|FileInfo) :
   val es* = scope-flatten(es)
   if empty?(es*) : IBegin(es*, info)
   else if empty?(tail(es*)) : head(es*)
   else : IBegin(es*, info)
