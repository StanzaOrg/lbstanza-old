;See License.txt for details about licensing.

defpackage stz/algorithms :
   import core
   import collections

;============================================================
;================ Meta Algorithms ===========================
;============================================================

public defn* fixpoint<?T> (f: (() -> ?) -> ?T) -> T :
  var progress? = false
  val r = f({progress? = true})
  if progress? : fixpoint(f)
  else : r

public defn* fixpoint<?T> (max-iter:Int, f: (() -> ?) -> ?T) -> T :
  fatal("Minimum number of iterations is 1.") when max-iter < 1
  var progress? = false
  val r = f({progress? = true})
  if max-iter > 1 and progress? : fixpoint(max-iter - 1, f)
  else : r

public defn* worklist<?S> (f: (S, (S) -> ?) -> ?, xs:Seqable<?S>) -> False :
  val q = Queue<S>(4)
  defn add-x (x:S) : add(q, x)
  do(add-x, xs)   
  while not empty?(q) :
    f(pop(q), add-x)  

;============================================================
;=================== Finite Int Set =========================
;============================================================

deftype FIntSet
defmulti add (s:FIntSet, x:Int) -> False
defmulti clear (s:FIntSet) -> False
defmulti to-tuple (s:FIntSet) -> Tuple<Int>
defmulti get (s:FIntSet, x:Int) -> True|False

defn FIntSet (N:Int) :
  val mark = Array<True|False>(N, false)
  val accum = Vector<Int>()
  new FIntSet :
    defmethod add (this, x:Int) :
      if not mark[x] :
        mark[x] = true
        add(accum,x)
    defmethod clear (this) :
      for x in accum do :
        mark[x] = false
      clear(accum)
    defmethod to-tuple (this) :
      to-tuple(accum)
    defmethod get (this, x:Int) :
      mark[x]

defn add-all (s:FIntSet, xs:Tuple<Int>) :
  do(add{s, _}, xs)

;============================================================
;=================== Fast Bipartite Closure =================
;============================================================

;Universe of Ls and Rs
;Given (L => (xs ...) ...)
;where xs contains references to both Ls and Rs
;Returns (L => (R ...))
;where each L is mapped to all R's that can be reached directly or
;indirectly through R.
public defn bipartite-closure (entries0:Seqable<KeyValue<Int, Tuple<Int>>>) -> 
                               Seq<KeyValue<Int, Tuple<Int>>> :
  ;Mapping
  val int-ids = IntTable<Int>()
  val id-map = Vector<Int>()
  defn get-id (n:Int) :
    match(get?(int-ids,n)) :
      (id:Int) :
        id
      (_:False) :
        val id = length(id-map)
        add(id-map, n)
        int-ids[n] = id
        id
  defn num-ids () :
    length(id-map)

  ;Map to dense integers
  val entries = to-tuple $ for e in entries0 seq :
    get-id(key(e)) => map(get-id,value(e))

  ;Track solutions
  val solns = Array<Tuple<Int>|False>(num-ids(), false)

  ;Forward substitution (Recursively substitutes solutions)
  val visited = FIntSet(num-ids())
  val accum = Vector<Int>()
  defn forward-sub (xs:Tuple<Int>, exclude:Int) :
    defn* visit (x:Int) :
      if not visited[x] :
        add(visited,x)
        match(solns[x]) :
          ;Intermediate node
          (xs:Tuple<Int>) : do(visit, xs)
          ;Root node
          (_:False) : add(accum,x) when x != exclude
    do(visit, xs)

    ;Return result    
    val result = to-tuple(accum)
    clear(accum)
    clear(visited)
    result
    
  ;Backward substitution (Guarantees recursion is unnecessary.)
  defn back-sub (ys:Tuple<Int>) :
    for y in ys do :
      match(solns[y]) :
        (ys:Tuple<Int>) : add-all(visited, ys)
        (_:False) : add(visited, y)
    val result = to-tuple(visited)
    clear(visited)
    result

  ;Driver
  val N = length(entries)
  for e in entries do :
    val k = key(e)
    solns[k] = forward-sub(value(e), k)
  for e in in-reverse(entries) seq :
    val k = key(e)
    val result = back-sub(solns[k] as Tuple<Int>)
    solns[k] = result
    id-map[k] => map({id-map[_]}, result)

;============================================================
;============= Bipartite Closure ============================
;============================================================

val ENTRIES = Vector<KeyValue<Hashable&Equalable,List<Hashable&Equalable>>>()
val SOLNS-TABLE = HashTable<Hashable&Equalable, List<Hashable&Equalable>>()
public defn bipartite-closure<?T> (entries: Seqable<KeyValue<?T&Hashable&Equalable, List<T&Hashable&Equalable>>>) ->
                                   List<KeyValue<T, List<T>>> :
   ;Convert to vector
   clear(ENTRIES)
   add-all(ENTRIES, entries)
   
   ;Solution table
   clear(SOLNS-TABLE)
   defn cache (x:Hashable&Equalable, ys:List<Hashable&Equalable>) :
      SOLNS-TABLE[x] = ys
      ys

   ;Substitute all known solutions into xs
   defn sub-known (xs:List<Hashable&Equalable>) :
      for x in xs seq-append :
         match(get?(SOLNS-TABLE, x)) :
            (ys:List<Hashable&Equalable>) : cache(x, sub-known(ys))
            (f:False) : List(x)

   ;Compute remove(unique(xs), x)
   defn minus (xs:List<Hashable&Equalable>, x:Hashable&Equalable) :
      tail(to-list(unique(cons(x, xs))))

   ;Forward solve
   for e in ENTRIES do :
      val [x, ys] = [key(e), value(e)]
      cache(x, sub-known(ys) - x)

   ;Return solutions
   val result = for e in in-reverse(ENTRIES) seq :
      val x = key(e)
      x => sub-known(SOLNS-TABLE[x]) - x
   to-list(result) as List<KeyValue<T&Hashable&Equalable, List<T&Hashable&Equalable>>>   

;============================================================
;============= Transitive Closure ===========================
;============================================================

public defn transitive-closure<?T> (entries: Seqable<KeyValue<?T&Hashable&Equalable, List<T&Hashable&Equalable>>>) ->
                                    List<KeyValue<T, List<T>>> :
   ;Assign ids
   val id-map = Vector<T>()
   val obj-map = HashTable<Hashable&Equalable,Int>()
   val es = to-tuple(entries)
   for e in es do :
      val k = key(e)
      obj-map[k] = length(id-map)
      add(id-map, k)
      add(id-map, k)
   ;Map problem and compute bipartite-closure
   val result = bipartite-closure $
      for e in es seq :
         val x = obj-map[key(e)]
         val ys = for k in value(e) seq-append :
                     val i = obj-map[k]
                     List(i, i + 1)
         x => ys
   ;Map back
   val result* = for e in result map :
      id-map[key(e)] => map({id-map[_]}, value(e))
   result* as List<KeyValue<T&Hashable&Equalable, List<T&Hashable&Equalable>>>      

;============================================================
;============= Strongly Connected Components ================
;============================================================

public defn strong-components<?T> (graph: Seqable<KeyValue<?T&Hashable&Equalable, List<?T&Hashable&Equalable>>>) ->
                                   List<List<T>|T> :
   ;Create Neighbour Table
   val vs = Vector<T&Hashable&Equalable>()
   val neighbours = HashTable<T, List<T&Hashable&Equalable>>()
   for entry in graph do :
      val v = key(entry)
      val ns = value(entry)
      add(vs, v)
      neighbours[v] = ns

   ;Active Table
   val active = HashSet<T>()
   do(add{active, _}, vs)

   ;Stack
   val stack = Vector<T&Hashable&Equalable>()
   defn pop-until-v (v:T&Equalable) :
      val x = pop(stack)
      remove(active, x)
      if x == v : List(x)
      else : cons(x, pop-until-v(v))

   ;State Tables
   val lowlink = HashTable<T,Int>()
   val index-counter = to-seq(0 to false)
   val components = Vector<List<T>|T>()
   defn get-lowlink (v:T&Hashable&Equalable) -> Int :
      if not key?(lowlink, v) :
         val idx = next(index-counter)
         lowlink[v] = idx
         add(stack, v)

         var cycle? = false
         for n in neighbours[v] do :
            if active[n] :
               val nl = get-lowlink(n)
               if nl <= lowlink[v] :
                  lowlink[v] = nl
                  cycle? = true

         if lowlink[v] == idx :
            val c = pop-until-v(v)
            add{components, _} $
               if cycle? : c
               else : head(c)
      lowlink[v]

   ;Run connection
   do(get-lowlink, vs)
   to-list(components)

;============================================================
;==================== BitArrays =============================
;============================================================

public lostanza deftype BitArray <: Array<True|False> :
   words: long
   length: long
   var bits: long ...

defn ensure-below-size (a:Lengthable, n:Int) :
   if n < 0 : fatal("Given size (%_) is negative." % [n])
   if n > length(a) : fatal("Given size (%_) is beyond the length of the array (%_)." % [n, length(a)])

public defn BitArray (n:Int) :
   BitArray(n, false)

public lostanza defn BitArray (n:ref<Int>, x:ref<True|False>) -> ref<BitArray> :
   #if-not-defined(OPTIMIZE) :
      core/ensure-non-negative-length(n)
   val nwords = (n.value + 63) >>> 6
   val a = new BitArray{nwords, n.value}
   var init-x:long = 0L
   if x == true : init-x = -1L
   for (var i:long = 0, i < nwords, i = i + 1) :
      a.bits[i] = init-x
   return a

public defn clear (a:BitArray, n:Int) :
   clear(a, n, false)

public lostanza defn clear (a:ref<BitArray>, n:ref<Int>, x:ref<True|False>) -> ref<False> :
   #if-not-defined(OPTIMIZE) :
      ensure-below-size(a, n)
   val nwords = (n.value + 63) >>> 6
   var init-x:long = 0L
   if x == true : init-x = -1L
   for (var i:long = 0, i < nwords, i = i + 1) :
      a.bits[i] = init-x
   return false

lostanza defmethod length (a:ref<BitArray>) -> ref<Int> :
   return new Int{a.length as int}

lostanza defmethod get (a:ref<BitArray>, i:ref<Int>) -> ref<True|False> :
   #if-not-defined(OPTIMIZE) :
      core/ensure-index-in-bounds(a, i)
   val word-idx = i.value >>> 6
   val bit-idx = i.value & 63
   val bit = (a.bits[word-idx] >> bit-idx) & 1
   if bit : return true
   else : return false

lostanza defmethod set (a:ref<BitArray>, i:ref<Int>, v:ref<True|False>) -> ref<False> :
   #if-not-defined(OPTIMIZE) :
      core/ensure-index-in-bounds(a, i)
   val word-idx = i.value >>> 6
   val bit-idx = i.value & 63
   val word = a.bits[word-idx]
   if v == true : a.bits[word-idx] = word | (1L << bit-idx)
   else : a.bits[word-idx] = word & (~ 1L << bit-idx)
   return false

;============================================================
;===================== Minima ===============================
;============================================================

;Returns x in xs s.t.
;forall y in xs . (y <= x) => (x <= y)
public defn minima<?T> (xs: Seqable<?T>, less-eq?: (T T) -> True|False) -> List<T> :
   val items = to-vector<Maybe<T>>(seq(One, xs))
   for i in 0 to length(items) do :
      if not empty?(items[i]) :
         for j in 0 to length(items) do :
            if not empty?(items[j]) :
               if j != i :
                  if value!(items[i]) <= value!(items[j]) :
                     items[j] = None()
   to-list(seq?({_}, items))

;============================================================
;=================== All Pairs ==============================
;============================================================

public defn all-pairs (start:Int, end:Int) -> Seq<[Int Int]> :
   generate<[Int Int]> :
      for i in start to end do :
         for j in (i + 1) to end do :
            yield([i, j])

public defn all-pairs<?T> (xs:Seqable<?T>) :
   val xs* = to-vector<T>(xs)
   for [i j] in all-pairs(0, length(xs*)) seq :
      [xs*[i], xs*[j]]

;============================================================
;======================== FreeLists =========================
;============================================================

public deftype FreeList <: Set<Int>
public defmulti clear (x:FreeList, x:True|False) -> False
public defmulti free (x:FreeList) -> Seq<Int>

public defn FreeList (n:Int) :
  ;State
  var size = 0
  val list = to-array<Int>(0 to n)
  val idx = to-array<Int>(0 to n)

  ;Swap item i in list with item j
  defn swap (i:Int, j:Int) :
    if i != j :
      val item-i = list[i]
      val item-j = list[j]
      list[i] = item-j
      list[j] = item-i
      idx[item-i] = j
      idx[item-j] = i    

  new FreeList :
    defmethod add (this, i:Int) :
      val idx = idx[i]
      if idx >= size :
        swap(idx, size)
        size = size + 1
        true
    defmethod remove (this, i:Int) :
      val idx = idx[i]
      if idx < size :
        swap(idx, size - 1)
        size = size - 1
        true
    defmethod get (this, i:Int) :
      idx[i] < size
    defmethod clear (this) :
      clear(this, false)
    defmethod to-seq (this) :
      take-n(size, list)
    defmethod length (this) :
      size
    defmethod free (this) :
      for i in size to n seq :
        list[i]
    defmethod clear (this, x:True|False) :
      size = n when x else 0

public defn FreeList (n:Int, x:True|False) :
  val list = FreeList(n)
  clear(list, x)
  list

;============================================================
;================= Binary Search ============================
;============================================================

;Binary search:
;  xs: Sorted array of something (T) (Can be ascending or descending).
;  key: Function for retrieving id of T
;  x: The id to search for
;Returns:
;  The index, i, at which key(xs[i]) is equal to x,
;  or false if there is no such element.
;Example:
;  val names = to-array<String>(["a" "ad" "apple" "acapaca" "apocalyptic"])
;  bsearch(length, names, 5) ;Search for the index of a name with length 5. Returns 2.
;  bsearch(length, names, 6) ;Search for the index of a name with length 6. Returns false.

public defn bsearch<?T,?S> (key:T -> ?S&Comparable, xs:IndexedCollection<?T>, x:?S&Comparable) -> Int|False :
  ;Compute whether ascending/descending
  val n = length(xs)
  val multiplier =
    if n > 0 :
      if key(xs[0]) < key(xs[n - 1]) : 1
      else : -1
    else : 1
  let loop (start:Int = 0, end:Int = length(xs)) :
    if end > start :
      val center = (start + end) / 2
      val c = compare(x, key(xs[center])) * multiplier
      if c == 0 : center
      else if c < 0 : loop(start, center)
      else : loop(center + 1, end)

;============================================================
;======================= Package Ordering ===================
;============================================================

public defn initialization-order (import-graph:HashTable<Symbol, List<Symbol>>,
                                  packages:Collection<Symbol>) -> Collection<Symbol> :
  ;Preconditions
  ;Retrieve all referenced packages
  defn all-packages () -> Collection<Symbol> :
    val import-graph-packages = 
      for entry in import-graph seq-cat :
        cons(key(entry), value(entry))
    to-hashset<Symbol> $ 
      cat(import-graph-packages, packages)
  ;Check that the imports of all referenced packages are provided.
  defn ensure-imports-provided-for-all-packages! () :
    for p in all-packages() do :
      if not key?(import-graph, p) :
        val msg = new Printable :
          defmethod print (o:OutputStream, this) :
            print(o, "No imports listed for package %~ in table." % [p])
            lnprint(o, "Listed packages are %,." % [packages])
            lnprint(o, "Listed imports are:")
            val o2 = IndentedStream(o)
            do(lnprint{o2, _}, import-graph)
        fatal(msg)
  #if-not-defined(OPTIMIZE) :
    ensure-imports-provided-for-all-packages!()
  
  ;Discover all strong components
  defn list (x:Symbol) : List(x)
  defn list (xs:List<Symbol>) : xs
  val components = to-tuple(seq(list, strong-components(import-graph)))
  val component-table = to-hashtable<Symbol,Int> $
    for (component in components, i in 0 to false) seq-cat :
      for c in component seq : c => i

  ;Natural ordering
  val index-table = to-hashtable<Symbol,Int> $
    for (p in packages, i in 1 to false) seq :
      p => 0 when p == `core else i
  defn order-by-index (ps:Seqable<Symbol>) :
    defn cmp (a:Symbol, b:Symbol) :
      match(get?(index-table,a), get?(index-table,b)) :
        (ai:Int, bi:Int) : compare(ai,bi)
        (ai:Int, bi:False) : -1
        (ai:False, bi:Int) : 1
        (ai:False, bi:False) : compare(a,b)
    lazy-qsort(ps, cmp)

  ;Traversal
  val visited = IntSet()
  val accum = Vector<Symbol>()
  defn include (c:Int) :
    if add(visited,c) :
      val cs = components[c]
      for c in cs do : include-all(import-graph[c])
      add-all(accum, order-by-index(cs))
  defn include-all (cs:Seqable<Symbol>) :
    for c in cs do :
      include(component-table[c])
  include-all(packages)

  ;Return ordering
  accum
