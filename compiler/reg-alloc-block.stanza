defpackage stz/reg-alloc-block :
  import core
  import collections
  import stz/reg-alloc-ir
  import stz/printing-utils
  import stz/reg-alloc-ports
  import stz/reg-alloc-model-analysis
  import stz/reg-alloc-model-properties

;============================================================
;=================== State Definition =======================
;============================================================

public defstruct Block :
  index:Int
  start:Int
  length:Int
  succs:Tuple<Int>
  preds:Tuple<Int>
  ends-with-goto?:True|False
  inputs:Vector<Port> with:
    init => Vector<Port>()
  outputs:Vector<Port> with:
    init => Vector<Port>()
  defs:Vector<Int> with:
    init => Vector<Int>()

;============================================================
;====================== Accessors ===========================
;============================================================

;Retrieve the index past the end of the block.
public defn end (b:Block) -> Int :
  start(b) + length(b)

;============================================================
;======================== Printers ==========================
;============================================================

defmethod print (o:OutputStream, block:Block) :
  val items = [
    simple-field("start", start(block))
    simple-field("length", length(block))
    simple-field("succs", succs(block))
    simple-field("preds", preds(block))
    simple-field("ends-with-goto?", ends-with-goto?(block))
    named-list-fields("inputs", inputs(block))
    named-list-fields("outputs", outputs(block))
    simple-list-field("defs", defs(block))]
  println(o, "block B%_ %_" % [index(block), colon-field-list(items)])



