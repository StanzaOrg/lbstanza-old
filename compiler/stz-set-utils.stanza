defpackage stz/set-utils :
  import core
  import collections
  import stz/utils

;============================================================
;====================== Datastructure =======================
;============================================================

public deftype NumSet

public defstruct IntersectSet <: NumSet :
  sets: Tuple<NumSet>
with:
  printer => true

public defstruct UnionSet <: NumSet :
  sets: Tuple<NumSet>
with:
  printer => true

public defstruct AtomSet <: NumSet :
  values: Tuple<Int>
with:
  printer => true

public defstruct AllSet <: NumSet 
with:
  printer => true

public defn remove-alls (s:NumSet) :
  match(s) :
    (s:IntersectSet) :
      var sets*:Seq<NumSet> = seq(remove-alls, sets(s))
      sets* = filter({_ is-not AllSet}, sets*)
      if empty?(sets*) : AtomSet([])
      else : IntersectSet(to-tuple(sets*))        
    (s:UnionSet) :
      val sets* = map(remove-alls, sets(s))
      if any?({_ is AllSet}, sets*) : AllSet()
      else : UnionSet(sets*)
    (s:AtomSet|AllSet) :
      s
