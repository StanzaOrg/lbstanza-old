defpackage stz/set-utils :
  import core
  import collections
  import stz/utils

public defn overlap? (a:Tuple<Int>, b:Tuple<Int>) -> True|False :
  val [na, nb] = [length(a), length(b)]
  if nb > na :
    overlap?(b, a)
  else :
    let loop (aindex:Int = 0, bindex:Int = 0) :
      if aindex < na :
        val ai = a[aindex]
        val bindex* = bsearch(b, bindex, nb, ai)
        if bindex* < nb and b[bindex*] == ai : true
        else : loop(aindex + 1, bindex*)

public defn subset? (a:Tuple<Int>, b:Tuple<Int>) -> True|False :
  val [na, nb] = [length(a), length(b)]
  if na <= nb :
    let loop (aindex:Int = 0, bindex:Int = 0) :
      if aindex < na :
        val ai = a[aindex]
        val bindex* = bsearch(b, bindex, nb, ai)
        if bindex* < nb and b[bindex*] == ai :
          loop(aindex + 1, bindex* + 1)
      else :
        true

defn subset-of-union? (xs:Tuple<Int>, yss:Vector<Tuple<Int>>, yss-indices:Vector<Int>) -> True|False :
  defn exists-in-ys? (yindex:Int, x:Int) -> True|False :
    val ys = yss[yindex]
    val ystart = yss-indices[yindex]
    val yi = bsearch(ys, ystart, length(ys), x)
    yss-indices[yindex] = yi
    yi < length(ys) and ys[yi] == x
  for x in xs all? :
    for yindex in 0 to length(yss) any? :
      exists-in-ys?(yindex, x)

val SUBSET-YSS = Vector<Tuple<Int>>()
val SUBSET-YSS-INDICES = Vector<Int>()
public defn subset-of-union? (xs:Tuple<Int>, yss:Seqable<Tuple<Int>>) -> True|False :
  clear(SUBSET-YSS)
  clear(SUBSET-YSS-INDICES)
  add-all(SUBSET-YSS, yss)
  lengthen(SUBSET-YSS-INDICES, length(SUBSET-YSS), 0)
  subset-of-union?(xs, SUBSET-YSS, SUBSET-YSS-INDICES)

public defn union (a:Seqable<Int>, b:Seqable<Int>) -> Seq<Int> :
  generate<Int> :
    val [sa, sb] = [to-peek-seq(a), to-peek-seq(b)]
    while not empty?(sa) and not empty?(sb) :
      val [ai, bj] = [peek(sa), peek(sb)]
      if ai < bj :
        yield(next(sa))
      else if bj < ai :
        yield(next(sb))
      else :
        yield(next(sa))
        next(sb)
    do(yield, sa)
    do(yield, sb)

public defn intersect (a:Seqable<Int>, b:Seqable<Int>) -> Seq<Int> :
  generate<Int> :
    val [sa, sb] = [to-peek-seq(a), to-peek-seq(b)]
    while not empty?(sa) and not empty?(sb) :
      val [ai, bj] = [peek(sa), peek(sb)]
      if ai < bj :
        next(sa)
      else if bj < ai :
        next(sb)
      else :
        yield(next(sa))
        next(sb)

public defn union (elts:Seqable<Seqable<Int>>) -> Seqable<Int> :
  reduce(union, elts)

public defn intersect (elts:Seqable<Seqable<Int>>) -> Seqable<Int> :
  reduce(intersect, elts)

;Binary search:
;It returns i such that all items at index < i are strictly less than v.
defn bsearch (xs:Tuple<Int>, start:Int, end:Int, v:Int) -> Int :
  ;All items with index less than i are known to be smaller than v.
  ;All items with index greater than j are known to be greater or equal to v.
  let loop (i:Int = start, j:Int = end) :
    if i == j :
      i
    else :
      val m = i + (j - i) / 2
      if xs[m] < v : loop(m + 1, j)
      else : loop(i, m)
