defpackage stz/code-table :
  import core
  import collections
  import stz/vm-ir
  import stz/backend
  import stz/typeset
  import stz/vm-structures
  import stz/trace-info

;============================================================
;===================== Code Table ===========================
;============================================================
;This contains all the generated code for the functions
;loaded into the virtual machine, as well as any additional
;tables for performing the code encoding. 

public deftype CodeTable

;============================================================
;====================== Loading =============================
;============================================================
;Load the given VM function into the code table.
;The resolver used for encoding the function is provided, and provides
;low-level details about the virtual machine.
;The backend provides details about the platform (e.g. Windows, OSX,
;etc.) the code is meant to run on.
;Returns the 64-bit address of the final loaded function.

public defmulti load-function (t:CodeTable,
                               fid:Int,
                               func:VMFunction,
                               resolver:EncodingResolver,
                               backend:Backend) -> LoadedFunction

;Represents a function encoded and loaded into the code table.
public defstruct LoadedFunction :
  address:Long
  trace-entries:Vector<TraceTableEntry>

;Represents the entry for use during backtraces.
public defstruct TraceTableEntry :
  pc: Long
  entry: StackTraceInfo
with:
  printer => true

;============================================================
;================== Launch ==================================
;============================================================
;Start executing the code from the given function.

public defmulti launch (vmstate-address:Long, table:CodeTable, func-id:Int) -> False

;============================================================
;==================== Freeing ===============================
;============================================================
;Release any used resources for the given code.
;Default implementation does not do anything.

public defmulti free (table:CodeTable) -> False :
  false

;============================================================
;=================== Instruction Memory =====================
;============================================================

;Returns the address of the instructions in the code table.
public defmulti instructions (t:CodeTable) -> Long

;============================================================
;=================== Encoding Resolver ======================
;============================================================
;The EncodingResolver provides low-level details about the
;virtual machine.
public deftype EncodingResolver

;Return the integer identifier used by the virtual machine for the given liveness map.
;- num-locals: The number of locals in the frame.
;- live: The set of locals that are live at the moment.
public defmulti liveness-map (r:EncodingResolver, live:Tuple<Int>, num-locals:Int) -> Int

;Return the number of bytes used for the tag word of each object. 
public defmulti object-header-size (r:EncodingResolver) -> Int

;Return the number of bytes used to store an object on the heap.
;- sz: The actual number of bytes occupied by the object fields.
public defmulti object-size-on-heap (r:EncodingResolver, sz:Int) -> Int

;Return the integer identifier used by the virtual machine for the given dispatch format.
;- branches: The dispatch types for each branch.
public defmulti dispatch-format (r:EncodingResolver, branches:Tuple<Tuple<TypeSet>>) -> Int

;Return the integer identifier used by the virtual machine for the given branch format.
;- branches: The dispatch types for each branch.
public defmulti match-format (r:EncodingResolver, branches:Tuple<Tuple<TypeSet>>) -> Int

;Return the integer identifier used by the virtual machine for dispatching to the given multi.
;- multi: The multi to dispatch to.
;- num-header-args: The number of arguments that do not participate in the dispatch.
;- num-args: The number of arguments that do participate in the dispatch.
public defmulti method-format (r:EncodingResolver, multi:Int, num-header-args:Int, num-args:Int) -> Int

;Return the integer encoding for a marker of the given type.
public defmulti marker (r:EncodingResolver, type:Int) -> Int

;Return the integer encoding for the void marker.
public defmulti void-marker (r:EncodingResolver) -> Int

;Return the tagbits added to pointers to convert a raw-pointer into a Stanza heap reference.
public defmulti ref-offset (r:EncodingResolver) -> Int

;Return true if the given type is final.
public defmulti type-is-final? (r:EncodingResolver, n:Int) -> True|False

;Return true if the given type is a marker.
public defmulti marker? (r:EncodingResolver, n:Int) -> True|False

;Return the tagbits used for the given primitive types: Byte, Char, Int, Float.
public defmulti tagbits (r:EncodingResolver, typeid:Int) -> Int

;------------------------------------------------------------
;----------------------- Convenience ------------------------
;------------------------------------------------------------

public defn false-marker (r:EncodingResolver) : marker(r, FALSE-TYPE)
public defn true-marker (r:EncodingResolver) : marker(r, TRUE-TYPE)