defpackage stz/type-fargs :
  import core
  import collections
  import stz/type-fnarities

;============================================================
;====================== Definition ==========================
;============================================================

;Represents a function argument, parameterized
;on the type of the argument.
public deftype FArg<T> <: Hashable & Equalable

;Retrieve the type of the argument.
public defmulti type<?T> (a:FArg<?T>) -> T

;Represents a normal positional argument.
public defstruct PositionalArg<T> <: FArg<T> :
  optional?:True|False
  type:T with: (as-method => true)
with:
  hashable => true
  equalable => true

;Represents a keyword argument.
public defstruct KeywordArg<T> <: FArg<T> :
  name:Symbol
  optional?:True|False
  type:T with: (as-method => true)
with:
  hashable => true
  equalable => true

;Represents a variable-arity argument.
public defstruct VarArg<T> <: FArg<T> :
  name:Symbol
  type:T with: (as-method => true)
with:
  hashable => true
  equalable => true

;============================================================
;====================== Mappers =============================
;============================================================

;Map over the type in an argument.
public defn map<?T,?S> (f:T -> ?S, a:FArg<?T>) -> FArg<S> :
  match(a) :
    (a:PositionalArg<T>) :
      PositionalArg<S>(optional?(a), f(type(a)))
    (a:KeywordArg<T>) :
      KeywordArg<S>(name(a), optional?(a), f(type(a)))
    (a:VarArg<T>) :
      VarArg<S>(name(a), f(type(a)))

;Map over the type in an argument.
public defn do<?T> (f:T -> ?, a:FArg<?T>) -> False :
  f(type(a))
  false

;Substitute a new type into the argument.
public defn sub-type<?T> (a:FArg, x:?T) -> FArg<T> :
  map({x}, a)

;============================================================
;=================== Useful Utilities =======================
;============================================================

;An FArg is typically used as a specification for the allowed
;arguments to a function. We also use it to represent the
;values that a function is called with, but in this case
;the optional? fields don't have any meaning, so we
;require them to be false.
public defn used-as-value? (a:FArg) -> True|False :
  match(a) :
    (a:PositionalArg) : not optional?(a)
    (a:KeywordArg) : not optional?(a)
    (a:VarArg) : false

;============================================================
;==================== ArgPattern ============================
;============================================================

;Represents the arguments used to call a function.
;args:
;  If PositionalArg or KeywordArg, index can be:
;    Int: Argument given.
;    False: Argument was optional and not given.
;  If VarArg, index can be:
;    Tuple<Int>: Arguments given (can be empty).
;    Int: Arguments given directly as keyword.
public defstruct ArgPattern :
  num-args:Int
  args:Tuple<FArg<Int|False|Tuple<Int>>>

;Compute the argument pattern from the given arguments.
public defn arg-pattern (arities:FnArities, expected:Tuple<FArg>, given:Tuple<FArg>) -> ArgPattern :
  ;Compute indices of all given arguments.
  val given-pos = Vector<Int>()
  val given-keywords = HashTable<Symbol,Int>()
  for (a in given, i in 0 to false) do :
    match(a) :
      (a:PositionalArg) : add(given-pos, i)
      (a:KeywordArg) : given-keywords[name(a)] = i

  ;Compute number of optional positional arguments used.
  val num-used-optional = min(num-optional(arities),
                              length(given-pos) - min-arity(arities))

  ;Compute indices corresponding to each function argument.
  val pos-indices = to-seq(given-pos)
  val num-optional = to-seq(0 to false)
  val arg-indices = for a in expected map :
    match(a) :
      (a:PositionalArg) :
        if optional?(a) :
          val used? = next(num-optional) < num-used-optional
          if used? : PositionalArg<Int>(true, next(pos-indices))
          else : PositionalArg<False>(true, false)
        else :
          PositionalArg<Int>(false, next(pos-indices))
      (a:KeywordArg) :
        if optional?(a) :
          val index = get?(given-keywords, name(a))
          KeywordArg<Int|False>(name(a), true, index)
        else :
          KeywordArg<Int>(name(a), false, given-keywords[name(a)])
      (a:VarArg) :
        val i = get?(given-keywords, name(a))
        match(i:Int) : VarArg<Int>(name(a), i)
        else : VarArg<Tuple<Int>>(name(a), to-tuple(pos-indices))

  ;Construct ArgPattern.
  ArgPattern(length(given), arg-indices)

;Compute the argument pattern to satisfy the given arity.
public defn arg-pattern (arities:FnArities, expected:Tuple<FArg>, num-given:Int) -> ArgPattern :
  ;Compute number of optional positional arguments used.
  val num-used-optional = min(num-optional(arities),
                              num-given - min-arity(arities))

  ;Compute indices for each function argument.
  val num-optional = to-seq(0 to false)
  val arg-counter = to-seq(0 to num-given)
  val arg-indices = for a in expected map :
    match(a) :
      (a:PositionalArg) :
        if optional?(a) :
          val used? = next(num-optional) < num-used-optional
          if used? : PositionalArg<Int>(true, next(arg-counter))
          else : PositionalArg<False>(true, false)
        else : PositionalArg<Int>(false, next(arg-counter))
      (a:KeywordArg) :
        if not optional?(a) : fatal("Unexpected required keyword.")
        KeywordArg<Int|False>(name(a), true, false)
      (a:VarArg) :
        VarArg<Tuple<Int>>(name(a), to-tuple(arg-counter))

  ;Construct ArgPattern
  ArgPattern(num-given, arg-indices)

;============================================================
;============= Pick Types Using ArgPattern ==================
;============================================================

;Given the types of the function arguments, compute the types of
;pattern arguments.
public defn arg-types<?T> (wrap-tuple:T -> T,
                           pat:ArgPattern,
                           fargs:Tuple<FArg<?T>>) -> Tuple<T> :
  val ret = Array<T>(num-args(pat))
  for (a in args(pat), farg in fargs) do :
    match(a, type(a)) :
      (a:VarArg, i:Int) :
        ret[i] = wrap-tuple(type(farg))
      (a:VarArg, indices:Tuple<Int>) :
        for i in indices do :
          ret[i] = type(farg)
      (a:PositionalArg|KeywordArg, i:Int) :
        ret[i] = type(farg)
      (a:PositionalArg|KeywordArg, f:False) :
        false
  to-tuple(ret)