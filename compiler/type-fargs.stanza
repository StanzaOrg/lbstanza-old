defpackage stz/type-fargs :
  import core
  import collections
  import stz/type-fnarities

;============================================================
;====================== Definition ==========================
;============================================================

;Represents a function argument, parameterized
;on the type of the argument.
public deftype FArg<T> <: Hashable & Equalable

;Retrieve the type of the argument.
public defmulti type<?T> (a:FArg<?T>) -> T

;Represents a normal positional argument.
public defstruct PositionalArg<T> <: FArg<T> :
  optional?:True|False
  type:T with: (as-method => true)
with:
  printer => true
  hashable => true
  equalable => true

;Represents a keyword argument.
public defstruct KeywordArg<T> <: FArg<T> :
  name:Symbol
  optional?:True|False
  type:T with: (as-method => true)
with:
  printer => true
  hashable => true
  equalable => true

;Represents a variable-arity argument.
public defstruct VarArg<T> <: FArg<T> :
  name:Symbol
  type:T with: (as-method => true)
with:
  printer => true
  hashable => true
  equalable => true

;Represents a LoStanza rest argument.
public defstruct RestArg<T> <: FArg<T> :
  type:T with: (as-method => true)
with:
  printer => true
  hashable => true
  equalable => true

;============================================================
;====================== Mappers =============================
;============================================================

;Map over the type in an argument.
public defn map<?T,?S> (f:T -> ?S, a:FArg<?T>) -> FArg<S> :
  match(a) :
    (a:PositionalArg<T>) :
      PositionalArg<S>(optional?(a), f(type(a)))
    (a:KeywordArg<T>) :
      KeywordArg<S>(name(a), optional?(a), f(type(a)))
    (a:VarArg<T>) :
      VarArg<S>(name(a), f(type(a)))
    (a:RestArg<T>) :
      RestArg<S>(f(type(a)))

;Map over the type in an argument.
public defn do<?T> (f:T -> ?, a:FArg<?T>) -> False :
  f(type(a))
  false

;Substitute a new type into the argument.
public defn sub-type<?T> (a:FArg, x:?T) -> FArg<T> :
  map({x}, a)

;============================================================
;=================== Useful Utilities =======================
;============================================================

;An FArg is typically used as a specification for the allowed
;arguments to a function. We also use it to represent the
;values that a function is called with, but in this case
;the optional? fields don't have any meaning, so we
;require them to be false.
public defn used-as-value? (a:FArg) -> True|False :
  match(a) :
    (a:PositionalArg) : not optional?(a)
    (a:KeywordArg) : not optional?(a)
    (a:VarArg) : false
    (a:RestArg) : false

;============================================================
;==================== ArgPattern ============================
;============================================================

;Represents the arguments used to call a function.
;args:
;  If PositionalArg or KeywordArg, index can be:
;    Int: Argument given.
;    False: Argument was optional and not given.
;  If VarArg, index can be:
;    Tuple<Int>: Arguments given (can be empty).
;    Int: Arguments given directly as keyword.
public defstruct ArgPattern <: Hashable&Equalable :
  num-args:Int
  args:Tuple<FArg<ArgUsage>>
with:
  hashable => true
  equalable => true
  printer => true

;Represents how an argument is used.
public deftype ArgUsage <: Hashable&Equalable

;An argument is provided at the given index.
public defstruct GivenArg <: ArgUsage :
  index:Int
with:
  hashable => true
  equalable => true
  printer => true

;An argument is missing.
public defstruct MissingArg <: ArgUsage
with:
  hashable => true
  equalable => true
  printer => true

;Multiple arguments are provided here. For VarArg and RestArg.
public defstruct GivenArgs <: ArgUsage :
  indices:Tuple<Int>
with:
  hashable => true
  equalable => true
  printer => true

;============================================================
;================ How are Arguments Used? ===================
;============================================================

;Compute the argument pattern from the given arguments.
;- arities: The arities specification of the function.
;- expected: The declared arguments of the function.
;- given: The provided values to the function.
;Returns how the declared arguments of the function are used to satisfy
;the given values.
public defn arg-pattern (arities:FnArities, expected:Tuple<FArg>, given:Tuple<FArg>) -> ArgPattern :
  ;Compute indices of all given arguments.
  val given-pos = Vector<Int>()
  val given-keywords = HashTable<Symbol,Int>()
  for (a in given, i in 0 to false) do :
    match(a) :
      (a:PositionalArg) : add(given-pos, i)
      (a:KeywordArg) : given-keywords[name(a)] = i

  ;Compute number of optional positional arguments used.
  val num-used-optional = min(num-optional(arities),
                              length(given-pos) - min-arity(arities))

  ;Compute indices corresponding to each function argument.
  val pos-indices = to-seq(given-pos)
  val num-optional = to-seq(0 to false)
  val arg-usages = for a in expected map :
    match(a) :
      (a:PositionalArg) :
        if optional?(a) :
          val used? = next(num-optional) < num-used-optional
          if used? : PositionalArg<GivenArg>(true, GivenArg(next(pos-indices)))
          else : PositionalArg<MissingArg>(true, MissingArg())
        else :
          PositionalArg<GivenArg>(false, GivenArg(next(pos-indices)))
      (a:KeywordArg) :
        if optional?(a) :
          match(get?(given-keywords, name(a))) :
            (index:Int) : KeywordArg<GivenArg>(name(a), true, GivenArg(index))
            (f:False) : KeywordArg<MissingArg>(name(a), true, MissingArg())
        else :
          KeywordArg<GivenArg>(name(a), false, GivenArg(given-keywords[name(a)]))
      (a:VarArg) :
        match(get?(given-keywords, name(a))) :
          (i:Int) : VarArg<GivenArg>(name(a), GivenArg(i))
          (f:False) : VarArg<GivenArgs>(name(a), GivenArgs(to-tuple(pos-indices)))
      (a:RestArg) :
        RestArg<GivenArgs>(GivenArgs(to-tuple(pos-indices)))

  ;Construct ArgPattern.
  ArgPattern(length(given), arg-usages)

;Compute the argument pattern to satisfy the given arity.
;- arities: The arities specification of the function.
;- expected: The declared arguments of the function.
;- num-given: The number of simple positional values to the function.
;Returns how the declared arguments of the function are used to satisfy
;the given values.
public defn arg-pattern (arities:FnArities, expected:Tuple<FArg>, num-given:Int) -> ArgPattern :
  ;Compute number of optional positional arguments used.
  val num-used-optional = min(num-optional(arities),
                              num-given - min-arity(arities))

  ;Compute indices for each function argument.
  val num-optional = to-seq(0 to false)
  val arg-counter = to-seq(0 to num-given)
  val arg-usages = for a in expected map :
    match(a) :
      (a:PositionalArg) :
        if optional?(a) :
          val used? = next(num-optional) < num-used-optional
          if used? : PositionalArg<GivenArg>(true, GivenArg(next(arg-counter)))
          else : PositionalArg<MissingArg>(true, MissingArg())
        else : PositionalArg<GivenArg>(false, GivenArg(next(arg-counter)))
      (a:KeywordArg) :
        fatal("Function with keyword arguments cannot be used by only positional values.")
      (a:VarArg) :
        VarArg<GivenArgs>(name(a), GivenArgs(to-tuple(arg-counter)))
      (a:RestArg) :
        RestArg<GivenArgs>(GivenArgs(to-tuple(arg-counter)))

  ;Construct ArgPattern
  ArgPattern(num-given, arg-usages)  

;============================================================
;======== Recover Concrete Type from Usage Pattern ==========
;============================================================

;Instantiate an argument pattern and recover the concrete types
;expected by each argument.
;- fargs: The argument specification of the function.
;- pat: The pattern to instantiate.
;- wrap-tuple: Create a tuple type.
public defn instantiate-pattern<?T> (fargs:Tuple<FArg<?T>>
                                     pat:ArgPattern,
                                     wrap-tuple:T -> T) -> Tuple<T> :
  val ret = Array<T>(num-args(pat))
  for (a in args(pat), farg in fargs) do :
    match(a, type(a)) :
      (a:VarArg, u:GivenArg) :
        ret[index(u)] = wrap-tuple(type(farg))
      (a:VarArg|RestArg, u:GivenArgs) :
        for i in indices(u) do :
          ret[i] = type(farg)
      (a:PositionalArg|KeywordArg, u:GivenArg) :
        ret[index(u)] = type(farg)
      (a:PositionalArg|KeywordArg, u:MissingArg) :
        false
  to-tuple(ret)