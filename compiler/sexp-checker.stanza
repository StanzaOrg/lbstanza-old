defpackage stz/sexp-checker :
  import core
  import collections
  import stz/sexp-errors

;Scan through the given s-expression and ensure it is valid.
;If it is not, throw a InvalidSExp error.

public defn check-valid-sexp (sexp,
                              allow-rich-quotes?:True|False) -> False :

  ;Track the most recent information seen.
  var closest-info:FileInfo|False = false
  defn update-info (info:FileInfo|False) :
    if info is FileInfo :
      closest-info = info

  ;Accumulate all errors into this buffer
  val error-buffer = Vector<SExpError>()

  ;Throw errors if error-buffer is not empty.
  defn throw-errors? () :
    if not empty?(error-buffer) :
      throw(InvalidSExp(to-tuple(error-buffer)))

  ;Scan through the s-expression and collect
  ;errors.
  let loop (sexp = sexp) :
    match(sexp) :
      (sexp:Token) :
        update-info(info(sexp))
        loop(item(sexp))
      (sexp:List) :
        if quote-form?(sexp) :
          if not allow-rich-quotes? : 
            do(loop, sexp)
        else :
          do(loop, sexp)
      (sexp:Char
           |Byte|Int|Long
           |Float|Double
           |String|Symbol
           |True|False) :
        false
      (sexp) :
        val err = NotAnSExp(closest-info, object-type(sexp))
        add(error-buffer, err)

  ;Issue errors
  throw-errors?()

;By default, allow-rich-quotes? is false.
public defn check-valid-sexp (sexp) -> False :
  check-valid-sexp(sexp, false)

;Helper: Return true if it's a ($quote ...) form.
defn quote-form? (x:List) -> True|False :
  not empty?(x) and
  unwrap-token(head(x)) == `$quote