defpackage stz/tl-formatter :
  import core
  import collections
  import stz/types
  import stz/type-formatter
  import stz/tl-ir2
  import stz/printing-utils
  import stz/namemap

;============================================================
;======================= API ================================
;============================================================

;A type for formatting TL programs.
public deftype TLFormatter <: TypeFormatter

;Format the given item in a human-readable way.
public defmulti format (f:TLFormatter, item:TLItem) -> ?

;============================================================
;=================== Convenience ============================
;============================================================

;Convenience: Create the formatter from the namemap in the program.
public defn TLFormatter (prog:TProg) :
  defn get-name (n:Int) -> Symbol :
    if key?(namemap(prog),n) : name(namemap(prog)[n])
    else : to-symbol("$v%_" % [n])
  TLFormatter(get-name)

;Directly instantiate a formatter and format a prog.
public defn format (prog:TProg) :
  format(TLFormatter(prog), prog)

;============================================================
;====================== Constructor =========================
;============================================================

;Create the formatter given a way to retrieve a name.
public defn TLFormatter (get-name:Int -> Symbol) :

  ;Type formatter
  val type-formatter = TypeFormatter(get-name)

  ;Format a type
  defn ftype (t:Type) :
    format(type-formatter, t)

  ;Format a child declaration.
  defn fchild (c:Child) :
    val arg-str = "" when empty?(args(c))
             else "<%,>" % [seq(get-name,args(c))]
    "%_%_ <: %_" % [get-name(n(c)), arg-str, ftype(parent(c))]

  ;Format an argument specifier.
  defn farg (n:Int, arg:FArg?) :
    defn type-str (t:Type|False) :
      "" when t is False else ":%_" % [ftype(t as Type)]
    defn optional-str (b:True|False) :
      "optional " when b else ""
    match(arg) :
      (arg:PositionalArg?) :
        "%_%_%_" % [optional-str(optional?(arg)), get-name(n), type-str(type(arg))]
      (arg:KeywordArg?) :
        "%_keyword %_%_" % [optional-str(optional?(arg)), get-name(n), type-str(type(arg))]
      (arg:VarArg?) :
        "%_%_ ..." % [get-name(n), type-str(type(arg))]

  ;Format a command
  defn fcomm (c:TComm) :
    match(c) :
      ;Format a type declaration.
      (c:TDefType) :
        val name = get-name(n(c))
        val arg-str = "" when empty?(args(c))
                 else "<%,>" % [seq(get-name,args(c))]
        val parent-str = "" when parent(c) is False
                    else " <: %_" % [ftype(parent(c) as Type)]
        val child-str =
          if empty?(children(c)) :
            ""
          else :
            val strs = for c in children(c) seq :
              Indented("\n%_" % [fchild(c)])
            ":%*" % [strs]
        "deftype %_%_%_%_" % [name, arg-str, parent-str, child-str]
        
      ;Format a function definition.
      (c:TDefn) :
        val star? = "*" when tail?(c) else ""
        val name = get-name(n(c))
        val targ-parts = Vector<?>()
        for v in targs(c) do : add(targ-parts, get-name(v))
        for v in cargs(c) do : add(targ-parts, "?%_" % [get-name(v)])
        val targ-str = "" when empty?(targ-parts) else to-string("<%,>" % [targ-parts])
        val arg-strs = seq(farg, args(c), a1(c))
        val ret-str = "" when a2(c) is False
                 else " -> %_" % [ftype(a2(c) as Type)]
        "defn%_ %_%_ (%,)%_ :\n%_" % [star?, name, targ-str, arg-strs,
                                      ret-str, Indented(fexp(body(c)))]
                                      
      ;Initialization command.
      (c:TInit) :
        fexp(exp(c))

      (c) :
        c

  ;Format an expression.
  defn fexp (e:TExp) :
    match(e) :
      (e:TDo) :
        defn arg-str (e:TArg) :
          val keyword-str = "" when keyword(e) is False else "%_ = " % [keyword(e)]
          val exp-type-str = match(ctxt(value(e))) :
            (c:ExpCtxt) : " EXP:%_" % [ftype(expected(c))]
            (c) : ""            
          "%_%_%_" % [keyword-str, fexp(value(e)), exp-type-str]
        defn targ-str () :
          if empty?(targs(e)) : ""
          else : "<%,>" % [seq(ftype, targs(e))]
        "%_%_%_(%,)%_" % [fexp(func(e)), type-str(func(e)), targ-str(), seq(arg-str,args(e)), type-str(e)]
      (e:TCast) :
        "%_ as %_" % [fexp(exp(e)), ftype(targ(e))]
      (e:TLet) :
        val name = get-name(n(e))
        val type-str = "" when ntype(e) is False
                  else ":%_" % [ftype(ntype(e) as Type)]
        "val %_%_ = %_\n%_" % [name, type-str, fexp(value(e)), fexp(body(e))]
      (e:TRef) :
        get-name(n(e))
      (e:TLiteral) :
        written(value(e))
      (e:TMix) :
        "{%,}%_" % [seq(fexp,refs(e)), type-str(e)]        
      (e:TSeq) :
        "%_\n%_" % [fexp(a(e)), fexp(b(e))]
      (e:TFn) :
        val star? = "*" when tail?(e) else ""
        val arg-strs = for (a in args(e), t in a1(e)) seq :
          match(t:Type) : "%_:%_" % [get-name(a), ftype(t)]
          else : get-name(a)
        val ret-str = "" when a2(e) is False
                 else " -> %_" % [ftype(a2(e) as Type)]
        "fn%_ (%,)%_ :\n%_" % [star?, arg-strs, ret-str, Indented(fexp(body(e)))]
      (e) :
        e

  ;Helper: Add the ':type' annotation to an expression.
  defn type-str (e:TExp) -> ? :
    "" when type(e) is False else ":%_" % [ftype(type(e) as Type)]
        
  ;Return the formatter.
  new TLFormatter :
    defmethod format (this, item:TLItem) :
      match(item) :
        (item:TComm) : fcomm(item)
        (item:TExp) : fexp(item)
        (item:Type) : format(type-formatter,item)
        (item) : item
    defmethod stz/type-formatter/format (this, t:Type) :
      format(type-formatter,t)

;============================================================
;====================== Other Formatting ====================
;============================================================

public defn format (f:TLFormatter, p:TPackage) :
  val fcomms = seq(format{f, _}, comms(p))
  val items = [
    packageio(p)
    inline-fields(fcomms)]
  "TPackage%_" % [colon-field-list(items)]

public defn format (f:TLFormatter, p:TProg) :
  val fpackages = seq(format{f, _}, packages(p))
  val items = [
    hierarchy(p)
    inline-fields(fpackages)
    namemap(p)]
  "TProg%_" % [colon-field-list(items)]