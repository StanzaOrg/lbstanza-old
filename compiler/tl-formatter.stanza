defpackage stz/tl-formatter :
  import core
  import collections
  import stz/types
  import stz/type-formatter
  import stz/tl-ir2
  import stz/printing-utils
  import stz/namemap

;============================================================
;======================= API ================================
;============================================================

;A type for formatting TL programs.
public deftype TLFormatter

;Format the given item in a human-readable way.
public defmulti format (f:TLFormatter, item:TLItem) -> ?

;============================================================
;=================== Convenience ============================
;============================================================

;Convenience: Create the formatter from the namemap in the program.
public defn TLFormatter (prog:TProg) :
  defn get-name (n:Int) -> Symbol :
    name(namemap(prog)[n])
  TLFormatter(get-name)

;Directly instantiate a formatter and format a prog.
public defn format (prog:TProg) :
  format(TLFormatter(prog), prog)

;============================================================
;====================== Constructor =========================
;============================================================

;Create the formatter given a way to retrieve a name.
public defn TLFormatter (name:Int -> Symbol) :

  ;Format a command
  defn fcomm (c:TComm) :
    match(c) :
      (c:TDefType) :
        "???"
      (c:TDef) :
        "???"
      (c:TDefTuple) :
        "???"
      (c:TDefVar) :
        "???"
      (c:TDefn) :
        "???"
      (c:TDefmulti) :
        "???"
      (c:TDefmethod) :
        "???"
      (c:TInit) :
        "???"
      (c:TLDefType) :
        "???"
      (c:TLDef) :
        "???"
      (c:TLDefVar) :
        "???"
      (c:TLDefn) :
        "???"
      (c:TLExternFn) :
        "???"
      (c:TLDefmethod) :
        "???"
      (c:TExtern) :
        "???"
      (c:TLInit) :
        "???"
      (c:TDoc) :
        "???"
        
  ;Return the formatter.
  new TLFormatter :
    defmethod format (this, item:TLItem) :
      match(item) :
        (item:TComm) : fcomm(item)
        (item) : item

;============================================================
;====================== Other Formatting ====================
;============================================================

public defn format (f:TLFormatter, p:TPackage) :
  val fcomms = seq(format{f, _}, comms(p))
  val items = [
    packageio(p)
    inline-fields(fcomms)]
  "TPackage%_" % [colon-field-list(items)]

public defn format (f:TLFormatter, p:TProg) :
  val fpackages = seq(format{f, _}, packages(p))
  val items = [
    hierarchy(p)
    inline-fields(fpackages)
    namemap(p)]
  "TProg%_" % [colon-field-list(items)]