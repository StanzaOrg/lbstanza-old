defpackage stz/proj-stage0 :
  import core
  import collections
  import stz/proj-ir

;============================================================
;==================== Stage0 IR =============================
;============================================================

public defstruct ProjFileS0 :
  id:Int
  path: String
  full-path: String
  stmts: Tuple<ProjStmt> with: (updater => sub-stmts)

;Attach a fileinfo to every ProjStmt.
public defmulti info (s:ProjStmt) -> FileInfo|False

;------------------------------------------------------------
;----------------- Statements From Reader -------------------
;------------------------------------------------------------

public defstruct IncludeStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  path: String
  optional?: True|False
with: (printer => true)

public defstruct DefinedInStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  package: Symbol
  filename: ProjValue
with: (printer => true)

public defstruct PackagesDefinedInStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  packages: Symbol
  filename: ProjValue
with: (printer => true)

public defstruct RequiresStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  package: Symbol
  dylibs: Maybe<ProjValue>
  ccfiles: Maybe<ProjValue>
  ccflags: Maybe<ProjValue>
  foreign-packages: Tuple<ForeignPackageFilesS0>
with: (printer => true)

public defstruct DylibDirectoryStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  directories: ProjValue
with: (printer => true)

public defstruct ImportWhenStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  package: Symbol
  dependencies: ProjValue
with: (printer => true)

public defstruct CompileStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  file?: True|False
  name: ProjValue
  dependencies: Maybe<ProjValue>
  foreign-packages: Tuple<ForeignPackageFilesS0>
  commands: ProjValue
with: (printer => true)

public defstruct BuildStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  name: Symbol
  type: BuildTargetType
  inputs: ProjValue
  supported-vm-packages: Maybe<ProjValue>
  pkg: Maybe<ProjValue>
  output: Maybe<ProjValue>
  assembly: Maybe<ProjValue>
  external-dependencies: Maybe<ProjValue>
  ccfiles: Maybe<ProjValue>
  ccflags: Maybe<ProjValue>
  flags: Maybe<ProjValue>
  optimize: True|False
with: (printer => true)

;Example:
;  syntax-packages (core jitx) defined-in "jitx-macros.so"
public defstruct SyntaxPackagesDefinedInStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  packages: Tuple<Symbol>
  filename: ProjValue
with: (printer => true)

public defstruct VarStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  name: Symbol
  value: ProjValue
with: (printer => true)

;Example:
;  foreign-packages(conan) :
;    "goodzip/2.11.3"
public defstruct ForeignPackageFilesS0 :
  package-manager:Symbol
  files: ProjValue

;Example:
;  foreign-package-params(conan) :
;    downloaded-dirs: "myconanpackages"
;- projdir: Not explicitly provided by user. Holds the
;  directory of the .proj file that contains this statement.
public defstruct ForeignPackageParamsStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  package-manager:Symbol
  projdir: ProjValue
  entries: Tuple<KeyValue<Symbol, ProjValue>> with: (updater => sub-entries)
with: (printer => true)

;------------------------------------------------------------
;---------- Statement Introduced During Processing ----------
;------------------------------------------------------------

;Introduced during traverse-includes pass.
public defstruct IncludedStmtsS0 <: ProjStmt :  
  info: FileInfo|False with: (as-method => true)
  proj-file-id:Int
  path: String
  full-path: String
  stmts: Tuple<ProjStmt> with: (updater => sub-stmts)

;Introduced during traverse-includes pass.
public defstruct EmptyStmtS0 <: ProjStmt 
with: (printer => true)

;============================================================
;===================== Values ===============================
;============================================================

;Represents a structured value that is read within
;a .proj file.
public deftype ProjValue
public defmulti info (s:ProjValue) -> FileInfo|False
public defmulti sub-info (s:ProjValue, info:FileInfo|False) -> ProjValue

;------------------------------------------------------------
;-------------------- Values from Reader --------------------
;------------------------------------------------------------

;Represents either a string or a symbol.
;Example:
;  "-myflag"
public defstruct AtomValue <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
  value: String|Symbol
with: (printer => true)

;Represents a value that is conditional on the
;system platform. 
;Example:
;  on-platform :
;    os-x : something
;    windows : something-else
public defstruct CondPlatform <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
  values: Tuple<KeyValue<Symbol,ProjValue>>
with: (printer => true)

;Represents a value that is conditional on the
;desired link. 
;Example:
;  on-link :
;    dynamic : something
;    static : something-else
public defstruct CondLink <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
  values: Tuple<KeyValue<Symbol,ProjValue>>
with: (printer => true)

;Represents a reference to a defined variable.
;Example:
;  {MYVAR}
public defstruct VarValue <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
  name: Symbol
with: (printer => true)

;Represents multiple values wrapped in a list.
;Example:
;  (a b c d)
public defstruct ProjValues <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
  values: Tuple<ProjValue>
with: (printer => true)

;Represents a tuple of values.
;Example:
;  [a b c d]
public defstruct ProjTuple <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
  value: ProjValue
with: (printer => true)

;Represents a table of key-value pairs.
;Example:
;  {
;    email: "p.li@jitx.com"
;    build-dir: "."
;  }
;Note this is only used for the Stage0 IR. 
public defstruct ProjTableS0 <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
  values: Tuple<KeyValue<Symbol,ProjValue>>
with: (printer => true)

;------------------------------------------------------------
;------------- Values Introduced During Processing ----------
;------------------------------------------------------------

;Introduced by the curly substitution since a String
;can split into multiple ProjValue.
public defstruct SplicedString <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
  values: Tuple<ProjValue>
with: (printer => true)

;Introduced during variable substitution.
;The curly {.} is replaced with this.
;- proj-file-id: The lexically surrounding ProjFileS0 at the
;  place this ProjDir was created.
public defstruct ProjDir <: ProjValue :
  proj-file-id:Int
  info: FileInfo|False with: (as-method => true, updater => sub-info)
with: (printer => true)

;Introduced during variable substitution.
;The curly {WORKDIR} is replaced with this.
public defstruct WorkDir <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
with: (printer => true)

;============================================================
;====================== Accessors ===========================
;============================================================

;Force retrieve the name of the statement as a string.
public defn name-as-string! (s:CompileStmtS0) -> String :
  let loop (name:ProjValue = name(s)) :
    match(name) :
      (name:AtomValue) : value(name) as String
      (name:ProjTuple) : loop(value(name))
      (name:ProjValues) : string-join(seq(loop, values(name)), " ")
      (name) : fatal("Unexpected type %_ within name field of CompileStmtS0." % [object-type(name)])

;============================================================
;====================== Printer =============================
;============================================================

defmethod print (o:OutputStream, f:ProjFileS0) :
  print(o, "ProjFileS0 %_:" % [id(f)])
  val o2 = IndentedStream(o)
  lnprint(o2, "path: %~" % [path(f)])
  lnprint(o2, "full-path: %~" % [full-path(f)])
  do(lnprint{o2, _}, stmts(f))

defmethod print (o:OutputStream, s:IncludedStmtsS0) :
  print(o, "IncludedStmtsS0:")
  val o2 = IndentedStream(o)
  lnprint(o2, "info: %~" % [info(s)])
  lnprint(o2, "path: %~" % [path(s)])
  lnprint(o2, "full-path: %~" % [full-path(s)])
  do(lnprint{o2, _}, stmts(s))

;============================================================
;================== Mappers and Doers =======================
;============================================================

public deftype ProjItem :
  ProjValue <: ProjItem
  ProjStmt <: ProjItem

;Generalized mapper for all ProjItem.
public defn map<?T> (f:ProjItem -> ProjItem, x:?T&ProjItem) -> T :
  ;Type-specific applicators for 'f'.
  defn h (x:ProjStmt) : f(x) as ProjStmt
  defn h (x:ProjValue) : f(x) as ProjValue
  defn h (x:Tuple<ProjStmt>) : map(h,x)
  defn h (x:Tuple<ProjValue>) : map(h,x)  
  defn h (x:Maybe<ProjValue>) :
    None() when empty?(x) else One(h(value!(x)))
  defn h (x:ForeignPackageFilesS0) : ForeignPackageFilesS0(package-manager(x), h(files(x)))
  defn h (xs:Tuple<ForeignPackageFilesS0>) : map(h,xs)
  defn h (x:Tuple<KeyValue<Symbol,ProjValue>>) : 
    for e in x map :
      key(e) => h(value(e))    
  ;Dispatch based upon the type of ProjItem.
  val result = match(x) :
    (x:IncludeStmtS0) : x
    (x:IncludedStmtsS0) : IncludedStmtsS0(info(x), proj-file-id(x), path(x), full-path(x), h(stmts(x)))
    (x:EmptyStmtS0) : x
    (x:DefinedInStmtS0) : DefinedInStmtS0(info(x), package(x), h(filename(x)))
    (x:PackagesDefinedInStmtS0) : PackagesDefinedInStmtS0(info(x), packages(x), h(filename(x)))
    (x:DylibDirectoryStmtS0) : DylibDirectoryStmtS0(info(x), h(directories(x)))
    (x:RequiresStmtS0) : RequiresStmtS0(info(x), package(x), h(dylibs(x)), h(ccfiles(x)), h(ccflags(x)), h(foreign-packages(x)))
    (x:ImportWhenStmtS0) : ImportWhenStmtS0(info(x), package(x), h(dependencies(x)))
    (x:CompileStmtS0) : CompileStmtS0(info(x), file?(x), h(name(x)),
                                      h(dependencies(x)), h(foreign-packages(x)), h(commands(x)))
    (x:BuildStmtS0) : BuildStmtS0(info(x), name(x), type(x), h(inputs(x)), h(supported-vm-packages(x)),
                                  h(pkg(x)), h(output(x)), h(assembly(x)), h(external-dependencies(x)),
                                  h(ccfiles(x)), h(ccflags(x)), h(flags(x)), optimize(x))
    (x:SyntaxPackagesDefinedInStmtS0) : SyntaxPackagesDefinedInStmtS0(info(x), packages(x), h(filename(x)))
    (x:VarStmtS0) : VarStmtS0(info(x), name(x), h(value(x)))
    (x:ForeignPackageParamsStmtS0) : ForeignPackageParamsStmtS0(info(x), package-manager(x), h(projdir(x)), h(entries(x)))
    (x:AtomValue) : x
    (x:CondPlatform) : CondPlatform(info(x), h(values(x)))
    (x:CondLink) : CondLink(info(x), h(values(x)))
    (x:VarValue) : x
    (x:ProjValues) : ProjValues(info(x), h(values(x)))
    (x:ProjTuple) : ProjTuple(info(x), h(value(x)))
    (x:ProjTableS0) : ProjTableS0(info(x), h(values(x)))
    (x:SplicedString) : SplicedString(info(x), h(values(x))) 
    (x:ProjDir) : x
    (x:WorkDir) : x
  result as T&ProjItem

;Generalized doer for all ProjItem.
public defn do (f:ProjItem -> ?, x:ProjItem) -> False :
  defn h (x:ProjItem) : (f(x), x)
  map(h,x)
  false

;============================================================
;================ Description of Statement ==================
;============================================================

;Return a String like 'include statement for file "myfile.stanza"'
;that describes the type of statement it is.
;Used to generate sentence like:
;  Duplicate include statement for file "myfile.stanza".
public defn stmt-description (s:ProjStmt) -> String :
  to-string $ match(s) :    
    (s:IncludeStmtS0) :
      "include statement for file %~" % [path(s)]
    (s:DefinedInStmtS0) :
      "defined-in statement for package %_" % [package(s)]
    (s:PackagesDefinedInStmtS0) :
      "defined-in statement for packages %_" % [packages(s)]
    (s:DylibDirectoryStmtS0) :
      "dynamic-library directories"
    (s:RequiresStmtS0) :
      "requires statement for package %_" % [package(s)]
    (s:ImportWhenStmtS0) :
      "import-when statement for package %_" % [package(s)]
    (s:CompileStmtS0) :
      val type-str = "file" when file?(s) else "flag"
      "compile statement for %_ %_" % [type-str, name-as-string!(s)]
    (s:BuildStmtS0) :
      "build definition for target %~" % [name(s)]
    (s:SyntaxPackagesDefinedInStmtS0) :
      "syntax-packages statement for packages %," % [packages(s)]
    (s:VarStmtS0) :
      "initialization statement for variable %_" % [name(s)]
    (s:ForeignPackageParamsStmtS0) :
      "params for %_ package manager" % [package-manager(s)]

;============================================================
;==================== Duplication Key =======================
;============================================================

;If a statement has a non-false duplication key, then it means
;that we do not allow duplicates of the same statement in the
;same proj file.

public defn duplication-key (s:ProjStmt) -> Hashable&Equalable :
  match(s) :
    (s:IncludeStmtS0) :
      [`Include, path(s)]
    (s:DefinedInStmtS0) :
      [`DefinedIn, package(s)]
    (s:PackagesDefinedInStmtS0) :
      [`PackagesDefinedIn, packages(s)]
    (s:RequiresStmtS0) :
      [`Requires, package(s)]
    (s:DylibDirectoryStmtS0) :
      false
    (s:ImportWhenStmtS0) :
      [`ImportWhen, package(s)]
    (s:CompileStmtS0) :
      [`Compile, name-as-string!(s)]
    (s:BuildStmtS0) :
      [`Build, name(s)]
    (s:SyntaxPackagesDefinedInStmtS0) :
      [`SyntaxPackagesDefinedIn, qsort(packages(s))]
    (s:VarStmtS0) :
      false
    (s:ForeignPackageParamsStmtS0) :
      [`ForeignPackageParams, package-manager(s)]