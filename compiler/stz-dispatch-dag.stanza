defpackage stz/dispatch-dag :
  import core
  import collections
  import stz/set-utils

;============================================================
;==================== Input Datastructure ===================
;============================================================

public deftype Arg <: Hashable & Equalable
public defstruct Top <: Arg
public defstruct Nums <: Arg :
  values: Tuple<Int> with: (ensure => sorted!)

public defstruct Branch :
  args: Tuple<Arg>

public defstruct BranchTable :
  branches: Tuple<Branch>
  abstract-nums: IntSet with: (default => IntSet())
  instance-branches: IntSet with: (init => compute-instance-branches(branches, abstract-nums))

public deftype Soln <: Hashable & Equalable
public defstruct NoSoln <: Soln
public defstruct UniqueSoln <: Soln : (index:Int)
public defstruct AmbSoln <: Soln :
  index1:Int,
  index2:Int with: (ensure => different!(index1))
with:
  constructor => #AmbSoln

public defn AmbSoln (a:Int, b:Int) :
  #AmbSoln(min(a,b), max(a,b))

;============================================================
;===================== Error Checking =======================
;============================================================

defn different! (a:Int) :
  fn (description:String, b:Int) :
    if a == b :
      fatal("The value given to %_ (%_) should not be equal to %_." % [
        description, b, a])

defn sorted! (description:String, vs:Tuple<Int>) :
  for i in 0 to length(vs) - 1 do :
    if vs[i] >= vs[i + 1] :
      fatal("The value given to %_ (%_) is not sorted." % [description, vs])

;============================================================
;=================== Hash and Equality ======================
;============================================================

defmethod hash (a:Arg) :
  match(a) :
    (a:Top) : 0
    (a:Nums) : hash(values(a))

defmethod equal? (a:Arg, b:Arg) :
  match(a, b) :
    (a:Top, b:Top) : true
    (a:Nums, b:Nums) : values(a) == values(b)
    (a,b) : false

defmethod hash (a:Soln) -> Int:
  match(a):
    (a:NoSoln) : 0
    (a:UniqueSoln) : (- index(a))
    (a:AmbSoln) : index1(a) * index2(a)

defmethod equal? (a:Soln, b:Soln):
  match(a, b):
    (a:NoSoln, b:NoSoln): true
    (a:UniqueSoln, b:UniqueSoln): index(a) == index(b)
    (a:AmbSoln, b:AmbSoln): index1(a) == index1(b) and index2(a) == index2(b)
    (a, b): false

;============================================================
;====================== Printing ============================
;============================================================

defmethod print (o:OutputStream, n:Nums) :
  print("(%,)" % [values(n)])
defmethod print (o:OutputStream, t:Top) :
  print("(TOP)")
defmethod print (o:OutputStream, b:Branch) :
  print(o, args(b))
defmethod print (o:OutputStream, t:BranchTable) :
  print(o, "abstract: %," % [abstract-nums(t)])
  lnprint(o, "%n" % [branches(t)])

defmethod print (o:OutputStream, s:NoSoln) :
  print(o, "NoSoln")
defmethod print (o:OutputStream, s:UniqueSoln) :
  print(o, "UniqueSoln(%_)" % [index(s)])
defmethod print (o:OutputStream, s:AmbSoln) :
  print(o, "AmbSoln(%_, %_)" % [index1(s), index2(s)])

;============================================================
;====================== Relations ===========================
;============================================================

public defn subarg? (x:Arg, y:Arg) :
  match(x, y):
    (x:Top, y:Top) : true
    (x:Nums, y:Top) : true
    (x:Nums, y:Nums) : subset?(values(x), values(y))
    (x, y): false

public defn bottom? (x:Arg) :
  match(x:Nums) :
    empty?(values(x))

public defn overlap? (x:Arg, y:Arg) :
  if bottom?(x) or bottom?(y) :
    false
  else :
    match(x, y) :
      (x:Top, y) : true
      (x, y:Top) : true
      (x:Nums, y:Nums) : overlap?(values(x), values(y))

public defn covered? (y:Int, x:Arg) :
  match(x) :
    (x:Top) : true
    (x:Nums) : contains?(values(x), y)

public defn subbranch? (a:Branch, b:Branch) :
  fatal("Mismatched lengths") when length(args(a)) != length(args(b))
  all?(subarg?, args(a), args(b))

public defn strict-subbranch? (a:Branch, b:Branch) :
  subbranch?(a,b) and not subbranch?(b,a)

public defn case? (case:Tuple<Int>, b:Branch) :
  fatal("Mismatched lengths") when length(case) != length(args(b))
  all?(covered?, case, args(b))

public defn union (args:Seqable<Arg>) -> Arg :  
  label<Arg> return :
    val nums = for arg in args seq :
      match(arg:Top) : return(arg)
      else : values(arg as Nums)
    if done?(nums) : Nums([])
    else : Nums $ to-tuple $ union(nums)

public defn subarg-of-union? (x:Arg, ys:Seqable<Arg>) :
  label<True|False> return :
    val nums = for y in ys seq :
      match(y:Top) : return(true)
      else : values(y as Nums)
    match(x:Nums) :
      subset-of-union?(values(x), nums)

public defn intersect (args:Seqable<Arg>) -> Arg :
  val nums = seq(values, filter-by<Nums>(args))
  if done?(nums) : Top()
  else : Nums $ to-tuple $ intersect(nums)

;============================================================
;============= Compute Instance Branches ====================
;============================================================

;Compute the set of instance branches
defn compute-instance-branches (branches:Tuple<Branch>, abstract-nums:IntSet) -> IntSet :
  ;Helper: Return true if the given argument corresponds
  ;to a single concrete type.
  defn single-concrete-arg? (a:Arg) -> True|False :
    match(a:Nums) :
      if length(values(a)) == 1 :
        val v = values(a)[0]
        not abstract-nums[v]
  ;Helper: Return true if the given branch is an
  ;instance method.
  defn instance-branch? (b:Branch) -> True|False :
    any?(single-concrete-arg?, args(b))
  ;Compute the set of instance methods
  to-intset $ for (i in 0 to false, b in branches) filter :
    instance-branch?(b)
    
;============================================================
;======================= Soln Checker =======================
;============================================================

public defn check (s:Soln, case:Tuple<Int>, table:BranchTable) -> True|False :
  val bs = branches(table)
  match(s) :
    (s:NoSoln) :
      for i in 0 to length(bs) none? :
        case?(case, bs[i])
    (s:UniqueSoln) :
      for i in 0 to length(bs) all? :
        if i == index(s) :  (case?(case, bs[i]) )
        else : subbranch?(bs[index(s)], bs[i]) or not case?(case, bs[i])
    (s:AmbSoln) :
      defn no-other-satisfying-subbranch? (i:Int) :
        for j in 0 to length(bs) none? :
          i != j and case?(case, bs[j]) and subbranch?(bs[j], bs[i])
      case?(case, bs[index1(s)]) and
      case?(case, bs[index2(s)]) and
      no-other-satisfying-subbranch?(index1(s)) and
      no-other-satisfying-subbranch?(index2(s))

public defn check-ordered (s:Soln, case:Tuple<Int>, table:BranchTable) -> True|False :
  val bs = branches(table)
  match(s) :
    (s:NoSoln) :
      for i in 0 to length(bs) none? :
        case?(case, bs[i])
    (s:UniqueSoln) :
      case?(case, bs[index(s)]) and
      for i in 0 to index(s) none? :
        case?(case, bs[i])

;============================================================
;====================== Ancestor Table ======================
;============================================================

;Returns a strict ancestor table.
defn ancestor-table (branches:Tuple<Branch>) :
  val ancestors = IntListTable<Int>()
  within (ba, bb) = overlaps(branches) :
    match(subbranch?(branches[ba], branches[bb]), subbranch?(branches[bb], branches[ba])) :
      (a-sub-b:True, b-sub-a:False) : add(ancestors, ba, bb)
      (a-sub-b:False, b-sub-a:True) : add(ancestors, bb, ba)
      (a-sub-b, b-sub-a) : false
  ancestors

defn overlaps (return:(Int, Int) -> ?, branches:Tuple<Branch>) :
  val overlap-count = HashTable<[Int,Int],Int>(0)
  val num-coords = length(args(branches[0]))
  for coord in 0 to num-coords do :
    within (branch-a, branch-b) = sweep-line(coordinate-intervals(branches, coord)) :
      val p = [branch-a, branch-b]
      val count = update(overlap-count, {_ + 1}, p)
      return(branch-a, branch-b) when count == num-coords

defn coordinate-intervals (branches:Collection<Branch>, coord:Int) :
  val ints = Vector<IntervalEvent>()
  for (b in branches, branch-id in 0 to false) do :
    val [start,end] = match(args(b)[coord]):
      (a:Top): [INT-MIN, INT-MAX]
      (a:Nums): [xs[0], xs[n - 1]] where :
                  val xs = values(a)
                  val n = length(xs)
    add(ints, IntervalEvent(branch-id, true, start))
    add(ints, IntervalEvent(branch-id, true, end))
  qsort!(ints)
  ints

defn sweep-line (return:(Int, Int) -> ?, intervals:Collection<IntervalEvent>) :
  val id-set = HashSet<Int>()
  for e in intervals do :
    if start?(e) :
      for existing-id in id-set do :
        return(min(id(e), existing-id),
               max(id(e), existing-id))
      add(id-set, id(e))
    else :
      remove(id-set, id(e))

defstruct IntervalEvent <: Comparable<IntervalEvent> :
  id:Int
  start?:True|False
  value:Int

defmethod compare (a:IntervalEvent, b:IntervalEvent) :
  val c = compare(value(a), value(b))
  if c == 0 :
    match(start?(a), start?(b)) :
      (sa:True, sb:False) : -1
      (sa:False, sb:True) : 1
      (sa, sb) : compare(id(a), id(b))
  else : c

;============================================================
;================= Topological Solution =====================
;============================================================

defn topo-order (n:Int, ancestors:Table<Int,List<Int>>) -> Tuple<Int> :
  val list = Vector<Int>()
  val visited = Array<True|False>(n,false)
  let loop (xs:Seqable<Int> = 0 to n):
    for x in xs do :
      if not visited[x] :
        visited[x] = true
        loop(ancestors[x])
        add(list, x)
  reverse!(list)
  to-tuple(list)

defn topo-soln (input-solns:Tuple<Soln>, btable:BranchTable) -> Soln :
  ;If any solution is an instance method, then consider
  ;branches only amongst instance methods.
  val instance-solns = for s in input-solns filter :
    instance-branches(btable)[index(s as UniqueSoln)]
  val solns = input-solns when done?(instance-solns)
         else to-tuple(instance-solns)

  ;Get the ids from the soln ids
  val soln-ids = map(index{_ as UniqueSoln}, solns)

  ;Get the first id, and the rest id
  val id0 = soln-ids[0]
  val rest-ids = soln-ids[1 to false]

  ;Discover whether any of the branches is not a strict
  ;subbranch of branch0.
  val amb-id = for b in rest-ids find :
    not strict-subbranch?(branches(btable)[id0], branches(btable)[b])
  match(amb-id:Int) : 
    AmbSoln(id0, amb-id)
  else :
    UniqueSoln(id0)

;============================================================
;================== Argument Collapsing =====================
;============================================================

defn collapse-args (args:Tuple<Arg>, abstract:IntSet) -> [Tuple<Tuple<Int|Top>>, Vector<List<Int>>] :
  ;Compute all the branches that each Arg is included in.
  val included-in-branches = IntListTable<Int>()
  for (arg in args, branch-id in 0 to false) do :
    match(arg:Nums) :
      for x in values(arg) do:
        if not abstract[x] :
          add(included-in-branches, x, branch-id)

  ;Compute the values that should be in each group.
  val grouped-table = ListTable<List<Int>,Int>()
  for [x,branches] in pairs(included-in-branches) do :
    add(grouped-table, branches, x)

  ;Compute group ids (densely indexed), and mapping from group id to values.
  val group-ids = HashTable<List<Int>,Int>()
  val group-values = Vector<List<Int>>()
  for ([bs, xs] in pairs(grouped-table), i in 0 to false) do :
    group-ids[bs] = i
    group-values[i] = xs

  ;Compute the branches that are in each group
  val branch-groups = IntListTable<Int>()
  for [bs,g] in pairs(group-ids) do :
    for b in bs do :
      add(branch-groups, b, g)

  ;Compute the new mapped arguments
  val args* = to-tuple $
    for (arg in args, b in 0 to false) seq :
      match(arg) :
        (arg:Nums) : to-tuple(branch-groups[b])
        (arg:Top) : to-tuple(cat([Top()], 0 to length(group-values)))

  ;Return new mapped arguments and values for each group
  [args*, group-values]

;============================================================
;====================== Compute Trie ========================
;============================================================

defn form-trie<T> (branches:Tuple<Branch>,
                   targets:Tuple<Soln>,
                   abstract-nums:IntSet,
                   Node: (Int, Tuple<KeyValue<Int|Top,T>>, Vector<List<Int>>) -> T,
                   Leaf: Tuple<Soln> -> T) :
  defn form (depth:Int, branches:Tuple<List<Arg>>, targets:Tuple<Soln>) -> T :
    if empty?(branches[0]) :
      Leaf(targets)
    else :
      val [groups, group-values] = collapse-args(map(head,branches), abstract-nums)
      val table = ListTable<Int|Top, KeyValue<List<Arg>,Soln>>()
      for (group in in-reverse(groups), branch in in-reverse(branches), target in in-reverse(targets)) do :
        for v in group do :
          add(table, v, tail(branch) => target)
      val trie-entries = to-tuple $
        for [v, entries-list] in pairs(table) seq :
          val entries = to-tuple(entries-list)
          v => form(depth + 1, map(key,entries), map(value,entries))
      Node(depth, trie-entries, group-values)
  form(0, branch-lists, targets) where :
    val branch-lists = map(to-list{args(_)}, branches)

;============================================================
;============== Compute Dag from Branch Table ===============
;============================================================

defn compute-dag (b-table:BranchTable, branch-order:Collection<Int>, collapse-solns:Tuple<Soln> -> Soln) -> Dag :
  ;Form DAG entries
  val dag-table = HashTable<DagEntry,Int>(dag-hash, dag-equal?)
  val dag-entries = Vector<DagEntry|False>()
  defn dag-index (e:DagEntry) :
    if not key?(dag-table,e) :
      add(dag-entries, e)
      dag-table[e] = length(dag-entries) - 1
    dag-table[e]

  ;Form a dag entry
  defn make-dag-entry (depth:Int, entries:Tuple<KeyValue<Int|Top, Int|Soln>>, group-values:Vector<List<Int>>) -> Int|Soln :
    val dag-entries = Vector<KeyValue<Nums,Int|Soln>>()
    var default-entry:Int|Soln = NoSoln()
    within (keys, v) = merge-keys(entries) :
      if any?({_ is Top}, keys) : default-entry = v
      else : add(dag-entries, Nums(qsort(seq-cat({group-values[_ as Int]}, keys))) => v)
    if empty?(dag-entries) : default-entry
    else : dag-index(DagEntry(depth, to-tuple(dag-entries), default-entry))

  ;Create all dag entries
  val branches* = to-tuple(seq({branches(b-table)[_]}, branch-order))
  val targets* = to-tuple(seq(UniqueSoln, branch-order))
  add(dag-entries, false)
  match(form-trie<Int|Soln>(branches*, targets*, abstract-nums(b-table), make-dag-entry, collapse-solns)) :
    (s:Soln) :
      EmptyDag(s)
    (s:Int) :
      ;Return Dag datastructure
      dag-entries[0] = pop(dag-entries)
      val depth = length(args(branches(b-table)[0]))
      Dag(depth, to-tuple(dag-entries) as Tuple<DagEntry>)

;============================================================
;======================= Create DAG =========================
;============================================================

public defstruct DagEntry :
  depth: Int
  entries: Tuple<KeyValue<Nums,Int|Soln>>
  default: Int|Soln

public defstruct Dag :
  depth: Int
  entries: Tuple<DagEntry>

defn EmptyDag (s:Soln) :
  val e = DagEntry(0, [], s)
  Dag(0, [e])

defn dag-equal? (a:DagEntry, b:DagEntry) :
  if depth(a) == depth(b) and default(a) == default(b) and length(entries(a)) == length(entries(b)) :
    val b-set = to-hashset<KeyValue<Nums,Int|Soln>>(entries(b))
    all?({b-set[_]}, entries(a))

defn dag-hash (e:DagEntry) :
  hash $ [depth(e), sum(seq(hash, entries(e))), default(e)]

defmethod print (o:OutputStream, dag:Dag) :
  val o2 = IndentedStream(o)
  print(o, "Dag:")
  lnprint(o2, "depth: %_" % [depth(dag)])
  for (e in entries(dag), i in 0 to false) do :
    lnprint(o2, "%_) %_" % [i, e])

defmethod print (o:OutputStream, e:DagEntry) :
  val o2 = IndentedStream(o)
  print(o, "DagEntry:")
  lnprint(o2, "depth: %_" % [depth(e)])
  for [n, s] in pairs(entries(e)) do :
    lnprint(o2, "case %_ : %_" % [n, s])
  if default(e) is-not NoSoln :
    lnprint(o2, "else : %_" % [default(e)])

;============================================================
;====================== DAG Checker =========================
;============================================================

defn all-cases (dag:Dag) :
  val case = Array<Int>(depth(dag), 0)
  generate<KeyValue<Tuple<Int>,Soln>> :
    let visit (s:Int|Soln = 0) :
      match(s) :
        (s:Soln) :
          yield(to-tuple(case) => s)
        (s:Int) :
          val dag-e = entries(dag)[s]
          for e in entries(dag-e) do :
            for v in values(key(e)) do :
              case[depth(dag-e)] = v
              visit(value(e))
          case[depth(dag-e)] = -1
          visit(default(dag-e))

;============================================================
;================== Computing the Dispatch Dag ==============
;============================================================

public defn compute-dispatch-dag (btable:BranchTable, topological?:True|False) -> Dag :
  ;Canonicalize table
  val num-branches = length(branches(btable))
  ;Empty branch table
  if empty?(branches(btable)) :
    EmptyDag(NoSoln())
  ;Topological branch table
  else if topological? :
    val ancestors = ancestor-table(branches(btable))
    val topo-order = topo-order(num-branches,ancestors)
    compute-dag(btable, topo-order, topo-soln{_, btable})
  ;Ordered branch table
  else :
    defn first-soln (solns:Tuple<Soln>) : solns[0]
    compute-dag(btable, 0 to num-branches, first-soln)

;============================================================
;=================== Resolving a Dag ========================
;============================================================

public defn all-solns (dag:Dag, case:Tuple<Arg>, include-amb?:True|False) -> Tuple<Soln> :
  ;Track whether a dagentry has already been processed
  val visited = Array<True|False>(length(entries(dag)), false)

  ;Accumulate all the reachable solutions
  val solns = HashSet<Soln>()

  ;Test whether the default case is reachable
  defn default-reachable? (e:DagEntry, arg:Arg) :
    not subarg-of-union?(arg, seq(key, entries(e)))

  ;Algorithm
  defn* loop (e:DagEntry) :
    val arg = case[depth(e)]    
    for e in entries(e) do :
      loop(value(e)) when overlap?(key(e), arg)
    if default-reachable?(e, arg) :
      loop(default(e))

  defn* loop (e:Int|Soln) :
    match(e) :
      (soln:NoSoln) :
        false
      (soln:AmbSoln) :
        add(solns, soln) when include-amb?
      (soln:Soln) :
        add(solns, soln)
      (dag-index:Int) :
        if not visited[dag-index] :
          visited[dag-index] = true
          loop(entries(dag)[dag-index])

  ;Start from beginning
  loop(0)
  to-tuple(solns)

;============================================================
;======================= Utilities ==========================
;============================================================

defn ListTable<K,V> () :
  HashTable<K,List<V>>(List())
defn IntListTable<V> () :
  IntTable<List<V>>(List())
defn add<?K,?V> (table:Table<?K,List<?V>>, k:K, v:V) :
  update(table, cons{v, _}, k)

defn pairs<?K,?V> (xs:Seqable<KeyValue<?K,?V>>) -> Seq<[K,V]> :
  for x in xs seq :
    [key(x), value(x)]

defn merge-keys<?K,?V> (return:(Collection<K>, V) -> ?, kvs:Seqable<KeyValue<?K,?V>>) :
  val table = ListTable<V,K>()
  for [k, v] in pairs(kvs) do:
    add(table, v, k)
  for [v, ks] in pairs(table) do:
    return(ks,v)
