defpackage stz/conversion-utils :
  import core
  import collections
  import stz/set-utils
  import stz/dispatch-dag
  import stz/el-ir
  import stz/typeset
  import stz/dyn-tree

public defn etype-to-arg (ct:DynTree, t:EType, include-abstract?:True|False) -> Arg :
  let to-arg (t:EType = t) :
    match(t) :
      (t:EAnd) : intersect([to-arg(a(t)), to-arg(b(t))])
      (t:EOr) : union([to-arg(a(t)), to-arg(b(t))])
      (t:ETVar|ETop) : Top()
      (t:EOf) :
        Nums $
          if include-abstract? : all-children(ct, n(t))
          else : all-leaves(ct, n(t))

public defn to-arg (t:TypeSet, set-representation:Int -> Tuple<Int>) -> Arg :
  let to-arg (t:TypeSet = t) :
    match(t) :
      (t:AndType) : intersect(map(to-arg, types(t)))
      (t:OrType) : union(map(to-arg, types(t)))
      (t:TopType) : Top()
      (t:SingleType) : Nums(set-representation(type(t)))

public defn to-branches (bs:Seqable<Seqable<TypeSet>>, set-representation:Int -> Tuple<Int>) -> Tuple<Branch> :
  to-tuple $ for b in bs seq :
    Branch(to-tuple(seq(to-arg{_, set-representation}, b)))