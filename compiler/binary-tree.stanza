defpackage stz/binary-tree :
  import core
  import collections

;<doc>=======================================================
;=================== Output Datastructure ===================
;============================================================

For inner nodes, left node values are guaranteed to be smaller or
equal to the node value.

;============================================================
;=======================================================<doc>

public deftype BinaryNode<T>

public defstruct InnerNode<T> <: BinaryNode<T> :
  value: Int
  left: BinaryNode<T>
  right: BinaryNode<T>
with:
  printer => true

public defstruct LeafNode<T> <: BinaryNode<T> :
  entries: Tuple<KeyValue<Int,T>>
with:
  printer => true

;============================================================
;======================= Algorithm ==========================
;============================================================

public defn BinaryNode<?T> (input-entries:Seqable<KeyValue<Int,?T>>, max-leaf-entries:Int) -> BinaryNode<T> :
  fatal("Max-leaf-entries must be 2 or greater.") when max-leaf-entries < 2
  val entries = to-vector<KeyValue<Int,T>>(input-entries)
  qsort!(key, entries)
  defn node (start:Int, num:Int) :
    if num <= max-leaf-entries :
      LeafNode<T>(to-tuple(entries[start to start + num]))
    else :
      val half1 = num / 2
      val half2 = num - half1
      val value = key(entries[start + half1 - 1])
      InnerNode<T>(value,
                   node(start, half1)
                   node(start + half1, half2))
  node(0, length(entries))

public defn BinaryNode<?T> (input-entries:Seqable<KeyValue<Int,?T>>) :
  BinaryNode(input-entries, 3)