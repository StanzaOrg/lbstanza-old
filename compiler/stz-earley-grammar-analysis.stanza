defpackage stz/earley-grammar-analysis :
  import core
  import collections
  import stz/earley-grammar
  import stz/earley-sexp-stream
  import stz/earley-eval-result
  import stz/utils
  import stz/earley-eitems

;============================================================
;===================== Grammar Creation =====================
;============================================================

public defn Grammar (input-rules:GRules) -> Grammar :
  val [grules, matchers] = create-matcher-tokens $
                           ;convert-negation-rules(input-rules)
                           order-rules $
                           input-rules
  remove-left-right-recursion(grules)

  val production-table = ProductionTable<GDefProduction|False>(num-productions(grules), false)
  for def in productions(grules) do :
    production-table[id(def)] = def
  val grammar-properties = analyze-grammar-properties(grules)
  val null-prods = nullable-productions(grammar-properties)
  val forward-dispatch-sets = analyze-dispatch-sets(grules, grammar-properties, first-sets)
  val backward-dispatch-sets = analyze-dispatch-sets(grules, grammar-properties, last-sets)

  defn dispatch-rules (production:Int, dispatch-sets:DispatchSet, next-input:SExpToken) :
    match(next-input) :
      (input:SExpWildcard) :
        all-rules(dispatch-sets)[production]
      (input:SExpForm) :
        val x = unwrap-token(form(input))
        val obj-rules = match(x) :
          (x:Symbol) : keyword-rules(dispatch-sets)[[production, x]]
          (x) : List()
        val type-rules = match(x) :
          (x:Char) : prim-rules(dispatch-sets)[to-int(GCharType)][production]
          (x:Byte) : prim-rules(dispatch-sets)[to-int(GByteType)][production]
          (x:Int) : prim-rules(dispatch-sets)[to-int(GIntType)][production]
          (x:Long) : prim-rules(dispatch-sets)[to-int(GLongType)][production]
          (x:Float) : prim-rules(dispatch-sets)[to-int(GFloatType)][production]
          (x:Double) : prim-rules(dispatch-sets)[to-int(GDoubleType)][production]
          (x:String) : prim-rules(dispatch-sets)[to-int(GStringType)][production]
          (x:Symbol) : prim-rules(dispatch-sets)[to-int(GSymbolType)][production]
          (x:True) : prim-rules(dispatch-sets)[to-int(GTrueType)][production]
          (x:False) : prim-rules(dispatch-sets)[to-int(GFalseType)][production]
          (x:List) : list-rules(dispatch-sets)[production]
          (x) : List()
        cat-all $ [
          obj-rules,
          type-rules,
          any-rules(dispatch-sets)[production]
          null-rules(dispatch-sets)[production]]
      (input:SExpListEnd) :
        cat(
          list-end-rules(dispatch-sets)[production]
          null-rules(dispatch-sets)[production])

  new Grammar :
    defmethod production (this, id:Int) :
      production-table[id] as GDefProduction
    defmethod get (this, i:Int) :
      rules(grules)[i] as GTokenRule
    defmethod nullable? (this, production:Int) :
      null-prods[production]
    defmethod to-seq (this) :
      to-seq(rules(grules) as Tuple<GTokenRule>)
    defmethod rules (this, production:Int) :
      all-rules(forward-dispatch-sets)[production]
    defmethod rules-with-prefix (this, production:Int, next-input:SExpToken) :
      dispatch-rules(production, forward-dispatch-sets, next-input)
    defmethod match? (this, matcher-id:Int, form) :
      matchers[matcher-id](form)
    defmethod num-productions (this) :
      num-productions(grules)

;============================================================
;================== Grammar Properties ======================
;============================================================

defstruct GrammarProperties:
  nullable-productions: IntSet
  nullable-rules: IntSet
  left-sets: ProductionTable<List<GToken>>
  right-sets: ProductionTable<List<GToken>>
  first-sets: Tuple<Tuple<GTerminal>>
  last-sets: Tuple<Tuple<GTerminal>>

defn analyze-grammar-properties (grammar:GRules) :
  ;Compute parent rules that contain each production.
  ;Each entry P => (i, j, k) means that production P exists in rule i, j, and k.
  val parent-table = ProductionTable<List<Int>>(num-productions(grammar), List())
  for (rule in rules(grammar), rule-index in 0 to false) do :
    for prod in filter-by<GProduction>(tokens(rule as GTokenRule)) do :
      add(parent-table, id(prod), rule-index)      

  ;Production worklist algorithm
  ;The given function is called repeatedly on all rules in the grammar.
  ;The function is given:
  ;- The rule index.
  ;- The rule
  ;- A progress function to report that progress has been made.
  ;If progress is made on one rule, then all rules that use that
  ;production are processed again.
  defn worklist (process:(Int, GTokenRule, () -> False) -> ?) :
    val queue = Queue<Int>()
    add-all(queue, 0 to length(rules(grammar)))
    while not empty?(queue) :
      val rule-index = pop(queue)
      val rule = rules(grammar)[rule-index] as GTokenRule
      var progress?:True|False = false
      defn progress () : progress? = true
      process(rule-index, rule, progress)
      if progress? :
        add-all(queue, parent-table[id(rule)])

  ;Compute nullable productions and rules
  ;- null-prods holds all nullable productions.
  ;- null-rules holds indices of all nullable rules.
  val null-prods = IntSet()
  val null-rules = IntSet()
  defn nullable? (t:GToken) :
    match(t:GProduction) :
      null-prods[id(t)]
  defn nullable? (rule:GTokenRule) :
    all?(nullable?, tokens(rule))
  within (rule-index, rule, progress) = worklist() :
    if nullable?(rule) :
      add(null-rules, rule-index)
      progress() when add(null-prods, id(rule))

  ;Compute firstsets.
  ;Every entry P => (A B C) in first-set-table means that
  ;production P has first set equal to tokens (A B C).
  ;Furthermore, the entries P => A, P => B, P => C exist in
  ;first-set-entries.
  val first-set-entries = HashSet<KeyValue<Int,GToken>>()
  val first-set-table = ProductionTable<List<GToken>>(num-productions(grammar), List())
  defn first-set (t:GToken) -> List<GToken> :
    match(t) :
      (t:GMatcherToken) : List(terminal(t))
      (t:GTerminal) : List(t)
      (t:GProduction) : cons(t, first-set-table[id(t)])
  defn first-set (rule:GTokenRule) -> List<GToken> :
    val ts = tokens(rule)
    let loop (i:Int = 0) :
      if i < length(ts) :
        val xs = first-set(ts[i])
        if nullable?(ts[i]) : append(xs, loop(i + 1))
        else : xs
      else : List()  
  within (rule-index, rule, progress) = worklist() :
    for t in first-set(rule) do :
      if add(first-set-entries, id(rule) => t) :
        add(first-set-table, id(rule), t)
        progress()
  val first-sets = for rule in rules(grammar) map :
    val ts = filter-by<GTerminal>(first-set(rule as GTokenRule))
    to-tuple(unique(ts))

  ;Compute lastsets.
  ;Every entry P => (A B C) in last-set-table means that
  ;production P has last set equal to tokens (A B C).
  ;Furthermore, the entries P => A, P => B, P => C exist in
  ;last-set-entries.
  val last-set-entries = HashSet<KeyValue<Int,GToken>>()
  val last-set-table = ProductionTable<List<GToken>>(num-productions(grammar), List())
  defn last-set (t:GToken) -> List<GToken> :
    match(t) :
      (t:GMatcherToken) : List(terminal(t))
      (t:GTerminal) : List(t)
      (t:GProduction) : cons(t, last-set-table[id(t)])
  defn last-set (rule:GTokenRule) -> List<GToken> :
    val ts = tokens(rule)
    val n = length(ts)
    let loop (i:Int = n - 1) :
      if i >= 0 :
        val xs = last-set(ts[i])
        if nullable?(ts[i]) : append(xs, loop(i - 1))
        else : xs
      else : List()  
  within (rule-index, rule, progress) = worklist() :
    for t in last-set(rule) do :
      if add(last-set-entries, id(rule) => t) :
        add(last-set-table, id(rule), t)
        progress()
  val last-sets = for rule in rules(grammar) map :
    val ts = filter-by<GTerminal>(last-set(rule as GTokenRule))
    to-tuple(unique(ts))

  println("First Set Table")
  do(println, first-set-table)
  println("Last Set Table")
  do(println, last-set-table)

  ;Return all properties
  GrammarProperties(
    null-prods,
    null-rules,
    first-set-table,
    last-set-table,
    first-sets,
    last-sets)

;============================================================
;=============== Left-Right-Recursive Transform =============
;============================================================
defn remove-left-right-recursion (grammar:GRules) :;-> GRules :
  ;Get properties
  val props = analyze-grammar-properties(grammar)

  ;Rules and Productions lists
  val prod-table = to-inttable(id, productions(grammar))
  val rule-list = to-vector<GTokenRule>(rules(grammar) as Tuple<GTokenRule>)

  ;Counter for generating next production
  defn next-id (p:GDefProduction) : id(p) + 1
  val prod-counter = to-seq(num-productions(grammar) to false)

  ;Operation: Duplicate all rules associated with the given production.
  ;Adds a new production and a new rule to the lists.
  defn duplicate-prod (prod:GProduction, duplicate-rules?:True|False) -> GProduction :
    val def = prod-table[id(prod)]
    val prod* = GProduction(next(prod-counter))
    val def* = GDefProduction(id(prod*), name(def))
    prod-table[id(prod*)] = def*
    if duplicate-rules? :
      for i in 0 to length(rule-list) do :
        val rule = rule-list[i]
        if id(rule) == id(prod) :
          add(rule-list, sub-id(rule, id(prod*)) as GTokenRule)
    prod*

  ;Keep track of what has been replaced.
  ;Each entry [prod, old-t, new-t] => prod* means that
  ;  prod* is the version of prod where old-t has been replaced with new-t.
  val replacement-table = HashTable<[GProduction, GToken, GToken], GProduction>()
  ;Operation: Replace left occurrence of old-t with new-t in the given rule.
  defn replace-left-occurrence (rule-index:Int, old-t:GToken, new-t:GToken) -> False :
    val rule = rule-list[rule-index]
    defn replace-tokens (t0:GToken) -> Tuple<GToken> :
      to-tuple $ for (t in tokens(rule), i in 0 to false) seq :
        t0 when i == 0 else t
    if tokens(rule)[0] == old-t :
      val rule* = sub-tokens(rule, replace-tokens(new-t))
      rule-list[rule-index] = rule*
    else if tokens(rule)[0] is GProduction :
      val t0 = tokens(rule)[0] as GProduction
      val t0* = replaced-left-occurrence(t0, old-t, new-t)
      val rule* = sub-tokens(rule, replace-tokens(t0*))
      rule-list[rule-index] = rule*
  ;Operation: Replace left occurrence of old-t with new-t in all rules for the
  ;production prod.
  defn replace-left-occurrence (prod:GProduction, old-t:GToken, new-t:GToken) -> False :
    for i in 0 to length(rule-list) do :
      val rule = rule-list[i]
      if id(rule) == id(prod) :
        replace-left-occurrence(i, old-t, new-t)
  ;Operation: Return the version of prod where old-t has been replaced with new-t.
  defn replaced-left-occurrence (prod:GProduction, old-t:GToken, new-t:GToken) -> GProduction :
    val left-set = left-sets(props)[id(prod)]
    if contains?(left-set, old-t) :
      set?(replacement-table, [prod, old-t, new-t], fn () :
        val prod* = duplicate-prod(prod, true)
        replace-left-occurrence(prod*, old-t, new-t)
        prod*)
    else :
      prod

  ;Compute all immediate right sets
  val immediate-right-sets = ProductionTable<List<GToken>>(num-productions(grammar), List())
  defn compute-immediate-right-sets () :
    for rule in rule-list do :
      if not empty?(tokens(rule)) :
        val n = length(tokens(rule))
        val tn = tokens(rule)[n - 1]
        add(immediate-right-sets, id(rule), tn)
  ;Returns true if all rules for prod ends ultimately with t.
  defn right-recursive-only? (prod:GProduction, t:GProduction) -> True|False :
    val visited = ProductionSet(num-productions(grammar))
    let loop (prod:GProduction = prod) :
      if prod == t :
        true
      else :
        if add(visited, id(prod)) :
          val right-set = right-sets(props)[id(prod)]
          val immediate-right-set = immediate-right-sets[id(prod)]
          ;Production never reaches t.
          if not contains?(right-set, t) :
            false
          ;Production reaches a terminal.
          else if any?({_ is GTerminal}, immediate-right-set) :
            false
          ;Recursively check all immediate-right-set productions.
          else :
            all?(loop, immediate-right-set as List<GProduction>)
        else :
          true
    
  ;Operation: Split a rule into separate right-recursive portion and non-right-recursive rules.
  ;Use rr-prod as the production for the right-recursive rule.
  ;Use nr-prod as the production for the non-right-recursive rule.
  ;Returns [RR-RULE, NR-RULE].
  defn split-right-recursive (rule:GTokenRule,
                              rr-prod:GProduction,
                              nr-prod:GProduction,
                              t:GProduction) -> [GTokenRule|False, GTokenRule|False] :
    val n = length(tokens(rule))
    defn replace-id-tokens? (prod*:GProduction, last-t:GProduction|False) -> GTokenRule|False :
      match(last-t:GProduction) :
        val tokens* = to-tuple $
          for (t in tokens(rule), i in 0 to false) seq :
            if i == n - 1 : last-t
            else : t
        sub-id(sub-tokens(rule, tokens*), id(prod*)) as GTokenRule
    match(tokens(rule)[n - 1]) :
      (last-t:GTerminal) :
        val nr-rule = sub-id(rule, id(nr-prod)) as GTokenRule
        [false, nr-rule]
      (last-t:GProduction) :
        val [rr-last-t, nr-last-t] = split-right-recursive(last-t, t)
        val rr-rule = replace-id-tokens?(rr-prod, rr-last-t)
        val nr-rule = replace-id-tokens?(nr-prod, nr-last-t)
        [rr-rule, nr-rule]

  ;Operation: Split the given production into a right-recursive, and non-right-recursive version.
  ;Returns [RR, NR] where:
  ;  RR is a duplicate of prod where all rules are right-recursive on t.
  ;  NR is a duplicate of prod where no rules are right-recursive on t.
  defn split-right-recursive (prod:GProduction, t:GProduction) -> [GProduction|False, GProduction|False] :
    ;Determine whether production is right-recursive, and non-right-recursive.
    val right-set = right-sets(props)[id(prod)]
    ;Case: All rules for production end with t.
    if right-recursive-only?(prod, t) :
      [prod, false]
    ;Case: No rules for production end with t.
    else if not contains?(right-set, t) :
      [false, prod]
    ;Case: Production needs to be duplicated and split.
    else :
      val rr-prod = duplicate-prod(prod,false)
      val nr-prod = duplicate-prod(prod,false)
      for i in 0 to length(rule-list) do :
        val rule = rule-list[i]
        if id(rule) == id(prod) :
          val [rr-rule, nr-rule] = split-right-recursive(rule, rr-prod, nr-prod, t)
          add(rule-list, rr-rule as GTokenRule) when rr-rule is-not False
          add(rule-list, nr-rule as GTokenRule) when nr-rule is-not False
      [rr-prod, nr-prod]

  ;Discover all left-right-recursive-rules
  defn left-recursive? (prod:GProduction) -> True|False :
    contains?(left-sets(props)[id(prod)], prod)
  defn right-recursive? (prod:GProduction) -> True|False :
    contains?(right-sets(props)[id(prod)], prod)
  defn left-right-recursive? (prod:GProduction) -> True|False :
    left-recursive?(prod) and right-recursive?(prod)
  defn left-right-recursive-prods () -> Tuple<GProduction> :
    to-tuple $ for def in productions(grammar) seq? :
      val prod = GProduction(id(def))
      One(prod) when left-right-recursive?(prod) else None()

  ;Create atom productions for all left-right-recursive productions.
  val left-right-atoms = HashTable<GProduction,GProduction>()
  for prod in left-right-recursive-prods() do :
    left-right-atoms[prod] = duplicate-prod(prod, false)
  println("Left Right Atoms:")
  do(println, left-right-atoms)

  ;Replace left occurrences of left-right-recursive productions with their atoms.
  defn replace-left-right-prods-with-atoms () :
    for entry in left-right-atoms do :
      replace-left-occurrence(key(entry), key(entry), value(entry))

  ;New Production List
  replace-left-right-prods-with-atoms()
  do(println, values(prod-table))
  ;New Rule List
  do(println, rule-list)
  

;============================================================
;================== Dispatch Sets ===========================
;============================================================

defstruct DispatchSet :
  all-rules:ProductionTable<List<Int>>
  null-rules:ProductionTable<List<Int>>
  any-rules:ProductionTable<List<Int>>
  list-end-rules:ProductionTable<List<Int>>
  prim-rules:Array<ProductionTable<List<Int>>>
  list-rules:ProductionTable<List<Int>>
  keyword-rules:HashTable<[Int,Symbol],List<Int>>

defn analyze-dispatch-sets (grammar:GRules,
                            props:GrammarProperties,
                            prediction-set:GrammarProperties -> Tuple<Tuple<GTerminal>>) :
  ;Create rule sets
  val nprods = num-productions(grammar)
  val all-rules = ProductionTable<List<Int>>(nprods, List())
  val null-rules = ProductionTable<List<Int>>(nprods, List())
  val any-rules = ProductionTable<List<Int>>(nprods, List())
  val list-end-rules = ProductionTable<List<Int>>(nprods, List())
  val prim-rules = Array<ProductionTable<List<Int>>>(GPrimType-length)
  for i in 0 to length(prim-rules) do :
    prim-rules[i] = ProductionTable<List<Int>>(nprods, List())
  val list-rules = ProductionTable<List<Int>>(nprods, List())
  val keyword-rules = HashTable<[Int,Symbol],List<Int>>(List())

  ;Add to rule sets
  for (rule in rules(grammar), rule-index in 0 to false, pset in prediction-set(props)) do :
    defn add-to-set (table:ProductionTable<List<Int>>) :
      add(table, id(rule), rule-index)
    add-to-set(all-rules)
    if nullable-rules(props)[rule-index] :
      add-to-set(null-rules)
    for token in pset do :
      let loop (token:GTerminal = token) :
        match(token) :
          (token:GAny|GListRest) : add-to-set(any-rules)
          (token:GListEnd) : add-to-set(list-end-rules)
          (token:GPrimToken) : add-to-set(prim-rules[to-int(type(token))])
          (token:GListStart) : add-to-set(list-rules)
          (token:GKeyword) : add(keyword-rules, [id(rule), item(token)], rule-index)
          (token:GMatcherToken) : loop(terminal(token))

  ;Ensure subtraction relationships of sets
  val set-buffer = IntSet()
  defn minus (a:Seqable<Int>, b:Seqable<Int>) :
    add-all(set-buffer, b)
    val result = to-list $ filter({not set-buffer[_]}, a)
    clear(set-buffer)
    result
  defn subtract-map! (atable:ProductionTable<List<Int>>,
                      btables:Collection<ProductionTable<List<Int>>>) :
    for entry in atable map! :
      val prod = key(entry)
      val bset = seq-cat({_[prod]}, btables)
      value(entry) - bset
  defn subtract-map! (atable:HashTable<[Int,Symbol],List<Int>>,
                      btables:Collection<ProductionTable<List<Int>>>) :
    for entry in atable map! :
      val [prod, _] = key(entry)
      val bset = seq-cat({_[prod]}, btables)
      value(entry) - bset
  subtract-map!(keyword-rules, [prim-rules[to-int(GSymbolType)], any-rules, null-rules])
  for prim-i-rules in prim-rules do :
    subtract-map!(prim-i-rules, [any-rules, null-rules])
  subtract-map!(list-rules, [any-rules, null-rules])
  subtract-map!(list-end-rules, [null-rules])
  subtract-map!(any-rules, [null-rules])

  ;Return computed dispatch sets
  DispatchSet(
    all-rules
    null-rules
    any-rules
    list-end-rules
    prim-rules
    list-rules
    keyword-rules)

;============================================================
;================- Negation Set Analysis ====================
;============================================================

deftype KSet
defstruct KeywordSet <: KSet :
  keywords: Tuple<Symbol>
with:
  printer => true

defstruct ProdSet <: KSet :
  name: Symbol
with:
  printer => true

defstruct UnionSet <: KSet :
  sets: Tuple<KSet>
with:
  printer => true

defstruct MinusSet <: KSet :
  a: KSet
  b: KSet
with:
  printer => true

;<comment>
defn convert-negation-rules (rules:Tuple<GRule>) -> Tuple<GMatcherRule|GTokenRule> :
  ;Gather positive and negative tokens
  val negative-table = HashTable<Symbol,List<GToken>>(List())
  val positive-table = HashTable<Symbol,List<GToken>>(List())
  for rule in rules do :
    match(rule) :
      (rule:GNegationRule) :
        add(negative-table, name(rule), token(rule))
      (rule:GTokenRule) :
        if length(tokens(rule)) == 1 :
          val t = tokens(rule)[0]
          add(positive-table, name(rule), t)
      (rule:GMatcherRule) :
        false

  ;Create initial kset table
  val kset-table = HashTable<Symbol,KSet>()
  defn to-kset (name:Symbol) :
    set?(kset-table, name, fn () :
      val psets = to-tuple $ seq(to-kset, positive-table[name])
      val nsets = to-tuple $ seq(to-kset, negative-table[name])
      MinusSet(UnionSet(psets), UnionSet(nsets)))
  defn to-kset (t:GToken) :
    match(t) :
      (t:GProduction) : to-kset(name(t))
      (t:GKeyword) : KeywordSet([item(t)])

  ;Simplify kset
  val simplified-kset-table = HashTable<Symbol,KeywordSet>()
  defn simplify (name:Symbol) :
    set?(simplified-kset-table, name, fn () :
      simplify(to-kset(name)))
  defn simplify (kset:KSet) -> KeywordSet :
    match(kset) :
      (kset:UnionSet) :
        val keywords = seq-cat(keywords{simplify(_)}, sets(kset))
        KeywordSet $ to-tuple $ to-hashset<Symbol>(keywords)
      (kset:MinusSet) :
        val symbols = to-hashset<Symbol>(keywords(simplify(a(kset))))
        do(remove{symbols, _}, keywords(simplify(b(kset))))
        KeywordSet $ to-tuple $ symbols
      (kset:KeywordSet) :
        kset
      (kset:ProdSet) :
        simplify(name(kset))

  ;Compute keywords to subtract from each production
  val subtract-keyword-table = HashTable<Symbol,HashSet<Symbol>>()
  defn subtract-keywords (prod:Symbol) :
    set?(subtract-keyword-table, prod, fn () :
      to-hashset<Symbol> $
        for t in negative-table[prod] seq-cat :
          keywords(simplify(to-kset(t))))

  ;Update matcher rules
  defn update-rule (r:GRule) :
    if key?(negative-table, name(r)) :
      match(r) :
        (r:GMatcherRule) :
        (r:GTokenRule) :
          fatal("Illegal rule with negation.") when length(tokens(r)) != 1
          fatal("Illegal rule with negation.") when lazy-action?(r)
          val terminal = tokens(r)[0] as GTerminal
          GMatcherRule(name(r), terminal, matcher, action(r))
    else : r

  ;Create matcher rule
  defn to-matcher-rules (prod:Symbol) :
    val neg-tokens = negative-table[prod]
    val keywords = seq-cat(keywords{simplify(to-kset(_))}, neg-tokens)
    val keyword-set = to-hashset<Symbol>(keywords)
    defn match? (form) :
      match(unwrap-token(form)) :
        (s:Symbol) : not keyword-set[s]
        (s) : true
    val new-rules = Vector<GRule>()
    val old-prod = gensym(prod)
    add(new-rules, GMatcherRule(prod, [GProduction(old-prod)], match?, fn (result) : result[0]))
    for r in rules do :
      if name(r) == prod and r is-not GNegationRule :
        add(new-rules, sub-name(r, old-prod))
    new-rules

  ;Create matcher rules
  val matcher-rules = seq-cat(to-matcher-rules, keys(negative-table))
  defn standard-rule? (r:GRule) : not key?(negative-table, name(r))
  val remaining-rules = filter(standard-rule?, rules[1 to false])
  val new-rules = to-tuple $ cat-all $ [
    [rules[0]]
     matcher-rules
     remaining-rules]
  new-rules as Tuple<GMatcherRule|GTokenRule>
;<comment>

;============================================================
;================= Create Matcher Tokens ====================
;============================================================

defn create-matcher-tokens (grules:GRules) -> [GRules, Tuple<(? -> True|False)>] :
  val matchers = Vector<(? -> True|False)>()
  defn get-id (m:? -> True|False) :
    add(matchers, m)
    length(matchers) - 1
  val rules* = for r in rules(grules) map :
    match(r) :
      (r:GMatcherRule) :
        val token = GMatcherToken(token(r), get-id(matcher(r)))
        GTokenRule(id(r), [token], TokenRuleParams(action(r), false), order(r))
      (r:GTokenRule) :
        r
  val grules* = GRules(productions(grules), rules*)
  [grules*, to-tuple(matchers)]

;============================================================
;==================== Order Rules ===========================
;============================================================
defn order-rules (grules:GRules) -> GRules :
  val rules* = to-tuple(seq(sub-order, rules(grules), 0 to false))
  GRules(productions(grules), rules*)

;============================================================
;======================== Utilities =========================
;============================================================

defn add-all<?T> (q:Queue<?T>, xs:Seqable<T>) :
  do(add{q, _}, xs)

defn add<?K,?V> (table:Table<?K,List<?V>>, k:K, v:V) :
  update(table, cons{v, _,}, k)