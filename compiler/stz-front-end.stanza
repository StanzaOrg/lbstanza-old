defpackage stz/front-end :
  import core
  import reader
  import collections
  import stz/pkg
  import stz/il-ir
  import stz/dl-ir
  import stz/el-ir
  import stz/tl-ir
  import stz/input
  import stz/core-macros
  import stz/bindings
  import stz/renamer
  import stz/resolver
  import stz/ids
  import stz/type
  import stz/tl-to-el
  import stz/dl
  import stz/utils
  import stz/proj-manager
  import stz/bindings-extractor
  import stz/bindings-to-vm
  import core/sha256
  import stz/namemap
  import lang/check

;<doc>=======================================================
;======================== Algorithm =========================
;============================================================

1. The following state tables are updated through the algorithm steps:

  package-table: HashTable<Symbol,IPackage|Pkg|False>
  package-exports-table: HashTable<Symbol,PackageExports>

  The package-table associates each successfully loaded and renamed
  package during the algorithm. An IPackage indicates it is a source
  package, a Pkg indicates it is a .pkg file, and False indicates that
  the package could not be found.

  The package-exports-table stores the computed PackageExports
  datastructure for each .pkg file.

2. The first step is to read in all the given inputs. The following
  file types are supported:

  *.stanza - Read, macroexpand, and convert to IL-IR.
  *.pkg - Read in.
  *.fpkg - Read in.

  If the input is a Symbol, then we first locate the filename for that
  package, and then read as normal.

  The output is Vector<IPackage|Pkg|Bindings> for representing each
  object.

3. The next step is to rename all of the input packages, and load them
into the package-table. An error is thrown if we detect duplicate
packages, or if something fails during renaming.

4. Next we need to resolve the packages. In order to do that, we need
to implement a resolver environment which is responsible for loading a
package when given its name.

5. Next, we compile the resolved packages to EL, which requires
running the type inferencer and the EL compiler.

6. The last step is to check for type consistency. Whether the types
in the source packages are consistent with their expected types in the
precompiled .pkg packages.

Inconsistencies will be caused by out-of-date packages loaded from
.pkg files. Inconsistencies are classified into either unrecoverable
errors, or errors potentially recoverable by reloading the original
source file corresponding to the .pkg file. 

;============================================================
;=======================================================<doc>

public deftype FrontEndInputs
public defmulti inputs (e:FrontEndInputs) -> Tuple<String|Symbol|IPackage>
public defmulti find-package (inputs:FrontEndInputs, name:Symbol) -> PkgLocation|False
public defmulti load-into-denv (inputs:FrontEndInputs, ios:Tuple<PackageIO>) -> LoadResult

;============================================================
;============== Multis with Default Behaviour ===============
;============================================================
public defmulti environment-package? (inputs:FrontEndInputs, name:Symbol) -> PackageIO|False
defmethod environment-package? (inputs:FrontEndInputs, name:Symbol) : false

public defmulti transient? (inputs:FrontEndInputs) -> True|False
defmethod transient? (inputs:FrontEndInputs) : false

public defmulti package-priority (inputs:FrontEndInputs) -> False|(Symbol -> Int)
defmethod package-priority (inputs:FrontEndInputs) : false

public defmulti conditional-dependencies (inputs:FrontEndInputs, packages:Seqable<Symbol>) -> Tuple<Symbol>
defmethod conditional-dependencies (inputs:FrontEndInputs, packages:Seqable<Symbol>) : []

public defmulti supported-vm-packages (inputs:FrontEndInputs) -> Tuple<String|Symbol>
defmethod supported-vm-packages (inputs:FrontEndInputs) : []

public defmulti verbose? (inputs:FrontEndInputs) -> True|False
defmethod verbose? (inputs:FrontEndInputs) : false

;============================================================
;================== Result Datastructures ===================
;============================================================

public defstruct DependencyResult :
  import-lists: Tuple<ImportList>
  packages: Tuple<IPackage|Pkg>
  pkgstamps: Tuple<PackageStamp>
  namemap: NameMap
  errors: Tuple<Exception>

public defstruct FrontEndResult :
  import-lists: Tuple<ImportList>
  packages: Tuple<EPackage|Pkg>
  pkgstamps: Tuple<PackageStamp>
  bindings: Bindings|False
  binding-packages: Tuple<Symbol>

public defstruct PackageStamp :
  location: PkgLocation
  source-hashstamp: ByteArray|False
  pkg-hashstamp: ByteArray|False
with:
  printer => true

public defn package (stamp:PackageStamp) :
  package(location(stamp))

public defn throw-errors (r:DependencyResult) :
  if not empty?(errors(r)) :
    throw(FrontEndErrors(errors(r)))

;============================================================
;==================== Entry Points ==========================
;============================================================

public defn compile-to-el (inputs:FrontEndInputs) :
  compile-to-el(FrontEnd(inputs))

public defn dependencies (inputs:FrontEndInputs) :
  dependencies(FrontEnd(inputs))

;============================================================
;================ Main Compilation Algorithm ================
;============================================================
deftype FrontEnd
defmulti compile-to-el (f:FrontEnd) -> FrontEndResult
defmulti dependencies (f:FrontEnd) -> DependencyResult

defn FrontEnd (sys:FrontEndInputs) -> FrontEnd :
  ;----------------------------------------------------------
  ;--------------------- State ------------------------------
  ;----------------------------------------------------------
  val package-table = PackageTable()
  val package-exports-table = HashTable<Symbol,PackageExports>()
  val package-locations = HashTable<Symbol,PkgLocation|False>()
  val package-stamps = HashTable<Symbol,PackageStamp>()

  ;----------------------------------------------------------
  ;------------------ Main Algorithm ------------------------
  ;----------------------------------------------------------
  defn compile-all-to-el () :
    ;Read all of the given inputs to compiler, and load them into the
    ;compiled package table.
    val input-objs = read-inputs!(map(InputSource,inputs(sys)))
    val input-package-names = to-tuple $ seq(name, input-objs)
    if verbose?(sys) :
      println("Input packages: %," % [input-package-names])
    load-package-table!(input-objs)
    ;If we require bindings, then add their required dependencies
    ;to the compiler as well.
    if not empty?(supported-vm-packages(sys)) :
      load-package-table!(read-inputs!(map(InputSource,binding-package-dependencies())))
    ;Begin the resolver loop.
    let loop () :
      val resolved = resolve-packages!(input-package-names)
      if verbose?(sys) :
        println("Computed package initialization order: %," % [init-order(resolved)])
      val epackages = compile-to-el(ipackages(resolved))
      val all-pkgs = order-packages(cat(epackages, pkgs(package-table)),
                                    init-order(resolved))
      match(load-into-denv!(all-pkgs)) :
        (f:False) :
          val pkgstamps = to-tuple(values(package-stamps))
          val [bindings, binding-packages] = vm-bindings?()
          FrontEndResult(import-lists(resolved), all-pkgs, pkgstamps, bindings, binding-packages)
        (ss:Tuple<PackageInFile>) :
          if verbose?(sys) :
            println("There are type inconsistencies in the downstream .pkg packages. Compilation \
                     will be attempted again after reloading the following packages from their \
                     source files:")
            for source in ss do :
              println("  package %~ from %~" % [package(source), filename(source)])
          load-package-table! $ read-inputs!(ss)
          loop()

  defn vm-bindings? () -> [Bindings|False, Tuple<Symbol>] :
    val vm-packages = supported-vm-packages(sys)
    if empty?(vm-packages) :
      [false, []]
    else :
      ;First compute the packages that are already compiled directly
      ;into the program.
      val included-packages = to-hashset<Symbol> $
        seq(name, package-table)
      
      ;Load remaining vm support packages
      val remaining-packages = to-tuple $
        for p in vm-packages filter :
          match(p) :
            (p:Symbol) : not key?(package-table, p)
            (p:String) : true
      load-package-table!(read-inputs!(map(InputSource,remaining-packages)))
      resolve-packages!(to-tuple(seq(name,package-table)))

      ;Compute bindings for all packages not already included
      val binding-packages = to-tuple $
        for p in package-table seq? :
          if included-packages[name(p)] : None()
          else : One(p)
          
      ;Calculate bindings
      val bindings = extract-bindings(binding-packages)
      val binding-package-names = map(name, binding-packages)
      [bindings, binding-package-names]

  ;----------------------------------------------------------
  ;------------------- Resolved Packages --------------------
  ;----------------------------------------------------------
  defn dependencies () :
    ;Accumulate errors
    val errorlist = Vector<Exception>()
    ;Read all of the given inputs to compiler, and load them into the
    ;compiled package table.
    val input-objs = read-inputs(map(InputSource,inputs(sys)), errorlist)
    val input-package-names = to-tuple $ seq(name, input-objs)
    load-package-table(input-objs, errorlist)
    ;If we require bindings, then add their required dependencies
    ;to the compiler as well.
    if not empty?(supported-vm-packages(sys)) :
      val pkgs = read-inputs(map(InputSource,binding-package-dependencies()), errorlist)
      load-package-table(pkgs, errorlist)
    ;Resolve packages.
    val resolved = resolve-packages(input-package-names, errorlist)
    val all-pkgs = order-packages(packages, init-order(resolved)) where :
      val packages = cat(ipackages(resolved), pkgs(package-table))
    ;Make consolidated namemap.
    val namemap = NameMap $
      cat(seq(namemap, ipackages(resolved)),
          values(package-exports-table))
    ;Form output
    val pkgstamps = to-tuple(values(package-stamps))
    DependencyResult(
      import-lists(resolved),
      all-pkgs,
      pkgstamps,
      namemap,
      to-tuple(errorlist))

  ;----------------------------------------------------------
  ;-------------------- Utilities ---------------------------
  ;----------------------------------------------------------
  defn package-location (name:Symbol) :
    set?(package-locations, name, fn () :
      find-package(sys, name))

  defn source-file? (name:Symbol) :
    match(package-location(name)) :
      (l:PkgLocation) : source-file(l)
      (f:False) : false     

  defn record-pkgstamp (l:PkgLocation) :
    defn hashstamp? (file:String|False) -> ByteArray|False :
      match(file:String) :
        sha256-hash-file(file) when file-exists?(file)
    val stamp = PackageStamp(l, hashstamp?(source-file(l)), hashstamp?(pkg-file(l)))
    package-stamps[package(l)] = stamp
    
  ;----------------------------------------------------------
  ;------------------- Reading Inputs -----------------------
  ;----------------------------------------------------------
  ;Reads the given input sources and returns either IPackage or Pkg depending upon whether
  ;they were loaded from a source file or a precompiled .pkg file.
  ;Any errors occuring during reading are collected.
  defn read-inputs (inputs:Seqable<InputSource>) -> ReadInputs :
    ;Accumulate all errors
    val errors = Vector<Exception>()

    ;Cache read packages in this table
    val read-package-table = HashTable<String,Tuple<IPackage|Pkg>>()
    defn read-packages (filename:String) -> Tuple<IPackage|Pkg> :
      set?(read-package-table, filename, fn () :
        switch suffix?{filename, _} :
          ".stanza" :
            read-ipackages(filename)
          ".pkg" :
            if verbose?(sys) :
              println("Reading pre-compiled package from %~." % [filename])
            [load-package(filename, false, false)]
          ".fpkg" :
            if verbose?(sys) :
              println("Reading pre-compiled package from %~." % [filename])
            [load-package(filename, false, true)]
          else :
            throw(InvalidExtensionError(filename)))

    defn package-matching! (filename:String, package-name:Symbol) -> IPackage|Pkg :      
      val pkg = for pkg in read-packages(filename) find :
        name(pkg) == package-name
      throw(MissingPackageInFile(filename, package-name)) when pkg is False
      pkg as IPackage|Pkg

    ;Accumulate objects into this vector
    val objects = Vector<IPackage|Pkg>()
    for input in inputs do :
      ;Return PkgLocation object corresponding to the read pkg.
      defn pkg-location (pkg:IPackage|Pkg, filename:String) :
        match(pkg) :
          (pkg:IPackage) : PkgLocation(name(pkg), filename, false, false)
          (pkg:Pkg) : PkgLocation(name(pkg), false, filename, true)

      ;Load input
      try :
        match(input) :
          (input:PkgLocation) :
            add(objects, package-matching!(filename(input), package(input)))
            record-pkgstamp(input)
          (input:PackageName) :
            val loc = package-location!(package(input))
            add(objects, package-matching!(filename(loc), package(loc)))
            record-pkgstamp(loc)        
          (input:StanzaFile) :
            val pkgs = read-packages(filename(input))
            do(record-pkgstamp{pkg-location(_, filename(input))}, pkgs)
            add-all(objects, pkgs)          
          (input:PackageInFile) :
            val pkg = package-matching!(filename(input), package(input))
            record-pkgstamp(pkg-location(pkg, filename(input)))
            add(objects, pkg)          
          (input:IPackage) :
            add(objects, input)
      catch (e:FrontEndError|IOException|CheckError|CheckErrors|PkgException|LexerException) :
        add(errors, e)

    ;Return objects
    ReadInputs(to-tuple(objects), to-tuple(errors))

  ;Attempt to read the given input sources and throw an exception
  ;if operation fails.
  defn read-inputs! (inputs:Seqable<InputSource>) -> Tuple<IPackage|Pkg> :
    val result = read-inputs(inputs)
    throw(FrontEndErrors(errors(result))) when not empty?(errors(result))
    packages(result)

  ;Read the given inputs, and add any errors to the given error list.
  defn read-inputs (inputs:Seqable<InputSource>, errorlist:Vector<Exception>) -> Tuple<IPackage|Pkg> :
    val result = read-inputs(inputs)
    add-all(errorlist, errors(result))
    packages(result)

  ;Returns all IPackages in the given file.
  ;Throws:
  ;  MacroexpansionError
  ;  LexerException
  ;  CheckError|CheckErrors
  ;  IOException
  defn read-ipackages (filename:String) -> Tuple<IPackage> :
    if verbose?(sys) :
      println("Reading from input file %~." % [filename])
    val forms = read-file(filename)
    if verbose?(sys) :
      println("Expanding macros in input file %~." % [filename])
    val expanded = try : parse-syntax[core / #exp!](List(forms))
                   catch (e:Exception) : throw(MacroexpansionError(e))
    val core-imports = [IImport(`core), IImport(`collections)]
    val packages = to-ipackages(expanded, core-imports)
    if verbose?(sys) :
      println("Input file %~ contains packages %,." % [filename, seq(name,packages)])
    packages

  ;----------------------------------------------------------
  ;-------------- Initialize Package Table ------------------
  ;----------------------------------------------------------
  ;Renames and loads the given packages into the package-table.
  ;Adds any errors to the given error list.
  defn load-package-table (input-objects:Collection<IPackage|Pkg>, errors:Vector<Exception>) :
    var objects:Tuple<IPackage|Pkg> = to-tuple(input-objects)
    objects = check-duplicate-packages(objects, errors)
    objects = check-already-loaded(objects, errors)
    val renamed = rename-il(to-tuple(filter-by<IPackage>(objects)))
    if /errors(renamed) is-not False :
      add(errors, /errors(renamed) as RenameErrors)
    objects = sub-ipackages(objects, packages(renamed))
    do(add{package-table, _}, objects)
    
  defn load-package-table! (objects:Collection<IPackage|Pkg>) :
    val errors = Vector<Exception>()
    load-package-table(objects, errors)
    throw(FrontEndErrors(errors)) when not empty?(errors)

  defn sub-ipackages (objs:Seqable<IPackage|Pkg>, new-ipackages:Seqable<IPackage>) -> Tuple<IPackage|Pkg> :
    val pkg-seq = to-seq(new-ipackages)
    val result = to-tuple $ for obj in objs seq? :
      match(obj) :
        (obj:IPackage) :
          if empty?(pkg-seq) : None()
          else if name(obj) == name(peek(pkg-seq)) : One(next(pkg-seq))
          else : None()
        (obj:Pkg) :
          One(obj)
    fatal("Mismatched packages.") when not empty?(pkg-seq)
    result

  ;----------------------------------------------------------
  ;--------------- Resolving Package ------------------------
  ;----------------------------------------------------------

  defn package-exports (pkg:Pkg) :
    package-exports(packageio(pkg))
  defn package-exports (io:PackageIO) :
    set?(package-exports-table, package(io), fn () :
      val pexs = to-package-exports(io)
      defn rename-id (e:Export) : sub-n(e, fresh-id())
      sub-exports(pexs, map(rename-id, exports(pexs))))

  defn to-resolver-input? (package-name:Symbol) :
    if key?(package-table, package-name) :
      match(package-table[package-name]) :
        (p:IPackage) : p
        (p:Pkg) : package-exports(p)
        (p:False) : false

  defn to-resolver-input (package-name:Symbol) :
    val p = to-resolver-input?(package-name)
    match(p:IPackage|PackageExports) : p
    else : fatal("Package %_ not in package table." % [package-name])

  defn resolver-environment (errorlist:Vector<Exception>) :
    defn imported-package (package:Symbol) -> IPackage|PackageExports|False :
      ;If it is in the package table then use that for the resolver
      if key?(package-table, package) :
        to-resolver-input?(package)
      else :
        ;Otherwise look in the environment
        val io = environment-package?(sys, package)
        match(io:PackageIO) :
          package-exports(io)
        ;Otherwise try loading from the file system
        else :
          match(package-location(package)) :
            (l:PkgLocation) :
              val pkgs = read-inputs([l], errorlist)
              load-package-table(pkgs, errorlist)
            (f:False) :
              set-missing(package-table, package)
          to-resolver-input?(package)
    ;Make environment
    new stz/resolver/Env :
      defmethod imported-package (this, package:Symbol) :
        imported-package(package)
      defmethod conditional-dependencies (this, packages:Seqable<Symbol>) :
        conditional-dependencies(sys, packages)
      defmethod package-priority (this) :
        package-priority(sys)

  defn resolve-packages (package-names:Tuple<Symbol>, errorlist:Vector<Exception>) -> ResolverResult :
    ;The given package names are the package names loaded from the input.
    ;These must have their order preserved.
    ;Include as a resolver input, all the IPackages in the package table.
    defn minus (xs:Seqable<Symbol>, ys:Tuple<Symbol>) :
      for x in xs filter :
        not contains?(ys, x)
    val package-names* = to-tuple(cat(existing-packages, package-names)) where :
      val existing-packages = seq(name, ipackages(package-table)) - package-names
    val resolved = resolve-il(map(to-resolver-input,package-names*), resolver-environment(errorlist))
    if errors(resolved) is-not False :
      add(errorlist, errors(resolved) as ResolveErrors)
    resolved

  defn resolve-packages! (package-names:Tuple<Symbol>) -> ResolverResult :
    val errorlist = Vector<Exception>()
    val resolved = resolve-packages(package-names, errorlist)
    throw(FrontEndErrors(errorlist)) when not empty?(errorlist)
    resolved

  ;----------------------------------------------------------
  ;------------------- Compile to EL ------------------------
  ;----------------------------------------------------------
  defn compile-to-el (resolved:Tuple<IPackage>) -> Tuple<EPackage> :
    val env = new stz/type/Env :
      defmethod stz/type/exports (this, package:Symbol) :
        match(environment-package?(sys, package)) :
          (io:PackageIO) : package-exports(io)
          (f:False) : package-exports-table[package]        
    val typed = type-program!(resolved, env)
    to-el(typed, transient?(sys))

  ;----------------------------------------------------------
  ;------------------- Order Packages -----------------------
  ;----------------------------------------------------------
  defn order-packages<?T> (pkgs:Seqable<(IPackage|EPackage|Pkg)&?T>, order:Seqable<Symbol>) :
    val pkg-table = to-hashtable(name, pkgs)
    to-tuple $ for name in order seq? :
      if key?(pkg-table, name) : One(pkg-table[name])
      else : None()

  ;----------------------------------------------------------
  ;------------------ Load into Environment -----------------
  ;----------------------------------------------------------
  ;Returns false is successful.
  ;Otherwise, returns a collection of PackageInFile to use to
  ;try on the next iteration.
  
  defn load-into-denv! (pkgs:Seqable<EPackage|Pkg>) -> Tuple<PackageInFile>|False :
    val packageios = to-tuple $ seq(packageio, pkgs)
    val result = load-into-denv(sys, packageios)
    match(result:LoadErrors) :
      val new-inputs = HashTable<Symbol,PackageInFile>()
      val unrecoverable-errors = Vector<LoadError>()
      for e in errors(result) do :
        match(source(e)) :
          (src:LoadedPackage) :
            match(source-file?(package(src))) :
              (file:String) : new-inputs[package(src)] = PackageInFile(package(src), file)
              (file:False) : add(unrecoverable-errors, e)
          (src:LiveObject) :
            add(unrecoverable-errors, e)
      if not empty?(unrecoverable-errors) :
        throw(LoadErrors(to-tuple(unrecoverable-errors)))
      ;Return new source files
      to-tuple(values(new-inputs))

  ;----------------------------------------------------------
  ;------------------ Error Handling ------------------------
  ;----------------------------------------------------------
  defn package-location! (name:Symbol) :
    val loc = package-location(name)
    if loc is False :
      throw(CannotLocatePackage(name))
    loc as PkgLocation

  defn resolve-il! (ps:Tuple<IPackage|PackageExports>, env:stz/resolver/Env) :
    val r = resolve-il(ps,env)
    if errors(r) is-not False :
      throw(errors(r) as ResolveErrors)
    r

  defn type-program! (ipackages:Tuple<IPackage>, env:stz/type/Env) :
    match(type-program(ipackages,env)) :
      (p:TProg) : p
      (e:TypeErrors) : throw(e)

  defn check-duplicate-packages (ps:Seqable<IPackage|Pkg>, errors:Vector<Exception>) -> Tuple<IPackage|Pkg> :
    val added-set = HashSet<Symbol>()
    val duplicates = HashSet<Symbol>()
    val ps* = to-tuple $ for p in ps filter :
      if add(added-set, name(p)) : true
      else : add(duplicates, name(p))
    if not empty?(duplicates) :
      throw(DuplicatePackages(to-tuple(duplicates)))
    ps*

  defn check-already-loaded (ps:Seqable<IPackage|Pkg>, errors:Vector<Exception>) -> Tuple<IPackage|Pkg> :
    defn rank (p:IPackage|Pkg|False) :
      match(p) :
        (p:False) : 0
        (p:Pkg) : 1
        (p:IPackage) : 2
    to-tuple $ for p in ps filter :
      val loaded? = key?(package-table, name(p)) and
                    rank(package-table[name(p)]) >= rank(p)
      add(errors, PackageAlreadyLoaded(name(p))) when loaded?
      not loaded?

  defn ensure-contains-package! (ps:Seqable<IPackage>, filename:String, expected-package:Symbol) :
    val exists? = any?({name(_) == expected-package}, ps)
    if not exists? :
      throw(MissingPackageInFile(filename, expected-package))

  ;----------------------------------------------------------
  ;-------------------- Launch! -----------------------------
  ;----------------------------------------------------------
  new FrontEnd :
    defmethod compile-to-el (this) :
      compile-all-to-el()
    defmethod dependencies (this) :
      dependencies()

;============================================================
;=================== Read Inputs ============================
;============================================================

defstruct ReadInputs:
  packages: Tuple<IPackage|Pkg>
  errors: Tuple<Exception>

;<doc>=======================================================
;=============== Input Source Categorization ================
;============================================================

There are 5 types of inputs accepted:

IPackage: Form read directly from REPL.

StanzaFile: A path to a stanza file.

PackageName: The name of a package.

PackageInFile: A package expecting to be loaded from a given file.

PkgLocation: A package found by the project manager, potentially
backed up by a source file.

;============================================================
;=======================================================<doc>

deftype InputSource :
  IPackage <: InputSource
  PkgLocation <: InputSource  
  
defstruct StanzaFile <: InputSource :
  filename: String

defstruct PackageName <: InputSource :
  package: Symbol

defstruct PackageInFile <: InputSource :
  package: Symbol
  filename: String

defn InputSource (s:String|Symbol|IPackage) :
  match(s) :
    (s:String) : StanzaFile(s)
    (s:Symbol) : PackageName(s)
    (s:IPackage) : s

;============================================================
;==================== Package Table =========================
;============================================================

deftype PackageTable <: Collection<IPackage|Pkg>
defmulti add (p:PackageTable, p:IPackage|Pkg) -> False
defmulti set-missing (p:PackageTable, name:Symbol) -> False
defmulti get (p:PackageTable, name:Symbol) -> IPackage|Pkg|False
defmulti key? (p:PackageTable, name:Symbol) -> True|False
defmulti pkgs (p:PackageTable) -> Seqable<Pkg>
defmulti ipackages (p:PackageTable) -> Seqable<IPackage>

defn PackageTable () :
  val table = HashTable<Symbol,Int|False>()
  val objects = Vector<IPackage|Pkg>()
  defn index (name:Symbol) :
    match(get?(table,name)) :
      (i:Int) : i
      (f:False) :
        val i = length(objects)
        table[name] = i
        i
  new PackageTable :
    defmethod add (this, p:IPackage|Pkg) :
      objects[index(name(p))] = p
    defmethod set-missing (this, name:Symbol) :
      table[name] = false
    defmethod get (this, name:Symbol) :
      val i = table[name]
      match(i:Int) : objects[i]
    defmethod key? (this, name:Symbol) :
      key?(table, name)
    defmethod to-seq (this) :
      to-seq(objects)
    defmethod pkgs (this) :
      filter-by<Pkg>(objects)
    defmethod ipackages (this) :
      filter-by<IPackage>(objects)

;============================================================
;===================== Errors ===============================
;============================================================

public deftype FrontEndError <: Exception

defn FrontEndErrors (es:Collection<Exception>&Lengthable) :
  if length(es) == 1 :
    next(to-seq(es))
  else :
    new FrontEndError :
      defmethod print (o:OutputStream, this) :
        print(o, "%n" % [es])

defn MacroexpansionError (e:Exception) :
  new FrontEndError :
    defmethod print (o:OutputStream, this) :
      print(o, e)

defn InvalidExtensionError (filename:String) :
  new FrontEndError :
    defmethod print (o:OutputStream, this) :
      print(o, "File %_ does not have a valid Stanza file extension." % [filename])

defn CannotLocatePackage (name:Symbol) :
  new FrontEndError :
    defmethod print (o:OutputStream, this) :
      print(o, "Cannot locate .pkg file for package %~." % [name])

defn DuplicatePackages (names:Tuple<Symbol>) :
  new FrontEndError :
    defmethod print (o:OutputStream, this) :
      print(o, "The following packages, %,, has been loaded more than once." % [names])

defn MissingPackageInFile (filename:String, package-name:Symbol) :
  new FrontEndError :
    defmethod print (o:OutputStream, this) :
      print(o, "The file %~ was expected to contain the package %~, but does not." % [filename, package-name])

defn PackageAlreadyLoaded (package-name:Symbol) :
  new FrontEndError :
    defmethod print (o:OutputStream, this) :
      print(o, "The package %~ has already been loaded." % [package-name])