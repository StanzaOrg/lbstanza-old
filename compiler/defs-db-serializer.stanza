#use-added-syntax(stz-serializer-lang)
defpackage stz/defs-db-serializer :
  import core
  import collections
  import stz/defs-db-ir
  import stz/serializer
  import stz/visibility
  import stz/package-stamps

;===============================================================================
;============================ Serializers ======================================
;===============================================================================
public defserializer (out:OutputStream, in:InputStream) : 
  defunion definitions-database (DefinitionsDatabase) :
    DefinitionsDatabase : (reserved-words:tuple(string), packages:tuple(package-definitions)
                           unresolved-symbols:tuple(unresolved-symbol))

  defunion package-definitions (PackageDefinitions) :
    PackageDefinitions : (name:symbol, stamp:pkgstamp, source:src-def-src,
                          imports:tuple(package-import), definitions:tuple(definition2))

  defunion unresolved-symbol (UnresolvedSymbol) :
    UnresolvedSymbol : (symbol:symbol, info:opt<FileInfo>(fileinfo))

  defunion definition2 (Definition) :
    Definition : (name:symbol, file-info:fileinfo, kind:src-def-kind,
                  visibility:visibility, annotation?:opt<DefinitionAnnotation>(annotation)
                  documentation?:opt<String>(string))

  defunion package-import (PackageImport) : 
    PackageImport : (name:symbol, prefixes:tuple(package-import-prefix))

  defunion package-import-prefix (PackageImportPrefix) : 
    PackageImportPrefix : (names:opt<Tuple<Symbol>>(tuple(symbol)), prefix:string)

  defunion pkgstamp (PackageStamp) :
    PackageStamp : (location:pkglocation, source-hashstamp:opt<ByteArray>(bytearray), pkg-hashstamp:opt<ByteArray>(bytearray))

  defunion pkglocation (PkgLocation) :
    PkgLocation : (package:symbol, source-file:opt<String>(string), pkg-file:opt<String>(string), read-pkg?:bool)

  defatom bytearray (xs:ByteArray) :
    writer :
      write-int(length(xs))
      do(write-byte, xs)
    reader :
      val len = read-int()
      val bytes = to-vector<Byte>(seq(read-byte{}, 0 to len))
      to-bytearray(bytes)
  
  defunion fileinfo (FileInfo) :
    FileInfo : (filename:string, line:int, column:int)

  defunion fn-arg-annotation (FnArgAnnotation) : 
    FnArgAnnotation : (name?:opt<Symbol>(symbol), type?:opt<Symbol>(symbol))
  
  defunion annotation (DefinitionAnnotation) : 
    DefnAnnotation : 
      targs:tuple(symbol), 
      args:tuple(fn-arg-annotation)
      return-type?:opt<Symbol>(symbol)
  
  reader defn read-tuple<?T> (f: () -> ?T) :
    val n = read-int()
    to-tuple(repeatedly(f, n))

  writer defn write-tuple<?T> (f: T -> False, xs:Tuple<?T>) :
    write-int(length(xs))
    do(f, xs)

  reader defn read-opt<T> (f: () -> T) :
    val n = read-byte()
    f() when n == 1Y

  writer defn write-opt<T> (f: T -> False, x:T|False) :
    match(x) :
      (x:False) :
        write-byte(0Y)
      (x:T) :
        write-byte(1Y)
        f(x)

  defatom visibility (v:Visibility): 
    writer: 
      write-int(to-int(v))
    reader : 
      val i = read-int()
      if (i < 0) or (i >= Visibility-length) : 
        throw(DeserializeException())
      Visibility(i)

  defatom src-def-src (x:SrcDefinitionSource): 
    writer: 
      write-int(to-int(x))
    reader : 
      val i = read-int()
      if (i < 0) or (i >= SrcDefinitionSource-length) : 
        throw(DeserializeException())
      SrcDefinitionSource(i)

  defatom src-def-kind (x:SrcDefinitionKind) :
    writer :
      write-int(to-int(x))
    reader :
      val i = read-int()
      if i < 0 or i >= SrcDefinitionKind-length :
        throw(DeserializeException())
      SrcDefinitionKind(i)
  
  defatom symbol (x:Symbol) :
    writer :
      write-string(to-string(x))
    reader :
      to-symbol(read-string())

  defatom byte (x:Byte) :
    writer :
      put(out, x)
    reader :
      match(get-byte(in)) :
        (x:Byte) : x
        (x:False) : throw(DeserializeException())

  defatom char (x:Char) :
    writer :
      print(out, x)
    reader :
      match(get-char(in)) :
        (x:Char) : x
        (x:False) : throw(DeserializeException())

  defatom string (x:String) :
    writer :
      write-int(length(x))
      print(out, x)
    reader :
      val n = read-int()
      String(repeatedly(read-char, n))

  defatom int (x:Int): 
    writer: 
      to-var-int(x, put{out, _})
    reader:
      from-var-int(read-byte)

  defatom bool (x:True|False) :
    writer :
      match(x) :
        (x:True) : put(out, 1Y)
        (x:False) : put(out, 0Y)
    reader :
      switch(get-byte(in)) :
        1Y : true
        0Y : false
        else : throw(DeserializeException())

public defn read-definitions-database (in:InputStream) -> DefinitionsDatabase : 
  deserialize-definitions-database(in) as DefinitionsDatabase

defn to-var-int (x:Int, Y: Byte -> False) :
  defn B0 (x:Int) : Y(to-byte(x))
  defn B1 (x:Int) : Y(to-byte(x >> 8))
  defn B2 (x:Int) : Y(to-byte(x >> 16))
  defn B3 (x:Int) : Y(to-byte(x >> 24))
  if x >= 0 :
    if x < 250 : B0(x)
    else if x < 506 : (Y(250Y), B0(x - 250))
    else if x < 762 : (Y(251Y), B0(x - 506))
    else if x < 1018 : (Y(252Y), B0(x - 762))
    else if x < 32768 : (Y(253Y), B1(x), B0(x))
    else if x < 8388608 : (Y(254Y), B2(x), B1(x), B0(x))
    else : (Y(255Y), B3(x), B2(x), B1(x), B0(x))
  else :
    if x >= -32768 : (Y(253Y), B1(x), B0(x))
    else if x >= -8388608 : (Y(254Y), B2(x), B1(x), B0(x))
    else : (Y(255Y), B3(x), B2(x), B1(x), B0(x))

defn from-var-int (N: () -> Byte) -> Int :
  defn B0 () : to-int(N())
  defn B1 () : B0() << 8
  defn B2 () : B0() << 16
  defn S1 () : (B0() << 24) >>> 16
  defn S2 () : (B0() << 24) >>> 8
  defn S3 () : (B0() << 24)

  val x = N()
  switch(x) :
    255Y : S3() | B2() | B1() | B0()
    254Y : S2() | B1() | B0()
    253Y : S1() | B0()
    252Y : B0() + 762
    251Y : B0() + 506
    250Y : B0() + 250
    else : to-int(x)