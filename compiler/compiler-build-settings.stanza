defpackage stz/compiler-build-settings :
  import core
  import collections

;============================================================
;============== Datastructure Definition ====================
;============================================================

;Represents the full set of input options for starting
;a Stanza compilation job. 
public defstruct BuildSettings :
  inputs: BuildInputs with: (updater => sub-inputs)
  vm-packages: Tuple<String|Symbol> with: (updater => sub-vm-packages)
  platform: Symbol|False with: (updater => sub-platform)
  assembly: AsmFile|False with: (updater => sub-assembly)
  output: String|False with: (updater => sub-output)
  external-dependencies: String|False
  pkg-dir: String|False
  optimize?: True|False
  ccfiles: Tuple<String>
  ccflags: Tuple<String|Tuple<String>>
  flags: Tuple<Symbol>
  macro-plugins: Tuple<String>
  link-type: Symbol|False
with:
  printer => true

;Abstract type representing the different types of
;build input options.
public deftype BuildInputs

;Case: User explicitly chooses which files/packages to compile.
;- names: Either the stanza input file, or the stanza package name.
;- original-target: If these build packages are computed by looking
;  up the build target in a .proj file, then this holds the original
;  name of the build target.
public defstruct BuildPackages <: BuildInputs :
  names: Tuple<String|Symbol>
  original-target: Symbol|False with: (default => false)
with:
  printer => true

;Case: User indicates to build a specific build target that has
;been specified within a .proj file.
;- target: The name of the file.
public defstruct BuildTarget <: BuildInputs :
  target: Symbol
with:
  printer => true

;Represents the name of the assembly file for holding the
;output of the compilation.
;- auto-generated?: If true, then this assembly file was not
;  explicitly requested by the user, and instead was automatically
;  generated.
public defstruct AsmFile :
  filename: String
  auto-generated?: True|False
with:
  printer => true

;============================================================
;================= Convenient Accessors =====================
;============================================================

;Returns a String if the settings originally contained an
;explicit assembly file give by the user.
public defn original-asm (s:BuildSettings) -> String|False :
  match(assembly(s)) :
    (asmfile:AsmFile) : filename(asmfile) when not auto-generated?(asmfile)
    (f:False) : false

;Returns the assembly filename if one is requested.
public defn asm? (s:BuildSettings) -> String|False :
  match(assembly(s)) :
    (asmfile:AsmFile) : filename(asmfile)
    (f:False) : false

;Assumes that BuildSettings is ready for compilation, and
;returns the names of the inputs.
public defn build-inputs! (s:BuildSettings) -> Tuple<String|Symbol> :
  val inputs = inputs(s) as BuildPackages
  names(inputs)

;Returns the name of the build target (unless inputs were
;specified directly).
public defn build-target? (s:BuildSettings) -> Symbol|False :
  match(inputs(s)) :
    (t:BuildTarget) : target(t)
    (p:BuildPackages) : original-target(p)  

;Returns true if an output executable is desired.
;This is the only condition that requires the build commands
;to be executed.
public defn output-required? (s:BuildSettings) -> True|False :
  output(s) is-not False  

;Returns true if an output assembly file is desired,
;but the output is not. This condition is important because
;we should still update the aux-file in this case.
public defn only-assembly-required? (s:BuildSettings) -> True|False :
  not output-required?(s) and
  original-asm(s) is-not False

;Returns true if no output executable or assembly is desired,
;and the only output desired are the .pkg files. This condition
;is important because we should still update the aux-file in this case.
public defn only-pkgs-required? (s:BuildSettings) -> True|False :
  output(s) is False and
  assembly(s) is False and
  pkg-dir(s) is-not False

;============================================================
;======================= Conditions =========================
;============================================================

;This ensures that the BuildSettings was correctly computed
;and ready to use as input for compilation. 
public defn ensure-ready-for-compilation! (s:BuildSettings) -> False :
  ;Requirements:
  ;1. Build inputs is BuildPackages, not BuildTarget.
  ;2. Build platform is known.
  ;3. If output executable is requested, then assembly settings is known.
  ;4. If external dependencies is requested, then either
  ;    assembly/output executable is requested.

  ;1. Build inputs is BuildPackages, not BuildTarget.
  if inputs(s) is-not BuildPackages :
    fatal("Input is not BuildPackages.")
  ;2. Build platform is known.
  if platform(s) is False :
    fatal("Build platform is unknown.")
  ;3. If output executable is requested, then assembly settings is known.
  if output(s) is-not False :
    if assembly(s) is False :
      fatal("Assembly settings are unknown.")
  ;4. If external dependencies is requested, then either
  ;    assembly/output executable is requested.
  if external-dependencies(s) is-not False :
    if assembly(s) is False and output(s) is False :
      fatal("External dependencies requires either assembly or output executable.")

