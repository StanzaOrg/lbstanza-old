defpackage stz/vm-ids :
  import core
  import collections
  import stz/dl-ir
  import stz/vm-ir
  import stz/vm-load-unit
  import stz/data-pool
  import stz/const-pool

;<doc>=======================================================
;================== VirtualMachine Ids ======================
;============================================================

The purpose of the VMIds is to assign a unique global integer id
permanently to each Stanza definition. When a Stanza definition is
reloaded, it is reassigned the same id. This is what allows functions
to be reloaded without disturbing downstream dependencies.

The ids are dense and categorized according to the type of definition
they refer to. However, because they are dense, it also means that the
same integer, depending upon the type of definition it is referring
to, may refer to different things.

# Fundamental State #

  code-recs:Vector<CodeRec|False>
  global-recs:Vector<ValRec|False>
  class-recs:Vector<ClassRec|False>
  data-pool:DataPool
  const-pool:ConstantPool
  package-inits:HashTable<Symbol,Int|False>

For fn-recs, global-recs, class-recs, the array index is the
identifier of the definition, and the array value is the record id of
the definition it refers to.

# State for Dependency Tracking #

  function-dependencies:Vector<Tuple<Rec>>
  class-dependencies:Vector<Tuple<Rec>>

The array index is the identifier of the definition, the array values
are the set of definitions that it depends upon.

;============================================================
;=======================================================<doc>

;============================================================
;====================== Global Ids ==========================
;============================================================

public deftype VMIds
public defmulti function-dependencies (ids:VMIds, f:Int) -> Tuple<Rec>
public defmulti class-dependencies (ids:VMIds, c:Int) -> Tuple<Rec>
public defmulti load-packages (ids:VMIds, pkgs:Collection<VMPackage>) -> LoadUnit
public defmulti class-rec (ids:VMIds, global-id:Int) -> StructRec|TypeRec|False
public defmulti package-init (ids:VMIds, package:Symbol) -> Int|False

public defn VMIds () :
  ;Fixed Ids
  val fixed-ids = [
    CORE-EXTEND-HEAP-ID => EXTEND-HEAP-FN
    CORE-EXTEND-STACK-ID => EXTEND-STACK-FN
    CORE-INIT-CONSTS-ID => INIT-CONSTS-FN
    CORE-EXECUTE-TOPLEVEL-COMMAND-ID => EXECUTE-TOPLEVEL-COMMAND-FN    
    CORE-FALSE-ID => FALSE-TYPE
    CORE-TRUE-ID => TRUE-TYPE
    CORE-BYTE-ID => BYTE-TYPE
    CORE-CHAR-ID => CHAR-TYPE
    CORE-INT-ID => INT-TYPE
    CORE-FLOAT-ID => FLOAT-TYPE
    CORE-STACK-ID => STACK-TYPE
    CORE-FN-ID => FN-TYPE
    CORE-TYPE-ID => TYPE-TYPE
    CORE-LIVENESS-TRACKER-ID => LIVENESS-TRACKER-TYPE,
    CORE-UNIQUE-ID => UNIQUE-TYPE]

  ;Fundamental State
  val id-table = HashTable<RecId,Int>()
  val code-recs = Vector<CodeRec|False>()
  val global-recs = Vector<ValRec|False>()
  val class-recs = Vector<ClassRec|False>()
  val data-pool = DataPool()
  val const-pool = ConstantPool()
  val package-inits = HashTable<Symbol,Int|False>()
  
  ;Generating new ids
  defn id-counter (pred:RecId -> True|False) :
    val vs = seq(value, filter(pred{key(_)}, fixed-ids))
    val start = 1 + maximum(-1, vs)
    to-seq(start to false)
  val code-id-counter = id-counter({_ is FnId})
  val class-id-counter = id-counter({_ is TypeId})
  val global-id-counter = id-counter({_ is ValId})
  
  ;Dependency Tracking
  val function-dependencies = Vector<Tuple<Rec>>()
  val class-dependencies = Vector<Tuple<Rec>>()

  ;Utility Tables
  val extern-id-table = extern-id-table()
  val callback-index-table = callback-index-table()
  val fixed-ids-table = to-hashtable<RecId,Int>(fixed-ids)

  ;Store record
  defn store-rec (r:Rec) :
    ;Compute global id for r
    val gid = label<Int> return :
      defn return? (i:Int|False) : return(i as Int) when i is Int
      return?(get?(id-table, id(r)))
      return?(get?(fixed-ids-table, id(r)))
      next $ match(r) :
        (r:CodeRec&Rec) : code-id-counter
        (r:ClassRec&Rec) : class-id-counter
        (r:ValRec&Rec) : global-id-counter
    ;Record global id
    id-table[id(r)] = gid
    ;Put record
    match(r) :
      (r:CodeRec&Rec) : put(code-recs, gid, r, false)
      (r:ClassRec&Rec) : put(class-recs, gid, r, false)
      (r:ValRec&Rec) : put(global-recs, gid, r, false)

  ;Form a single LoadUnit from a group of packages
  defn load-packages (pkgs:Collection<VMPackage>) -> LoadUnit :
    ;Driver
    defn driver () :
      val num-existing-datas = length(datas(data-pool))
      val num-existing-classes = length(consts(const-pool))
      val packages = Vector<LoadPackage>()
      val classes = Vector<LoadedClass>()
      val funcs = Vector<VMDefn>()
      val callbacks = Vector<Callback>()
      store-exported-recs()
      for pkg in pkgs do :
        val [global-ids, extern-defn-table] = create-global-ids(pkg)
        record-package-init(pkg, global-ids)
        add(packages, make-load-package(pkg, global-ids))
        add-all(classes, resolved-classes(pkg, global-ids))
        add-all(funcs, resolved-defns(pkg, global-ids, extern-defn-table))
        add-all(callbacks, resolved-callbacks(pkg, global-ids))
        val iotable = IOTable(packageio(pkg))
        record-dependencies(iotable, global-ids, /classes(pkg))
        record-dependencies(iotable, global-ids, /funcs(pkg))
      LoadUnit(
        to-tuple(packages),
        form-new-datas(data-pool, num-existing-datas),
        form-new-consts(const-pool, num-existing-classes),
        to-tuple(classes),
        to-tuple(funcs),
        to-tuple(callbacks))

    ;Store all the exported records.
    ;Extern records are handled differently (through the extern id table).
    defn store-exported-recs () :
      for pkg in pkgs do :
        for e in exports(packageio(pkg)) do :
          store-rec(rec(e)) when rec(e) is-not ExternRec

    ;Resolve all ids in the given item using the given given global-ids table.
    ;- x: The item to resolve ids for.
    ;- global-ids: The table containing the mapping from old to new ids.
    defn resolve-ids<?T> (x:VMItem&?T, global-ids:IntTable<Int>) -> T :
      defn resolve (x:VMItem) : map-id({global-ids[_]}, vm-map(resolve,x))
      resolve(x) as VMItem&T

    ;Compute global ids for all definitions in package
    defn create-global-ids (pkg:VMPackage) -> [IntTable<Int>, IntTable<Int>] :
      val global-ids = IntTable<Int>()
      ;First record ids for imported and exported definitions
      for i in cat(imports(packageio(pkg)), exports(packageio(pkg))) do :
        val local-id = n(i)
        val global-id = match(rec(i)) :
          (r:ExternRec) : extern-id-table[lbl(r)]
          (r) : id-table[id(r)]
        global-ids[local-id] = global-id
      ;Then create ids for unexported definitions
      defn create-ids<?T> (entries: VMPackage -> Tuple<?T>, local-id: T -> Int, ids:Seq<Int>) :
        for e in entries(pkg) do :
          if not key?(global-ids, local-id(e)) :
            val gid = next(ids)
            global-ids[local-id(e)] = gid
      create-ids(globals, id, global-id-counter)
      create-ids(classes, id, class-id-counter)
      create-ids(funcs, id, code-id-counter)
      ;Then create ids for datas and consts
      for d in datas(pkg) do :
        val local-id = id(d)
        val global-id = intern(data-pool, data(d))
        global-ids[local-id] = global-id
      for c in consts(pkg) do :
        val local-id = id(c)
        val value* = resolve-ids(value(c), global-ids)
        val global-id = id(id(intern(const-pool, value*)))
        global-ids[local-id] = global-id
      ;Then create ids for externs
      for e in externs(pkg) do :
        val local-id = id(e)
        val global-id = extern-id-table[name(e)]
        global-ids[local-id] = global-id
      ;Then create ids for extern-defns
      ;Keys are the function-ids of all extern functions
      ;Values are the extern index corresponding to their labels.
      val extern-defn-table = IntTable<Int>()
      for e in extern-defns(pkg) do :
        val local-id = fid(e)
        val global-id = extern-id-table[lbl(e)]
        extern-defn-table[local-id] = global-id
      ;Return ids
      [global-ids, extern-defn-table]

    ;Record package init
    defn record-package-init (pkg:VMPackage, global-ids:IntTable<Int>) :
      val init-id = match(init(pkg)) :
        (i:Int) : global-ids[i]
        (i:False) : false
      package-inits[name(pkg)] = init-id

    ;Make a LoadPackage from a VMPackage
    defn make-load-package (pkg:VMPackage, global-ids:IntTable<Int>) -> LoadPackage :
      LoadPackage(
        name(pkg),
        map(resolve-ids{_, global-ids}, globals(pkg)),
        map(resolve-ids{_, global-ids}, methods(pkg)))

    ;Resolve all classes in the given package
    defn resolved-classes (pkg:VMPackage, global-ids:IntTable<Int>) -> Seq<LoadedClass> :
      for c in classes(pkg) seq :
        LoadedClass(name(pkg), resolve-ids(c, global-ids))

    ;Resolve a single func
    defn resolved-defn (func:VMDefn,
                        global-ids:IntTable<Int>,
                        extern-defn-ids:IntTable<Int>) :
      defn gid (n:Int) : global-ids[n]
      defn resolve-ids (x:VMItem) :
        match(x) :
          (x:ExternDefnId) : ExternId(extern-defn-ids[id(x)])
          (x) : map-id(gid, vm-map(resolve-ids, x))
      new VMDefn :
        defmethod id (this) : gid(id(func))
        defmethod dependencies (this) : map(gid, dependencies(func))
        defmethod func (this) : resolve-ids(/func(func)) as VMFunction

    ;Resolve all funcs from packages
    defn resolved-defns (pkg:VMPackage, global-ids:IntTable<Int>, extern-defn-ids:IntTable<Int>) :
      for f in funcs(pkg) seq :
        resolved-defn(f, global-ids, extern-defn-ids)

    ;Resolve all Callbacks for extern defns
    defn resolved-callbacks (pkg:VMPackage, global-ids:IntTable<Int>) :
      for e in extern-defns(pkg) seq :
        val fid = global-ids[fid(e)]
        val callback-index = callback-index-table[lbl(e)]
        Callback(callback-index, fid)        

    ;Record class dependencies
    defn record-dependencies (iotable:IOTable, global-ids:IntTable<Int>, classes:Tuple<VMClass>) :
      for c in filter-by<VMArrayClass|VMLeafClass>(classes) do :
        val ds = map({iotable[_]}, dependencies(c))
        val global-id = global-ids[id(c)]
        put(class-dependencies, global-id, ds, [])
        
    ;Record function dependencies
    defn record-dependencies (iotable:IOTable, global-ids:IntTable<Int>, funcs:Tuple<VMDefn>) :
      for f in funcs do :
        val ds = map({iotable[_]}, dependencies(f))
        val global-id = global-ids[id(f)]
        put(function-dependencies, global-id, ds, [])

    ;Construct new datas
    defn form-new-datas (pool:DataPool, num-existing-datas:Int) :
      val datas = datas(pool)
      to-tuple $ for i in num-existing-datas to length(datas) seq :
        VMData(i, datas[i])

    ;Construct new consts
    defn form-new-consts (pool:ConstantPool, num-existing-consts:Int) :
      val values = consts(pool)
      to-tuple $ for i in num-existing-consts to length(values) seq :
        VMConst(i, values[i])        

    ;Launch
    driver()

  ;Return datastructure
  new VMIds :
    defmethod package-init (this, pkg:Symbol) :
      package-inits[pkg]      
    defmethod class-rec (this, global-id:Int) :
      get?(class-recs, global-id, false) as StructRec|TypeRec|False
    defmethod function-dependencies (this, f:Int) :
      get?(function-dependencies, f, [])
    defmethod class-dependencies (this, c:Int) :
      get?(class-dependencies, c, [])
    defmethod load-packages (this, pkgs:Collection<VMPackage>) :
      load-packages(pkgs)

deftype CodeRec :
  FnRec <: CodeRec
  MultiRec <: CodeRec
  ExternFnRec <: CodeRec
deftype ClassRec :
  StructRec <: ClassRec
  TypeRec <: ClassRec  

;============================================================
;=============== Vector Utility Functions ===================
;============================================================

;Utility function for setting a slot in a vector,
;and lengthening the vector if it is too short.
defn put<?T> (xs:Vector<?T>, i:Int, v:T, default:T) :
  lengthen(xs, i + 1, default) when i >= length(xs)
  xs[i] = v

;Utility function for retrieving a lot in a vacetor.
defn get?<?T> (xs:Vector<?T>, i:Int, default:?T) :
  xs[i] when i < length(xs) else default

