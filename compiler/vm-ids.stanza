defpackage stz/vm-ids :
  import core
  import collections
  import stz/dl-ir
  import stz/vm-ir
  import stz/vm-load-unit
  import stz/data-pool
  import stz/const-pool
  import stz/loaded-dynamic-libraries
  import stz/extern-defn-table

;<doc>=======================================================
;================== VirtualMachine Ids ======================
;============================================================

The purpose of the VMIds is to assign a unique global integer id
permanently to each Stanza definition. When a Stanza definition is
reloaded, it is reassigned the same id. This is what allows functions
to be reloaded without disturbing downstream dependencies.

The ids are dense and categorized according to the type of definition
they refer to. However, because they are dense, it also means that the
same integer, depending upon the type of definition it is referring
to, may refer to different things.

# Fundamental State #

  code-recs:Vector<CodeRec|False>
  global-recs:Vector<ValRec|False>
  class-recs:Vector<ClassRec|False>
  data-pool:DataPool
  const-pool:ConstantPool
  package-inits:HashTable<Symbol,Int|False>


  callback-table:IntTable<Int>

    Global id 18 => Callback 0
    Global id 21 => Callback 1
    ...

For fn-recs, global-recs, class-recs, the array index is the
identifier of the definition, and the array value is the record id of
the definition it refers to.



# State for Dependency Tracking #

  function-dependencies:Vector<Tuple<Rec>>
  class-dependencies:Vector<Tuple<Rec>>

The array index is the identifier of the definition, the array values
are the set of definitions that it depends upon.

;============================================================
;=======================================================<doc>

;============================================================
;====================== Global Ids ==========================
;============================================================

public deftype VMIds
public defmulti function-dependencies (ids:VMIds, f:Int) -> Tuple<Rec>
public defmulti class-dependencies (ids:VMIds, c:Int) -> Tuple<Rec>
public defmulti load-packages (ids:VMIds, pkgs:Collection<VMPackage>) -> LoadUnit
public defmulti class-rec (ids:VMIds, global-id:Int) -> StructRec|TypeRec|False
public defmulti package-init (ids:VMIds, package:Symbol) -> Int|False

public defn VMIds (dylibs:LoadedDynamicLibraries,
                   extern-defns:ExternDefnTable) :
  ;Fixed Ids
  val fixed-ids = [
    CORE-EXTEND-HEAP-ID => EXTEND-HEAP-FN
    CORE-EXTEND-STACK-ID => EXTEND-STACK-FN
    CORE-INIT-CONSTS-ID => INIT-CONSTS-FN
    CORE-EXECUTE-TOPLEVEL-COMMAND-ID => EXECUTE-TOPLEVEL-COMMAND-FN    
    CORE-FALSE-ID => FALSE-TYPE
    CORE-TRUE-ID => TRUE-TYPE
    CORE-BYTE-ID => BYTE-TYPE
    CORE-CHAR-ID => CHAR-TYPE
    CORE-INT-ID => INT-TYPE
    CORE-FLOAT-ID => FLOAT-TYPE
    CORE-STACK-ID => STACK-TYPE
    CORE-FN-ID => FN-TYPE
    CORE-TYPE-ID => TYPE-TYPE
    CORE-LIVENESS-TRACKER-ID => LIVENESS-TRACKER-TYPE,
    CORE-UNIQUE-ID => UNIQUE-TYPE]

  ;Fundamental State
  val id-table = HashTable<RecId,Int>()
  val code-recs = Vector<CodeRec|False>()
  val global-recs = Vector<ValRec|False>()
  val class-recs = Vector<ClassRec|False>()
  val data-pool = DataPool()
  val const-pool = ConstantPool()
  val package-inits = HashTable<Symbol,Int|False>()
  val callback-table = IntTable<Int>()
  
  ;Generating new ids
  defn id-counter (pred:RecId -> True|False) :
    val vs = seq(value, filter(pred{key(_)}, fixed-ids))
    val start = 1 + maximum(-1, vs)
    to-seq(start to false)
  val code-id-counter = id-counter({_ is FnId})
  val class-id-counter = id-counter({_ is TypeId})
  val global-id-counter = id-counter({_ is ValId})
  
  ;Dependency Tracking
  val function-dependencies = Vector<Tuple<Rec>>()
  val class-dependencies = Vector<Tuple<Rec>>()

  ;Utility Tables
  val fixed-ids-table = to-hashtable<RecId,Int>(fixed-ids)

  ;The given record is exported by a package.
  ;Assign it a global id if it doesn't have one already, and store
  ;it in the id table.
  defn store-exported-rec-in-id-table (package:Symbol, r:Rec) -> False :
    ;Compute the global id for the given record.
    ;  Case 1: It already has an id.
    ;  Case 2: It has a system-mandated fixed id.
    ;  Case 3: We need to create a fresh id for it, or lookup the
    ;          library symbol for it.
    ;  Case 4: We need to lookup the extern id from the loaded libraries.
    defn compute-global-id () -> Int :
      label<Int> return :
        ;Helper: If given, assign to id-table and break.
        defn return? (gid:Int|False) :
          match(gid:Int) : return(gid)
        ;Case 1: It already has an id.
        return?(get?(id-table, id(r)))
        ;Case 2: It has a system-mandated fixed id.
        return?(get?(fixed-ids-table, id(r)))
        ;Dispatch based on type of export.
        match(r) :
          ;Case 3: Create a new id for it.
          (r:CodeRec&Rec) : next(code-id-counter)
          (r:ClassRec&Rec) : next(class-id-counter)
          (r:ValRec&Rec) : next(global-id-counter)
          ;Case 4: Lookup from loaded libraries.
          (r:ExternRec) : id(dylibs, package, lbl(r))
    ;Record global id
    val gid = compute-global-id()
    id-table[id(r)] = gid
    ;Put record
    match(r) :
      (r:CodeRec&Rec) : put(code-recs, gid, r, false)
      (r:ClassRec&Rec) : put(class-recs, gid, r, false)
      (r:ValRec&Rec) : put(global-recs, gid, r, false)
      (r:ExternRec) : false
    ;Assign callback ids.
    match(r:ExternFnRec) :
      callback-table[gid] = id(extern-defns, lbl(r))

  ;Store all the exported recs in the PackageIOs to the idtable.
  defn store-exported-recs-in-id-table (packageios:Seqable<PackageIO>) -> False :
    for packageio in packageios do :
      for e in exports(packageio) do :
        store-exported-rec-in-id-table(package(packageio), rec(e))

  ;Form a single LoadUnit from a group of packages
  defn load-packages (pkgs:Collection<VMPackage>) -> LoadUnit :
    ;Driver
    defn driver () :
      val num-existing-datas = length(datas(data-pool))
      val num-existing-classes = length(consts(const-pool))
      val packages = Vector<LoadPackage>()
      val classes = Vector<LoadedClass>()
      val funcs = Vector<VMDefn>()
      val callbacks = Vector<Callback>()
      store-exported-recs-in-id-table(seq(packageio, pkgs))
      for pkg in pkgs do :
        val local-to-global-map = local-to-global-table(pkg)
        record-package-init(pkg, local-to-global-map)
        add(packages, make-load-package(pkg, local-to-global-map))
        add-all(classes, resolved-classes(pkg, local-to-global-map))
        add-all(funcs, resolved-defns(pkg, local-to-global-map))
        add-all(callbacks, resolved-callbacks(pkg, local-to-global-map))
        val iotable = IOTable(packageio(pkg))
        record-dependencies(iotable, local-to-global-map, /classes(pkg))
        record-dependencies(iotable, local-to-global-map, /funcs(pkg))
      LoadUnit(
        to-tuple(packages),
        form-new-datas(data-pool, num-existing-datas),
        form-new-consts(const-pool, num-existing-classes),
        to-tuple(classes),
        to-tuple(funcs),
        to-tuple(callbacks))

    ;Resolve all ids in the given item using the given given global-ids table.
    ;- x: The item to resolve ids for.
    ;- global-ids: The table containing the mapping from old to new ids.
    defn resolve-ids<?T> (x:VMItem&?T, global-ids:IntTable<Int>) -> T :
      defn resolve (x:VMItem) : map-id({global-ids[_]}, vm-map(resolve,x))
      resolve(x) as VMItem&T

    ;Compute table mapping locals to globals for definitions in package.
    defn local-to-global-table (pkg:VMPackage) -> IntTable<Int> :
      ;Create the mapping table.
      val mapping-table = IntTable<Int>()
      
      ;First, all exported records already have assigned ids, so look
      ;them up.
      for i in cat(imports(packageio(pkg)), exports(packageio(pkg))) do :
        mapping-table[n(i)] = id-table[id(rec(i))]
        
      ;Private definitions that are not exported will not
      ;have any ids yet, so create global ids for any remaining items.
      defn create-ids<?T> (entries: VMPackage -> Tuple<?T>,
                           local-id: T -> Int,
                           make-gid:T -> Int) :
        for e in entries(pkg) do :
          if not key?(mapping-table, local-id(e)) :
            mapping-table[local-id(e)] = make-gid(e)
      create-ids(globals, id, next{global-id-counter})
      create-ids(classes, id, next{class-id-counter})
      create-ids(funcs, id, next{code-id-counter})
      create-ids(externs, id, id{dylibs, name(pkg), name(_)})
      
      ;Then create ids for datas and consts
      for d in datas(pkg) do :
        val local-id = id(d)
        val global-id = intern(data-pool, data(d))
        mapping-table[local-id] = global-id
      for c in consts(pkg) do :
        val local-id = id(c)
        val value* = resolve-ids(value(c), mapping-table)
        val global-id = id(id(intern(const-pool, value*)))
        mapping-table[local-id] = global-id

      ;Create callback ids for any unexported extern defns.
      for e in /extern-defns(pkg) do :
        val gid = mapping-table[fid(e)]
        if not key?(callback-table, gid) :
          callback-table[gid] = id(extern-defns, lbl(e))
        
      ;Return ids
      mapping-table

    ;Record package init
    defn record-package-init (pkg:VMPackage, local-to-global-map:IntTable<Int>) :
      val init-id = match(init(pkg)) :
        (i:Int) : local-to-global-map[i]
        (i:False) : false
      package-inits[name(pkg)] = init-id

    ;Make a LoadPackage from a VMPackage
    defn make-load-package (pkg:VMPackage, local-to-global-map:IntTable<Int>) -> LoadPackage :
      LoadPackage(
        name(pkg),
        map(resolve-ids{_, local-to-global-map}, globals(pkg)),
        map(resolve-ids{_, local-to-global-map}, methods(pkg)))

    ;Resolve all classes in the given package
    defn resolved-classes (pkg:VMPackage, local-to-global-map:IntTable<Int>) -> Seq<LoadedClass> :
      for c in classes(pkg) seq :
        LoadedClass(name(pkg), resolve-ids(c, local-to-global-map))

    ;Resolve a single func
    defn resolved-defn (func:VMDefn, local-to-global-map:IntTable<Int>) :
      defn gid (n:Int) : local-to-global-map[n]
      defn resolve-ids (x:VMItem) :
        match(x) :
          (x:ExternDefnId) : ExternDefnId(callback-table[gid(id(x))])
          (x) : map-id(gid, vm-map(resolve-ids, x))
      new VMDefn :
        defmethod id (this) : gid(id(func))
        defmethod dependencies (this) : map(gid, dependencies(func))
        defmethod func (this) : resolve-ids(/func(func)) as VMFunction

    ;Resolve all funcs from packages
    defn resolved-defns (pkg:VMPackage, local-to-global-map:IntTable<Int>) :
      for f in funcs(pkg) seq :
        resolved-defn(f, local-to-global-map)

    ;Resolve all Callbacks for extern defns
    defn resolved-callbacks (pkg:VMPackage, local-to-global-map:IntTable<Int>) :
      for e in /extern-defns(pkg) seq :
        val gid = local-to-global-map[fid(e)]
        val callback-index = callback-table[gid]
        Callback(callback-index, gid, a1(e), a2(e))

    ;Record class dependencies
    defn record-dependencies (iotable:IOTable, local-to-global-map:IntTable<Int>, classes:Tuple<VMClass>) :
      for c in filter-by<VMArrayClass|VMLeafClass>(classes) do :
        val ds = map({iotable[_]}, dependencies(c))
        val global-id = local-to-global-map[id(c)]
        put(class-dependencies, global-id, ds, [])
        
    ;Record function dependencies
    defn record-dependencies (iotable:IOTable, local-to-global-map:IntTable<Int>, funcs:Tuple<VMDefn>) :
      for f in funcs do :
        val ds = map({iotable[_]}, dependencies(f))
        val global-id = local-to-global-map[id(f)]
        put(function-dependencies, global-id, ds, [])

    ;Construct new datas
    defn form-new-datas (pool:DataPool, num-existing-datas:Int) :
      val datas = datas(pool)
      to-tuple $ for i in num-existing-datas to length(datas) seq :
        VMData(i, datas[i])

    ;Construct new consts
    defn form-new-consts (pool:ConstantPool, num-existing-consts:Int) :
      val values = consts(pool)
      to-tuple $ for i in num-existing-consts to length(values) seq :
        VMConst(i, values[i])        

    ;Launch
    driver()

  ;Return datastructure
  new VMIds :
    defmethod package-init (this, pkg:Symbol) :
      package-inits[pkg]      
    defmethod class-rec (this, global-id:Int) :
      get?(class-recs, global-id, false) as StructRec|TypeRec|False
    defmethod function-dependencies (this, f:Int) :
      get?(function-dependencies, f, [])
    defmethod class-dependencies (this, c:Int) :
      get?(class-dependencies, c, [])
    defmethod load-packages (this, pkgs:Collection<VMPackage>) :
      load-packages(pkgs)

deftype CodeRec :
  FnRec <: CodeRec
  MultiRec <: CodeRec
  ExternFnRec <: CodeRec
deftype ClassRec :
  StructRec <: ClassRec
  TypeRec <: ClassRec  

;============================================================
;=============== Vector Utility Functions ===================
;============================================================

;Utility function for setting a slot in a vector,
;and lengthening the vector if it is too short.
defn put<?T> (xs:Vector<?T>, i:Int, v:T, default:T) :
  lengthen(xs, i + 1, default) when i >= length(xs)
  xs[i] = v

;Utility function for retrieving a lot in a vacetor.
defn get?<?T> (xs:Vector<?T>, i:Int, default:?T) :
  xs[i] when i < length(xs) else default

