defpackage stz/keyed-set :
  import core
  import collections

;============================================================
;==================== Interface =============================
;============================================================
  
public deftype KeyedSet<T> <: Collection<T>
public deftype ItemKey
public defmulti get<?T> (s:KeyedSet<?T>, key:ItemKey) -> T
public defmulti add<?T> (s:KeyedSet<?T>, item:T) -> ItemKey
public defmulti remove (s:KeyedSet, key:ItemKey) -> False

;============================================================
;====================== Utilities ===========================
;============================================================

defstruct SetKey <: ItemKey :
  item: ? with: (setter => set-item)
  next: SetKey|False with: (setter => set-next)  

defstruct Sentinel

;============================================================
;====================== Implementation ======================
;============================================================

public defn KeyedSet<T> () :
  var first:SetKey|False = false
  defn removed? (key:SetKey) :
    item(key) is Sentinel
    
  new KeyedSet<T> :
    defmethod get (this, key:SetKey) :
      #if-not-defined(OPTIMIZE) :
        fatal("Key does not exist in set.") when removed?(key)
      item(key)
    defmethod add (this, item:T) :
      val key = SetKey(item, first)
      first = key
      key
    defmethod remove (this, key:SetKey) :
      #if-not-defined(OPTIMIZE) :
        fatal("Key does not exist in set.") when removed?(key)
      set-item(key, Sentinel())
    defmethod to-seq (this) :
      var key:SetKey|False = first
      var remove:SetKey -> False = {first = next(_)}
      defn next-item () :
        match(key) :
          (cur-key:SetKey) :
            if removed?(cur-key) :
              remove(cur-key)
              key = next(cur-key)
              next-item()
            else :
              key = next(cur-key)
              remove = set-next{cur-key, next(_)}
              One(item(cur-key))
          (cur-key:False) :
            None()
      repeat-while(next-item)