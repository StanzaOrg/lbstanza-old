;Utilities for finding free registers given a backend.

defpackage stz/backend-regs :
  import core
  import collections
  import stz/backend
  import stz/asm-ir
  import stz/asm-ir-utils

;Helper: Retrieve free registers.
public defn free-regs (used:Tuple<Reg|RegClass>, backend:Backend) -> Tuple<Reg> :
  val regset = IntSet()
  add-all(regset, 0 to num-regs(backend))
  for r in used do :
    match(r) :
      (r:Reg) : remove(regset, n(r))
      (r:CallCArgRegs) : do(remove{regset, _}, callc-regs(backend))
      (r:CallCPreservedRegs) : do(remove{regset, _}, c-preserved-regs(backend))
      (r) : fatal("Illegal argument: %_" % [r])
  to-tuple(seq(R, regset))

;Helper: Retrieve free float registers.
public defn free-fregs (used:Tuple<FReg|RegClass>, backend:Backend) -> Tuple<FReg> :
  val regset = IntSet()
  add-all(regset, 0 to num-fregs(backend))
  for r in used do :
    match(r) :
      (r:FReg) : remove(regset, n(r))
      (r:CallCArgFRegs) : do(remove{regset, _}, callc-fregs(backend))
      (r:CallCPreservedFRegs) : do(remove{regset, _}, c-preserved-fregs(backend))
      (r) : fatal("Illegal argument: %_" % [r])
  to-tuple(seq(F, regset))

;Used to quickly represent a register class for use
;by 'free-registers' utility.
public defenum RegClass :
  CallCArgRegs
  CallCArgFRegs
  CallCPreservedRegs
  CallCPreservedFRegs