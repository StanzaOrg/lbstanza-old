defpackage stz/timing-log-commands :
  import core
  import collections
  import reader
  import parser/errors
  import stz/timing-log-options
  import stz/line-noise-prompter

;============================================================
;=================== Commands ===============================
;============================================================

public deftype Command

public defstruct PrintCommand <: Command
with:
  printer => true

public defstruct SaveCommand <: Command :
  filename:String
with:
  printer => true

public defstruct RawCommand <: Command :
  filename:String
with:
  printer => true

public defstruct AnalysisCommand <: Command :
  filename:String
with:
  printer => true

public defstruct QuitCommand <: Command
with:
  printer => true

public defstruct ExpandCommand <: Command :
  ids:Tuple<Int>
with:
  printer => true

public defstruct FoldCommand <: Command :
  ids:Tuple<Int>
with:
  printer => true

public defstruct FoldChildrenCommand <: Command :
  id:Int
with:
  printer => true

public defstruct SortCommand <: Command :
  id:Int
  type:SortOrder
with:
  printer => true

public defstruct GroupCommand <: Command :
  id:Int
  type:GroupType
with:
  printer => true

public defstruct ListParentsCommand <: Command :
  id:Int
with:
  printer => true

public defstruct ListAllParentsCommand <: Command :
  id:Int
with:
  printer => true

public defstruct ListAllIdsCommand <: Command :
  id:Int
with:
  printer => true

public defstruct SetRootCommand <: Command :
  id:Int
with:
  printer => true

;============================================================
;=================== Parsing API ============================
;============================================================

public defn parse-command (forms) -> Command|CommandException :
  try : parse-syntax[timing-log / #command!](forms)
  catch (e:NoMatchError) : CommandParseError(to-tuple(errors(e)))
  catch (e:Exception) : CommandParseError([e])

public defn read-command () -> Command|CommandException :
  val tokens = try : read-line(LineNoisePrompter(">", ">"))
               catch (e:Exception) : CommandParseError([e])
  match(tokens) :
    (tokens:List<Token>) : parse-command(tokens)
    (tokens:False) : QuitCommand()
    (e:CommandException) : e
    (e:Exception) : CommandParseError([e])

;============================================================
;==================== Command Language ======================
;============================================================

defsyntax timing-log :
  public defproduction command!: Command
  defrule command! = (print) :
    PrintCommand()    
  defrule command! = (save-raw ?filename:#string!) :
    RawCommand(filename)
  defrule command! = (save ?filename:#string!) :
    SaveCommand(filename)
  defrule command! = (save-analysis ?filename:#string!) :
    AnalysisCommand(filename)
  defrule command! = (quit) :
    QuitCommand()
  defrule command! = (expand ?ids:#int! ...) :
    ExpandCommand(to-tuple(ids))
  defrule command! = (fold children ?id:#int!) :
    FoldChildrenCommand(id)
  defrule command! = (fold ?ids:#int! ...) :
    FoldCommand(to-tuple(ids))
  defrule command! = (sort ?id:#int! by ?t:#sort-type!) :
    SortCommand(id, t)
  defrule command! = (group all ?id:#int! by ?t:#group-all-type!) :
    GroupCommand(id, t)
  defrule command! = (group ?id:#int! by ?t:#group-type!) :
    GroupCommand(id, t)
  defrule command! = (list parents ?id:#int!) :
    ListParentsCommand(id)
  defrule command! = (list all parents ?id:#int!) :
    ListAllParentsCommand(id)
  defrule command! = (list all ids ?id:#int!) :
    ListAllIdsCommand(id)
  defrule command! = (set root ?id:#int!) :
    SetRootCommand(id)
  fail-if command! = () :
    CommandSyntaxError(closest-info(), "Unrecognized command.")

  defproduction sort-type!: SortOrder
  defrule sort-type! = (time) : SortByTime
  defrule sort-type! = (duration) : SortByDuration
  fail-if sort-type! = () : CommandSyntaxError(closest-info(), "Invalid sort type.")

  defproduction group-type!: GroupType
  defrule group-type! = (nothing) : NoGrouping()
  defrule group-type! = (id) : GroupById()
  defrule group-type! = (parents ?ids:#int! ...) : GroupByParents(to-tuple(ids))
  fail-if group-type! = () : CommandSyntaxError(closest-info(), "Invalid group type.")

  defproduction group-all-type! : GroupType
  defrule group-all-type! = (parents ?ids:#int! ...) : GroupAllByParents(to-tuple(ids))
  fail-if group-all-type! = () : CommandSyntaxError(closest-info(), "Must group by parents.")

  defproduction int! : Int
  defrule int! = (?x) when unwrap-token(x) is Int : unwrap-token(x)
  fail-if int! = () : CommandSyntaxError(closest-info(), "Invalid integer.")

  defproduction string! : String
  defrule string! = (?x) when unwrap-token(x) is String : unwrap-token(x)
  fail-if string! = () : CommandSyntaxError(closest-info(), "Invalid string.")

;============================================================
;========================= Exceptions =======================
;============================================================

public deftype CommandException <: Exception

public defstruct CommandSyntaxError <: CommandException :
  info:FileInfo|False
  msg:String

defmethod print (o:OutputStream, e:CommandSyntaxError) :
  val info-str = "" when info(e) is False
            else "%_: " % [info(e)]
  print(o, "%_%_" % [info-str, msg(e)])

public defstruct CommandParseError <: CommandException :
  errors:Tuple<Exception>

defmethod print (o:OutputStream, e:CommandParseError) :
  if empty?(errors(e)) :
    print(o, "Invalid command.")
  else :
    print(o, "%n" % [errors(e)])