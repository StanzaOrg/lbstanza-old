#use-added-syntax(tests)
defpackage stz/earley-parser :
  import core
  import collections
  import stz/utils
  import stz/earley-search
  import stz/earley-grammar
  import stz/earley-grammar-analysis
  import stz/earley-eval
  import stz/earley-eval-result
  import stz/earley-parse-tree
  import stz/earley-errors
  import stz/earley-error-analysis
  import stz/earley-precedence

;============================================================
;=================== Progress Report ========================
;============================================================

public deftype ParseProgress
public defmulti created-grammar (p:ParseProgress, g:Grammar) -> False
public defmulti parsed (p:ParseProgress, node:ParseNode) -> False
public defmulti reordered (p:ParseProgress, node:ParseNode) -> False
public defmulti failed (p:ParseProgress, e:EarleySyntaxErrors) -> False
defmethod created-grammar (p:ParseProgress, g:Grammar) : false
defmethod parsed (p:ParseProgress, node:ParseNode) : false
defmethod failed (p:ParseProgress, e:EarleySyntaxErrors) : false
defmethod reordered (p:ParseProgress, node:ParseNode) : false

;============================================================
;====================== Main API ============================
;============================================================

public defn parse (grammar:Grammar, input:List) -> ? :
  parse(grammar, input, new ParseProgress)

public defn parse (grammar:Grammar, input:List, progress:ParseProgress) -> ? :
  match(search(grammar, input)) :
    (r:SearchSuccess) :
      val parse-node = parse(items(r), terminal-set(r), length(inputlist(r)))
      parsed(progress, parse-node)
      val reordered-node = reorder-operators(parse-node)
      reordered(progress, reordered-node)
      evaluate-parse-tree(reordered-node, inputlist(r), infolist(r))
    (f:SearchFailure) :
      val errors = to-exception(grammar, missing(f))
      failed(progress, errors)
      throw(errors)

;============================================================
;====================== Test API ============================
;============================================================

public defn parse (rules:GRules, input:List) :
  parse(rules, input, new ParseProgress)

public defn parse (rules:GRules, input:List, progress:ParseProgress) -> ? :
  val grammar = Grammar(rules)
  created-grammar(progress,grammar)
  parse(grammar, input, progress)

