;============================================================
;==================== Pkg Language ==========================
;============================================================

defpackage stz/pkg-ir :
   import core
   import collections
   import stz/namemap
   import stz/tl-ir with :
      prefix(Field) => T

#use-overlay(stz/ast-lang, stz/printer-lang)

public defast :
   deftype PkgComm
   defnodes PkgComm :
      DefInfo :
         n: Int
         name: Symbol
         package: Symbol
         visibility: Vis
         category: EType
         info: FileInfo
      DefVal :
         n: Int
         type: Type|LSType
      DefType :
         n: Int
         args: List<Int>
         parent: False|Type
      DefLSType :
         n: Int
         args: List<Int>
         parent: False|Type
         fields: List<Field>
         
public defstruct Field :
   n: Int
   name: Symbol
   type: LSType

public defstruct Pkg :
   comms: List<PkgComm>

;============================================================
;==================== Printers ==============================
;============================================================

defprinter (c:PkgComm) :
   DefInfo :
      ($definfo n name package visibility category info)
   DefVal :
      ($defval n type)
   DefType :
      ($deftype n args parent)
   DefLSType :
      ($deflstype n args parent fields ...)

defprinter (f:Field) :
   Field :
      ($field n name type)

defprinter (p:Pkg) :
   Pkg :
      ($pkg comms ...)
   
;============================================================
;=================== Serialization ==========================
;============================================================

;                  Serialiation Tags
;                  =================

var TAG-COUNTER:Seq<Int>
defn next-tag () : to-byte(next(TAG-COUNTER))
defn reset-tag-counter () : TAG-COUNTER = to-seq(1 to false)

;Type Tags
reset-tag-counter()
val TPOLY-TAG = next-tag()
val TCAP-TAG = next-tag()
val TOF-TAG = next-tag()
val TTUPLE-TAG = next-tag()
val TOR-TAG = next-tag()
val TAND-TAG = next-tag()
val TVAR-TAG = next-tag()
val TARROW-TAG = next-tag()
val TGRADUAL-TAG = next-tag()
val TBOT-TAG = next-tag()
;LoStanza Type Tags
val BYTET-TAG = next-tag()
val INTT-TAG = next-tag()
val LONGT-TAG = next-tag()
val FLOATT-TAG = next-tag()
val DOUBLET-TAG = next-tag()
val UNKNOWNT-TAG = next-tag()
val POLYT-TAG = next-tag()
val RESTT-TAG = next-tag()
val PTRT-TAG = next-tag()
val REFT-TAG = next-tag()
val FNT-TAG = next-tag()
val STRUCTT-TAG = next-tag()

;Category Tags
reset-tag-counter()
val VALE-TAG = next-tag()
val VARE-TAG = next-tag()
val TVARE-TAG = next-tag()
val CAPVARE-TAG = next-tag()
val TYPEE-TAG = next-tag()
val MULTIE-TAG = next-tag()
val FNE-TAG = next-tag()
val LVALE-TAG = next-tag()
val LVARE-TAG = next-tag()
val LFNE-TAG = next-tag()
val LTYPEE-TAG = next-tag()
val FIELDE-TAG = next-tag()
val LABELE-TAG = next-tag()

;Visibility Tags
reset-tag-counter()
val PROTECTED-TAG = next-tag()
val PUBLIC-TAG = next-tag()

;Comm Tags
reset-tag-counter()
val DEFINFO-TAG = next-tag()
val DEFVAL-TAG = next-tag()
val DEFTYPE-TAG = next-tag()
val DEFLSTYPE-TAG = next-tag()

defn put-short-list (o:FileOutputStream, xs:List<Int>) :
   put(o, to-byte(length(xs)))
   for x in xs do : put(o, x)

defn put (o:FileOutputStream, s:String) :
   put(o, length(s))
   print(o, s)

defn put (o:FileOutputStream, s:Symbol) :
   put(o, to-string(s))

defn serialize (o:FileOutputStream, ts:List<Type>) :
   put(o, to-byte(length(ts)))
   for t in ts do : serialize(o, t)

defn serialize (o:FileOutputStream, ts:List<LSType>) :
   put(o, to-byte(length(ts)))
   for t in ts do : serialize(o, t)

defn serialize (o:FileOutputStream, f:False) :
   put(o, 0Y)

defn serialize (o:FileOutputStream, t:Type|LSType) :
   defn puto (b:Byte) : put(o, b)
   defn puto (i:Int) : put(o, i)
   
   match(t) :
      (t:TPoly) :
         puto(TPOLY-TAG)
         put-short-list(o, targs(t))
         put-short-list(o, cargs(t))
         serialize(o, func(t))
      (t:TCap) :
         puto(TCAP-TAG)
         puto(n(t))
      (t:TOf) :
         puto(TOF-TAG)
         puto(n(t))
         serialize(o, type(t))
      (t:TTuple) :
         puto(TTUPLE-TAG)
         serialize(o, types(t))
      (t:TOr) :
         puto(TOR-TAG)
         serialize(o, a(t))
         serialize(o, b(t))
      (t:TAnd) :
         puto(TAND-TAG)
         serialize(o, a(t))
         serialize(o, b(t))
      (t:TVar) :
         puto(TVAR-TAG)
         puto(n(t))
      (t:TArrow) :
         puto(TARROW-TAG)
         serialize(o, a(t))
         serialize(o, b(t))
      (t:TGradual) :
         puto(TGRADUAL-TAG)
      (t:TBot) :
         puto(TBOT-TAG)
      ;Lostanza types
      (t:ByteT) : puto(BYTET-TAG)
      (t:IntT) : puto(INTT-TAG)
      (t:LongT) : puto(LONGT-TAG)
      (t:FloatT) : puto(FLOATT-TAG)
      (t:DoubleT) : puto(DOUBLET-TAG)
      (t:UnknownT) : puto(UNKNOWNT-TAG)
      (t:PolyT) :
         puto(POLYT-TAG)
         put-short-list(o, targs(t))
         put-short-list(o, cargs(t))
         serialize(o, func(t))
      (t:RestT) :
         puto(RESTT-TAG)
         serialize(o, type(t))
      (t:PtrT) :
         puto(PTRT-TAG)
         serialize(o, type(t))
      (t:RefT) :
         puto(REFT-TAG)
         serialize(o, type(t))
      (t:FnT) :
         puto(FNT-TAG)
         serialize(o, a(t))
         serialize(o, r(t))
         serialize(o, b(t))
      (t:StructT) :
         puto(STRUCTT-TAG)
         puto(n(t))
         serialize(o, type(t))

defn serialize (o:FileOutputStream, v:Vis) :
   defn puto (b:Byte) : put(o, b)
   
   match(v) :
      (v:Protected) : puto(PROTECTED-TAG)
      (v:Public) : puto(PROTECTED-TAG)

defn serialize (o:FileOutputStream, e:EType) :
   defn puto (b:Byte) : put(o, b)
   
   match(e) :
      (e:ValE) : puto(VALE-TAG)
      (e:VarE) : puto(VARE-TAG)
      (e:TVarE) : puto(TVARE-TAG)
      (e:CapVarE) : puto(CAPVARE-TAG)
      (e:TypeE) : puto(TYPEE-TAG)
      (e:MultiE) : puto(MULTIE-TAG)
      (e:FnE) : puto(FNE-TAG)
      (e:LValE) : puto(LVALE-TAG)
      (e:LVarE) : puto(LVARE-TAG)
      (e:LFnE) : puto(LFNE-TAG)
      (e:LTypeE) : puto(LTYPEE-TAG)
      (e:FieldE) : puto(FIELDE-TAG)
      (e:LabelE) : puto(LABELE-TAG)

defn serialize (o:FileOutputStream, i:FileInfo) :
   put(o, filename(i))
   put(o, line(i))
   put(o, column(i))

defn serialize (o:FileOutputStream, f:Field) :
   put(o, n(f))
   put(o, name(f))
   serialize(o, type(f))

defn serialize (o:FileOutputStream, fs:List<Field>) :
   put(o, to-byte(length(fs)))
   for f in fs do : serialize(o, f)

defn serialize (o:FileOutputStream, c:PkgComm) :
   defn puto (x:Byte) : put(o, x)
   defn puto (x:Int) : put(o, x)
   defn puto (x:Symbol) : put(o, x)
   defn puto (x:List<Int>) : put-short-list(o, x)

   match(c) :
      (c:DefInfo) :
         puto(DEFINFO-TAG)
         puto(n(c))
         puto(name(c))
         puto(package(c))
         serialize(o, category(c))
         serialize(o, info(c))
      (c:DefVal) :
         puto(DEFVAL-TAG)
         puto(n(c))
         serialize(o, type(c))
      (c:DefType) :
         puto(DEFTYPE-TAG)
         puto(n(c))
         puto(args(c))
         serialize(o, parent(c))
      (c:DefLSType) :
         puto(DEFLSTYPE-TAG)
         puto(n(c))
         puto(args(c))
         serialize(o, parent(c))
         serialize(o, fields(c))

defn serialize (o:FileOutputStream, p:Pkg) :
   put(o, length(comms(p)))
   for c in comms(p) do :
      serialize(o, c)

public defn serialize (filename:String, p:Pkg) :
   val f = FileOutputStream(filename)
   try : serialize(f, p)
   finally : close(f)
