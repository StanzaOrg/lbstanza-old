;============================================================
;==================== Pkg Language ==========================
;============================================================

defpackage stz/pkg-ir :
   import core
   import collections
   import stz/namemap
   import stz/tl-ir with :
      prefix(Field, Child) => T
   import stz/params
   import stz/ids
   import stz/kl-ir with :
      prefix(Field, Child) => K

#use-overlay(stz/ast-lang, stz/printer-lang)

public defast :
   deftype PkgComm
   defnodes PkgComm :
      DefInfo :
         n: Int
         name: Symbol
         package: Symbol
         visibility: Vis
         category: EType
         info: FileInfo
      DefVal :
         n: Int
         type: False|Type
         ls-type: False|LSType
      DefType :
         n: Int
         args: List<Int>
         parent: False|Type
         children: List<Child>
      DefLSType :
         n: Int
         args: List<Int>
         parent: False|Type
         fields: List<Field>

public defstruct Child :
   n: Int
   args: List<Int>
   parent: Type

public defstruct Field :
   n: Int
   name: Symbol
   type: LSType

public defstruct Pkg :
   name: Symbol
   comms: List<PkgComm>
   kcomms: List<KComm>

;============================================================
;==================== Printers ==============================
;============================================================

defprinter (c:PkgComm) :
   DefInfo :
      ($definfo n name package visibility category info)
   DefVal :
      ($defval n type ls-type)
   DefType :
      ($deftype n args parent)
   DefLSType :
      ($deflstype n args parent fields ...)

defprinter (f:Field) :
   Field :
      ($field n name type)

defprinter (c:Child) :
   Child :
      ($child n (args ...) parent)

defprinter (p:Pkg) :
   Pkg :
      ($pkg name (comms ...) kcomms ...)


;============================================================
;=================== Serialization ==========================
;============================================================

defn serialize (filename:String, p:Pkg) :
   val f = FileOutputStream(filename)
   try : serialize(f, p)
   finally : close(f)

public defn deserialize-pkg (filename:String) : ;TODO: public is for testing
   val f = FileInputStream(filename)
   try : deserialize-pkg(f)
   finally : close(f)

#with-syntax(core, stz/serializer-lang) :
   defserializer (out:FileOutputStream, in:FileInputStream) :
      defunion pkg (Pkg) :
         Pkg: (name:symbol, comms:list(pkgcomm), kcomms:list(kcomm))
         
      defunion type (Type) :
         TMixed: (types:slist(type as TArrow))
         TPoly: (targs:slist(int), cargs:slist(int), func:type as TArrow)
         TCap: (n:int)
         TOf: (n:int, type:type)
         TTuple: (types:slist(type))
         TOr: (a:type, b:type)
         TAnd: (a:type, b:type)
         TVar: (n:int)
         TArrow: (a:type, b:type)
         TGradual: ()
         TBot: ()

      defunion lstype (LSType) :
         ByteT: ()
         IntT: ()
         LongT: ()
         FloatT: ()
         DoubleT: ()
         UnknownT: ()
         PolyT: (targs:slist(int), cargs:slist(int), func:lstype as FnT)
         RestT: (type:lstype)
         PtrT: (type:lstype)
         RefT: (type:type)
         FnT: (a:slist(lstype), r:opt<LSType>(lstype), b:lstype)
         StructT: (n:int, type:type)

      defunion pkgcomm (PkgComm) :
         DefInfo : (n:int, name:symbol, package:symbol, visibility:vis, category:category, info:info)
         DefVal : (n:int, type:opt<Type>(type), ls-type:opt<LSType>(lstype))
         DefType : (n:int, args:slist(int), parent:opt<Type>(type), children:slist(child))
         DefLSType : (n:int, args:slist(int), parent:opt<Type>(type), fields:slist(field))

      defunion vis (Vis) :
         Private: ()
         Protected: ()
         Public: ()
         Local: ()

      defunion category (EType) :
         ValE: ()
         VarE: ()
         TVarE: ()
         CapVarE: ()
         TypeE: ()
         MultiE: ()
         FnE: ()
         LValE: ()
         LVarE: ()
         LFnE: ()
         LTypeE: ()
         FieldE: ()
         LabelE: ()

      defunion field (Field) :
         Field: (n:int, name:symbol, type:lstype)

      defunion child (Child) :
         Child: (n:int, args:slist(int), parent:type)

      defunion info (FileInfo) :
         FileInfo: (filename:string, line:int, column:int)

      defunion ktype (KType) :
         KOf: (n:int)
         KTVar: (n:int)
         KAnd: (a:ktype, b:ktype)
         KOr: (a:ktype, b:ktype)
         KTop: ()
         KBot: ()
      
      defunion klstype (KLSType) :
         KByteT: ()
         KIntT: ()
         KLongT: ()
         KFloatT: ()
         KDoubleT: ()
         KUnknownT: ()
         KPtrT: (type:klstype)
         KRefT: (type:ktype)
         KFnT: (a:slist(klstype), r:opt<KLSType>(klstype), b:klstype)
         KStructT: (n:int)
      
      defunion kloc (KLoc) :
         Value: (exp:klsexp)
         Deref: (exp:klsexp, type:klstype)
         Deptr: (exp:klsexp, type:klstype)
         Slot: (exp:klsexp, type:klstype, index:klsexp)
         KField: (base:kloc, n:int)

      defunion kcomm (KComm) :
         KDef :
            n: int
            value: kexp
         KDefVar :
            n: int
            type: ktype
            value: opt<KExp>(kexp)
         KDefn :
            n: int
            value: kfunc
         KDefmulti :
            n: int
            targs: slist(int)
            a1: slist(ktype)
            a2: ktype
            info: opt<FileInfo>(info)
         KDefmethod :
            n: int
            multi: int
            targs: slist(ktype)
            thisn: opt<Int>(int)
            func: kfunc as KFn
         KDefType :
            n: int
            parent: opt<KType>(ktype)
            children: slist(kchild)
         KInit :
            exp: kexp

         KLSDef :
            n: int
            type: klstype
            value: klsexp
         KLSDefVar :
            n: int
            type: klstype
            value: opt<KLSExp>(klsexp)
         KLSDefn :
            tail?: lit as True|False
            n: int
            targs: slist(int)
            a1: slist(klstype)
            a2: klstype
            args: slist(int)
            body: klscomm
            info: opt<FileInfo>(info)
         KLSExternFn :
            n: int
            lbl: symbol
            a1: slist(klstype)
            a2: klstype
            args: slist(int)
            body: klscomm
            info: opt<FileInfo>(info)
         KLSDefmethod :
            tail?: lit as True|False
            n: int
            multi: int
            multi-targs: slist(ktype)
            targs: slist(int)
            a1: slist(klstype)
            a2: klstype
            args: slist(int)
            body: klscomm
            info: opt<FileInfo>(info)
         KLSDefType :
            n: int
            parent: opt<KType>(ktype)
            fields: slist(kfield)
            rfield: opt<StructField>(kfield)
         KExtern :
            n: int
            type: klstype
            lbl: symbol
         KLSInit :
            comm: klscomm

      defunion kexp (KExp) :
         KSet: (n:int, value:kexp)
         KCast: (exp:kexp, targ:ktype, info:opt<FileInfo>(info))
         KCheckLength: (exp:kexp, length:int, info:opt<FileInfo>(info))
         KLet: (def:kcomm as KDef|KDefVar|KDefn, body:kexp)
         KLetRec: (defs:slist(kcomm as KDefn|KDef), body:kexp, info:opt<FileInfo>(info))
         KSeq: (a:kexp, b:kexp)
         KDispatch: (args:slist(kexp), branches:slist(kbranch), info:opt<FileInfo>(info))
         KMatch: (args:slist(kexp), branches:slist(kbranch), info:opt<FileInfo>(info))
         KNew: (class:ktype, methods:slist(kcomm as KDefmethod), info:opt<FileInfo>(info))
         KDo: (func:kexp, args:slist(kexp), a1:slist(ktype), a2:ktype, info:opt<FileInfo>(info))
         KVar: (n:int, info:opt<FileInfo>(info))
         KPrim: (op:kop, args:slist(kexp))
         KLiteral: (value:lit)
         KTuple: (exps:slist(kexp), info:opt<FileInfo>(info))
         KTupleGet: (exp:kexp, index:int, info:opt<FileInfo>(info))
         KMix: (exps:slist(kexp as KCurry), info:opt<FileInfo>(info))
         KCurry: (n:int, targs:slist(ktype), a1:slist(ktype), a2:ktype, info:opt<FileInfo>(info))
      with :
         append-args => (false)

      defunion klsexp (KLSExp) :
         KLSLet: (comm:klscomm, exp:klsexp)
         KLSVar: (n:int) 
         KLSRef: (n:int, args:slist(klsexp), info:opt<FileInfo>(info)) 
         KLSRefArray: (n:int, args:slist(klsexp), info:opt<FileInfo>(info)) 
         KLSStruct: (n:int, args:slist(klsexp)) 
         KLSPtr: (exp:kloc) 
         KLSRead: (exp:kloc) 
         KLSPrim: (op:klsop, args:slist(klsexp), type:klstype) 
         KLSCall: (func:klsexp, args:slist(klsexp), type:klstype, new-stack?:lit as True|False, info:opt<FileInfo>(info)) 
         KLSSwitchStack: (func:klsexp, arg:klsexp, type:klstype, info:opt<FileInfo>(info)) 
         KLSCallC: (func:klsexp, args:slist(klsexp), type:klstype, info:opt<FileInfo>(info)) 
         KLSSizeof: (type:klstype) 
         KLSTagof: (n:int) 
         KLSConv: (exp:klsexp, type:klstype, info:opt<FileInfo>(info)) 
         KLSInterpret: (exp:klsexp, type:klstype) 
         KLSLitByte: (value:byte) 
         KLSLitInt: (value:int) 
         KLSLitLong: (value:long) 
         KLSLitFloat: (value:float) 
         KLSLitDouble: (value:double) 
         KLSLitString: (value:string) 
         KLSMix: (exps:slist(klsexp as KLSCurry)) 
         KLSCurry: (n:int, targs:slist(ktype), a1:slist(klstype), a2:klstype) 
         KLSFn: (ref:kexp) 

      defunion klscomm (KLSComm) :
         KLSIgnoreComm: (exp:klsexp) 
         KLSSet: (exp:kloc, value:klsexp) 
         KLSLabels: (blocks:slist(klscomm as KLSLabeledBlock)) 
         KLSLabel: (n:int) 
         KLSLabeledBlock: (n:int, args:slist(int), types:slist(klstype), body:klscomm) 
         KLSGoto: (n:int, args:slist(klsexp)) 
         KLSReturn: (exp:klsexp) 
         KLSDefLocal: (n:int, value:klsexp) 
         KLSDefLocalVar: (n:int, type:klstype, value:opt<KLSExp>(klsexp)) 
         KLSSeq: (a:klscomm, b:klscomm) 
         KLSIf: (pred:klsexp, conseq:klscomm, alt:klscomm) 
         KLSMatch: (args:slist(klsexp), branches:slist(klsbranch), info:opt<FileInfo>(info)) 
         KLSDispatch: (args:slist(klsexp), branches:slist(klsbranch), info:opt<FileInfo>(info)) 
         KLSSkip: ()
         KLSBranchError: (amb?:lit as True|False, info:opt<FileInfo>(info))

      defatom lit (x:?) :
         writer :
            match(x) :
               (x:Byte) :
                  write-byte(0Y)
                  write-byte(x)
               (x:Char) :
                  write-byte(1Y)
                  write-char(x)
               (x:Int) :
                  write-byte(2Y)
                  write-int(x)
               (x:Long) :
                  write-byte(3Y)
                  write-long(x)
               (x:Float) :
                  write-byte(4Y)
                  write-float(x)
               (x:Double) :
                  write-byte(5Y)
                  write-double(x)
               (x:String) :
                  write-byte(6Y)
                  write-string(x)
               (x:Symbol) :
                  write-byte(7Y)
                  write-symbol(x)
               (x:List) :
                  write-byte(8Y)
                  write-list(write-lit, x)
               (x:True) :
                  write-byte(9Y)                  
               (x:False) :
                  write-byte(10Y)
         reader :
            val tag = read-byte()
            switch {tag == _} :
               0Y : read-byte()
               1Y : read-char()
               2Y : read-int()
               3Y : read-long()
               4Y : read-float()
               5Y : read-double()
               6Y : read-string()
               7Y : read-symbol()
               8Y : read-list(read-lit)
               9Y : true
               10Y : false
               else : throw(FileReadException())

      defatom kop (x:KOp) :
         writer :
            write-byte $ switch {x == _} :
               INT-ADD-OP : 0Y
               INT-SUB-OP : 1Y
               INT-MUL-OP : 2Y
               INT-DIV-OP : 3Y
               INT-MOD-OP : 4Y
               INT-AND-OP : 5Y
               INT-OR-OP : 6Y
               INT-XOR-OP : 7Y
               INT-SHL-OP : 8Y
               INT-SHR-OP : 9Y
               INT-ASHR-OP : 10Y
               INT-EQ-OP : 11Y
               INT-NE-OP : 12Y
               INT-LE-OP : 13Y
               INT-LT-OP : 14Y
               INT-GT-OP : 15Y
               INT-GE-OP : 16Y
               INT-NOT-OP : 17Y
               INT-NEG-OP : 18Y
               IDENTICAL-OP : 19Y
               AGET-OP : 20Y
               ASET-OP : 21Y
               ALEN-OP : 22Y
               CHAR-AGET-OP : 23Y
               CHAR-ASET-OP : 24Y
               STRING-GET-OP : 25Y
               STRING-LEN-OP : 26Y
         reader :
            val tag = read-byte()
            switch {tag == _} :
               0Y : INT-ADD-OP
               1Y : INT-SUB-OP
               2Y : INT-MUL-OP
               3Y : INT-DIV-OP
               4Y : INT-MOD-OP
               5Y : INT-AND-OP
               6Y : INT-OR-OP
               7Y : INT-XOR-OP
               8Y : INT-SHL-OP
               9Y : INT-SHR-OP
               10Y : INT-ASHR-OP
               11Y : INT-EQ-OP
               12Y : INT-NE-OP
               13Y : INT-LE-OP
               14Y : INT-LT-OP
               15Y : INT-GT-OP
               16Y : INT-GE-OP
               17Y : INT-NOT-OP
               18Y : INT-NEG-OP
               19Y : IDENTICAL-OP
               20Y : AGET-OP
               21Y : ASET-OP
               22Y : ALEN-OP
               23Y : CHAR-AGET-OP
               24Y : CHAR-ASET-OP
               25Y : STRING-GET-OP
               26Y : STRING-LEN-OP
               else : throw(FileReadException())

      defatom klsop (x:KLSOp) :
         writer :
            match(x) :
               (x:GetAddrOp) :
                  write-byte(0Y)
                  write-symbol(name(x))
                  write-int(lbl(x))
               (x:GetterOp) :
                  write-byte(1Y)
                  write-symbol(name(x))
                  write-int(lbl(x))
               (x:SetterOp) :
                  write-byte(2Y)
                  write-symbol(name(x))
                  write-int(lbl(x))
               (x) :
                  write-byte $ switch {x == _} :
                     ADD-OP : 3Y
                     SUB-OP : 4Y
                     MUL-OP : 5Y
                     DIV-OP : 6Y
                     MOD-OP : 7Y
                     AND-OP : 8Y
                     OR-OP : 9Y
                     XOR-OP : 10Y
                     SHL-OP : 11Y
                     SHR-OP : 12Y
                     ASHR-OP : 13Y
                     EQ-OP : 14Y
                     NE-OP : 15Y
                     LT-OP : 16Y
                     GT-OP : 17Y
                     LE-OP : 18Y
                     GE-OP : 19Y
                     ULT-OP : 20Y
                     UGT-OP : 21Y
                     ULE-OP : 22Y
                     UGE-OP : 23Y
                     NOT-OP : 24Y
                     NEG-OP : 25Y
                     SP-OP : 26Y                  
         reader :
            val tag = read-byte()
            switch {tag == _} :
               0Y : GetAddrOp(read-symbol(), read-int())
               1Y : GetterOp(read-symbol(), read-int())
               2Y : SetterOp(read-symbol(), read-int())
               3Y : ADD-OP
               4Y : SUB-OP
               5Y : MUL-OP
               6Y : DIV-OP
               7Y : MOD-OP
               8Y : AND-OP
               9Y : OR-OP
               10Y : XOR-OP
               11Y : SHL-OP
               12Y : SHR-OP
               13Y : ASHR-OP
               14Y : EQ-OP
               15Y : NE-OP
               16Y : LT-OP
               17Y : GT-OP
               18Y : LE-OP
               19Y : GE-OP
               20Y : ULT-OP
               21Y : UGT-OP
               22Y : ULE-OP
               23Y : UGE-OP
               24Y : NOT-OP
               25Y : NEG-OP
               26Y : SP-OP
               else : throw(FileReadException())            

      defunion klsbranch (KLSBranch) :
         KLSBranch: (args:slist(int), types:slist(ktype), body:klscomm)

      defunion kbranch (KBranch) :
         KBranch: (args:slist(int), types:slist(ktype), body:kexp, info:opt<FileInfo>(info))

      defunion kfunc (Func) :
         KFn: (n:int, tail?:lit as True|False, targs:slist(int), a1:slist(ktype),
               a2:ktype, closure:opt<Int>(int), args:slist(int), body:kexp, info:opt<FileInfo>(info))
         KMultifn: (n:int, funcs:slist(kfunc as KFn), info:opt<FileInfo>(info))

      defunion kchild (KChild) :
         KChild: (n:int, parent:ktype)

      defunion kfield (StructField) :
         StructField: (n:int, type:klstype)

      reader defn read-slist<?T> (f: () -> ?T) :
         val n = read-byte()
         to-list(repeatedly(f, to-int(n)))
         
      writer defn write-slist<?T> (f: T -> False, xs:List<?T>) :
         write-byte(to-byte(length(xs)))
         do(f, xs)

      reader defn read-list<?T> (f: () -> ?T) :
         val n = read-int()
         to-list(repeatedly(f, n))
         
      writer defn write-list<?T> (f: T -> False, xs:List<?T>) :
         write-int(length(xs))
         do(f, xs)

      reader defn read-opt<T> (f: () -> T) :
         val n = read-byte()
         f() when n == 1Y

      writer defn write-opt<T> (f: T -> False, x:T|False) :
         if x is False :
            write-byte(0Y)
         else :
            write-byte(1Y)
            f(x as T)

      defatom int (x:Int) :
         writer :
            put(out, x)
         reader :
            match(get-int(in)) :
               (x:Int) : x
               (x:False) : throw(FileReadException())

      defatom long (x:Long) :
         writer :
            put(out, x)
         reader :
            match(get-long(in)) :
               (x:Long) : x
               (x:False) : throw(FileReadException())

      defatom float (x:Float) :
         writer :
            put(out, x)
         reader :
            match(get-float(in)) :
               (x:Float) : x
               (x:False) : throw(FileReadException())

      defatom double (x:Double) :
         writer :
            put(out, x)
         reader :
            match(get-double(in)) :
               (x:Double) : x
               (x:False) : throw(FileReadException())

      defatom byte (x:Byte) :
         writer :
            put(out, x)
         reader :
            match(get-byte(in)) :
               (x:Byte) : x
               (x:False) : throw(FileReadException())

      defatom char (x:Char) :
         writer :
            print(out, x)
         reader :
            match(get-char(in)) :
               (x:Char) : x
               (x:False) : throw(FileReadException())

      defatom string (x:String) :
         writer :
            write-int(length(x))
            print(out, x)
         reader :
            val n = read-int()
            String(repeatedly(read-char, n))

      defatom symbol (x:Symbol) :
         writer : write-string(to-string(x))
         reader : to-symbol(read-string())

      defn ensure<T> (f: ? -> True|False, x) :
         if f(x) : x as T
         else : throw(FileReadException())

;============================================================
;=================== ID Renaming ============================
;============================================================

;Track renamed ids
val ID-TABLE = HashTable<Int,Int>()
defn rename-id (n:Int) :
   val result = if stable-id?(n) :
      n
   else :
      if not key?(ID-TABLE, n) :         
         ID-TABLE[n] = fresh-id()
      ID-TABLE[n]
   println("rename-id(%_) = %_" % [n, result])   
   result

defn rename-id (n:False) :
   n

defn rename-id (n:List<Int>) :
   map(rename-id, n)

public defn rename-pkg (pkg:Pkg) : ;TODO: public for testing
   defn rename-comm (c:PkgComm) :
      match(c) :
         (c:DefInfo) :
            DefInfo(
               rename-id(n(c))
               name(c)
               package(c)
               visibility(c)
               category(c)
               info(c))
         (c:DefVal) :
            DefVal(
               rename-id(n(c))
               rename-type(type(c))
               rename-type(ls-type(c)))
         (c:DefType) :
            DefType(
               rename-id(n(c))
               map(rename-id, args(c))
               rename-type(parent(c))
               map(rename-child, children(c)))
         (c:DefLSType) :
            DefLSType(
               rename-id(n(c))
               map(rename-id, args(c))
               rename-type(parent(c))
               map(rename-field, fields(c)))

   defn rename-type (t:Type) :
      match(map(rename-type, t)) :
         (t:TPoly) : TPoly(map(rename-id, targs(t)), map(rename-id, cargs(t)), func(t))
         (t:TCap) : TCap(rename-id(n(t)))
         (t:TOf) : TOf(rename-id(n(t)), type(t))
         (t:TVar) : TVar(rename-id(n(t)))
         (t) : t

   defn rename-type (t:LSType) :
      val t* = map(rename-type{_:LSType}, map(rename-type{_:Type}, t))
      match(t*) :
         (t:PolyT) : PolyT(map(rename-id,targs(t)), map(rename-id,cargs(t)), func(t))
         (t:StructT): StructT(rename-id(n(t)), type(t))
         (t) : t

   defn rename-type (f:False) :
      false

   defn rename-child (c:Child) :
      Child(
         rename-id(n(c))
         map(rename-id, args(c))
         rename-type(parent(c)))

   defn rename-field (f:Field) :
      Field(
         rename-id(n(f))
         name(f)
         rename-type(type(f)))

   val comms* = map(rename-comm, comms(pkg))
   val kcomms* = map(rename-kcomm, kcomms(pkg))
   Pkg(name(pkg), comms*, kcomms*)
   
defn rename-kcomm (c:KComm) :
   defn rename-comm (c:KComm) -> KComm :
      match(map(rename-exp, rename-lscomm, rename-lsexp, rename-type, rename-lstype, c)) :
         (c:KDef) : KDef(rename-id(n(c)), value(c))
         (c:KDefVar) : KDefVar(rename-id(n(c)), type(c), value(c))
         (c:KDefn) : KDefn(rename-id(n(c)), rename-func(value(c)))
         (c:KDefmulti) : KDefmulti(rename-id(n(c)), rename-id(targs(c)), a1(c), a2(c), info(c))
         (c:KDefmethod) : KDefmethod(rename-id(n(c)), rename-id(multi(c)),
                             targs(c), rename-id(thisn(c)), rename-func(func(c)) as KFn)
         (c:KDefType) : KDefType(rename-id(n(c)), parent(c), map(rename-child,children(c)))
         (c:KLSDef) : KLSDef(rename-id(n(c)), type(c), value(c))
         (c:KLSDefVar) : KLSDefVar(rename-id(n(c)), type(c), value(c))
         (c:KLSDefn) : KLSDefn(tail?(c), rename-id(n(c)), rename-id(targs(c)),
                          a1(c), a2(c), rename-id(args(c)), body(c), info(c))
         (c:KLSExternFn) : KLSExternFn(rename-id(n(c)), lbl(c), a1(c), a2(c),
                              rename-id(args(c)), body(c), info(c))
         (c:KLSDefmethod) : KLSDefmethod(tail?(c), rename-id(n(c)), rename-id(multi(c)),
                               multi-targs(c), rename-id(targs(c)), a1(c), a2(c),
                               rename-id(args(c)), body(c), info(c))
         (c:KLSDefType) : KLSDefType(rename-id(n(c)), parent(c),
                             map(rename-field,fields(c)), rename-field(rfield(c)))
         (c:KExtern) : KExtern(rename-id(n(c)), type(c), lbl(c))
         (c) : c

   defn rename-exp (e:KExp) -> KExp:
      match(map(rename-comm, rename-exp, rename-type, e)) :
         (e:KSet) : KSet(rename-id(n(e)), value(e), type(e))
         (e:KVar) : KVar(rename-id(n(e)), info(e), type(e))
         (e:KCurry) : KCurry(rename-id(n(e)), targs(e), a1(e), a2(e), info(e), type(e))
         (e:KMatch) : KMatch(args(e), map(rename-branch, branches(e)), info(e), type(e))
         (e:KDispatch) : KDispatch(args(e), map(rename-branch, branches(e)), info(e), type(e))
         (e) : e

   defn rename-func (f:Func) :
      match(f) :
         (f:KFn) :
            KFn(rename-id(n(f)), tail?(f), rename-id(targs(f)), a1(f), a2(f),
                rename-id(closure(f)), rename-id(args(f)), body(f), info(f))
         (f:KMultifn) :
            KMultifn(rename-id(n(f)), 
                     map(rename-func, funcs(f)) as List<KFn>, info(f))

   defn rename-child (c:KChild) :
      KChild(rename-id(n(c)), parent(c))

   defn rename-field (f:StructField) :
      StructField(rename-id(n(f)), type(f))
   defn rename-field (f:False) :
      false

   defn rename-branch (b:KBranch) -> KBranch :
      KBranch(rename-id(args(b)), types(b), body(b), info(b))
 
   defn rename-lsbranch (b:KLSBranch) -> KLSBranch :
      KLSBranch(rename-id(args(b)), types(b), body(b))

   defn rename-lscomm (c:KLSComm) -> KLSComm :
      match(map(rename-lscomm, rename-lsexp, rename-loc, rename-lstype, c)) :
         (c:KLSLabel) : KLSLabel(rename-id(n(c)))
         (c:KLSLabeledBlock) : KLSLabeledBlock(rename-id(n(c)), map(rename-id, args(c)), types(c), body(c))
         (c:KLSGoto) : KLSGoto(rename-id(n(c)), args(c))
         (c:KLSDefLocal) : KLSDefLocal(rename-id(n(c)), value(c))
         (c:KLSDefLocalVar) : KLSDefLocalVar(rename-id(n(c)), type(c), value(c))
         (c:KLSMatch) : KLSMatch(args(c), map(rename-lsbranch, branches(c)), info(c))
         (c:KLSDispatch) : KLSDispatch(args(c), map(rename-lsbranch, branches(c)), info(c))
         (c) : c

   defn rename-lsexp (e:KLSExp) -> KLSExp :
      match(map(rename-lscomm, rename-lsexp, rename-loc, rename-lstype, rename-exp, rename-type, e)) :
         (e:KLSVar) : KLSVar(rename-id(n(e)))
         (e:KLSRef) : KLSRef(rename-id(n(e)), args(e), info(e))
         (e:KLSRefArray) : KLSRefArray(rename-id(n(e)), args(e), info(e))
         (e:KLSStruct) : KLSStruct(rename-id(n(e)), args(e))
         (e:KLSTagof) : KLSTagof(rename-id(n(e)))
         (e:KLSCurry) : KLSCurry(rename-id(n(e)), targs(e), a1(e), a2(e))
         (e) : e

   defn rename-loc (l:KLoc) -> KLoc :
      match(map(rename-lsexp, rename-lstype, rename-loc, l)) :
         (l:KField) : KField(base(l), rename-id(n(l)))
         (l) : l

   defn rename-type (t:KType) -> KType :
      match(map(rename-type, t)) :
         (t:KOf) : KOf(rename-id(n(t)))
         (t:KTVar) : KTVar(rename-id(n(t)))
         (t) : t

   defn rename-lstype (t:KLSType) -> KLSType :
      match(map(rename-type, rename-lstype, t)) :
         (t:KStructT) : KStructT(rename-id(n(t)))
         (t) : t

   rename-comm(c)

;              Convenience Mappers
;              ===================

defn map (fle:KLSExp -> KLSExp, flt:KLSType -> KLSType, fl:KLoc -> KLoc, l:KLoc) :
   match(l) :
      (l:KField) : KField(fl(base(l)), n(l))
      (l) : map(flt, map(fle, l))      
              
defn map (fe:KExp -> KExp, flc:KLSComm -> KLSComm,
          fle:KLSExp -> KLSExp, ft:KType -> KType, flt:KLSType -> KLSType, c:KComm) :
   map{fe, _} $
   map{flc, _} $
   map{fle, _} $
   map{ft, _} $
   map{flt, _} $
   c

defn map (fc:KComm -> KComm, fe:KExp -> KExp, ft:KType -> KType, e:KExp) :
   map{fc, _} $
   map{fe, _} $
   map{ft, _} $
   e

defn map (flc:KLSComm -> KLSComm, fle:KLSExp -> KLSExp, fl:KLoc -> KLoc,
          flt:KLSType -> KLSType, c:KLSComm) :
   match(c) :
      (c:KLSSet) :
         KLSSet(fl(exp(c)), fle(value(c)))
      (c) :
         map{flc, _} $
         map{fle, _} $
         map{flt, _} $
         c

defn map (flc:KLSComm -> KLSComm,
          fle:KLSExp -> KLSExp,
          fl:KLoc -> KLoc,
          flt:KLSType -> KLSType,
          fe:KExp -> KExp,
          ft:KType -> KType,
          e:KLSExp) :
   match(e) :
      (e:KLSPtr) :
         KLSPtr(fl(exp(e)))
      (e:KLSRead) :
         KLSRead(fl(exp(e)))
      (e) :
         map{flc, _} $
         map{fle, _} $
         map{flt, _} $
         map{fe, _} $
         map{ft, _} $
         e

defn map (ft:KType -> KType, flt:KLSType -> KLSType, t:KLSType) :
   map{ft, _} $
   map{flt, _} $
   t

;============================================================
;================ Name Mangling =============================
;============================================================

lostanza deftype BitMap :
   words: long
   length: long
   bits: long ...

lostanza defn CharMap () -> ref<BitMap> :
   val length = 256
   val words = length >>> 6
   val map = new BitMap{words, length}
   for (var i:long = 0, i < words, i = i + 1) :
      map.bits[i] = 0
   return map

lostanza defn get (m:ref<BitMap>, i:ref<Int>) -> ref<True|False> :
   val bit = i.value
   val bit-div-64 = bit >>> 6
   val bit-mod-64 = bit & 63
   val word = m.bits[bit-div-64]
   val v = (word >> bit-mod-64) & 1
   if v : return true
   else : return false

lostanza defn set (m:ref<BitMap>, i:ref<Int>, v:ref<True|False>) -> ref<False> :
   val bit = i.value
   val bit-div-64 = bit >>> 6
   val bit-mod-64 = bit & 63
   val word = m.bits[bit-div-64]
   if v == true :
      m.bits[bit-div-64] = word | (1L << (bit-mod-64 as long))
   else :
      m.bits[bit-div-64] = word & (~ 1L << (bit-mod-64 as long))
   return false

val VALID-FILENAME-CHARS = let :
   val m = CharMap()
   defn add-range (a:Char, b:Char) :
      for i in to-int(a) through to-int(b) do :
         m[i] = true
   defn add-chars (str:String) :
      for c in str do :
         m[to-int(c)] = true
   add-range('0', '9')
   add-range('a', 'z')
   add-range('A', 'Z')
   add-chars("-.")
   m

defn package-filename (name:Symbol) :
   val buffer = StringBuffer()
   for c in to-string(name) do :
      if VALID-FILENAME-CHARS[to-int(c)] :
         add(buffer, c)
      else if c == '/' :
         add(buffer, '$')
      else :
         print(buffer, "_%_" % [to-int(c)])
   print(buffer, ".pkg")
   to-string(buffer)

defn package-filepath (name:Symbol) :
   to-string("%_/pkgs/%_" % [STANZA-INSTALL-DIR, package-filename(name)])

;============================================================
;=================== Drivers ================================
;============================================================

public defn save-pkg (pkg:Pkg) :
   serialize(package-filepath(name(pkg)), pkg)

public defn load-pkg (name:Symbol) :
   println("load-pkg(%~)" % [name]) ;DEBUG
   val pkg = deserialize-pkg(package-filepath(name))
   println("[Loaded]")
   println(pkg)
   val renamed = rename-pkg(pkg)
   println("[Renamed]")
   println(renamed)
   renamed
      
