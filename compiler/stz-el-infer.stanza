defpackage stz/el-infer :
  import core
  import collections
  import stz/el-ir

;============================================================
;==================== Input Specification ===================
;============================================================

public deftype Input
public defmulti blocks (i:Input) -> Seqable<Block>
public defmulti entry-state (i:Input, n:Int) -> EType

public deftype Block
public defmulti n (b:Block) -> Int
public defmulti instructions (b:Block) -> Seqable<Ins>
public defmulti predecessors (b:Block) -> Tuple<Int>

public deftype Ins

public deftype Def <: Ins
public defmulti n (d:Def) -> Int
public defmulti type (d:Def) -> EType

public deftype Inherit <: Ins
public defmulti n (i:Inherit) -> Int
public defmulti inherit (i:Inherit) -> Int

public deftype Cast <: Ins
public defmulti n (c:Cast) -> Int
public defmulti type (c:Cast) -> EType

public deftype Match <: Ins
public defmulti branches (m:Match) -> Tuple<Branch>

public deftype Use <: Ins
public defmulti n (u:Use) -> Int

public defstruct Annotation <: Ins :
  n: Int
  type: EType
defmethod print (o:OutputStream, a:Annotation) :
  print(o, "annotate %_ : %_" % [n(a), type(a)])
  
public deftype Branch
public defmulti n (b:Branch) -> Int
public defmulti casts (b:Branch) -> Tuple<Cast>

;============================================================
;==================== Algorithm =============================
;============================================================

defstruct EnterType <: EType :
  n: Int
  block: Int
with: (printer => true)

defstruct ExitType <: EType :
  n: Int
  block: Int
with: (printer => true)

defn EAnd? (a:EType, b:EType|False) :
  match(b:EType) : EAnd(a, b)
  else : a

defmethod hash (v:EnterType) : hash $ [n(v) block(v)]
defmethod hash (v:ExitType) : hash $ [n(v) block(v)]
defmethod equal? (a:EnterType, b:EnterType) :
  n(a) == n(b) and block(a) == block(b)
defmethod equal? (a:ExitType, b:ExitType) :
  n(a) == n(b) and block(a) == block(b)

defmethod map (f:ELItem -> ELItem, item:EnterType|ExitType) : item
  
public defn infer (input:Input) -> Collection<Ins> :
  val vartable = HashTable<EType, EType>()  
  val edge-cast = HashTable<[Int, Int, Int], EType>()
  val predecessors-table = IntTable<Tuple<Int>>()
  val soln-table = HashTable<EType,EType>()
  val soln-ordering = Vector<EType>()
  val var-queue = Queue<EnterType|ExitType>()
  var block0

  ;Driver
  defn driver () :
    val ins = build-equations()
    solve()
    ins

  ;Add all variables in type to queue
  defn add-all-vars-to-queue (t:EType) :
    match(t:EnterType|ExitType) : add(var-queue, t)
    else : do*(add-all-vars-to-queue, t)

  ;Create an annotation statement
  defn make-annotation (n:Int, t:EType) :
    add-all-vars-to-queue(t)
    new Annotation :
      defmethod n (this) : n
      defmethod type (this) : sub-solns(t, false)

  ;Build up equations
  defn build-equations () :
    val buffer = Vector<Ins>()
    for (block in blocks(input), i in 0 to false) do :
      if i == 0 : block0 = n(block)
      val state = IntTable-init<EType>(EnterType{_, n(block)})
      for ins in instructions(block) do :
        match(ins) :
          (ins:Def) :
            add(buffer, ins)
            state[n(ins)] = type(ins)
          (ins:Inherit) :
            add(buffer, ins)
            state[n(ins)] = state[inherit(ins)]
          (ins:Cast) :
            add(buffer, ins)
            state[n(ins)] = EAnd(state[n(ins)], type(ins))
          (ins:Match) :
            add(buffer, ins)
            for b in branches(ins) do :
              for c in casts(b) do :
                edge-cast[[n(block), n(b), n(c)]] = type(c)
          (ins:Use) :
            add(buffer, make-annotation(n(ins), state[n(ins)]))
          (ins) :
            add(buffer, ins)
      for entry in state do :
        vartable[ExitType(key(entry), n(block))] = value(entry)
      predecessors-table[n(block)] = predecessors(block)
    buffer  

  ;Retrieve type of variable
  defn var-type (v:EType) :
    if key?(vartable, v) :
      vartable[v]
    else :
      match(v) :
        (v:EnterType) :
          if block(v) == block0 :
            entry-state(input, n(v))
          else :          
            val ts = for p in predecessors-table[block(v)] seq :
              val cast = get?(edge-cast, [p, block(v), n(v)])
              EAnd?(ExitType(n(v), p), cast)
            reduce(EOr, ts)
        (v:ExitType) :
          EnterType(n(v), block(v))

  ;Solve solutions
  ;Recursively substitute variables.
  ;Normalize after each substitution to keep size down.
  defn sub-solns-recur (t:EType) :
    ;Perform one layer of substitutions.
    defn sub1 (t:EType) -> EType|False :
      var progress?:True|False = false
      val t* = let loop (t:EType = t) :
        match(t:EnterType|ExitType) :
          if key?(soln-table, t) :
            progress? = true
            soln-table[t]
          else : t
        else :
          map(loop, t)
      t* when progress?

    ;Launch!
    let loop (t:EType = t) :
      match(sub1(t)) :
        (t:EType) : loop(normalize(t))
        (f:False) : t   
    
  defn sub-solns (t:EType, recur?:True|False) :
    let loop (t:EType = t) :
      match(t) :
        (t:EnterType|ExitType) :
          match(get?(soln-table, t)) :
            (t*:EType) :
              if recur? : loop(t*)
              else : t*
            (_:False) :
              t
        (t) :
          map(loop, t)

  ;Substitute known solutions and put it in solution table.
  ;Return new substituted type.
  defn forward-solve (v:EType) :
    val t = var-type(v)
    soln-table[v] = EBot()
    val subbed = sub-solns-recur(t)
    val t* = normalize(subbed)
    soln-table[v] = t*
    add(soln-ordering, v)
    t*

  ;Hold variables to process
  defn solve () :
    ;Forward substitute
    while not empty?(var-queue) :
      val v = pop(var-queue)
      if not key?(soln-table,v) :
        add-all-vars-to-queue(forward-solve(v))

    ;println("Forward substitution:")
    ;within indented() :
    ;  for v in soln-ordering do :
    ;    println(v => soln-table[v])

    ;Back substitute
    for v in in-reverse(soln-ordering) do :
      val t = soln-table[v]
      soln-table[v] = normalize(sub-solns(t, false))

    ;println("Backwards substitution:")
    ;within indented() :
    ;  for v in soln-ordering do :
    ;    println(v => soln-table[v])

  ;Launch
  driver()
  