defpackage stz/type-utils :
  import core
  import collections
  import stz/types
  import stz/type-fargs

;============================================================
;====================== Blockers ============================
;============================================================

;Used to represent that an operation could not complete to
;due some variables being unknown.
public defstruct Blocked:
  vars:List<Int>

;Convenience for single-variable case.
public defn Blocked (n:Int) -> Blocked :
  Blocked(List(n))

;Helper: Append the type variables in the Blocked structs.
public defn append (a:Blocked, b:Blocked) -> Blocked :
  Blocked(append(vars(a), vars(b)))

;If the given type is not resolved, return Blocked
;containing all the non-resolved variables.
public defn blocked? (t:LSType|Type) -> Blocked|False :
  val vs = Vector<Int>()
  let loop (t:TypeItem = t) :
    match(t:TVar|UVarT) : add(vs,n(t))
    else : do(loop,t)
  Blocked(to-list(vs)) when not empty?(vs)

;If the given types are not resolved, return Blocked
;containing all the non-resolved variables.
public defn blocked? (ts:Tuple<LSType|Type>) -> Blocked|False :
  val vs = Vector<Int>()
  for t in ts do :
    let loop (t:TypeItem = t) :
      match(t:TVar|UVarT) : add(vs,n(t))
      else : do(loop,t)
  Blocked(to-list(vs)) when not empty?(vs)

;============================================================
;===================== Simplifiers ==========================
;============================================================

;Eliminates redundancy in TOr, and TAnd types.
public defn simplify (t:Type) -> Type :
  match(t) :
    (t:TOr) :
      val ts = simplified-or-types(t)
      if empty?(ts) : TBot()
      else : reduce(TOr,ts)
    (t:TAnd) :
      val ts = simplified-and-types(t)
      if empty?(ts) : TTop()
      else : reduce(TAnd,ts)
    (t) :
      map-type(simplify, t)

;Call simplify on nested HiStanza types.
public defn simplify (t:LSType) -> LSType :
  match(t:RefT) : RefT(simplify(type(t)))
  else : map(simplify{_ as LSType}, t)

;Simplify the given and types.
defn simplified-and-types (t:TAnd) -> Tuple<Type> :
  label<Tuple<Type>> return :
    val table = HashSet<Type>()
    let loop (t:Type = t) :
      match(t:TAnd) :
        loop(a(t))
        loop(b(t))
      else :
        match(simplify(t)) :
          (st:TTop) : false
          (st:TBot) : return([TBot()])
          (st) : add(table,st)
    to-tuple(table)

;Simplify the given or types.
defn simplified-or-types (t:TOr) -> Tuple<Type> :
  label<Tuple<Type>> return :
    val table = HashSet<Type>()
    let loop (t:Type = t) :
      match(t:TOr) :
        loop(a(t))
        loop(b(t))
      else :
        match(simplify(t)) :
          (st:TTop) : return([TTop()])
          (st:TBot) : false
          (st) : add(table,st)
    to-tuple(table)

;============================================================
;=================== Substitute Variables ===================
;============================================================

;Perform the given substitutions into the given type.
public defn sub (t:Type, env:Seqable<KeyValue<Int, Type>>) -> Type :
  ;Sanity check.
  if not user-type?(t,false) :
    fatal("Illegal type for substitution: %_." % [t])
  sub-with-table(t, to-inttable<Type>(env)) as Type

;Convenience: Perform on multiple types.
public defn sub (ts:Tuple<Type>, env:Seqable<KeyValue<Int, Type>>) -> Tuple<Type> :
  val table = to-inttable<Type>(env)
  for t in ts map :
    ;Sanity check.
    if not user-type?(t,false) :
      fatal("Illegal type for substitution: %_." % [t])
    sub-with-table(t, table) as Type

;Perform the given substitutions into the given type.
public defn sub (t:LSType, env:Seqable<KeyValue<Int, Type|LSType>>) -> LSType :
  sub-with-table(t, to-inttable<Type|LSType>(env)) as LSType

;Convenience: Perform on multiple types.
public defn sub (ts:Tuple<LSType>, env:Seqable<KeyValue<Int, Type|LSType>>) -> Tuple<LSType> :
  val table = to-inttable<Type|LSType>(env)
  for t in ts map :
    sub-with-table(t, table) as LSType

;Perform the given substitutions into the given type, treating
;captures specially.
;It is assumed that if value(entry) is Int, then it is the identifier
;of a TUVar.
public defn sub-caps (t:Type, env:Seqable<KeyValue<Int,Type|Int>>) -> Type :
  ;Sanity check.
  if not fnarg-type?(t,false) :
    fatal("Illegal type for substitution: %_." % [t])
  sub-caps-with-table(t, to-inttable<Type|Int>(env)) as Type

;Convenience: Perform on multiple types.
public defn sub-caps (ts:Tuple<Type>, env:Seqable<KeyValue<Int,Type|Int>>) -> Tuple<Type> :
  val table = to-inttable<Type|Int>(env)
  for t in ts map :
    ;Sanity check.
    if not fnarg-type?(t,false) :
      fatal("Illegal type for substitution: %_." % [t])
    sub-caps-with-table(t, table) as Type

;Perform the given substitutions into the given type, treating
;captures specially.
;It is assumed that if value(entry) is Int, then it is the identifier
;of a TUVar.
public defn sub-caps (t:LSType, env:Seqable<KeyValue<Int,Type|Int>>) -> LSType :
  sub-caps-with-table(t, to-inttable<Type|Int>(env)) as LSType

;Convenience: Perform on multiple types.
public defn sub-caps (ts:Tuple<LSType>, env:Seqable<KeyValue<Int,Type|Int>>) -> Tuple<LSType> :
  val table = to-inttable<Type|Int>(env)
  for t in ts map :
    sub-caps-with-table(t, table) as LSType

;Perform the given substitution on the given type.
defn sub-with-table (t:TypeItem,
                     table:IntTable<Type|LSType>) -> TypeItem :
  match(t) :
    (t:TVar) : get?(table, n(t), t) as Type
    (t:UVarT) : get?(table, n(t), t) as LSType
    (t) : map(sub-with-table{_, table}, t)

;Perform a capture variable substitution on the given type.
defn sub-caps-with-table (t:TypeItem,
                          table:IntTable<Type|Int>) -> TypeItem :
  match(t) :
    (t:TVar) :
      match(get?(table,n(t))) :
        (t:Type) : t
        (n:Int) : TUVar(n)
        (f:False) : t
    (t:TCap) :
      match(get?(table,n(t))) :
        (t:Type) : t
        (n:Int) : TCap(n,false)
        (f:False) : t
    (t) :
      map(sub-caps-with-table{_, table}, t)

;============================================================
;================== Uncap Types =============================
;============================================================

;Convert all captured variables to TVar.
public defn uncap (t:Type) -> Type :
  match(t:TCap) : TVar(n(t),false)
  else : map-type(uncap, t)

;Convert all captured variables to TVar.
public defn uncap (t:LSType) -> LSType :
  match(t:RefT) : RefT(uncap(type(t)))
  else : map(uncap{_ as LSType}, t)

;============================================================
;============ HiStanza/LoStanza Conversion ==================
;============================================================

;Translate a LoStanza type into a HiStanza type.
public defn to-histanza (t:LSType) -> Type|False :
  match(t) :
    (t:RefT) :
      type(t)
    (t:TLSFunction) :
      val new-a1 = map(to-hs-arg, a1(t))
      val new-a2 = to-histanza(a2(t))
      if none?({_ is False}, new-a1) and new-a2 is Type :
        TFunction(targs(t), cargs(t), new-a1 as Tuple<FArg<Type>>, new-a2 as Type)
    (t) :
      false

;Helper: Translate a LoStanza argument into a HiStanza argument.
defn to-hs-arg (a:FArg<LSType>) -> FArg<Type>|False :
  match(to-histanza(type(a))) :
    (t:Type) : sub-type(a,t)
    (f:False) : false
      
;Translate a HiStanza function into a LoStanza function.
public defn to-lostanza (t:TFunction) -> TLSFunction :
  val new-a1 = map(to-ls-arg, a1(t))
  val new-a2 = RefT(a2(t))
  TLSFunction(targs(t), cargs(t), new-a1, new-a2)

;Helper: Translate a HiStanza argument into a LoStanza argument.
defn to-ls-arg (a:FArg<Type>) -> FArg<LSType> :
  map(RefT, a)

;============================================================
;==================== Statistics ============================
;============================================================

;The number of bytes used to represent the given LoStanza type.
public defn primitive-size (t:LSType) -> Int :
   match(t) :
      (t:ByteT) : 1
      (t:IntT) : 4
      (t:LongT) : 8
      (t:FloatT) : 4
      (t:DoubleT) : 8
      (t:PtrT|RefT) : 8

;Return true if 't' is a fully resolved type.
public defn resolved? (t:Type|LSType) -> True|False :
  let loop (item:TypeItem = t) :
    match(item) :
      (item:TUVar|UVarT) : false
      (item) : all?(loop, item)