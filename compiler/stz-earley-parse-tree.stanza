defpackage stz/earley-parse-tree :
  import core
  import collections
  import stz/earley-eitems
  import stz/earley-grammar

;============================================================
;===================== Main Algorithm =======================
;============================================================

public defn parse (grammar:Grammar, setlist:ESetList) -> ParseNode :
  val forest = ParseForest(grammar, setlist)
  select-tree(grammar, forest)

;============================================================
;==================== Output Datastructures =================
;============================================================

public defstruct ParseNode :
  range: ParsedRange
  children: Tuple<ParseNode|Int>

public defstruct ParsedRange <: HasParts :
  rule: Int
  start: Int
  end: Int
with:
  printer => true

defmethod parts (r:ParsedRange) :
  [`ParsedRange, rule(r), start(r), end(r)]

public defn length (r:ParsedRange) :
  end(r) - start(r)

;============================================================
;===================== Utilities ============================
;============================================================

;Represents token at the given index in a specific
;rule starting at a given position.
defstruct ParsedToken <: HasParts :
  rule: Int
  rule-start: Int
  token-index: Int
with:
  printer => true

defmethod parts (t:ParsedToken) :
  [`ParsedToken, rule(t), rule-start(t), token-index(t)]

;Represents a matched terminal at a given position.
defstruct ParsedTerminal <: HasParts :
  terminal: GTerminal
  position: Int
with:
  printer => true

defmethod parts (t:ParsedTerminal) :
  [`ParsedTerminal, terminal(t), position(t)]

;Represents a parsed production between a given
;start and end position.
defstruct ParsedProd <: HasParts :
  prod: Int
  start: Int
  end: Int
with:
  printer => true

defmethod parts (t:ParsedProd) :
  [`ParsedProd, prod(t), start(t), end(t)]

;============================================================
;================== Simple Hash =============================
;============================================================

deftype HasParts <: Hashable & Equalable
defmulti parts (p:HasParts) -> Tuple
defmethod hash (p:HasParts) : hash(parts(p))
defmethod equal? (a:HasParts, b:HasParts) : parts(a) == parts(b)

;============================================================
;====================== Debugging ===========================
;============================================================

public defn format (grammar:Grammar, r:ParsedRange) :
  "(rule %_) [%_ to %_] %_" % [rule(r), start(r), end(r), format(grammar,grammar[rule(r)])]

public defn format (grammar:Grammar, node:ParseNode) :
  within o = Printable() :
    print(o, format(grammar, range(node)))
    val o2 = IndentedStream(o)
    do(lnprint{o2, format(grammar,_)}, filter-by<ParseNode>(children(node)))

defn Printable (f:OutputStream -> ?) :
  new Printable :
    defmethod print (o:OutputStream, this) :
      f(o)

;============================================================
;=================== New Parse Forest =======================
;============================================================

;Representation of a Parse Forest.
deftype ParseForest

;Answers the query:
;Given:
;- The parent parsed range (a range of input parsed using some rule),
;- The index of the token (assumed to be a production) in the rule,
;_ The starting position of this token,
;Return:
;- All potential ends for the parsed range corresponding to that token, sorted
;  in decreasing order.
defmulti ends (f:ParseForest, range:ParsedRange, token-index:Int, token-start:Int) -> Seqable<Int>

;Returns true if the given terminal matches the input at the given
;position.
defmulti match? (f:ParseForest, term:GTerminal, position:Int) -> True|False

;Given:
;- A production,
;- A start and end position,
;Return:
;- All possible parses for production in that range of input.
defmulti get (f:ParseForest, prod:Int, start:Int, end:Int) -> List<ParsedRange>

;Retrieve the root ParsedRange representing the forest.
defmulti start (f:ParseForest) -> ParsedRange

;Construct a parse forest from an Earley setlist.
defn ParseForest (grammar:Grammar, setlist:ESetList) -> ParseForest :
  ;For all parsed tokens (that are not at the end of a rule),
  ;record their ending position.
  val prod-ends = HashTable<ParsedToken, List<Int>>(List())

  ;Holds the set of all of the matched terminals.
  val terminal-set = HashSet<ParsedTerminal>()

  ;For all completed productions, record the rule
  ;they were parsed with.
  val prod-rules = HashTable<ParsedProd,List<Int>>(List())

  ;If an index exists in prod-calculated, then the appropriate
  ;entries in that set has been added to prod-rules.
  val prod-calculated = IntSet()

  ;Compute the prod-ends table.
  defn compute-prod-ends () :
    ;Iterate through setlist.
    for eset in sets(setlist) do :
      ;Scan through items in list to build production rules.
      for item in items(setlist, eset) do :
        match(previous(grammar,item)) :
          (prev:GProduction) :
            if upcoming(grammar,item) is-not False :
              val rule = rule(item)
              val rule-start = parent(item)
              val token-index = num-parsed(item) - 1
              val token-end = index(eset)
              val parsed-token = ParsedToken(rule, rule-start, token-index)
              update(prod-ends, cons{token-end, _}, parsed-token)
          (prev:GTerminal) :
            val token-position = index(eset) - 1
            val parsed-terminal = ParsedTerminal(prev, token-position)
            add(terminal-set, parsed-terminal)
          (f:False) :
            false

  ;Retrieve the rules that can successfully parse
  ;the given production between tokens start and end.
  defn get-prod-rules (prod:Int, start:Int, end:Int) -> List<Int> :
    compute-prod-rules(end)
    prod-rules[ParsedProd(prod, start, end)]

  ;If not already computed, process each item
  ;in the given set, and add its entries to the
  ;prod-rules table.
  defn compute-prod-rules (set-index:Int) :
    if add(prod-calculated, set-index) :
      val eset = setlist[set-index]
      for item in items(setlist, eset) do :
        if upcoming(grammar,item) is False :
          add-prod-rule(item, index(eset))
          if completion-root(item) is-not False :
            within item = expand-completion-item(item) :
              add-prod-rule(item, index(eset))

  ;Add the given completion (in set 'end') to the
  ;prod-rules table.
  defn add-prod-rule (item:EItem, end:Int) :
    val prod = production(grammar,item)
    val rule = rule(item)
    val start = parent(item)
    val parsed-prod = ParsedProd(prod, start, end)
    update(prod-rules, cons{rule, _}, parsed-prod)

  ;Given the completed item with completion root,
  ;Return the entire chain of expanding the items not including the
  ;final root.
  defn expand-completion-item (return:EItem -> ?, item:EItem) :
    val root-core = core(item)
    let loop (x:EItem = completion-root(item) as EItem) :
      if core(x) != root-core :
        return(x)
        val x* = first-item(setlist, parent(x), production(grammar,x))
        loop(inc-num-parsed(x* as EItem, false))

  ;Returns true if token at given index is the last production
  ;in the given rule.
  defn last-production? (rule:Int, index:Int) -> True|False :
    val tokens = tokens(grammar[rule])
    for i in (index + 1) to length(tokens) none? :
      tokens[i] is GProduction

  ;Compute all tables
  compute-prod-ends()

  ;Return constructed Parse Forest.
  new ParseForest :
    defmethod start (this) :
      ;The last input is the EndOfInput token, and is where
      ;the starting rule ends.
      ParsedRange(0, 0, length(setlist) - 1)
      
    defmethod ends (this, range:ParsedRange, token-index:Int, token-start:Int) :
      ;Returns true if the current token can be parsed between
      ;token-start and the given end. 
      val tokens = tokens(grammar[rule(range)])
      val prod = tokens[token-index] as GProduction
      defn feasible-end? (end:Int) -> True|False :
        not empty?(get-prod-rules(id(prod), token-start, end))

      ;Retrieve candidate ends.
      val candidate-ends =
        if last-production?(rule(range), token-index) :
          val num-tokens = length(tokens)
          val num-trailing-terminals = num-tokens - (token-index + 1)
          List(end(range) - num-trailing-terminals)
        else :
          val token = ParsedToken(rule(range), start(range), token-index)
          prod-ends[token]

      ;Filter out the unfeasible ends
      filter(feasible-end?, candidate-ends)
      
    defmethod match? (this, term:GTerminal, position:Int) :
      terminal-set[ParsedTerminal(term, position)]
      
    defmethod get (this, prod:Int, start:Int, end:Int) :
      for rule in get-prod-rules(prod,start,end) map :
        ParsedRange(rule, start, end)

;============================================================
;================ Selecting the Parse Tree ==================
;============================================================

;------------------------------------------------------------
;--------------------- LazyParseNode ------------------------
;------------------------------------------------------------
;A LazyParseNode is a ParseNode whose children are lazily computed
;using a ParsedRange -> ParseNode function.
defn LazyParseNode (range:ParsedRange, compute-children:ParsedRange -> Tuple<ParseNode|Int>) :
  ;Cache the computed children
  var children:Maybe<Tuple<ParseNode|Int>> = None()
  defn children! () :
    if empty?(children) :
      children = One(compute-children(range))
    value!(children)

  ;Return the lazy parse node
  new ParseNode :
    defmethod range (this) : range
    defmethod children (this) : children!()

;------------------------------------------------------------
;-------------------- Select Tree ---------------------------
;------------------------------------------------------------
defn select-tree (grammar:Grammar, forest:ParseForest) -> ParseNode :
  ;Compute the children nodes for the given parsed range.
  defn compute-children (range:ParsedRange) -> Tuple<ParseNode|Int> :
    val grule = grammar[rule(range)]
    ;Compute the parsed nodes for all tokens at and after the token
    ;at the given index starting from the given input position.
    ;If there is no valid parse starting from that position, then None()
    ;is returned.
    defn compute (index:Int, position:Int) -> Maybe<List<ParseNode|Int>> :
      if index < length(tokens(grule)) :
        match(tokens(grule)[index]) :
          (t:GProduction) :
            val ends = ends(forest, range, index, position)
            val end-entry = for end in ends first :
              val rest = compute(index + 1, end)
              if empty?(rest) : None()
              else : One(end => value!(rest))
            if empty?(end-entry) :
              None()
            else :
              val end = key(value!(end-entry))
              val rest = value(value!(end-entry))
              val ranges = forest[id(t), position, end]
              val node = most-specific(seq(select, ranges))
              One(cons(node, rest))
          (t:GTerminal) :
            if match?(forest, t, position) :
              val result = compute(index + 1, position + 1)
              if empty?(result) : None()
              else : One(cons(position, value!(result)))
            else :
              None()
      else :
        fatal("Inconsistent end.") when position != end(range)
        One(List())
    to-tuple(value!(compute(0, start(range))))

  ;Compute the appropriate parse node for the give range.
  defn select (range:ParsedRange) -> ParseNode :
    val grule = grammar[rule(range)]
    if params(grule) is InheritParams :
      compute-children(range)[0] as ParseNode
    else :
      LazyParseNode(range, compute-children)

  ;Select the most specific parse node
  defn most-specific (nodes:Seqable<ParseNode>) -> ParseNode :
    defn more-specific? (a:ParseNode, b:ParseNode) -> True|False :
      compare-specificity(grammar, a, b) < 0
    minimum(nodes, more-specific?)

  ;Launch!
  select(start(forest))

;------------------------------------------------------------
;---------- Compare which ParseNode is more specific --------
;------------------------------------------------------------

;Return -1 if a should take priority over b during a left-to-right disambiguation sweep of the parse forest.
defn compare-specificity (grammar:Grammar, a:ParseNode, b:ParseNode) -> Int :
  ;Retrieve properties of parse nodes a and b.
  val range-a = range(a)
  val range-b = range(b)
  val rule-a = grammar[rule(range-a)]
  val rule-b = grammar[rule(range-b)]
  val params-a = params(rule-a) as TokenRuleParams
  val params-b = params(rule-b) as TokenRuleParams

  ;Compute the lengths of the first and last child
  ;in the given nodes.
  defn child-length (cs:Tuple<ParseNode|Int>, i:Int) -> Int :
    if empty?(cs) :
      0
    else :
      match(cs[i]) :
        (c:Int) : 1
        (c:ParseNode) : length(range(c))
  defn first-child-length (n:ParseNode) -> Int :
    val cs = children(n)
    child-length(cs, 0)
  defn last-child-length (n:ParseNode) -> Int :
    val cs = children(n)
    val l = length(cs)
    child-length(cs, l - 1)

  ;Comparison functions ordered by importance.
  defn compare-length () :
    compare(length(range-b), length(range-a))
  defn compare-priority () :
    compare(priority(params-b), priority(params-a))
  defn compare-associativity () :
    compare(associativity(params-a), associativity(params-b))
  defn compare-associativity-length () :
    match(associativity(params-a), associativity(params-b)) :
      (aa:NonAssociative, ab:NonAssociative) :
        0
      (aa:LeftAssociative, ab:LeftAssociative) :
        compare(first-child-length(b), first-child-length(a))
      (aa:RightAssociative, ab:RightAssociative) :
        compare(last-child-length(b), last-child-length(a))
  defn compare-order () :
    compare(order(rule-a) as Int, order(rule-b) as Int)

  ;Call comparison functions in order.
  val c0 = compare-length()
  if c0 == 0 :
    val c1 = compare-priority()
    if c1 == 0 :
      val c2 = compare-associativity()
      if c2 == 0 :
        val c3 = compare-associativity-length()
        if c3 == 0 :
          compare-order()
        else : c3
      else : c2
    else : c1
  else : c0
