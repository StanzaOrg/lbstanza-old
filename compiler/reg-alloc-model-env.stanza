defpackage stz/reg-alloc-model-env :
  import core
  import collections
  import stz/reg-alloc-ir
  import stz/reg-alloc-model-properties

;============================================================
;======================== API ===============================
;============================================================

;Abstract interface that provides informations about models.
public deftype ModelEnv

;Retrieve the number of models in the environment.
public defmulti num-models (env:ModelEnv) -> Int

;Retrieve the model with the given id.
public defmulti model (env:ModelEnv, id:Int) -> OperationModel

;Retrieve the properties of the model with the given id.
public defmulti model-properties (env:ModelEnv, id:Int) -> ModelProperties

;Return the used registers for the given operation under the given usage context.
public defmulti used-registers (env:ModelEnv, op-id:Int, ctxt:UsageContext) -> UsedRegisters

;============================================================
;====================== Functions ===========================
;============================================================

;Forward functions to the model property.
#for f in [returns?, clears-registers?, arg-types, result-types,
           forced-release?, any-forced-release?] :
  public defn f (env:ModelEnv, id:Int) :
    f(model-properties(env, id))

;Return true if the operation 'op-id' requires argument 'arg-index'
;to be released in order to function correctly.
public defn forced-release? (env:ModelEnv, op-id:Int, arg-index:Int) -> True|False :
  forced-release?(env, op-id)[arg-index]

;Return the number of temporaries.
public defn num-temps (env:ModelEnv, op-id:Int) -> Int :
  length(temp(model(env,op-id)))

;Helper: Return the tuple of locations required by the temporaries of an operation.
public defn temp-locations (env:ModelEnv, op-id:Int) -> Seqable<Location> :
  val m = model(env, op-id)
  seq(location, temp(m))

;Helper: Return the tuple of locations required by the arguments of an operation.
public defn arg-locations (env:ModelEnv, op-id:Int) -> Seqable<Location> :
  val m = model(env, op-id)
  seq(location, args(m))

;Helper: Return the tuple of locations required by the results of an operation.
public defn result-locations (env:ModelEnv, op-id:Int) -> Seqable<Location> :
  val m = model(env, op-id)
  seq(location, results(m))

;Helper: Returns the sequence of required registers by the temporaries of an operation.
public defn temp-registers (env:ModelEnv, op-id:Int) -> Seqable<Register> :
  filter-by<Register>(temp-locations(env,op-id))

;Helper: Return the sequence of required registers by the arguments of an operation.
public defn arg-registers (env:ModelEnv, op-id:Int) -> Seqable<Register> :
  filter-by<Register>(arg-locations(env,op-id))

;Helper: Return the sequence of required registers by the results of an operation.
public defn result-registers (env:ModelEnv, op-id:Int) -> Seqable<Register> :
  filter-by<Register>(result-locations(env,op-id))