defpackage stz/bindings :
  import core
  import collections
  ;import macro-utils
  ;import reader
  ;import parser
  ;import stz/core-macros
  import stz/vm-ir

;============================================================
;=================== Bindings Structure =====================
;============================================================

public defstruct Bindings :
  externs: Tuple<ExternBinding>
  extern-defns: Tuple<ExternDefnBinding>

public defstruct ExternDefnBinding :
  lbl: Symbol
  a1: Tuple<VMType>
  a2: VMType

public defstruct ExternBinding :
  lbl: Symbol

defmethod print (o:OutputStream, b:Bindings) :
  print(o, "%n" % [cat(externs(b), extern-defns(b))])

defmethod print (o:OutputStream, e:ExternBinding) :
  print(o, "extern %~" % [lbl(e)])

defmethod print (o:OutputStream, e:ExternDefnBinding) :
  print(o, "extern defn %~: (%,) -> %_" % [lbl(e), a1(e), a2(e)])

;============================================================
;===================== Signature Utility ====================
;============================================================

public defstruct ExDefnSignature <: Hashable&Equalable :
  a1: Tuple<VMType>
  a2: VMType
defmethod hash (x:ExDefnSignature) :
  hash $ [a1(x), a2(x)]
defmethod equal? (x:ExDefnSignature, y:ExDefnSignature) :
  a1(x) == a1(y) and a2(x) == a2(y)
defmethod print (o:OutputStream, t:ExDefnSignature) :
  print(o, "(%,) -> %_" % [a1(t), a2(t)])

public defn signature (e:ExternDefnBinding) :
  ExDefnSignature(a1(e), a2(e))

;============================================================
;======================= Reader =============================
;============================================================
;
;public defn read-bindings (filename:String) -> Bindings :
;  parse-syntax[extern-bindings / #bindings](read-file(filename))
;
;;============================================================
;;===================== Syntax ===============================
;;============================================================
;
;defsyntax extern-bindings :
;  import (id!) from core
;  
;  defproduction entry! : ExternDefnBinding|ExternBinding
;  defrule entry! = (extern defn ?name:#id!: (?a1:#type! ...) -> ?a2:#type!) :
;    ExternDefnBinding(unwrap-token(name), to-tuple(a1), a2)
;  defrule entry! = (extern ?name:#id!) :
;    ExternBinding(unwrap-token(name))
;  fail-if entry! = () :
;    ReadBindingError(closest-info(), "Expected an extern declaration here.")
;
;  defproduction type : VMType
;  defrule type = (byte) : VMByte()
;  defrule type = (int) : VMInt()
;  defrule type = (long) : VMLong()
;  defrule type = (float) : VMFloat()
;  defrule type = (double) : VMDouble()
;  defrule type = (ptr<_ ...>) : VMLong()
;  defrule type = (ref<_ ...>) : VMRef()
;
;  defproduction type! : VMType
;  defrule type! = (?x:#type) : x
;  fail-if type! = () : ReadBindingError(closest-info(), "Expected a type here.")
;
;  public defproduction bindings : Bindings
;  defrule bindings = (?es:#entry! ...) :
;    Bindings(
;      to-tuple(filter-by<ExternBinding>(es))
;      to-tuple(filter-by<ExternDefnBinding>(es)))
;
;;============================================================
;;====================== Exception ===========================
;;============================================================
;
;public defstruct ReadBindingError <: Exception :
;  info: FileInfo|False
;  msg: String
;
;defmethod print (o:OutputStream, e:ReadBindingError) :
;  print(o, "%_: " % [info(e)]) when info(e) is-not False    
;  print(o, msg(e))