defpackage stz/reg-alloc-assignment :
  import core
  import collections
  import stz/reg-alloc-ir
  import stz/reg-alloc-ports
  import stz/reg-alloc-engine
  import stz/reg-alloc-block-engine

;<doc>=======================================================
;======================= Algorithm ==========================
;============================================================

Sweep through the instructions in forward order:

Keep a table mapping variables to assigned registers.

Keep a scratch array mapping temporaries to assigned registers.

Keep a table indicating which variables are saved.

Processing the input ports:

Each input port contains an optional 'pref-reg' field that indicates
which register it prefers to be in. For the ports that prefer to be
loaded, and have preferred registers, and where the registers are
free, assign the variable to those registers. Then, afterwards, assign
arbitrary remaining registers to the remaining variables. Use sanity
checks to ensure that the allocation pass guaranteed there are exactly
enough registers.

Processing OperationStmt:

For the operations, we have to choose registers for:
- Arguments
- Temporaries
- Results

Note that we need to choose registers for the arguments first,
and then we need to interpret the model itself. The model
will indicate when registers are released, and when registers
are assigned. The model statements of interest are: Release,
Assign, ClearRegisters. 

  Choosing Registers for Arguments:

  In the common case, the registers will have already been chosen
  for the arguments at this time, so we just need to record it.

  In special cases, the operation model dictates specific registers
  to use. In this case we need the shuffling engine.

  Processing Release:

  Determine whether the argument is killed. If it is, then release
  it from the table.

  Processing Assign to a Temporary:

  Retrieve the preferred register for the temporary. If it is
  possible, then assign that as the register. This can be recorded
  in the scratch array.

  Processing Assign to a Result:

  Retrieve the preferred register for the result. The preferred
  register can come from two places: the preferred target register
  as calculated during the annotation pass, and the preference
  as given by the Assign statement itself.

  Processing ClearRegisters:

  Remove all variables in the table. Remove all assigned
  temporaries in the scratch array.

By the end of the operation, the result registers will have
been assigned, and we can record the final assignment, and
emit an AssignedOperationStmt.

For each of the results, indicate that they are no longer
saved so that the save table remains up-to-date.

Processing Save:

Record this in the table so that we can use this information
in the shuffling engine.

Processing Load:

Retrieve the preferred register for the load. Use a sanity
check to ensure that the variable hasn't already been loaded.
Then assign the register to the variable.

Processing Unload:

Remove the assignment for the given variable. Use a sanity
check to ensure that the variable was actually assigned.

;============================================================
;=======================================================<doc>

public defn assign-registers (e:BlockEngine,
                              num-regs:Int,
                              num-fregs:Int) :
  fatal("Not yet implemented")