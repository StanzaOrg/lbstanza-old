defpackage stz/type-hierarchy :
  import core
  import collections
  import stz/types

;============================================================
;========================== API =============================
;============================================================

;Represents the type hierarchy.
public deftype TypeHierarchy

;Retrieve all the relations in the hierarchy.
public defmulti relations (h:TypeHierarchy) -> Tuple<TypeRelation>

;Retrieve the type arity of the given type.
public defmulti type-arity (h:TypeHierarchy, n:Int) -> Int

;Retrieve the parents of a given type.
public defmulti parents (h:TypeHierarchy, t:TOf) -> Tuple<TOf>

;Return the identifier of the given special type.
public defmulti special-type (h:TypeHierarchy, t:SpecialType) -> Int

;Represents a single type relation.
public defstruct TypeRelation :
  n:Int
  special:SpecialType|False
  args:Tuple<Int>
  parent:Type|False
  fields:Tuple<Field>

;Represents a LoStanza field.
public defstruct Field :
  name: Symbol
  type: LSType
  mutable?: True|False

;Represent the special type.
public defenum SpecialType :

  ;Tuple collapsing uses this.
  CoreTuple

  ;Types of literal values.
  CoreByte
  CoreChar
  CoreInt
  CoreLong
  CoreFloat
  CoreDouble
  CoreString
  CoreSymbol
  CoreList
  CoreTrue
  CoreFalse

;============================================================
;===================== Class Entry ==========================
;============================================================

;Represents one class.
defstruct Class :
  n:Int
  arity:Int
  parents:Tuple<TOf>

;Create a class from a relation.
defn Class (r:TypeRelation) -> Class :

  ;Create the mapping from argument ids to indices.
  val arg-indices = to-inttable<Int> $
    seq(KeyValue, args(r), 0 to false)

  ;Resolve the argument variables in the parent.
  defn resolve-args (t:Type) -> Type :
    match(t:TVar)  : TVar(arg-indices[n(t)], false)
    else : map(resolve-args{_ as Type}, t)    

  ;Resolve and collect parents.
  val parents = Vector<TOf>()
  let loop (p:Type|False = parent(r)) :
    match(p) :
      (p:TAnd) :
        loop(a(p))
        loop(b(p))
      (p:TOf) :
        add(parents, resolve-args(p) as TOf)
      (p:False) :
        false

  ;Return the class entry.
  Class(n(r), length(args(r)), to-tuple(parents))

;Compute the parents of this class.
defn parents (c:Class, t:TOf) -> Tuple<TOf> :
  ;Sanity check.
  if length(args(t)) != arity(c) :
    fatal("Mismatched arity.")

  ;Substitute the args in the TOf into the given type.
  defn sub-args (x:Type) -> Type :
    match(x:TVar) : args(t)[n(x)]
    else : map(sub-args{_ as Type}, x)

  ;Substitute the arguments into the parents.
  map({sub-args(_) as TOf}, parents(c))

;============================================================
;===================== Create the Hierarchy =================
;============================================================

;Create a new type hierarchy.
public defn TypeHierarchy (rels:Tuple<TypeRelation>) -> TypeHierarchy :

  ;Create the relation table.
  val classes = IntTable<Class>()

  ;Add the relations to the table.
  for r in rels do :
    val c = Class(r)
    classes[n(c)] = c

  new TypeHierarchy :
    ;Return the relations.
    defmethod relations (this) :
      rels

    ;Return the parents of the given type.
    defmethod parents (this, t:TOf) -> Tuple<TOf> :
      val class = classes[n(t)]
      parents(class, t)

    ;Return the identifier of the special type.
    defmethod special-type (this, t:SpecialType) -> Int :
      val r = for r in rels find :
        special(r) == t
      match(r:TypeRelation) : n(r)
      else : fatal("Special type %_ not in hierarchy." % [t])

    ;Return the arity of the classes.
    defmethod type-arity (this, n:Int) -> Int :
      arity(classes[n])

;============================================================
;==================== Convenience ===========================
;============================================================

;Return all the target parents of 't'. 
public defn parents (hier:TypeHierarchy, t:TOf, target:Int) -> Tuple<TOf> :
  val ps = Vector<TOf>()
  let loop (t:TOf = t) :
    if n(t) == target : add(ps,t)
    else : do(loop, parents(hier, t))
  to-tuple(ps)