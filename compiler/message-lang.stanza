defpackage stz/message-lang :
  import core
  import collections
  import macro-utils
  import stz/core-macros

;<doc>=======================================================
;======================= Examples ===========================
;============================================================

Example of messages with custom formatter.

  defmessages TypeError :

    defmessage BadAssignment :
      info:FileInfo|False
      a:Type
      b:Type
    with:
      format (fmt:Formatter) :
        "%_: Cannot pass %_ to %_." % [info, format(fmt,a), format(fmt,b)]

;============================================================
;=======================================================<doc>

;============================================================
;======================= Parse Structures ===================
;============================================================

defstruct DefMessages :
  parent-type
  messages:Tuple<DefMessage>
with:
  printer => true

defstruct DefMessage :
  name
  parent:Maybe with: (updater => sub-parent)
  fields:Tuple<MessageField>
  methods:Tuple<MessageMethod>
with:
  printer => true
  
defstruct MessageField :
  name
  type:Maybe
  options:Maybe<List>
with:
  printer => true

defstruct MessageMethod :
  name
  args:List
  body
with:
  printer => true

;============================================================
;==================== Syntax Definition =====================
;============================================================

defsyntax message-lang :

  ;Imports
  import (:!, type!, exp!, id!, id, type, exp, exp4) from core

  ;Extend core syntax
  defrule exp4 = (?def:#defmessages) :
    val compiled = compile(def)
    parse-syntax[core / #exp](List(compiled))

  defrule exp4 = (?def:#defmessage) :
    val compiled = compile(def)
    parse-syntax[core / #exp](List(compiled))

  ;Overall defmessage production.
  public defproduction defmessages:DefMessages
  defrule defmessages = (defmessages ?parent-type:#type! #:! (
                         ?es:#defmessage! ...)) :
    DefMessages(parent-type, to-tuple(es))

  defproduction defmessage:DefMessage
  defrule defmessage = (defmessage ?name:#id! ?parent:#parent? ?fields:#mfields ?methods:#mmethods) :
    DefMessage(name, parent, fields, methods)
 
  defproduction parent?:Maybe
  defrule parent? = (<: ?t:#type!) : One(t)
  defrule parent? = () : None()

  defproduction mfields:Tuple<MessageField>
  defrule mfields = (: (?fs:#mfield! ...)) : to-tuple(fs)
  defrule mfields = () : []

  defproduction mmethods:Tuple<MessageMethod>
  defrule mmethods = (with : (?ms:#mmethod! ...)) : to-tuple(ms)
  defrule mmethods = () : []

  defproduction mfield:MessageField
  defrule mfield = (?name:#id ?type:#ftype? ?options:#foptions?) :
    MessageField(name, type, options)

  defproduction ftype?:Maybe
  defrule ftype? = (: ?t:#type!) : One(t)
  defrule ftype? = () : None()

  defproduction foptions?:Maybe<List>
  defrule foptions? = (with: (?xs ...)) : One(xs)
  defrule foptions? = () : None()

  defproduction mmethod:MessageMethod
  defrule mmethod = (?name:#id ?args:#margs #:! ?body:#exp!) :
    MessageMethod(name, args, body)

  defproduction margs:List
  defrule margs = ((?xs ...)) : xs
  defrule margs = () : List()

  ;Error productions
  defproduction defmessage!: DefMessage
  defrule defmessage! = (?x:#defmessage)
  fail-if defmessage! = () : MLE(closest-info(), "Invalid syntax for 'defmessage' clause.")

  defproduction mfield!: MessageField
  defrule mfield! = (?x:#mfield)
  fail-if mfield! = () : MLE(closest-info(), "Invalid syntax for error field.")

  defproduction mmethod!: MessageMethod
  defrule mmethod! = (?x:#mmethod)
  fail-if mmethod! = () : MLE(closest-info(), "Invalid syntax for error method.")

;============================================================
;====================== Compilation =========================
;============================================================

;Compilation of multiple messages with a single parent type.
defn compile (def:DefMessages) -> ? :
  val forms = to-list $ for m in messages(def) seq :
    compile(add-parent(m, parent-type(def)))
  List(forms)

;Compilation of single message.
defn compile (def:DefMessage) -> ? :
  ;Definition of template.
  val template = `(
    defstruct Name Parent?{<: Parent} :
      fields{
        name type?{: type} options?{with: options}
      }
    methods{
      defmethod name (other-args, e:Name) :
        fields{
          val name = name(e)
        }
        body
    }
  )
  ;Launch!
  fill-template(template, bindings(def))

;============================================================
;==================== Bindings ==============================
;============================================================

defn add-parent (m:DefMessage, p) -> DefMessage :
  val new-parent = if empty?(parent(m)) : p
                   else : qquote(~ p & ~(value!(parent(m))))
  sub-parent(m, One(new-parent))

defn bindings (e:DefMessage) :
  [`Name => name(e)
   `Parent? => optional(`Parent, parent(e))
   `fields => nested(bindings, fields(e))
   `methods => nested(bindings, methods(e))]

defn bindings (e:MessageField) :
  [`name => name(e)
   `type? => optional(`type, type(e))
   `options? => optional(`options, options(e))]

defn bindings (e:MessageMethod) :
  [`name => name(e)
   `other-args => splice(args(e))
   `e => gensym(`e)
   `body => body(e)]

;============================================================
;===================== Macro Utilities ======================
;============================================================

;Takes a maybe, and generates a 'nested' with one item if it
;exists.
defn optional (field-name:Symbol, xs:Maybe) -> Nested :
  if empty?(xs) : nested([])
  else : nested([[field-name => value!(xs)]])

;Helper: Compile multiple items and produce a 'nested' out of them.
defn nested<?T> (compile:T -> Collection<KeyValue<Symbol,?>>, xs:Seqable<?T>) -> Nested :
  nested(to-tuple(seq(compile, xs)))

;============================================================
;====================== Errors ==============================
;============================================================

public defstruct MessageLangError <: Exception :
  info:FileInfo|False
  msg
with:
  constructor => MLE

defmethod print (o:OutputStream, e:MessageLangError) :
  val info-str = "" when info(e) is False
            else "%_: " % [info(e)]
  print(o, "%_%_" % [info-str, msg(e)])