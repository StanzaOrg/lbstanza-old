defpackage stz/build-manager :
  import core
  import collections
  import stz/proj
  import stz/utils
  import stz/front-end
  import stz/proj-manager
  import stz/params

public deftype BuildManager
public defmulti dependencies (b:BuildManager, packages:Tuple<Symbol>, platform:Symbol) -> ProjDependencies
public defmulti target (b:BuildManager, name:Symbol) -> BuildStmt
public defmulti build-commands (b:BuildManager, ds:ProjDependencies) -> Tuple<BuildCommand>

public defn BuildManager (proj:ProjFile) :
  ;Build requirements and build table
  val req-table = to-hashtable(package,
    filter-by<RequiresStmt>(stmts(proj)))
  val build-table = to-hashtable(name,
    filter-by<BuildStmt>(stmts(proj)))
  val compile-file-table = to-hashtable(name,
    filter(file?, filter-by<CompileStmt>(stmts(proj))))
  val compile-flag-table = to-hashtable(name,
    filter({not file?(_)}, filter-by<CompileStmt>(stmts(proj))))

  ;System ccfiles and ccflags
  defn system-ccfiles-ccflags (platform:Symbol) -> [Tuple<String>, Tuple<String>] :
    val ccfiles = Vector<String>()
    val ccflags = Vector<String>()
    
    ;C Standard
    add(ccflags, "-std=gnu99")

    ;Use static linking on windows
    if platform == `windows :
      add(ccflags, "-Wl,-Bstatic")

    ;Math library
    add(ccflags, "-lm")

    ;PThread library
    if platform == `windows or platform == `linux :
      add(ccflags, "-lpthread")

    ;Backward compatibility flag for OS-X Pre-Catalina
    if platform == `os-x :
      add(ccflags, "-mmacosx-version-min=10.13")

    ;Position independence flag
    if platform == `linux :
      add(ccflags, "-ldl")
      add(ccflags, "-fPIC")

    ;Driver Platform flag
    add(ccflags, "-D")
    switch(platform) :
      `os-x : add(ccflags, "PLATFORM_OS_X")
      `linux : add(ccflags, "PLATFORM_LINUX")
      `windows : add(ccflags, "PLATFORM_WINDOWS")

    ;Stanza include dir
    add(ccflags, to-string("-I%_" % [system-filepath(StanzaIncludeDir)]))

    ;Driver file
    add(ccfiles, system-filepath(StanzaRuntimeDriver))

    ;Return ccfiles and ccflags
    [to-tuple(ccfiles), to-tuple(ccflags)]

  ;Return build manager
  new BuildManager :
    defmethod target (this, name:Symbol) :
      throw(NoBuildTarget(name)) when not key?(build-table, name)
      build-table[name]
    defmethod dependencies (this, packages:Tuple<Symbol>, platform:Symbol) :
      defn field? (field:RequiresStmt -> Tuple<String>, p:Symbol) -> Tuple<String> :
        match(get?(req-table, p)) :
          (r:RequiresStmt) : field(r)
          (f:False) : []
      val [system-ccfiles, system-ccflags] = system-ccfiles-ccflags(platform)
      val package-ccfiles = unique $ seq-cat(field?{ccfiles, _}, packages)
      val package-ccflags = unique $ seq-cat(field?{ccflags, _}, packages)
      ProjDependencies(to-tuple(cat(system-ccfiles, package-ccfiles)),
                       to-tuple(cat(system-ccflags, package-ccflags)))
    defmethod build-commands (this, ds:ProjDependencies) :
      to-tuple $ cat(
        for file in ccfiles(ds) seq :
          val stmt = get?(compile-file-table, file)
          BuildCommand(true, file, stmt)
        for flag in ccflags(ds) seq :
          val stmt = get?(compile-flag-table, flag)
          BuildCommand(false, flag, stmt))

;============================================================
;===================== Result Structures ====================
;============================================================

public defstruct ProjDependencies :
  ccfiles: Tuple<String>
  ccflags: Tuple<String>

public defstruct BuildCommand :
  file?: True|False
  name: String
  compile: CompileStmt|False

defmethod print (o:OutputStream, d:ProjDependencies) :
  defn written (x) : "%~" % [x]
  print(o, "ccfiles %_" % [colon-list(seq(written, ccfiles(d)))])
  lnprint(o, "ccflags %_" % [colon-list(seq(written, ccflags(d)))])

defn colon-list (xs:Seqable) :
  new Printable :
    defmethod print (o:OutputStream, this) :
      val items = to-seq(xs)
      if empty?(items) :
        print(o, ": ()")
      else :
        print(o, ":")
        val o2 = IndentedStream(o)
        do(lnprint{o2, _}, items)

;============================================================
;======================== Errors ============================
;============================================================

public defstruct NoBuildTarget <: Exception :
  name: Symbol

defmethod print (o:OutputStream, e:NoBuildTarget) :
  print(o, "No build target named %~." % [name(e)])