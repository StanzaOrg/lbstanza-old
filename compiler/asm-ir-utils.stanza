defpackage stz/asm-ir-utils :
  import core
  import collections
  import stz/asm-ir

;R for register
public defn R (n:Int) : Reg(n)

;F for floating-point register
public defn F (n:Int) : FReg(n)

;M for memory
public defn M (n:Int) : Mem(n,0)

;LM for local memory
public defn LM (n:Int) : LocalMem(n)

;INT for integer immediate
public defn INT (v:Byte|Int|Long) : IntImm(v)

;BT for byte type
public val BT = ByteT()
;IT for int type
public val IT = IntT()
;LT for long type
public val LT = LongT()
;FT for float type
public val FT = FloatT()
;DT for double type
public val DT = DoubleT()

;Ri registers
public val R0 = R(0)
public val R1 = R(1)
public val R2 = R(2)
public val R3 = R(3)
public val R4 = R(4)
public val R5 = R(5)
public val R6 = R(6)

;Fi registers
public val F0 = F(0)
public val F1 = F(1)

;Stack pointer register
public val RSP = RegSP()

;Set long
public defn SetL (x:Loc, y:Imm) : SetIns(LT, x, y)
;Set double
public defn SetD (x:Loc, y:Imm) : SetIns(DT, x, y)
;Store long
public defn StoreL (x:Imm, y:Imm) : Store(LT, x, y, 0)
public defn StoreL (x:Imm, y:Imm, o:Int) : Store(LT, x, y, o)
;Store double
public defn StoreD (x:Imm, y:Imm) : Store(DT, x, y, 0)
public defn StoreD (x:Imm, y:Imm, o:Int) : Store(DT, x, y, o)
;Load long
public defn LoadL (x:Loc, y:Imm) : Load(LT, x, y, 0)
public defn LoadL (x:Loc, y:Imm, o:Int) : Load(LT, x, y, o)
;Load double
public defn LoadD (x:Loc, y:Imm) : Load(DT, x, y, 0)
public defn LoadD (x:Loc, y:Imm, o:Int) : Load(DT, x, y, o)
;Add/Sub/And/Shl/Break long
public defn AddL (x:Loc, y:Imm, z:Imm) : BinOp(LT, x, AddOp(), y, z)
public defn SubL (x:Loc, y:Imm, z:Imm) : BinOp(LT, x, SubOp(), y, z)
public defn AndL (x:Loc, y:Imm, z:Imm) : BinOp(LT, x, AndOp(), y, z)
public defn ShlL (x:Loc, y:Imm, z:Imm) : BinOp(LT, x, ShlOp(), y, z)
public defn BreakL (x:Imm, op:Op, y:Imm, z:Imm) : Break(LT, x, op, y, z)