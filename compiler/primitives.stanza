;See License.txt for details about licensing.

defpackage stz/primitives :
   import core
   import collections
   import stz/tl-ir
   import stz/ids

;============================================================
;================= HiStanza Primitives ======================
;============================================================

public deftype Primitive <: Equalable
public defmulti name (p:Primitive) -> Symbol
public defmulti prim-code (p:Primitive) -> Byte

public val PRIMITIVES = Vector<Primitive>()

public defn primitive? (primname:Symbol) :
   primitive(primname) is-not False

public defn primitive (primname:Symbol) :
   for p in PRIMITIVES find :
      primname == name(p)

public defn primitive! (primname:Symbol) :
   primitive(primname) as Primitive

public defn primitive! (code:Byte) :
  PRIMITIVES[to-int(code)]

defmethod equal? (a:Primitive, b:Primitive) :
   name(a) == name(b)

defmethod print (o:OutputStream, p:Primitive) :
   print(o, name(p))

defn make-primitive (name:Symbol) :
   val code = to-byte(length(PRIMITIVES))
   val p = new Primitive :
      defmethod name (this) : name
      defmethod prim-code (this) : code
   add(PRIMITIVES, p)
   p

public val ADD-OP = make-primitive(`add)
public val SUB-OP = make-primitive(`sub)
public val MUL-OP = make-primitive(`mul)
public val DIV-OP = make-primitive(`div)
public val MOD-OP = make-primitive(`mod)
public val AND-OP = make-primitive(`and)
public val OR-OP = make-primitive(`or)
public val XOR-OP = make-primitive(`xor)
public val SHL-OP = make-primitive(`shl)
public val SHR-OP = make-primitive(`shr)
public val ASHR-OP = make-primitive(`ashr)
public val EQ-OP = make-primitive(`eq)
public val NE-OP = make-primitive(`ne)
public val LT-OP = make-primitive(`lt)
public val GT-OP = make-primitive(`gt)
public val LE-OP = make-primitive(`le)
public val GE-OP = make-primitive(`ge)
public val NOT-OP = make-primitive(`not)
public val NEG-OP = make-primitive(`neg)
public val IDENTICAL-OP = make-primitive(`identical?)

;============================================================
;================= LoStanza Primitives ======================
;============================================================

public deftype LSPrimitive <: Equalable
public defmulti name (p:LSPrimitive) -> Symbol
public defmulti prim-code (p:LSPrimitive) -> Byte

public val LS-PRIMITIVES = Vector<LSPrimitive>()

defn register (p:LSPrimitive) :
   add(LS-PRIMITIVES, p)
   p

defmethod equal? (a:LSPrimitive, b:LSPrimitive) :
   name(a) == name(b)

defmethod print (o:OutputStream, p:LSPrimitive) :
   print(o, name(p))

public defn ls-primitive? (primname:Symbol) :
   ls-primitive(primname) is-not False

public defn ls-primitive (primname:Symbol) :
   for p in LS-PRIMITIVES find :
      primname == name(p)

public defn ls-primitive! (primname:Symbol) :
   ls-primitive(primname) as LSPrimitive

public defn ls-primitive! (code:Byte) :
   LS-PRIMITIVES[to-int(code)]

;Getter Primitives
public deftype GetterPrimitive <: LSPrimitive
public defmulti type (p:GetterPrimitive) -> LSType
public defmulti lbl (p:GetterPrimitive) -> Int

;Addr Primitives
public deftype AddrPrimitive <: LSPrimitive
public defmulti type (p:AddrPrimitive) -> LSType
public defmulti lbl (p:AddrPrimitive) -> Int

;Setter Primitives
public deftype SetterPrimitive <: LSPrimitive
public defmulti type (p:SetterPrimitive) -> LSType
public defmulti lbl (p:SetterPrimitive) -> Int

;Creation Convenience
defn make-ls-primitive (name:Symbol) :
  val code = to-byte(length(LS-PRIMITIVES))
  register $ new LSPrimitive :
    defmethod name (this) : name
    defmethod prim-code (this) : code
defn make-getter-primitive (name:Symbol, type:LSType, lbl:Int) :
  val code = to-byte(length(LS-PRIMITIVES))
  register $ new GetterPrimitive :
    defmethod name (this) : name
    defmethod type (this) : type
    defmethod lbl (this) : lbl
    defmethod prim-code (this) : code
defn make-getter-primitive (name:Symbol, type:LSType) :
  val code = to-byte(length(LS-PRIMITIVES))
  register $ new GetterPrimitive :
    defmethod name (this) : name
    defmethod type (this) : type
    defmethod prim-code (this) : code
defn make-setter-primitive (name:Symbol, type:LSType, lbl:Int) :
  val code = to-byte(length(LS-PRIMITIVES))
  register $ new SetterPrimitive :
    defmethod name (this) : name
    defmethod type (this) : type
    defmethod lbl (this) : lbl
    defmethod prim-code (this) : code
defn make-addr-primitive (name:Symbol, type:LSType, lbl:Int) :
  val code = to-byte(length(LS-PRIMITIVES))
  register $ new AddrPrimitive :
    defmethod name (this) : name
    defmethod type (this) : type
    defmethod lbl (this) : lbl
    defmethod prim-code (this) : code

public val FLUSH-VM-OP = make-ls-primitive(`flush-vm)
public val GC-OP = make-ls-primitive(`collect-garbage)
public val PRINT-STACK-TRACE-OP = make-ls-primitive(`print-stack-trace)
public val COLLECT-STACK-TRACE-OP = make-ls-primitive(`collect-stack-trace)
public val LS-ADD-OP = make-ls-primitive(`add)
public val LS-SUB-OP = make-ls-primitive(`sub)
public val LS-MUL-OP = make-ls-primitive(`mul)
public val LS-DIV-OP = make-ls-primitive(`div)
public val LS-MOD-OP = make-ls-primitive(`mod)
public val LS-AND-OP = make-ls-primitive(`and)
public val LS-OR-OP = make-ls-primitive(`or)
public val LS-XOR-OP = make-ls-primitive(`xor)
public val LS-SHL-OP = make-ls-primitive(`shl)
public val LS-SHR-OP = make-ls-primitive(`shr)
public val LS-ASHR-OP = make-ls-primitive(`ashr)
public val LS-LOWEST-ZERO-BIT-COUNT-OP = make-ls-primitive(`lowest-zero-bit-count)
public val LS-SET-BIT-OP = make-ls-primitive(`set-bit)
public val LS-CLEAR-BIT-OP = make-ls-primitive(`clear-bit)
public val LS-TEST-BIT-OP = make-ls-primitive(`test-bit)
public val LS-TEST-AND-SET-BIT-OP = make-ls-primitive(`test-and-set-bit)
public val LS-TEST-AND-CLEAR-BIT-OP = make-ls-primitive(`test-and-clear-bit)
public val LS-EQ-OP = make-ls-primitive(`eq)
public val LS-NE-OP = make-ls-primitive(`ne)
public val LS-LT-OP = make-ls-primitive(`lt)
public val LS-GT-OP = make-ls-primitive(`gt)
public val LS-LE-OP = make-ls-primitive(`le)
public val LS-GE-OP = make-ls-primitive(`ge)
public val LS-ULT-OP = make-ls-primitive(`ult)
public val LS-UGT-OP = make-ls-primitive(`ugt)
public val LS-ULE-OP = make-ls-primitive(`ule)
public val LS-UGE-OP = make-ls-primitive(`uge)
public val LS-NOT-OP = make-ls-primitive(`not)
public val LS-NEG-OP = make-ls-primitive(`neg)
public val LS-BITS-OP = make-ls-primitive(`bits)
public val LS-FNUM-OP = make-ls-primitive(`fnum)
public val LS-YIELD-OP = make-ls-primitive(`yield)
public val LS-ENTER-STACK-OP = make-ls-primitive(`enter-stack)
public val LS-CRSP-OP = make-ls-primitive(`crsp)