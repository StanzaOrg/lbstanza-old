defpackage stz/jit-code-table :
  import core
  import collections
  import stz/vm-ir
  import stz/code-table
  import stz/backend
  import stz/utils
  import stz/asmjit
  import stz/jit-encoder
  import stz/vm-structures

;============================================================
;================= Struct Definition ========================
;============================================================

public defstruct JITCodeTable <: CodeTable :
  runtime: JitRuntime
  stubs: JITStubs
  funcs: Vector<Func|False> with: (init => Vector<Func|False>())
with:
  constructor => #JITCodeTable

;Represents all the support assembly stubs needed by the JIT.
public defstruct JITStubs :
  launcher:Func
  extend-stack:Func

;============================================================
;================== Constructor =============================
;============================================================

public defn JITCodeTable (resolver:EncodingResolver, backend:Backend) -> JITCodeTable :
  val runtime = jit-runtime-new()
  val stubs = make-jit-stubs(runtime, resolver, backend)  
  #JITCodeTable(runtime, stubs)

;============================================================
;================= Function Loading =========================
;============================================================

defmethod load-function (table:JITCodeTable,
                         fid:Int,
                         vmfunc:VMFunction,
                         externfn?:True|False,
                         resolver:EncodingResolver,
                         backend:Backend) -> LoadedFunction :
  ;Encode the function using the JIT encoder.
  val encoded-function = encode(vmfunc, externfn?, stubs(table), runtime(table), resolver, backend)

  ;If there is already a function at that location, then
  ;delete it.
  val oldf = get?(funcs(table), fid)
  match(oldf:Func) :
    release(runtime(table), oldf)
  
  ;Add the function into the table so that we can release them later.
  put<Func>(funcs(table), fid, func(encoded-function))

  ;Return the loaded function
  LoadedFunction(value(func(encoded-function)), trace-entries(encoded-function))

;============================================================
;================== Launch ==================================
;============================================================

lostanza defmethod launch (vmstate-address:ref<Long>, table:ref<JITCodeTable>, func-id:ref<Int>) -> ref<False> :
  val launch = launcher(stubs(table)).value
  val fptr = launch as ptr<( (ptr<VMState>, long, long) -> int )>
  val vmstate = vmstate-address.value as ptr<VMState>
  call-c [fptr](vmstate, call-prim crsp() as long, func-id.value)
  return false    

;============================================================
;===================== Free =================================
;============================================================

defmethod free (table:JITCodeTable) :
  val all-funcs = cat([launcher(stubs(table))
                       extend-stack(stubs(table))]
                      filter-by<Func>(funcs(table)))
  for f in all-funcs do :
    release(runtime(table), f)
  delete(runtime(table))

;============================================================
;============= Dummy Instructions Pointer ===================
;============================================================

defmethod instructions (table:JITCodeTable) : 0L

;============================================================
;========================= Utility ==========================
;============================================================

defn put<T> (xs:Vector<T|False>, k:Int, v:T) :
  if k >= length(xs) :
    lengthen(xs, k + 1, false)
  xs[k] = v
  
defn get?<?T> (xs:Vector<?T>, k:Int) -> T|False :
  if k < length(xs) : xs[k]
