defpackage stz/basic-blocks :
  import core
  import collections

;============================================================
;====================== Input ===============================
;============================================================

public deftype Instructions <: Lengthable
public defmulti classify (ins:Instructions, i:Int) -> Instruction
public defmulti unique-label (ins:Instructions) -> Int

public deftype Instruction
public defstruct LabelInstruction <: Instruction: (n:Int)
public defstruct GotoInstruction <: Instruction: (n:Int)
public defstruct JumpInstruction <: Instruction: (ns:Tuple<Int>)
public defstruct StandardInstruction <: Instruction

;============================================================
;====================== Output ==============================
;============================================================

public deftype BlockTable
public defmulti blocks (t:BlockTable) -> Seq<Block>
public defmulti get (t:BlockTable, n:Int) -> Block
public defmulti start (t:BlockTable) -> Int
public defmulti renamed-label (t:BlockTable, n:Int) -> Int

public deftype Block
public defmulti n (b:Block) -> Int
public defmulti start (b:Block) -> Int
public defmulti length (b:Block) -> Int
public defmulti succs (b:Block) -> Tuple<Int>
public defmulti preds (b:Block) -> Tuple<Int>
public defmulti instructions (b:Block) -> Seq<Int|Instruction>
public defmulti ends-with-goto? (b:Block) -> True|False
public defmulti index (b:Block) -> Int

;============================================================
;======================= Implementation =====================
;============================================================

public defn analyze-basic-blocks (instructions:Instructions) -> BlockTable :
  ;Get length of instructions
  val num-ins = length(instructions)

  ;Accumulator for all blocks
  val blocks = IntTable<Block>()

  ;Create a block
  defn make-block (lbl:Int, start:Int, end:Int, succs:Tuple<Int>) :
    ;lbl: The label of the block to create.
    ;start: Index of first instruction of block.
    ;end: Index of last instruction (exclusive) of block.
    ;succs: Labels of successor blocks.

    ;Return true if i is within bounds and f returns true
    ;for instruction at i.
    defn test (i:Int, f:Instruction -> True|False) :
      i >= 0 and i < num-ins and f(classify(instructions,i))

    ;Return true if instruction is a label to lbl
    defn label? (ins:Instruction, lbl:Int) :
      match(ins:LabelInstruction) : n(ins) == lbl

    ;Compute new starting point (without including starting label)
    val start* = (start + 1) when test(start, label?{_, lbl})
            else start
    ;Compute new ending point (without including ending goto)
    val end* = (end - 1) when test(end - 1, {_ is GotoInstruction})
          else end
    ;Compute whether block ends with a goto instruction.
    ;A block ends with a goto instruction if it has successors and it
    ;does not end with a jump instruction.
    val ends-with-goto? = not empty?(succs) and not test(end - 1, {_ is JumpInstruction})

    ;Push blocks onto table                         
    blocks[lbl] = new Block :
      defmethod n (this) : lbl
      defmethod start (this) : start*
      defmethod length (this) : end* - start*
      defmethod ends-with-goto? (this) : ends-with-goto?
      defmethod succs (this) : succs

  ;Sweep through instructions and perform analysis
  val end-lbl = let loop (i:Int = 0, block-start:Int = 0, block-lbl:Int = -1) :
    ;i: The index of the instruction we are currently scanning
    ;block-start: The starting index of the current block.
    ;block-lbl: The label for the current block.    
    if i < num-ins :
      match(classify(instructions,i)) :
        (ins:LabelInstruction) :
          ;Ensure that we do not rely upon any fall-through semantics.
          ;ensure-block-end?(i - 1)
          ;Current block 'block-lbl' extends from 'block-start' to i (exclusive),
          ;and connects to the next labeled block. 
          make-block(block-lbl, block-start, i, [n(ins)])
          loop(i + 1, i, n(ins))
        (ins:GotoInstruction) :
          ;Previous block 'block-lbl' extends from 'block-start' to i (inclusive).
          make-block(block-lbl, block-start, i + 1, [n(ins)])
          loop(i + 1, i + 1, unique-label(instructions))
        (ins:JumpInstruction) :
          ;Previous block 'block-lbl' extends from 'block-start' to i (inclusive).
          make-block(block-lbl, block-start, i + 1, ns(ins))
          loop(i + 1, i + 1, unique-label(instructions))
        (ins:StandardInstruction) :
          ;Not an ending instruction, just continue the block
          loop(i + 1, block-start, block-lbl)
    else :
      ;Current block extends from 'block-start' to i (exclusive).
      ;Successor is end.
      make-block(block-lbl, block-start, i, [])
      ;Return last block
      block-lbl
      
  ;Skip trivial blocks: blocks with no instructions.
  val non-trivial-table = IntTable<Int>()
  defn non-trivial (n:Int) -> Int :
    if not key?(non-trivial-table, n) :
      val b = blocks[n]
      val trivial? = length(b) == 0 and ends-with-goto?(b)
      non-trivial-table[n] = non-trivial(succs(b)[0]) when trivial? else n
    non-trivial-table[n]

  ;Reverse post order (keeping end-block last)
  val ordered = Vector<Int>()
  val visited = IntSet()
  let loop (n:Int = -1) :
    val n* = non-trivial(n)
    if not visited[n*] :
      add(visited,n*)
      if n* != end-lbl :
        do(loop, succs(blocks[n*]))
        add(ordered, n*)
  reverse!(ordered)
  add(ordered, end-lbl) when visited[end-lbl]
  
  ;Compute predecessors
  val predecessors = IntTable<List<Int>>(List())
  for n in ordered do :
    for s in seq(non-trivial, succs(blocks[n])) do :
      update(predecessors, cons{n, _}, s)

  ;Fully-annotate blocks
  for (n in ordered, index in 0 to false) do :
    ;Retrieve original block
    val b = blocks[n]

    ;Create fully-annotated block
    val preds* = to-tuple(predecessors[n])
    val succs* = map(non-trivial, succs(b))

    ;Generate all instructions for this block
    defn gen-instructions () :
      generate<Int|Instruction> :
        if not empty?(preds*) :
          yield(LabelInstruction(n))
        val start = start(b)
        for i in 0 to length(b) do :
          yield(start + i)
        if ends-with-goto?(b) :
          yield(GotoInstruction(non-trivial(succs(b)[0])))

    blocks[n] = new Block :
      defmethod n (this) : n
      defmethod start (this) : start(b)
      defmethod length (this) : length(b)
      defmethod succs (this) : succs*
      defmethod preds (this) : preds*
      defmethod ends-with-goto? (this) : ends-with-goto?(b)
      defmethod instructions (this) : gen-instructions()
      defmethod index (this) : index

  ;Return analysis
  new BlockTable :
    defmethod blocks (this) :
      seq({blocks[_]}, ordered)
    defmethod get (this, n:Int) :
      blocks[n]
    defmethod start (this) :
      ordered[0]
    defmethod renamed-label (this, n:Int) :
      non-trivial(n)