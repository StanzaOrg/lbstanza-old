defpackage stz/packed-safepoint-table :
  import core
  import collections
  import stz/stable-arrays

;<doc>=======================================================
;======== Binary Representation of Safepoint Table  =========
;============================================================

Binary Representation:

  SafePointTable:
    numfiles:long
    files:ptr<FileSafePoints> ...

  FileSafePoints:
    num-entries:long
    filename:ptr<byte>
    entries:SafepointEntry ...

  SafepointEntry:
    line:long
    address-list:ptr<AddressList>

  AddressList :
    num-addresses:long
    addresses:Address ...

  Address :
    address:long
    group:long

;============================================================
;=======================================================<doc>

;============================================================
;============== Representation of a Record ==================
;============================================================

;Represents all of the safepoints for a given file.
public defstruct FileSafepoints :
  filename:String
  entries:Tuple<SafepointEntry>
  
;Represents all of the locations for a given safepoint.
public defstruct SafepointEntry :
  line:Int
  records:Tuple<SafepointRecord>

;Represents a single safepoint. 
public defstruct SafepointRecord :
  location:SafepointLocation
  group:Int

;Representation of a location for a safepoint.
public deftype SafepointLocation

;Used for statically compiled code. Refers to the
;id of the label.
public defstruct SafepointLabel <: SafepointLocation:
  id:Int

;Used for dynamically compiled code. Refers to the
;address of the safepoint. 
public defstruct SafepointAddress <: SafepointLocation:
  address:Long

;============================================================
;====================== Static Packer =======================
;============================================================

public deftype StaticPacker
public defmulti make-label (p:StaticPacker) -> Int
public defmulti emit-label (p:StaticPacker, id:Int) -> False
public defmulti emit-pointer-to-label (p:StaticPacker, id:Int) -> False
public defmulti emit (p:StaticPacker, x:Long) -> False
public defmulti emit (p:StaticPacker, x:String) -> False

;============================================================
;================= Static Packer Algorithm ==================
;============================================================

public defn pack (safepoints:Tuple<FileSafepoints>, packer:StaticPacker) -> False :
  ;Collect string table
  val string-table = Vector<KeyValue<Int,String>>()
  defn make-string-label (s:String) -> Int :
    val l = make-label(packer)
    add(string-table, l => s)
    l

  ;Collect address lists
  val address-lists = Vector<KeyValue<Int,Tuple<SafepointRecord>>>()
  defn make-address-list (locs:Tuple<SafepointRecord>) -> Int :
    val l = make-label(packer)
    add(address-lists, l => locs)
    l    

  ;Emit SafePointTable
  val filepointers = map(make-label{packer}, safepoints)
  emit(packer, to-long(length(safepoints)))
  for p in filepointers do :
    emit-pointer-to-label(packer, p)

  ;Emit FileSafePoints
  for (fp in filepointers, sp in safepoints) do :
    emit-label(packer, fp)
    emit(packer, to-long(length(entries(sp))))
    emit-pointer-to-label(packer, make-string-label(filename(sp)))    
    for entry in entries(sp) do :
      emit(packer, to-long(line(entry)))
      emit-pointer-to-label(packer, make-address-list(records(entry)))

  ;Emit address lists
  for entry in address-lists do :
    val recs = value(entry)
    emit-label(packer, key(entry))
    emit(packer, to-long(length(recs)))
    for rec in recs do :
      match(location(rec)) :
        (loc:SafepointLabel) :
          emit-pointer-to-label(packer, id(loc))
        (loc:SafepointAddress) :
          fatal("Raw addresses is not supported by static packer.")
      emit(packer, to-long(group(rec)))

  ;Emit string table
  for entry in string-table do :
    emit-label(packer, key(entry))
    emit(packer, value(entry))

;============================================================
;=================== Testing Syntax =========================
;============================================================

defsyntax safepoint-table :
  public defproduction file-safepoints: FileSafepoints
  defrule file-safepoints = (file-safepoints :
                               filename: ?filename:#string
                               ?entries:#entry ...) :
    FileSafepoints(filename, to-tuple(entries))

  defproduction entry: SafepointEntry
  defrule entry = (line ?line:#int : (?recs:#rec ...)) :
    SafepointEntry(line, to-tuple(recs))

  defproduction rec: SafepointRecord
  defrule rec = (?loc:#loc (group ?group:#int)) :
    SafepointRecord(loc, group)
  
  defproduction loc: SafepointLocation
  defrule loc = (L[?id:#int]) : SafepointLabel(id)
  defrule loc = (A[?address:#int]) : SafepointAddress(to-long(address))

  defproduction string: String
  defrule string = (?x) when unwrap-token(x) is String : unwrap-token(x)
  defproduction int: Int
  defrule int = (?x) when unwrap-token(x) is Int : unwrap-token(x)

defn parse-safepoints (form) -> Tuple<FileSafepoints> :
  to-tuple(parse-syntax[safepoint-table / #file-safepoints ...](form))

;============================================================
;===================== Testing ==============================
;============================================================

defn main () :
  val safepoints = parse-safepoints $ `(
    file-safepoints :
      filename: "myfile.stanza"
      line 1 : (L[0] (group 0), L[3] (group 0), L[8] (group 1))
      line 2 : (L[11] (group 0))
      line 3 : (L[19] (group 0))
    file-safepoints :
      filename: "myhelper.stanza"
      line 11 : (L[20] (group 0), L[21] (group 1))
      line 14 : (L[25] (group 1)))
      
  val label-counter = to-seq(100 to false)    
  val test-packer = new StaticPacker :
    defmethod make-label (this) :
      next(label-counter)
    defmethod emit-label (this, id:Int) :
      println("L%_:" % [id])
    defmethod emit-pointer-to-label (this, id:Int) :
      println("  .label L%_" % [id])
    defmethod emit (this, x:Long) :
      println("  .long %_" % [x])
    defmethod emit (this, x:String) :
      println("  .string %~" % [x])

  pack(safepoints, test-packer)

;main()