defpackage stz/ast-lang2 :
  import core
  import collections
  import macro-utils
  import stz/core-macros

;<doc>=======================================================
;==================== Example ===============================
;============================================================

Defining nodes with common fields and common options.

  defnodes MyType <: Hashable&Equalable :
    common :
      info: FileInfo|False with: (as-method => true)
    common-options :
      printer => true
      equalable => true
    A :
      field1: Type1
      field2: Type2 with: (options ...)
    B :
      field1: Type1
      field2: Type2 with: (options ...)

Defining a mapper.

  defmapper (f:TLItem -> TLItem) :
    (x:List<TDefn>) : map({f(_) as TDefn}, x)
    (x:List<TDefmethod>) : map({f(_) as TDefmethod}, x)

  make-mapper :
    func: TLItem -> TLItem
    item: TLItem
    nodes: (MyType)

Defining a doer.

  make-doer :
    func: TLItem -> ?
    item: TLItem
    nodes: (MyType)

;============================================================
;=======================================================<doc>

;============================================================
;==================== Parse Structures ======================
;============================================================

;Overall structure of the AST definition.
defstruct DefAst :
  defs:Tuple<Def>
with:
  printer => true

;Represents definitions in the AST.
deftype Def

;Defining nodes in the AST.
defstruct DefNodes <: Def :
  type: Symbol
  parent: Maybe
  common: Tuple<NodeField>
  common-options: Maybe<List>
  nodes: Tuple<Node>
with:
  printer => true

;Represents one node.
defstruct Node :
  name: Symbol
  fields: Tuple<NodeField>
with:
  printer => true

;Represents a field in a node.
defstruct NodeField :
  name: Symbol
  type
  options: Maybe<List>
with:
  printer => true

;Represents a mapper for a function type.
defstruct DefMapper <: Def :
  func:Symbol
  func-type
  clauses: Tuple<Clause>
with:
  printer => true

;Represents a doer for a function type.
defstruct DefDoer <: Def :
  func:Symbol
  func-type
  clauses: Tuple<Clause>
with:
  printer => true

;Represents types to ignore for mappers/doers.
defstruct Ignore <: Def :
  types: Tuple
with:
  printer => true

;Make a new mapper.
defstruct MakeMapper <: Def :
  func-type
  item-type
  nodes: Tuple<Symbol>
with:
  printer => true

;Make a new doer.
defstruct MakeDoer <: Def :
  func-type
  item-type
  nodes: Tuple<Symbol>
with:
  printer => true

;Represents either a mapper/doer clause.
defstruct Clause :
  item:Symbol
  type
  body
with:
  printer => true

;============================================================
;====================== Reader ==============================
;============================================================

defsyntax ast-lang2 :

  ;Imports
  import (:!, type!, exp!, id!, id, type, exp, exp4) from core

  ;Extend core syntax
  defrule exp4 = (?def:#defast) :
    val compiled = compile(def)
    parse-syntax[core / #exp](List(compiled))

  ;Overall defast production.
  public defproduction defast:DefAst
  defrule defast = (defast :
                      ?defs:#def! ...) :
    DefAst(to-tuple(defs))

  ;Each type of definition.
  defproduction def:Def

  ;Define nodes.
  defrule def = (defnodes ?name:#name ?parent:#parent? #:! (
                   ?common:#common?
                   ?common-options:#common-options?
                   ?nodes:#node! ...)) :
    DefNodes(
      name
      parent
      common
      common-options
      to-tuple(nodes))

  ;Helper: Parent of defnodes.
  defproduction parent?: Maybe
  defrule parent? = (<: ?t:#type) : One(t)
  defrule parent? = () : None()

  ;Helper: common fields
  defproduction common?: Tuple<NodeField>
  defrule common? = (common #:! (?fs:#field! ...)) : to-tuple(fs)
  defrule common? = () : []

  ;Helper: common options
  defproduction common-options?: Maybe<List>
  defrule common-options? = (common-options #:! (?options ...)) : One(options)
  defrule common-options? = () : None()

  ;Define Nodes
  defproduction node: Node
  defrule node = (?name:#name #:! (?fs:#field! ...)) :
    Node(name, to-tuple(fs))

  ;Define Fields
  defproduction field: NodeField
  defrule field = (?name:#name : ?type:#type! ?options:#field-options?) :
    NodeField(name, type, options)

  ;Helper: field options
  defproduction field-options?: Maybe<List>
  defrule field-options? = (with: (?options ...)) : One(options)
  defrule field-options? = () : None()

  ;Define a mapper.
  defrule def = (defmapper (?func:#name! : ?func-type:#type!) :
                   ?cs:#clause! ...) :
    DefMapper(func, func-type, to-tuple(cs))

  ;Define a doer.
  defrule def = (defdoer (?func:#name! : ?func-type:#type!) :
                   ?cs:#clause! ...) :
    DefDoer(func, func-type, to-tuple(cs))

  ;Helper: a clause in a mapper.
  defproduction clause:Clause
  defrule clause = ((?name:#name : ?type:#type!) : ?body:#exp!) : Clause(name, type, body)

  ;Define making a mapper.
  defrule def = (make-mapper :
                   func: ?func-type:#type!
                   item: ?item-type:#type!
                   nodes: (?nodes:#name! ...)) :
    MakeMapper(func-type, item-type, to-tuple(nodes))

  ;Define making a doer.
  defrule def = (make-doer :
                   func: ?func-type:#type!
                   item: ?item-type:#type!
                   nodes: (?nodes:#name! ...)) :
    MakeDoer(func-type, item-type, to-tuple(nodes))

  ;Define an ignore
  defrule def = (ignore :
                   ?ts:#type! ...) :
    Ignore(to-tuple(ts))

  ;Utility productions
  defproduction name: Symbol
  defrule name = (?x:#id) : unwrap-token(x)

  ;Error productions.
  defproduction def!:Def
  defrule def! = (?x:#def)
  fail-if def! = () : AE(closest-info(), "Illegal syntax for AST definition.")
  defproduction name!:Symbol
  defrule name! = (?x:#name)
  fail-if name! = () : AE(closest-info(), "Expected a name here.")
  defproduction node!:Node
  defrule node! = (?x:#node)
  fail-if node! = () : AE(closest-info(), "Invalid syntax for node.")
  defproduction field!:NodeField
  defrule field! = (?x:#field)
  fail-if field! = () : AE(closest-info(), "Invalid syntax for field.")
  defproduction clause!:Clause
  defrule clause! = (?x:#clause)
  fail-if clause! = () : AE(closest-info(), "Invalid syntax for clause.")

;============================================================
;========================= Errors ===========================
;============================================================

defstruct ASTError <: Exception :
  info:FileInfo|False
  message
with:
  constructor => AE

defmethod print (o:OutputStream, e:ASTError) :
  val info-str = "" when info(e) is False
            else "%_ :" % [info(e)]
  print(o, "%_%_" % [info-str, message(e)])

;============================================================
;==================== Compilation ===========================
;============================================================

;------------------------------------------------------------
;----------------- Type Handler Table -----------------------
;------------------------------------------------------------

;Represents either a mapper/doer type entry.
defstruct TypeHandlerEntry :
  name:Symbol
  func:Symbol
  func-type
  item:Symbol
  item-type
  body

;Collect all of the type handler entries into a single table.
deftype TypeHandlerTable <: Collection<TypeHandlerEntry>

;Ignore the item or not.
defmulti ignore? (t:TypeHandlerTable, x) -> True|False

;The mapper for a given function type and item type.
defmulti mapper (t:TypeHandlerTable, func-type, item-type) -> TypeHandlerEntry

;The doer for a given function type and item type.
defmulti doer (t:TypeHandlerTable, func-type, item-type) -> TypeHandlerEntry

;Pull out the type handler table from the ast.
defn TypeHandlerTable (ast:DefAst) -> TypeHandlerTable :
  ;Declare the tables for the entries.
  val mappers = HashTable<[?,?],TypeHandlerEntry>()
  val doers = HashTable<[?,?],TypeHandlerEntry>()
  val ignores = HashSet<?>()

  ;Creates the key for use in the tables.
  defn item-key (func-type, item-type) :
    [unwrap-all(func-type), unwrap-all(item-type)]

  ;Collect all entries.
  for def in defs(ast) do :
    match(def) :
      (def:DefMapper|DefDoer) :
        for clause in clauses(def) do :
          val key = item-key(func-type(def), type(clause))
          val [base-name, table] = match(def) :
            (def:DefMapper) : [`mapper, mappers]
            (def:DefDoer) : [`doer, doers]
          if key?(table,key) :
            val msg = "Duplicate %_ for function type '%_' and item type '%_'."
                    % [base-name, func-type(def), type(clause)]
            throw(AE(false,msg))                       
          else :
            val entry = TypeHandlerEntry(
                          gensym(base-name),
                          func(def), func-type(def),
                          item(clause), type(clause), body(clause))
            table[key] = entry
      (def:Ignore) :
        for t in types(def) do :
          add(ignores, unwrap-all(t))
      (def) :
        false

  ;Return the table.
  new TypeHandlerTable :
    defmethod ignore? (this, type) :
      ignores[unwrap-all(type)]

    defmethod mapper (this, func-type, item-type) :
      match(get?(mappers, item-key(func-type, item-type))) :
        (e:TypeHandlerEntry) :
          e
        (f:False) :
          val msg = "No mapper function declared for function type '%_' and item type '%_'."
                  % [func-type, item-type]
          throw(AE(false, msg))      

    defmethod doer (this, func-type, item-type) :
      match(get?(doers, item-key(func-type, item-type))) :
        (e:TypeHandlerEntry) :
          e
        (f:False) :
          val msg = "No doer function declared for function type '%_' and item type '%_'."
                  % [func-type, item-type]
          throw(AE(false, msg))

    defmethod to-seq (this) :
      cat(values(mappers), values(doers))

;------------------------------------------------------------
;------------------- Field Context --------------------------
;------------------------------------------------------------

deftype FieldContext
defstruct MapperContext <: FieldContext : (func-type)
defstruct DoerContext <: FieldContext : (func-type)

;------------------------------------------------------------
;------------------ Code Generation -------------------------
;------------------------------------------------------------

defn compile (ast:DefAst) -> ? :

  ;Generation template.
  val template = `(
    nodetypes{
      ;Generate the overall type.
      deftype Type parent?{<: Parent}{}

      nodes{
        defstruct Node <: Type :
          all-fields{
            name:type options?{with: options}{}
          }
        common-options?{with : common-options}{}
      }
    }

    mappers{
      defn map<?T> (func:FuncType, item:?T&ItemType) -> T :
        val result = match(item) :
          nodes{
            (item:Node) : Node(
                            all-fields{
                              ignore?{
                                name(item)
                              }{
                                mapper(func, name(item))
                              }
                            })
          }
        result as T&ItemType
    }

    doers{
      defn do<?T> (func:FuncType, item:ItemType) -> False :
        match(item) :
          nodes{
            (item:Node) :
              all-fields{
                ignore?{}{
                  doer(func, name(item))
                }
              }
          }
        false
    }

    type-handlers{
      defn handler (func:func-type, item:item-type) : body
    }
  )

  ;Compute the type handler table first.
  val type-handler-table = TypeHandlerTable(ast)

  ;Compile a DefNodes
  defn compile (def:DefNodes) -> Tuple<KeyValue<Symbol,?>> :
    [`Type => type(def)
     `parent? => choice(not empty?(parent(def)))
     `Parent => value?(parent(def))
     `nodes => nested(compile-nodes(def, false))
     `common-options? => choice(not empty?(common-options(def)))
     `common-options => value?(common-options(def))]

  ;Compile all the nodes under the given DefNodes.
  defn compile-nodes (def:DefNodes, ctxt:FieldContext|False) -> Tuple<Tuple<KeyValue<Symbol,?>>> :
    for node in nodes(def) map :
      compile(node, common(def), ctxt)

  ;Helper: Lookup the DefNodes definition of a given name.
  defn lookup-defnodes (name:Symbol) -> DefNodes :
    val x = find({type(_) == name}, filter-by<DefNodes>(defs(ast)))
    match(x:DefNodes) : x
    else : throw(AE(false, "No nodes definition with the name '%~'." % [name]))

  ;Compile a MakeMapper|MakeDoer.
  defn compile (m:MakeMapper|MakeDoer) -> Tuple<KeyValue<Symbol,?>> :
    val context = match(m) :
      (m:MakeMapper) : MapperContext(func-type(m))
      (m:MakeDoer) : DoerContext(func-type(m))
    val compiled-nodes = to-tuple $
      for type-name in nodes(m) seq-cat :
        compile-nodes(lookup-defnodes(type-name), context)
    [`T => gensym(`T)
     `func => gensym(`func)
     `item => gensym(`item)
     `result => gensym(`result)
     `FuncType => func-type(m)
     `ItemType => item-type(m)
     `nodes => nested(compiled-nodes)]

  ;Compile type handler table.
  defn compile (entry:TypeHandlerEntry) -> Tuple<KeyValue<Symbol,?>> :
    [`handler => name(entry),
     `func => func(entry)
     `func-type => func-type(entry)
     `item => item(entry)
     `item-type => item-type(entry)
     `body => body(entry)]

  ;Compile a node.
  defn compile (node:Node, common:Tuple<NodeField>, ctxt:FieldContext|False) -> Tuple<KeyValue<Symbol,?>> :
    [`Node => name(node)
     `all-fields => nested $ to-tuple $
       seq(compile{_, ctxt}, cat(common, fields(node)))]

  ;Compile all the entries of a single NodeField.
  defn compile (field:NodeField, ctxt:FieldContext|False) -> Tuple<KeyValue<Symbol,?>> :
    ;Is the field ignored?
    val ignore-field? = ignore?(type-handler-table,type(field))
    var mapper-name:Symbol|False = false
    var doer-name:Symbol|False = false

    ;Lookup mapper/doer from field context.
    if not ignore-field? :
      match(ctxt) :
        (ctxt:MapperContext) :
          mapper-name = name(mapper(type-handler-table, func-type(ctxt), type(field)))
        (ctxt:DoerContext) :
          doer-name = name(doer(type-handler-table, func-type(ctxt), type(field)))
        (f:False) :
          false
        
    [`name => name(field)
     `type => type(field)
     `options? => choice(not empty?(options(field)))
     `options => value?(options(field))
     `ignore? => choice(ignore-field?)
     `mapper => mapper-name
     `doer => doer-name]

  ;Fill the template.
  val defnodes = to-tuple(filter-by<DefNodes>(defs(ast)))
  val mappers = to-tuple(filter-by<MakeMapper>(defs(ast)))
  val doers = to-tuple(filter-by<MakeDoer>(defs(ast)))
  fill-template(template, [
    `nodetypes => nested $ map(compile, defnodes)
    `mappers => nested $ map(compile, mappers)
    `doers => nested $ map(compile, doers)
    `type-handlers => nested $ to-tuple $
      seq(compile, type-handler-table)])

;============================================================
;====================== Scratch =============================
;============================================================

;let :
;  within (package,sig) = set-stack-trace-filter() :
;    package != `core
;  val str = \<STR>
;    defast :
;      defnodes MyType <: Hashable&Equalable :
;        common :
;          info: FileInfo|False with: (as-method => true)
;        common-options :
;          printer => true
;          equalable => true
;        A :
;          field1: Type1
;          field2: Type2 with: (setter => set-field2)
;        B :
;          field1: Type1
;          field2: Type2 with: (options ...)
;
;      defmapper (f:TLItem -> TLItem) :
;        (x:Type1) : f(x)
;        (x:List<TDefn>) : map({f(_) as TDefn}, x)
;        (x:List<TDefmethod>) : map({f(_) as TDefmethod}, x)
;
;      defdoer (f:TLItem -> ?) :
;        (x:Type1) : f(x)
;
;      make-mapper :
;        func: TLItem -> TLItem
;        item: TLItem
;        nodes: (MyType)
;
;      make-doer :
;        func: TLItem -> ?
;        item: TLItem
;        nodes: (MyType)
;        
;      ignore :
;        FileInfo|False
;        Type2
;  <STR>
;  val form = reader/read-all(str)
;  val parsed = parse-syntax[ast-lang2 / #defast](form)
;  println(parsed)
;  println(compile(parsed))
