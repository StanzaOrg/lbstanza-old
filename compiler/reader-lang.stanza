defpackage stz/reader-lang :
   import core
   import collections
   import macro-utils
   import stz/core-macros

defstruct DefReader :
   name: Symbol
   exp: Symbol
   type
   forms: List<Form>

deftype Form
defstruct TagForm <: Form :
   tag: Symbol
   fields: List<Field>
   body
defstruct SForm <: Form :
   body
defstruct VForm <: Form :
   body
defstruct Field :
   name: Symbol
   prod: Symbol
   type: Int

val STYPE = 0
val LTYPE = 1
val RTYPE = 2

defsyntax stz-reader-lang :
   ;=== Symbols ===
   defn sym? (x) : unwrap-token(x) is Symbol
   defproduction sym: Symbol
   defrule sym = (?x) when sym?(x) : unwrap-token(x)

   ;=== Imported ===
   import (type, exp) from core

   import exp4 from core
   defrule exp4 = (defreader ?name:#sym (?exp:#sym) -> ?type:#type :
                      ?fs:#form ...) :
      val d = DefReader(name, exp, type, fs)
      parse-syntax[core / #exp](compile(d))

   defproduction form: Form
   defrule form = ((?tag:#sym ?fs:#field ...) : ?body:#exp) :
      TagForm(tag, fs, body)
   defrule form = (x : ?body:#exp) :
      SForm(body)
   defrule form = (v : ?body:#exp) :
      VForm(body)
      
   defproduction field: Field
   defrule field = (?name:#sym : ?prod:#sym ~ ...) :
      Field(name, prod, RTYPE)
   defrule field = (?name:#sym : ?prod:#sym) :
      Field(name, prod, STYPE)
   defrule field = ((?name:#sym : ?prod:#sym ~ ...)) :
      Field(name, prod, LTYPE)

defn compile (d:DefReader) :
   ;Compile a form body into a reader function
   defn compile-body (f:Form) -> List :
      match(f) :
         (f:TagForm) :            
            defn field-type (f:Field) :
               val prod-type = switch {prod(f) == _} :
                  `? : `?
                  exp(d) : type(d)
                  else : fatal("Unrecognized type: %_" % [prod(f)])
               switch {type(f) == _} :
                  STYPE : prod-type
                  LTYPE : qquote(List<~ prod-type>)
                  RTYPE  : qquote(List<~ prod-type>)
            val template = `(
               fn (#array:Array, info:False|FileInfo) -> ret :
                  fields{val name:type = #array[i]}
                  body)
            fill-template(template, [
               `body => body(f)
               `ret => type(d)
               `fields => nested $ for (f in fields(f), i in 0 to false) map : [
                  `name => name(f)
                  `type => field-type(f)
                  `i => i]])
         (f:SForm) :
            val template = `(
               fn (x:Symbol, info:False|FileInfo) -> ret :
                  body)
            fill-template(template, [
               `body => body(f),
               `ret => type(d)])
         (f:VForm) :
            val template = `(
               fn (v:?, info:False|FileInfo) -> ret :
                  body)
            fill-template(template, [
               `body => body(f),
               `ret => type(d)])

   ;Compile field into Field
   defn compile (f:Field) :
      val template = `(type{stz/read-lang-engine/SField(`prod)}{
                            stz/read-lang-engine/LField(`prod)}{
                            stz/read-lang-engine/RField(`prod)})
      fill-template(template, [
         `type => choice(type(f))
         `prod => prod(f)])

   ;Compile a form into a Form
   defn compile (f:Form) :
      match(f) :
         (f:TagForm) :
            val template = `(stz/read-lang-engine/TagForm(`tag, [fs], body))
            fill-template(template, [
               `tag => tag(f)
               `fs => splice(map(compile, fields(f)))
               `body => compile-body(f)])
         (f:SForm) :
            val template = `(stz/read-lang-engine/SForm(body))
            fill-template(template, [
               `body => compile-body(f)])
         (f:VForm) :
            val template = `(stz/read-lang-engine/VForm(body))
            fill-template(template, [
               `body => compile-body(f)])
         
   ;Compile reader
   val template = `(
      defn name (form) -> type :
         stz/read-lang-engine/read(form, [fs]))
   fill-template(template, [
      `name => name(d)
      `form => gensym()
      `table => gensym()
      `type => type(d)
      `fs => splice(to-list(seq(compile, forms(d))))])