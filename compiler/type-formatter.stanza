defpackage stz/type-formatter :
  import core
  import collections
  import stz/types
  import stz/type-fargs

;============================================================
;======================== API ===============================
;============================================================

;A type that can be used to create human-readable representations
;of types.
public deftype TypeFormatter

;Format a type as a human-readable object.
public defmulti format (f:TypeFormatter, t:Type|LSType) -> Printable

;Format an FArg as a human-readable object.
public defmulti format (f:TypeFormatter, a:FArg) -> Printable

;============================================================
;========================= Format ===========================
;============================================================

;Create a new type formatter with the given callback for
;looking up names of variables.
public defn TypeFormatter (name:Int -> Symbol) :

  ;HiStanza format(s). 
  ;Format a list of HiStanza types.
  ;- angle-context: True if the list is surrounded by angle brackets <...>. 
  defn hsfs (o:OutputStream, ts:Seqable<Type>, angle-context:True|False) :
    for (t in ts, i in 0 to false) do :
      print(o, ", ") when i > 0
      hsf(o, t, 0, angle-context)

  ;HiStanza format arguments.
  defn argfs (o:OutputStream, xs:Seqable<FArg<Type>>) :
    for (x in xs, i in 0 to false) do :
      print(o, ", ") when i > 0
      match(x) :
        (x:PositionalArg<Type>) :
          hsf(o, type(x), 0, false)
          print(o, " = ?") when optional?(x)
        (x:KeywordArg<Type>) :
          print(o, /name(x))
          print(o, ":")        
          hsf(o, type(x), 0, false)
          print(o, " = ?") when optional?(x)
        (x:VarArg<Type>) :
          print(o, /name(x))
          print(o, ":")
          hsf(o, type(x), 0, false)
          print(o, " ...")

  ;HiStanza formatting.
  ;- The level that this type appears in.
  defn hsf (o:OutputStream, t:Type, lvl:Int, angle-context:True|False) -> ? :
  
    ;Decide whether parentheses are necessary.
    val paren? =
      if hslevel(t) < lvl : true
      else if angle-context : t is TArrow
    val angle-context* = angle-context and not paren?

    print(o, "(") when paren?
    match(t) :
      (t:TArrow) :
        if length(a1(t)) == 1 :
          hsf(o, a1(t)[0], 1, angle-context*)
          print(o, " -> ")
          hsf(o, a2(t), 0, angle-context*)
        else :
          print(o, "(")
          hsfs(o, a1(t), false)
          print(o, ") -> ")
          hsf(o, a2(t), 0, angle-context*)
      (t:TFunction) :
        val type-args = cat(
          for v in targs(t) seq : "%~" % [name(v)]
          for v in cargs(t) seq : "?%~" % [name(v)])
        if not empty?(type-args) :
          print(o, "<%,> . " % [type-args])
        print(o, "(")
        argfs(o, a1(t))
        print(o, ") -> ")
        hsf(o, a2(t), 0, angle-context*)
      (t:TOr) :
        hsf(o, a(t), 1, angle-context*)
        print(o, "|")
        hsf(o, b(t), 1, angle-context*)
      (t:TAnd) :
        hsf(o, a(t), 2, angle-context*)
        print(o, "&")
        hsf(o, b(t), 2, angle-context*)
      ;Atomic
      (t:TOf) :
        write(o, name(n(t)))
        val elide-args? = all?({_ is TGradual}, args(t))
        if not elide-args? :
          print(o, "<")
          hsfs(o, args(t), true)
          print(o, ">")
      (t:TVar) :
        match(/name(t)) :
          (n:Symbol) : write(o, n)
          (_:False) : write(o, name(n(t)))
      (t:TCap) :
        print(o, "?")
        match(/name(t)) :
          (n:Symbol) : write(o, n)
          (_:False) : write(o, name(n(t)))
      (t:TGradual) :
        print(o, "?")
      (t:TBot) :
        print(o, "Void")
      (t:TTop) :
        print(o, "Top")
      (t:TTuple) :
        print(o, "[")
        hsfs(o, args(t), false)
        print(o, "]")
      (t:TUVar) :
        match(bounds(t)) :
          (b:NoBound) :
            print(o, name(n(t)))
          (b:UpperBound) :
            print(o, name(n(t)))
            print(o, "(<: ")
            hsf(o, type(b), 0, false)
            print(o, ")")
          (b:MixBound) :
            print(o, name(n(t)))
            print(o, "(mix ")
            hsfs(o, types(b), false)
            print(o, ")")
        
    print(o, ")") when paren?

  ;HiStanza format(s). 
  ;Format a list of HiStanza types.
  ;- angle-context: True if the list is surrounded by angle brackets <...>. 
  defn lsfs (o:OutputStream, ts:Seqable<LSType>, angle-context:True|False) :
    for (t in ts, i in 0 to false) do :
      print(o, ", ") when i > 0
      lsf(o, t, 0, angle-context)

  ;HiStanza format arguments.
  defn largfs (o:OutputStream, xs:Seqable<FArg<LSType>>) :
    for (x in xs, i in 0 to false) do :
      print(o, ", ") when i > 0
      match(x) :
        (x:PositionalArg<LSType>) :
          lsf(o, type(x), 0, false)
          print(o, " = ?") when optional?(x)
        (x:KeywordArg<LSType>) :
          print(o, /name(x))
          print(o, ":")        
          lsf(o, type(x), 0, false)
          print(o, " = ?") when optional?(x)
        (x:VarArg<LSType>) :
          print(o, /name(x))
          print(o, ":")
          lsf(o, type(x), 0, false)
          print(o, " ...")

  ;LoStanza formatting.
  defn lsf (o:OutputStream, t:LSType, lvl:Int, angle-context:True|False) -> ? :

    ;Decide whether parentheses are necessary.
    val paren? =
      if lslevel(t) < lvl : true
      else if angle-context : t is FnT
    val angle-context* = angle-context and not paren?

    print(o, "(") when paren?
    match(t) :
      (t:TLSFunction) :
        val type-args = cat(
          for v in targs(t) seq : "%~" % [name(v)]
          for v in cargs(t) seq : "?%~" % [name(v)])
        if not empty?(type-args) :
          print(o, "<%,> . " % [type-args])
        print(o, "(")
        largfs(o, a1(t))
        print(o, ") -> ")     
        lsf(o, a2(t), 0, angle-context*) 
      (t:FnT) :
        if length(a(t)) == 1 and r(t) is False :
          lsf(o, a(t)[0], 1, angle-context*)
          print(o, " -> ")
          lsf(o, b(t), 0, angle-context*)
        else :
          print(o, "(")
          match(r(t)) :
            (r:False) :
              lsfs(o, a(t), false)
              print(o, ") -> ")
            (r:LSType) :
              lsfs(o, cat(a(t), [r]), false)
              print(o, " ...) -> ")
          lsf(o, b(t), 0, angle-context*)
      (t:ByteT) :
        print(o, "byte")
      (t:IntT) :
        print(o, "int")
      (t:LongT) :
        print(o, "long")
      (t:FloatT) :
        print(o, "float")
      (t:DoubleT) :
        print(o, "double")
      (t:UnknownT) :
        print(o, "?")
      (t:UVarT) :
        print(o, name(n(t)))
      (t:PtrT) :
        print(o, "ptr<")
        lsf(o, type(t), 0, true)
        print(o, ">")
      (t:RestT) :
        lsf(o, type(t), 1, angle-context*)
        print(o, " ...")
      (t:StructT) :
        val elide-args? = all?({_ is TGradual}, args(t))
        write(o, name(n(t)))
        if not elide-args? :
          print(o, "<")
          hsfs(o, args(t), true)
          print(o, ">")
      (t:RefT) :
        print(o, "ref<")
        hsf(o, type(t), 0, true)
        print(o, ">")        
    print(o, ")") when paren?

  ;Return the formatting function.
  new TypeFormatter :
    defmethod format (this, t:Type|LSType) :
      match(t) :
        (t:Type) : wrap-printable $ hsf{_, t, 0, false}
        (t:LSType) : wrap-printable $ lsf{_, t, 0, false}

    defmethod format (this, a:FArg) :
      defn option-str (b:True|False) :
        "optional " when b else ""
      match(a) :
        (a:PositionalArg) :
          "%_%_" % [option-str(optional?(a)), format(this,type(a))]
        (a:KeywordArg) :
          "%_%_:%_" % [option-str(optional?(a)), /name(a), format(this,type(a))]
        (a:VarArg) :
          "%_:%_ ..." % [/name(a), format(this,type(a))]

;============================================================
;================== Precedences =============================
;============================================================

;Syntax level of type.
;Lower means lower priority. Higher means tighter binding.
defn hslevel (t:Type)-> Int :
  match(t) :
    ;Arrows
    (t:TArrow) : 0
    ;Or Types
    (t:TOr) : 1
    ;And Types
    (t:TAnd) : 2
    ;Atomic types
    (t) : 3

;Syntax level of LoStanza type.
defn lslevel (t:LSType) -> Int :
  match(t) :
    ;Function
    (t:FnT) : 0
    ;Everything else is atomic
    (t) : 1

;============================================================
;================== Utilities ===============================
;============================================================

;Helper: Wrap closure in printable object
defn wrap-printable (f:OutputStream -> False) :
  new Printable :
    defmethod print (o:OutputStream, this) :
      f(o)