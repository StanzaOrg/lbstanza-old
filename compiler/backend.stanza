;See License.txt for details about licensing.

defpackage stz/backend :
  import core

;Interface   
public deftype Backend
public defmulti num-regs (b:Backend) -> Int
public defmulti num-fregs (b:Backend) -> Int
public defmulti call-regs (b:Backend) -> Tuple<Int>
public defmulti call-fregs (b:Backend) -> Tuple<Int>
public defmulti callc-regs (b:Backend) -> Tuple<Int>
public defmulti callc-fregs (b:Backend) -> Tuple<Int>
public defmulti callc-ret (b:Backend) -> Int
public defmulti callc-fret (b:Backend) -> Int
public defmulti c-rsp-arg (b:Backend) -> Int
public defmulti c-preserved-regs (b:Backend) -> Tuple<Int>
public defmulti c-preserved-fregs (b:Backend) -> Tuple<Int>
public defmulti c-num-spill-slots (b:Backend) -> Int
public defmulti prepend-underscore? (b:Backend) -> True|False
public defmulti use-global-offset-table? (b:Backend) -> True|False
public defmulti use-procedure-linkage-table? (b:Backend) -> True|False
public defmulti generate-export-directives-table? (b:Backend) -> True|False

;X64 Backend
public defn X64Backend () :
  val call-regs = to-tuple(2 to 15)
  val call-fregs = to-tuple(0 to 16)
  val callc-regs = [5 4 3 2 7 8]
  val callc-fregs = to-tuple(0 to 8)
  val c-preserved = [1, 6, 11, 12, 13, 14]
  new Backend :
    defmethod num-regs (this) : 15
    defmethod num-fregs (this) : 16
    defmethod call-regs (this) : call-regs
    defmethod call-fregs (this) : call-fregs
    defmethod callc-regs (this) : callc-regs
    defmethod callc-fregs (this) : callc-fregs    
    defmethod callc-ret (this) : 0
    defmethod callc-fret (this) : 0
    defmethod c-rsp-arg (this) : 6
    defmethod c-preserved-regs (this) : c-preserved
    defmethod c-preserved-fregs (this) : []
    defmethod prepend-underscore? (this) : true
    defmethod use-global-offset-table? (this) : true
    defmethod use-procedure-linkage-table? (this) : false
    defmethod generate-export-directives-table? (this) : false
    defmethod c-num-spill-slots (this) : 0

;L64 Backend
public defn L64Backend () :
  val call-regs = to-tuple(2 to 15)
  val call-fregs = to-tuple(0 to 16)
  val callc-regs = [5 4 3 2 7 8]
  val callc-fregs = to-tuple(0 to 8)
  val c-preserved = [1, 6, 11, 12, 13, 14]
  new Backend :
    defmethod num-regs (this) : 15
    defmethod num-fregs (this) : 16
    defmethod call-regs (this) : call-regs
    defmethod call-fregs (this) : call-fregs
    defmethod callc-regs (this) : callc-regs
    defmethod callc-fregs (this) : callc-fregs
    defmethod callc-ret (this) : 0
    defmethod callc-fret (this) : 0
    defmethod c-rsp-arg (this) : 6
    defmethod c-preserved-regs (this) : c-preserved
    defmethod c-preserved-fregs (this) : []
    defmethod prepend-underscore? (this) : false
    defmethod use-global-offset-table? (this) : true
    defmethod use-procedure-linkage-table? (this) : true
    defmethod generate-export-directives-table? (this) : false
    defmethod c-num-spill-slots (this) : 0

;W64 Backend
public deftype W64Backend <: Backend
public defn W64Backend () :
  val call-regs = to-tuple(2 to 15)
  val call-fregs = to-tuple(0 to 16)
  val callc-regs = [2 3 7 8]
  val callc-fregs = to-tuple(0 to 4)
  val c-preserved-regs = [1, 4, 5, 6, 11, 12, 13, 14]
  val c-preserved-fregs = [6, 7, 8, 9, 0, 11, 12, 13, 14, 15]
  new W64Backend :
    defmethod num-regs (this) : 15
    defmethod num-fregs (this) : 16
    defmethod call-regs (this) : call-regs
    defmethod call-fregs (this) : call-fregs
    defmethod callc-regs (this) : callc-regs
    defmethod callc-fregs (this) : callc-fregs
    defmethod callc-ret (this) : 0
    defmethod callc-fret (this) : 0
    defmethod c-rsp-arg (this) : 6
    defmethod c-preserved-regs (this) : c-preserved-regs
    defmethod c-preserved-fregs (this) : c-preserved-fregs
    defmethod prepend-underscore? (this) : false
    defmethod use-global-offset-table? (this) : false
    defmethod use-procedure-linkage-table? (this) : false
    defmethod generate-export-directives-table? (this) : true
    defmethod c-num-spill-slots (this) : 4