;See License.txt for details about licensing.

defpackage stz/main :
  import core
  import parser
  import collections
  import reader
  import stz/compiler
  import stz/arg-parser
  import stz/params
  import stz/config
  import stz/repl
  import stz/dependencies
  import stz/auto-doc
  import stz/defs-db
  import stz/proj-manager
  import stz/aux-file
  import stz/comments
  
  ;Macro Packages
  import stz/ast-lang
  import stz/reader-lang
  import stz/ast-printer-lang
  import stz/check-lang
  import stz/renamer-lang
  import stz/resolver-lang
  import stz/serializer-lang
  import stz/test-lang

;============================================================
;====================== Version =============================
;============================================================

val ABOUT-MSG =
\<MSG>
             L.B.Stanza Programming Language

                    Version %_

Copyright (c) 2016-2019, Patrick Shaobai Li, The Regents of the
University of California. All Rights Reserved.
<MSG>

defn print-version (parsed:ParseResult) :
  val version = string-join(STANZA-VERSION, ".")
  if has-flag?(parsed, "terse") :
    print(version)
  else :
    println(ABOUT-MSG % [version])

public val VERSION-COMMAND =
  Command("version", [
    MarkerFlag("terse")],
    print-version)

;============================================================
;================== Compilation System ======================
;============================================================

defn build-system (verbose?:True|False) :
  new System :
    defmethod call-cc (this, platform:Symbol, asm:String, ccfiles:Tuple<String>, ccflags:Tuple<String> output:String) :        
      ;Collect arguments
      val args = Vector<String>()
      defn emit-arg (s:String) : add(args, s)
      defn emit-args (ss:Seqable<String>) : do(emit-arg, ss)

      ;Compiler name
      emit-arg $ switch(platform) :
        `os-x : "cc"
        `linux : "cc"
        `windows : "gcc"

      ;C Standard
      emit-arg $ "-std=gnu99"

      ;ASM File
      emit-arg $ asm

      ;Driver file
      emit-arg $ stanza-file("runtime/driver.c")

      ;Extra cc files
      emit-args $ ccfiles

      ;Output file
      emit-args $ ["-o" output]

      ;Math library
      emit-arg $ "-lm"

      ;Backward compatibility flag for OS-X Pre-Catalina
      if platform == `os-x :
        emit-arg $ "-mmacosx-version-min=10.13"

      ;Position independence flag
      if platform == `linux :
        emit-args $ ["-ldl" "-fPIC"]

      ;Extra cc flags
      emit-args $ ccflags

      ;Driver Platform flag
      emit-arg $ "-D"
      emit-arg $ switch(platform) :
        `os-x : "PLATFORM_OS_X"
        `linux : "PLATFORM_LINUX"
        `windows : "PLATFORM_WINDOWS"

      ;Output for debugging
      if verbose? :
        println("Call C compiler with arguments:")
        within indented() :
          for a in args do :
            println("%~" % [a])

      ;Call system
      val return-code = call-system(args[0], to-tuple(args))
      
      ;Return true if successful
      return-code == 0

    defmethod call-shell (this, platform:Symbol, command:String) :
      if verbose? :
        println("Call shell with command:")
        within indented() :
          println("%~" % [command])
      call-system("sh", ["sh" "-c" command])
      false
      
    defmethod make-temporary-file (this) :
      val filename = to-string("temp%_.s" % [rand()])
      if verbose? :
        println("Create temporary file %~." % [filename])
      filename
      
    defmethod delete-temporary-file (this, file:String) :
      if verbose? :
        println("Delete temporary file %~." % [file])
      delete-file(file)

;============================================================
;================== Compilation =============================
;============================================================
defn compile (parsed:ParseResult) :
  defn main () :
    ensure-non-empty-input!()
    ensure-supported-platform!()
    ensure-output-flag!()
    val verbose? = has-flag?(parsed, "verbose")
    compile(build-settings(), build-system(verbose?), verbose?)

  defn ensure-non-empty-input! () :
    if empty?(args(parsed)) :
      throw(Exception("No input files."))
    
  defn ensure-supported-platform! () :
    if has-flag?(parsed, "platform") :
      val p = to-symbol(single(parsed, "platform"))
      ensure-supported-platform(p)
    
  defn ensure-output-flag! () :
    val has-output? = has-flag?(parsed, "s") or has-flag?(parsed, "o") or has-flag?(parsed, "pkg")
    if not has-output? :
      throw(Exception("Stanza compile command requires either a -s, -o, or -pkg flag."))

  defn build-settings () :
    defn symbol? (name:String) :
      to-symbol(single(parsed, name)) when has-flag?(parsed, name)
    defn string? (name:String) :
      single?(parsed, name, false)
    defn flag? (name:String) :
      has-flag?(parsed, name)
    defn tuple? (name:String) :
      if has-flag?(parsed, name) : to-tuple(multiple(parsed, name))
      else : []
    defn symbols? (name:String) :
      if has-flag?(parsed, name) : to-tuple(seq(to-symbol, multiple(parsed, name)))
      else : []
    val pkg-dir = if has-flag?(parsed, "pkg") :
      val pkgs = multiple(parsed, "pkg")
      if empty?(pkgs) : "."
      else : head(pkgs)
    val ccflags =
      if has-flag?(parsed, "ccflags") :
        val flag1 = single(parsed, "ccflags")
        to-tuple(tokenize-shell-command(flag1))
      else : []      
    BuildSettings(
      BuildPackages(to-tuple(args(parsed))),
      tuple?("supported-vm-packages"),
      symbol?("platform")
      string?("s")
      string?("o")
      pkg-dir
      flag?("optimize")
      tuple?("ccfiles")
      ccflags
      symbols?("flags"))

  ;Launch!
  main()
  
public val COMPILE-COMMAND =
  Command("compile", [
    SingleFlag("platform", true),
    SingleFlag("s", true),
    SingleFlag("o", true),    
    MultipleFlag("pkg", 0, 1, true),
    MultipleFlag("ccfiles", true),
    GreedyFlag("ccflags", true),
    MultipleFlag("flags", true),
    MultipleFlag("supported-vm-packages", true),
    MarkerFlag("optimize")
    MarkerFlag("verbose")], compile)

;============================================================
;==================== Build Command =========================
;============================================================
defn build (parsed:ParseResult) :
  defn main () :
    ensure-proper-input!()
    val verbose? = has-flag?(parsed, "verbose")
    compile(build-settings(), build-system(verbose?), verbose?)

  defn ensure-proper-input! () :
    if length(args(parsed)) > 1 :
      throw(Exception("Too many build targets given."))

  defn build-settings () :
    defn string? (name:String) :
      single?(parsed, name, false)
    defn flag? (name:String) :
      has-flag?(parsed, name)
    defn symbols? (name:String) :
      if has-flag?(parsed, name) : to-tuple(seq(to-symbol, multiple(parsed, name)))
      else : []
    val pkg-dir = if has-flag?(parsed, "pkg") :
      val pkgs = multiple(parsed, "pkg")
      if empty?(pkgs) : "."
      else : head(pkgs)
    val target = if empty?(args(parsed)) : `main
                 else : to-symbol(head(args(parsed)))
    BuildSettings(
      BuildTarget(target)
      []
      false
      string?("s")
      string?("o")
      pkg-dir
      flag?("optimize")
      []
      []
      symbols?("flags"))

  ;Launch!
  main()
  
public val BUILD-COMMAND =
  Command("build", [
    SingleFlag("s", true),
    SingleFlag("o", true),
    MultipleFlag("pkg", 0, 1, true),
    MultipleFlag("flags", true),
    MarkerFlag("optimize")
    MarkerFlag("verbose")],
    build)

;============================================================
;==================== Clean Command =========================
;============================================================

defn clean (parsed:ParseResult) :
  if not empty?(args(parsed)) :
    throw(Exception("Command clean does not take arguments."))
  read-config-file()  
  delete-aux-file()

public val CLEAN-COMMAND = Command("clean", [], clean)

;============================================================
;==================== Extension =============================
;============================================================
defn extend (parsed:ParseResult) :
  defn main () :
    read-config-file()
    ensure-output-flag!()
    val verbose? = has-flag?(parsed, "verbose")
    compile(build-settings(), build-system(verbose?), verbose?)

  defn ensure-output-flag! () :
    val has-output? = has-flag?(parsed, "s") or has-flag?(parsed, "o")
    if not has-output? :
      throw(Exception("Stanza extend command requires either a -s or -o flag."))

  defn build-settings () :
    defn symbol? (name:String) :
      to-symbol(single(parsed, name)) when has-flag?(parsed, name)
    defn string? (name:String) :
      single?(parsed, name, false)
    defn flag? (name:String) :
      has-flag?(parsed, name)
    defn tuple? (name:String) :
      if has-flag?(parsed, name) : to-tuple(multiple(parsed, name))
      else : []
    defn symbols? (name:String) :
      if has-flag?(parsed, name) : to-tuple(seq(to-symbol, multiple(parsed, name)))
      else : []
    val ccflags =
      if has-flag?(parsed, "ccflags") :
        val flag1 = single(parsed, "ccflags")
        to-tuple(tokenize-shell-command(flag1))
      else : []
    val new-args = Vector<String>()
    add-all(new-args, args(parsed))
    add(new-args, "stz/driver")
    BuildSettings(
      BuildPackages(to-tuple(new-args)),
      tuple?("supported-vm-packages"),
      false
      string?("s")
      string?("o")
      false
      flag?("optimize")
      tuple?("ccfiles")
      ccflags
      symbols?("flags"))

  ;Launch!
  main()

public val EXTEND-COMMAND =
  Command("extend", 
   [SingleFlag("s", true),
    SingleFlag("o", true),
    MultipleFlag("ccfiles", true),
    GreedyFlag("ccflags", true),
    MultipleFlag("flags", true),
    MultipleFlag("supported-vm-packages", true),
    MarkerFlag("optimize")
    MarkerFlag("verbose")]
    extend)

;============================================================
;================== Compile Test ============================
;============================================================
defn compile-test (parsed:ParseResult) :
  defn main () :
    ensure-non-empty-input!()
    ensure-supported-platform!()
    ensure-output-flag!()
    val verbose? = has-flag?(parsed, "verbose")
    compile(build-settings(), build-system(verbose?), verbose?)

  defn ensure-non-empty-input! () :
    if empty?(args(parsed)) :
      throw(Exception("No input files."))
    
  defn ensure-supported-platform! () :
    if has-flag?(parsed, "platform") :
      val p = to-symbol(single(parsed, "platform"))
      ensure-supported-platform(p)
    
  defn ensure-output-flag! () :
    val has-output? = has-flag?(parsed, "s") or has-flag?(parsed, "o") or has-flag?(parsed, "pkg")
    if not has-output? :
      throw(Exception("Stanza compile command requires either a -s, -o, or -pkg flag."))

  defn build-settings () :
    defn symbol? (name:String) :
      to-symbol(single(parsed, name)) when has-flag?(parsed, name)
    defn string? (name:String) :
      single?(parsed, name, false)
    defn flag? (name:String) :
      has-flag?(parsed, name)
    defn tuple? (name:String) :
      if has-flag?(parsed, name) : to-tuple(multiple(parsed, name))
      else : []
    defn symbols? (name:String) :
      if has-flag?(parsed, name) : to-tuple(seq(to-symbol, multiple(parsed, name)))
      else : []
    val pkg-dir = if has-flag?(parsed, "pkg") :
      val pkgs = multiple(parsed, "pkg")
      if empty?(pkgs) : "."
      else : head(pkgs)
    val ccflags =
      if has-flag?(parsed, "ccflags") :
        val flag1 = single(parsed, "ccflags")
        to-tuple(tokenize-shell-command(flag1))
      else : []
    val new-args = to-tuple $ cat(
      args(parsed)
      ["stz/test-driver"])
    val new-flags = to-tuple $ cat(
      symbols?("flags")
      [`TESTING])
    BuildSettings(
      BuildPackages(new-args)
      []
      symbol?("platform")
      string?("s")
      string?("o")
      pkg-dir
      flag?("optimize")
      tuple?("ccfiles")
      ccflags
      new-flags)

  ;Launch!
  main()
  
public val COMPILE-TEST-COMMAND =
  Command("compile-test", [
    SingleFlag("platform", true),
    SingleFlag("s", true),
    SingleFlag("o", true),
    MultipleFlag("pkg", 0, 1, true),
    MultipleFlag("ccfiles", true),
    GreedyFlag("ccflags", true),
    MultipleFlag("flags", true),
    MarkerFlag("optimize")
    MarkerFlag("verbose")],
    compile-test)

;============================================================
;=================== Installation ===========================
;============================================================

defn install (parsed:ParseResult) :
   ;Get Stanza platform
   val platform = to-symbol(single(parsed, "platform"))
   ensure-supported-platform(platform)
   
   ;Get installation directory
   val install-dir = match(resolve-path("License.txt")) :
      (path:String) :
         val stz-suffix = norm-path("/License.txt")
         if suffix?(path, stz-suffix) :
            val n = length(stz-suffix)
            path[0 to (length(path) - n)]               
         else :  
            throw $ Exception("Could not determine Stanza installation directory.")
      (path:False) :
         throw $ Exception("Could not determine Stanza installation directory.")
         
   defn open-config-file () :
      if has-flag?(parsed, "path") :
         val path = single(parsed, "path")
         val filepath = norm-path("%_/.stanza" % [path])
         with-output-file(FileOutputStream(filepath), write-config-file)
         match(resolve-path(filepath)) :
            (fullpath:String) :
               val suffix = norm-path("/.stanza")
               if suffix?(fullpath, suffix) :
                  val n = length(suffix)
                  val dir = fullpath[0 to (length(fullpath) - n)]
                  println("Stanza installation finished. Created %_ file." % [fullpath])                  
                  println("Remember to add %_ to your STANZA_CONFIG environment variable." % [dir])                  
               else :
                  throw $ Exception("Stanza installation failed. Could not create %_ file." % [filepath])
            (fullpath:False) :
               throw $ Exception("Stanza installation failed. Could not create %_ file." % [filepath])
      else :
         match(get-env("HOME")) :
            (home:String) :
               val filepath = norm-path("%_/.stanza" % [home])
               with-output-file(FileOutputStream(filepath), write-config-file)
            (home:False) :
               throw $ Exception("Could not locate user's home directory.")
               
   defn write-config-file () :
      println("install-dir = %~" % [install-dir])
      println("platform = %~" % [platform])

   ;Driver
   open-config-file()

public val INSTALL-COMMAND =
  Command("install", 
   [SingleFlag("platform"),
    SingleFlag("path", true)]
    install)

;============================================================
;===================== Path =================================
;============================================================

defn show-path (parsed:ParseResult) :
  ;Verification
  if not empty?(args(parsed)) :
    throw $ Exception("The stanza path command does not take any arguments.")
  read-config-file()
  println(STANZA-INSTALL-DIR)

public val PATH-COMMAND = Command("path", [], show-path)

;============================================================
;======================= Repl Command =======================
;============================================================

defn repl-command (parsed:ParseResult) :
  ;Read configuration file
  read-config-file()

  ;Add pkg directories to pkg-dirs
  for dir in multiple?(parsed, "pkg", List()) do :
    STANZA-PKG-DIRS = cons(dir, STANZA-PKG-DIRS)

  ;Add flags
  for flag in multiple?(parsed, "flags", List()) do :
    add-flag(to-symbol(flag))

  ;Add platform flag
  add-flag(platform-flag(OUTPUT-PLATFORM))

  ;Launch REPL  
  repl(to-tuple(args(parsed)))

public val REPL-COMMAND = 
  Command("repl",
    [MultipleFlag("pkg", true)
     MultipleFlag("flags", true)],
    repl-command)

;============================================================
;======================= Run Command ========================
;============================================================

defn run-command (parsed:ParseResult) :
  ;Read configuration file
  read-config-file()

  ;Add pkg directories to pkg-dirs
  for dir in multiple?(parsed, "pkg", List()) do :
    STANZA-PKG-DIRS = cons(dir, STANZA-PKG-DIRS)

  ;Add flags
  for flag in multiple?(parsed, "flags", List()) do :
    add-flag(to-symbol(flag))

  ;Add platform flag
  add-flag(platform-flag(OUTPUT-PLATFORM))

  ;Run in REPL
  run-in-repl(to-tuple(args(parsed)))

public val RUN-COMMAND =
  Command("run",
    [MultipleFlag("pkg", true)
     MultipleFlag("flags", true)],
    run-command)

;============================================================
;==================== Run Test Command ======================
;============================================================

defn run-test-command (parsed:ParseResult) :
  ;Read configuration file
  read-config-file()

  ;Add pkg directories to pkg-dirs
  for dir in multiple?(parsed, "pkg", List()) do :
    STANZA-PKG-DIRS = cons(dir, STANZA-PKG-DIRS)

  ;Add flags
  for flag in multiple?(parsed, "flags", List()) do :
    add-flag(to-symbol(flag))

  ;Add platform flag
  add-flag(platform-flag(OUTPUT-PLATFORM))

  ;Add testing flag
  add-flag(`TESTING)

  ;New arguments
  val new-args = to-tuple $ cat(
    args(parsed)
    ["stz/test-driver"])
 
  ;Create new command-line arguments for test driver
  val driver-flags = Vector<String>()
  defn emit-flag (s:String) : add(driver-flags, s)
  defn emit-flags (ss:Seqable<String>) : do(emit-flag, ss)
  emit-flags $ ["run-test" "run"]
  emit-flags $ multiple?(parsed, "named", List())
  if has-flag?(parsed, "tagged") :
    emit-flag $ "-tagged"
    emit-flags $ multiple?(parsed, "tagged", List())
  if has-flag?(parsed, "not-tagged") :
    emit-flag $ "-not-tagged"
    emit-flags $ multiple?(parsed, "not-tagged", List())
  if has-flag?(parsed, "log") :
    emit-flag $ "-log"
    emit-flag $ single(parsed, "log")
  set-command-line-arguments(to-tuple(driver-flags))

  ;Run in REPL
  run-in-repl(new-args)

public val RUN-TEST-COMMAND =
  Command("run-test",
    [MultipleFlag("pkg", true)
     MultipleFlag("flags", true)
     MultipleFlag("named", true)
     MultipleFlag("tagged", true)
     MultipleFlag("not-tagged", true)
     SingleFlag("log", true)],
    run-test-command)

;============================================================
;================= Dependency Analysis Command ==============
;============================================================

defn analyze-dependencies (parsed:ParseResult) :
  defn main () :
    ensure-non-empty-input!()
    ensure-supported-platform!()
    val ignore-cache? = has-flag?(parsed, "ignore-cache")
    val output = single?(parsed, "o", false)
    analyze-dependencies(build-settings(), ignore-cache?, output)

  defn ensure-non-empty-input! () :
    if empty?(args(parsed)) :
      throw(Exception("No input files."))
    if has-flag?(parsed, "build-target") :
      if length(args(parsed)) > 1 :
        throw(Exception("Multiple build targets given."))
    
  defn ensure-supported-platform! () :
    if has-flag?(parsed, "platform") :
      val p = to-symbol(single(parsed, "platform"))
      ensure-supported-platform(p)

  defn build-settings () :
    defn symbol? (name:String) :
      to-symbol(single(parsed, name)) when has-flag?(parsed, name)
    defn string? (name:String) :
      single?(parsed, name, false)
    defn flag? (name:String) :
      has-flag?(parsed, name)
    defn tuple? (name:String) :
      if has-flag?(parsed, name) : to-tuple(multiple(parsed, name))
      else : []
    defn symbols? (name:String) :
      if has-flag?(parsed, name) : to-tuple(seq(to-symbol, multiple(parsed, name)))
      else : []
    val pkg-dir = if has-flag?(parsed, "pkg") :
      val pkgs = multiple(parsed, "pkg")
      "." when empty?(pkgs) else head(pkgs)
    val input =
      if has-flag?(parsed, "build-target") :
        BuildTarget(to-symbol(head(args(parsed))))
      else :
        BuildPackages(to-tuple(args(parsed)))
    BuildSettings(
      input,
      tuple?("supported-vm-packages"),
      symbol?("platform")
      false
      false
      pkg-dir
      flag?("optimize")
      []
      []
      symbols?("flags"))

  ;Launch!
  main()
  
public val ANALYZE-DEPENDENCIES-COMMAND =
  Command("analyze-dependencies", [
    SingleFlag("o", true),
    SingleFlag("platform", true),
    MarkerFlag("build-target"),
    MarkerFlag("ignore-cache"),
    MultipleFlag("pkg", 0, 1, true),
    MultipleFlag("flags", true),
    MultipleFlag("supported-vm-packages", true),
    MarkerFlag("optimize")], analyze-dependencies)

;============================================================
;========================= Doc Command ======================
;============================================================

defn auto-doc (parsed:ParseResult) :
  defn main () :
    ensure-non-empty-input!()
    ensure-supported-platform!()
    val output = single(parsed, "o")
    val pkg-filter = single?(parsed, "pkg-filter", false)
    val fig-filter = single?(parsed, "fig-filter", false)
    val toc-renamer = single?(parsed, "toc-renamer", false)
    val trace? = has-flag?(parsed, "trace")
    auto-doc(build-settings(), output, pkg-filter, fig-filter, toc-renamer, trace?)

  defn ensure-non-empty-input! () :
    if empty?(args(parsed)) :
      throw(Exception("No input files."))
    if has-flag?(parsed, "build-target") :
      if length(args(parsed)) > 1 :
        throw(Exception("Multiple build targets given."))
    
  defn ensure-supported-platform! () :
    if has-flag?(parsed, "platform") :
      val p = to-symbol(single(parsed, "platform"))
      ensure-supported-platform(p)

  defn build-settings () :
    defn symbol? (name:String) :
      to-symbol(single(parsed, name)) when has-flag?(parsed, name)
    defn string? (name:String) :
      single?(parsed, name, false)
    defn flag? (name:String) :
      has-flag?(parsed, name)
    defn tuple? (name:String) :
      if has-flag?(parsed, name) : to-tuple(multiple(parsed, name))
      else : []
    defn symbols? (name:String) :
      if has-flag?(parsed, name) : to-tuple(seq(to-symbol, multiple(parsed, name)))
      else : []
    val pkg-dir = if has-flag?(parsed, "pkg") :
      val pkgs = multiple(parsed, "pkg")
      if empty?(pkgs) : "."
      else : head(pkgs)
    val input =
      if has-flag?(parsed, "build-target") :
        BuildTarget(to-symbol(head(args(parsed))))
      else :
        BuildPackages(to-tuple(args(parsed)))
    BuildSettings(
      input,
      [],
      symbol?("platform")
      false
      false
      pkg-dir
      flag?("optimize")
      []
      []
      symbols?("flags"))

  ;Launch!
  main()
  
public val DOC-COMMAND =
  Command("doc", [
    SingleFlag("o", false),
    SingleFlag("pkg-filter", true),
    SingleFlag("fig-filter", true),
    SingleFlag("toc-renamer", true),
    MarkerFlag("trace"),
    SingleFlag("platform", true),
    MarkerFlag("build-target"),
    MultipleFlag("pkg", 0, 1, true),
    MultipleFlag("flags", true),
    MarkerFlag("optimize")], auto-doc)

;============================================================
;======================= DefsDB Command =====================
;============================================================

defn defs-db (parsed:ParseResult) :
  defn main () :
    ensure-non-empty-input!()
    do(ensure-proj-file!, args(parsed))
    ensure-supported-platform!()
    val output = single(parsed, "o")
    defs-db(db-input(), output)

  defn ensure-non-empty-input! () :
    if empty?(args(parsed)) :
      throw(Exception("No input files."))
    if has-flag?(parsed, "build-target") :
      if length(args(parsed)) > 1 :
        throw(Exception("Multiple build targets given."))

  defn ensure-proj-file! (file:String) :
    if not suffix?(file, ".proj") :
      throw(Exception("File %~ is not a valid file for building definitions database. \
                       A project file (.proj) is expected." % [file]))
    
  defn ensure-supported-platform! () :
    if has-flag?(parsed, "platform") :
      val p = to-symbol(single(parsed, "platform"))
      ensure-supported-platform(p)

  defn db-input () -> DefsDbInput :
    defn symbol? (name:String) :
      to-symbol(single(parsed, name)) when has-flag?(parsed, name)
    defn flag? (name:String) :
      has-flag?(parsed, name)
    defn symbols? (name:String) :
      if has-flag?(parsed, name) :
        to-tuple(seq(to-symbol, multiple(parsed, name)))
      else : []
    DefsDbInput(
      to-tuple(args(parsed)),  ;proj-files
      symbol?("platform"),     ;platform
      symbols?("flags"),       ;flags
      flag?("optimize",),      ;optimize?   
      )        

  ;Launch!
  main()
  
public val DEFS-DB-COMMAND =
  Command("definitions-database",
    [
      SingleFlag("o", false),
      SingleFlag("platform", true),
      MultipleFlag("flags", true),
      MarkerFlag("optimize"), 
    ], defs-db), 
    

;============================================================
;================== Check Docs Command ======================
;============================================================

defn check-comments (parsed:ParseResult) :
  ;Retrieve name of doc structure file
  val structure-file = let :
    val args = args(parsed)
    if length(args) != 1 :
      throw(Exception("No doc structure file provided."))
    head(args)

  ;Retrieve blocks to accept
  val accepts = to-tuple(multiple?(parsed, "accept", List()))

  ;Launch!
  check-project-doc-consistency(structure-file, accepts)

public val CHECK-DOCS-COMMAND = 
  Command("check-docs",
        [MultipleFlag("accept", true)]
        check-comments)

;============================================================
;================== Standard Commands =======================
;============================================================

public val STANZA-COMMANDS = [
  COMPILE-COMMAND
  INSTALL-COMMAND
  VERSION-COMMAND
  BUILD-COMMAND
  CLEAN-COMMAND
  PATH-COMMAND
  REPL-COMMAND
  ANALYZE-DEPENDENCIES-COMMAND
  DOC-COMMAND
  DEFS-DB-COMMAND
  RUN-COMMAND
  RUN-TEST-COMMAND
  EXTEND-COMMAND
  COMPILE-TEST-COMMAND
  CHECK-DOCS-COMMAND]

;============================================================
;================== Main Interface ==========================
;============================================================

defn print-exceptions (e:Exception) :
  match(e) :
    (e:NoMatchException) : do(println, causes(e))
    (e) : println(e)

public defn stanza-main (args:Seqable<String>) :
  try :
    parse-args(STANZA-COMMANDS, COMPILE-COMMAND, args)
  catch (e:Exception) :
    print-exceptions(e)
    exit(-1)

public defn stanza-main () :  
  initialize-process-launcher()
  set-max-heap-size(STANZA-MAX-COMPILER-HEAP-SIZE)
  stanza-main(command-line-arguments()[1 to false])

;============================================================
;======================= Utilities ==========================
;============================================================

defn stanza-file (path:String) :
  norm-path(string-join $ [STANZA-INSTALL-DIR '/' path])
