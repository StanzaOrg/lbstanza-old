;See License.txt for details about licensing.

defpackage stz/main :
   import core
   import collections
   import reader
   import stz/compiler
   import stz/arg-parser
   import stz/params
   
   ;Macro Packages
   import stz/langs
   import stz/renamer-lang
   import stz/resolver-lang
   import stz/serializer-lang

;============================================================
;====================== Version =============================
;============================================================

val ABOUT-MSG =
\<MSG>
             L.B.Stanza Programming Language

                    Version %_

Copyright (c) 2016, Patrick Shaobai Li, The Regents of the
University of California. All Rights Reserved.
<MSG>

defn print-version () :
   val version = string-join(STANZA-VERSION, ".")
   println(ABOUT-MSG % [version])

;============================================================
;================== Config File Parsing =====================
;============================================================

defsyntax stanza-config :
   defn ut (x) :
      unwrap-token(x)

   defn first-info (form) -> Maybe<FileInfo> :
      match(form) :
         (form:Token) : One(info(form))
         (form:List) : first(first-info, form)
         (form) : None()

   defn PE (form, msg) :
      throw $ match(value?(first-info(form))) :
         (info:FileInfo) : Exception("%_: %_" % [info, msg])
         (info:False) : Exception(msg)

   defrule :
      sym = (?x) when ut(x) is Symbol : ut(x)
      string = (?x) when ut(x) is String : ut(x)
      string! = (?s:#string) : s
      string! != () : PE(form, "Expected a string here.")

      platform! = (?x:#sym) :
         try : to-platform(x)
         catch (e:Exception) : PE(form, e)
      platform! != () :
         PE(form, "Expected a platform here.")

      entry = (install-dir = ?path:#string!) :
         STANZA-INSTALL-DIR = path
      entry = (platform = ?p:#platform!) :
         OUTPUT-PLATFORM = p
      entry != () :
         PE(form, "Invalid configuration rule.")

defn to-platform (s) :
   val p = to-symbol(s)
   if not contains?([`os-x, `linux], p) :
      throw $ Exception("%_ is not a supported platform." % [p])
   p   

defn read-config-file () :
   ;Extract parameters from config file
   label break :
      defn extract-from-file (filename:String) :
         if file-exists?(filename) :
            val forms = read-file(filename)
            with-syntax(stanza-config) :
               match-syntax(forms) :
                  (?e:#entry ...) : false
            break(false)

      defn extract-from-env (name:String) :
         match(get-env(name)) :
            (path:String) : extract-from-file(to-string("%_/.stanza" % [path]))
            (path:False) : false

      extract-from-file(".stanza")
      extract-from-env("STANZA_CONFIG")
      extract-from-env("HOME")
      throw(Exception("Could not locate .stanza configuration file."))

   ;Verify parameters
   val stanza-exe = to-string("%_/stanza" % [STANZA-INSTALL-DIR])
   if not file-exists?(stanza-exe) :
      throw $ Exception(STANZA-EXE-MSG % [STANZA-INSTALL-DIR, stanza-exe])

val STANZA-EXE-MSG = "Stanza install directory is set to %_, but could not locate stanza compiler at %_."   

;============================================================
;================== Compilation =============================
;============================================================
defn stanza-file (path:String) :
   to-string(path % [STANZA-INSTALL-DIR])
      
defn call-cc (asmfile:String, outfile:String, ccfiles:List<String>, ccflags:False|String) :
   ;Get list of all files and flags
   val all-files = cat-all $ [
      [asmfile,
       stanza-file("%_/runtime/driver.c")]
      ccfiles]
   val all-flags = match(ccflags) :
      (ccflags:False) : ["-lm"]
      (ccflags:String) : ["-lm" ccflags]
      
   ;Create command
   defn escape (x) : "'%_'" % [x]
   val cmd = to-string $
      "cc -std=c99 %* -o %_ %*" % [
         join(seq(escape, all-files), " "), escape(outfile), join(all-flags, " ")]
   println(cmd)

   ;Call system compiler
   call-system(cmd)

defn compile (parsed:ParseResult) :
   ;Set up configuration
   read-config-file()

   ;Verify input files
   if empty?(args(parsed)) :
      throw $ Exception("No input files given.")
   if (not has-flag?(parsed, "s")) and (not has-flag?(parsed, "o")) and (not has-flag?(parsed, "pkg")) :
      throw $ Exception("Stanza compile command requires at least one of the following flags: -s, -o, or -pkg.")
   if length(multiple?(parsed, "pkg", List())) > 1 :
      throw $ Exception("Multiple pkg output directories given.")

   ;Flag settings
   if has-flag?(parsed, "optimize") :
      add-flag(`OPTIMIZE)
   if has-flag?(parsed, "verbose") :
      add-flag(`VERBOSE)
   if has-flag?(parsed, "pkg") :
      PKG-OUTPUT-DIR = head(multiple(parsed, "pkg"))
   let :
      val dirs = STANZA-FAST-PKG-DIRS when flag-defined?(`OPTIMIZE) else STANZA-PKG-DIRS
      if has-flag?(parsed, "pkg-path") :         
         val paths = multiple(parsed, "pkg-path")         
         add-all(dirs, in-reverse(paths))
      else : add(dirs, ".")
   for flag in multiple?(parsed, "flags", List()) do :
      add-flag(to-symbol(flag))
   
   ;Platform settings
   match(flag?(parsed, "platform")) :
      (p:String) : OUTPUT-PLATFORM = to-platform(p)
      (p:False) : false

   ;If compile only to packages
   val save-pkgs = has-flag?(parsed, "pkg")
   if (not has-flag?(parsed, "s")) and (not has-flag?(parsed, "o")) :
      compile(args(parsed), false, save-pkgs)
   ;Otherwise
   else :
      ;Call CC
      defn call-cc? (asmfile:String) :
         match(flag?(parsed, "o")) :
            (outfile:String) :
               val ccfiles = multiple?(parsed, "ccfiles", List())
               val ccflags = single?(parsed, "ccflags", false)
               call-cc(asmfile, outfile, ccfiles, ccflags)
            (outfile:False) : false         

      ;Call compile
      match(flag?(parsed, "s")) :
         (asmfile:String) :
            compile(args(parsed), asmfile, save-pkgs)
            call-cc?(asmfile)
         (asmfile:False) :
            val asmfile* = to-string("%_.s" % [gensym("tmp")])
            compile(args(parsed), asmfile*, save-pkgs)
            call-cc?(asmfile*)
            delete-file(asmfile*)

;============================================================
;=================== Installation ===========================
;============================================================

defn install (parsed:ParseResult) :
   ;Get Stanza platform
   val platform = to-platform(single(parsed, "platform"))
   
   ;Get installation directory
   val install-dir = match(resolve-path("stanza")) :
      (path:String) :
         if suffix?(path, "/stanza") :
            val n = length("/stanza")
            path[0 to (length(path) - n)]               
         else :  
            throw $ Exception("Could not determine Stanza installation directory.")
      (path:False) :
         throw $ Exception("Could not determine Stanza installation directory.")
         
   defn open-config-file () :
      if has-flag?(parsed, "path") :
         val path = single(parsed, "path")
         val filepath = to-string("%_/.stanza" % [path])
         with-output-file(FileOutputStream(filepath), write-config-file)
         println("Remember to add %_ to your STANZA_CONFIG environment variable." % [path])
      else :
         match(get-env("HOME")) :
            (home:String) :
               val filepath = to-string("%_/.stanza" % [home])
               with-output-file(FileOutputStream(filepath), write-config-file)
            (home:False) :
               throw $ Exception("Could not locate user's home directory.")
               
   defn write-config-file () :
      println("install-dir = %~" % [install-dir])
      println("platform = %~" % [platform])

   ;Driver
   open-config-file()

;============================================================
;================== Main Interface ==========================
;============================================================

defn main () :
   val compile-comm = Command("compile", [
                         SingleFlag("s", true),
                         SingleFlag("o", true),
                         SingleFlag("platform", true)
                         MultipleFlag("pkg", true)
                         MultipleFlag("ccfiles", true)
                         MultipleFlag("flags", true)
                         MultipleFlag("pkg-path", true)
                         GreedyFlag("ccflags", true)
                         MarkerFlag("optimize")
                         MarkerFlag("verbose")])
   val install-comm = Command("install", [
                         SingleFlag("platform"),
                         SingleFlag("path", true)])
   val version-comm = Command("version", [])                      
   val comms = [compile-comm, install-comm, version-comm]
   try :      
      val parsed = parse-args(comms, compile-comm, command-line-arguments()[1 to false])
      switch {command(parsed) == _} :
         "compile" : compile(parsed)
         "install" : install(parsed)
         "version" : print-version()         
      ;Return success
      exit(0)
   catch (e:Exception) :
      println(e)
      ;Return failure
      exit(-1)

main()