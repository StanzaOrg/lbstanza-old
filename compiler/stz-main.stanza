;See License.txt for details about licensing.

defpackage stz/main :
  import core
  import parser
  import collections
  import reader
  import stz/compiler
  import stz/arg-parser
  import stz/params
  import stz/backend
  import stz/build
  import stz/config
  import stz/repl
  import stz/gen-bindings
  import stz/dependencies

  ;Macro Packages
  import stz/ast-lang
  import stz/reader-lang
  import stz/ast-printer-lang
  import stz/check-lang
  import stz/renamer-lang
  import stz/resolver-lang
  import stz/serializer-lang

;============================================================
;====================== Help ---=============================
;============================================================

defn print-cmd (o:OutputStream, cmd:Command, out-flags:True|False) :
  print(o, "%_" % [name(cmd)])
  if out-flags :
    match(args(cmd)) :
      (x:None) : false
      (x:One<String>) : print(o, " %_" % [value?(x)])
  print(o, "\n")

  print(o, "%_\n" % [description(cmd)])
  if out-flags :
    if not empty?(to-seq(flags(cmd))) :
      print(o, "\nFlags:\n")
      for flag in flags(cmd) do :
        if name(flag) != "h" and name(flag) != "-help" :
          print(o, flag)
          print(o, "\n")

defmethod print (o:OutputStream, flag:Flag) :
  print(o, "-%_" % [name(flag)])
  if max-arity(flag) == INT-MAX :
    for i in 0 to 4 do :
      print(o, " %_%_" % [head(arg-names(flag)), i])
    print(o, " ...")
  else :
    for x in arg-names(flag) do :
      print(o, " %_" % [x])
  print(o, "\n%_\n" % [description(flag)])

defn list-all-commands () :
  println("Usage: stanza COMMAND")
  println("Available commands:")
  ; Just list all of the commands
  for cmd in STANZA-COMMANDS do :
    print-cmd(STANDARD-OUTPUT-STREAM,cmd,false)

defn help (parsed:ParseResult) :
  if length(args(parsed)) == 0 :
    list-all-commands()
  else if length(args(parsed)) == 1 :
    ; Print the help of the selected command
    for cmd in STANZA-COMMANDS do :
      if name(cmd) == head(args(parsed)) :
        print-cmd(STANDARD-OUTPUT-STREAM,cmd,true)
  else :
    throw(Exception("Command help takes zero or one arguments."))


public val HELP-COMMAND =
    Command("help", One("[command_name]"),
            append-all(["\tPrints out this help command. It optionally takes an argument of a command name.\n"
                       ,"\tIf an argument is given, then it lists a detailed help of that command."]),
                    [], help)

;============================================================
;====================== Version =============================
;============================================================

val ABOUT-MSG =
\<MSG>
             L.B.Stanza Programming Language

                    Version %_

Copyright (c) 2016-2019, Patrick Shaobai Li, The Regents of the
University of California. All Rights Reserved.
<MSG>

defn print-version () :
   val version = string-join(STANZA-VERSION, ".")
   println(ABOUT-MSG % [version])

public val VERSION-COMMAND =
  Command("version", None(), "\tPrints out the version of this compiler.", [], print-version{})

;============================================================
;================== Compilation =============================
;============================================================
public defstruct BuildJob :
  filenames: List<String> with: (updater => sub-filenames)
  assembly: Maybe<String>
  output: Maybe<String>
  platform: Maybe<Symbol>
  ccfiles: List<String> with: (updater => sub-ccfiles)
  ccflags: Maybe<String>
  flags: List<Symbol>
  pkg: Maybe<String>
  optimize?: True|False
  verbose?: True|False

defn stanza-file (path:String) :
  norm-path(path % [STANZA-INSTALL-DIR])

;Flatten a tree of arguments
defn flatten (x) :
  generate<String> :
    let loop (x = x) :
      match(x) :
        (x:String) : yield(x)
        (x:Seqable) : do(loop, x)

defn call-cc (asmfile:String, outfile:String, ccfiles:List<String>, ccflag-string:False|String) :
  ;Parse ccflag-string
  val ccflags =
    attempt : tokenize-shell-command(ccflag-string as? String)
    else : []

  ;Position independence flag
  val pi-flag =
    if flag-defined?(`PLATFORM-LINUX) : ["-ldl" "-fPIC"]
    else : []

  ;Get list of all files and flags
  val cc-name = switch flag-defined? :
    `PLATFORM-WINDOWS : "gcc"
    `PLATFORM-LINUX : "cc"
    `PLATFORM-OS-X : "cc"
  val platform = switch flag-defined? :
    `PLATFORM-WINDOWS : "PLATFORM_WINDOWS"
    `PLATFORM-LINUX : "PLATFORM_LINUX"
    `PLATFORM-OS-X : "PLATFORM_OS_X"

  ;Create command
  val cmd-args = [
    cc-name
    "-std=gnu99"
    asmfile
    stanza-file("%_/runtime/driver.c")
    ccfiles
    "-o" outfile
    "-lm" pi-flag ccflags
    "-D" platform]

  ;Call system compiler
  call-system(cc-name, flatten(cmd-args))

public defn compile (job:BuildJob) :
  ;Set up configuration
  read-config-file()

  ;Verify input files
  if empty?(filenames(job)) :
    throw $ Exception("No input files given.")
  if empty?(assembly(job)) and empty?(output(job)) and empty?(pkg(job)) :
    throw $ Exception("Stanza compile command requires either at least one of the following flags: -s, -o, or -pkg. Enter 'stanza help' for more information.")

  ;Flag settings
  add-flag(`OPTIMIZE) when optimize?(job)
  add-flag(`VERBOSE) when verbose?(job)

  ;Pkg path
  val pkg-dir = if empty?(pkg(job)) : "."
                else : value!(pkg(job))
  STANZA-PKG-DIRS = cons(pkg-dir, STANZA-PKG-DIRS)

  ;Flags
  do(add-flag, flags(job))

  ;Platform override
  if not empty?(platform(job)) :
    val p = value!(platform(job))
    ensure-supported-platform(p)
    OUTPUT-PLATFORM = p

  ;Platform flag settings
  add-flag $ switch(OUTPUT-PLATFORM) :
    `os-x : `PLATFORM-OS-X
    `linux : `PLATFORM-LINUX
    `windows : `PLATFORM-WINDOWS

  ;Compute filename of output file, and whether it is temporary
  val [asmfile, temporary?] =
    if not empty?(assembly(job)) :
      [value!(assembly(job)), false]
    else if not empty?(output(job)) :
      [to-string("%_%_.s" % [value!(output(job)), genid()]), true]
    else :
      [false, false]

  ;Compile to assembly
  val backend = switch flag-defined? :
    `PLATFORM-WINDOWS : W64Backend()
    `PLATFORM-LINUX : L64Backend()
    `PLATFORM-OS-X : X64Backend()
  compile(filenames(job), asmfile, value?(pkg(job)), backend, optimize?(job))

  ;Call C compiler
  if not empty?(output(job)) :
    call-cc(asmfile as String, value!(output(job)),
            ccfiles(job), value?(ccflags(job)))

  ;Delete assembly file
  if temporary? :
    delete-file(asmfile as String)

defn compile (parsed:ParseResult) :
  ;User attempts to get help. Assumes that compile is the default command.
  if has-flag?(parsed, "h") or has-flag?(parsed, "-help") :
      list-all-commands()
      exit(0)

  ;Verify input files
  if length(multiple?(parsed, "pkg", List())) > 1 :
    throw $ Exception("Multiple pkg output directories given.")

  ;Retrievers
  defn maybe-single? (name:String) :
    match(flag?(parsed, name)) :
      (f:False) : None()
      (f:String) : One(f)
  defn list? (name:String) -> List<String> :
    multiple?(parsed, name, List())

  val pkg-dir = match(flag?(parsed, "pkg")) :
    (f:False) : None()
    (f:List<String>) :
      if empty?(f) : One(".")
      else : One(head(f))

  val platform = match(flag?(parsed, "platform")) :
    (f:False) : None()
    (f:String) : One(to-symbol(f))

  ;Build job
  compile $ BuildJob(
    args(parsed),
    maybe-single?("s"),
    maybe-single?("o"),
    platform
    list?("ccfiles")
    maybe-single?("ccflags")
    map(to-symbol,list?("flags"))
    pkg-dir,
    has-flag?(parsed, "optimize")
    has-flag?(parsed, "verbose"))

public val COMPILE-COMMAND =
  Command("compile",
   One("stanza_src0 [stanza_src1 stanza_src2 ...]"),
   "\tCompile the files listed after this command. If no command is given,\n\tcompile is assumed.",
   [SingleFlag("s", "Output assembly file of name assembly_file_name.", "assembly_file_name", true),
    SingleFlag("o", "Output binary file of name binary_name.", "binary_name", true),
    SingleFlag("platform", "Specify the target operating system platform.", "os-x|linux|windows", true)
    MultipleFlag("pkg", "Specify the package output directory, out_dir", "out_dir", true)
    MultipleFlag("ccfiles", "Specify c files to be compiled. Used for FFI.", "c_file", true)
    MultipleFlag("flags", append-all(["Specify Stanza compiler flags. Supported flags:\n"
                                     ,"\tPLATFORM-OS-X\n"
                                     ,"\tPLATFORM-LINUX\n"
                                     ,"\tPLATFORM-WINDOWS\n"
                                     ,"\tOPTIMIZE\n\tVERBOSE"]), "flag", true)
    GreedyFlag("ccflags", "Flags to be used with C compiler.", "c_flag", true)
    MarkerFlag("optimize", "Turn on optimization")
    MarkerFlag("verbose", "Verbose compiler output")
    MarkerFlag("h", "")     ; Do not bother putting in description as it will not be displayed.
    MarkerFlag("-help", "") ; Do not bother putting in description as it will not be displayed.
    ]
    compile)

;============================================================
;==================== Extension =============================
;============================================================

defn compile-cvm (outfile:String) :
  ;Position independence flag
  val pi-flag =
    if flag-defined?(`PLATFORM-LINUX) : ["-ldl" "-fPIC"]
    else : []

  ;Get list of all files and flags
  val cc-name = "cc"

  ;Create command
  val cmd-args = [
    cc-name
    "-c"
    "-std=gnu99"
    stanza-file("%_/compiler/cvm.c")
    "-o" outfile
    "-O2"
    pi-flag]

  ;Call system compiler
  call-system(cc-name, flatten(cmd-args))

defn extend (job:BuildJob) :
  ;Read the configuraton file so that STANZA_INSTALL_DIR works.
  read-config-file()

  ;Compile the vm to a temporary file.
  val cvm-o = to-string("cvm%_.o" % [genid()])
  compile-cvm(cvm-o)

  ;Build the new job
  val filenames* = to-list(cat(filenames(job), ["stz/driver"]))
  val ccfiles* = to-list(cat(ccfiles(job), [
                   cvm-o
                   stanza-file("%_/runtime/linenoise.c")]))
  val job* = sub-ccfiles(sub-filenames(job, filenames*), ccfiles*)
  compile(job*)

defn extend (parsed:ParseResult) :
  ;Retrievers
  defn maybe-single? (name:String) :
    match(flag?(parsed, name)) :
      (f:False) : None()
      (f:String) : One(f)
  defn list? (name:String) -> List<String> :
    multiple?(parsed, name, List())

  ;Build Job
  extend $ BuildJob(
    args(parsed),
    maybe-single?("s"),
    maybe-single?("o"),
    None(), ;platform
    list?("ccfiles"),
    maybe-single?("ccflags"),
    map(to-symbol,list?("flags")),
    None() ;pkg-dir
    has-flag?(parsed, "optimize")
    false) ;verbose

public val EXTEND-COMMAND =
  Command("extend",
   One("file0 [file1 file2 ...]"),
   "\tCompile files with the virtual machine, extending it.",
   [SingleFlag("s", "Output assembly file of name assembly_file_name.", "assembly_file_name", true),
    SingleFlag("o", "Output binary file of name binary_name.", "binary_name", true),
    MultipleFlag("ccfiles", "Specify c files to be compiled. Used for FFI.", "c_file", true)
    MultipleFlag("flags", append-all(["Specify Stanza compiler flags. Supported flags:\n"
                                     ,"\tPLATFORM-OS-X\n"
                                     ,"\tPLATFORM-LINUX\n"
                                     ,"\tPLATFORM-WINDOWS\n"
                                     ,"\tOPTIMIZE\n\tVERBOSE"]), "flag", true)
    GreedyFlag("ccflags", "Flags to be used with C compiler.", "c_flag", true)
    MarkerFlag("optimize", "Turn on optimization")]
    extend)

;============================================================
;=================== Installation ===========================
;============================================================

defn install (parsed:ParseResult) :
   ;Get Stanza platform
   val platform = to-symbol(single(parsed, "platform"))
   ensure-supported-platform(platform)

   ;Get installation directory
   val install-dir = match(resolve-path("License.txt")) :
      (path:String) :
         val stz-suffix = norm-path("/License.txt")
         if suffix?(path, stz-suffix) :
            val n = length(stz-suffix)
            path[0 to (length(path) - n)]
         else :
            throw $ Exception("Could not determine Stanza installation directory.")
      (path:False) :
         throw $ Exception("Could not determine Stanza installation directory.")

   defn open-config-file () :
      if has-flag?(parsed, "path") :
         val path = single(parsed, "path")
         val filepath = norm-path("%_/.stanza" % [path])
         with-output-file(FileOutputStream(filepath), write-config-file)
         match(resolve-path(filepath)) :
            (fullpath:String) :
               val suffix = norm-path("/.stanza")
               if suffix?(fullpath, suffix) :
                  val n = length(suffix)
                  val dir = fullpath[0 to (length(fullpath) - n)]
                  println("Stanza installation finished. Created %_ file." % [fullpath])
                  println("Remember to add %_ to your STANZA_CONFIG environment variable." % [dir])
               else :
                  throw $ Exception("Stanza installation failed. Could not create %_ file." % [filepath])
            (fullpath:False) :
               throw $ Exception("Stanza installation failed. Could not create %_ file." % [filepath])
      else :
         match(get-env("HOME")) :
            (home:String) :
               val filepath = norm-path("%_/.stanza" % [home])
               with-output-file(FileOutputStream(filepath), write-config-file)
            (home:False) :
               throw $ Exception("Could not locate user's home directory.")

   defn write-config-file () :
      println("install-dir = %~" % [install-dir])
      println("platform = %~" % [platform])

   ;Driver
   open-config-file()

public val INSTALL-COMMAND =
  Command("install",
   None(),
   "\tInstalls Stanza's default configuration. Default directory is user's home directory (i.e. ~/.stanza).",
   [SingleFlag("platform", "Specify the target operating system platform.", "os-x|linux|windows"),
    SingleFlag("path", "Specify the target directory for the Stanza configuration flag.", "/the/target/dir", true)]
    install)

;============================================================
;===================== Build ================================
;============================================================

defn build (parsed:ParseResult) :
  ;Verification
  if length(args(parsed)) > 1 :
    throw $ Exception("Multiple build projects given.")
  build $
    if empty?(args(parsed)) : `main
    else : to-symbol(head(args(parsed)))

defn init (parsed:ParseResult) :
  if not empty?(args(parsed)) :
    throw(Exception("Command init does not take arguments."))
  init()

defn clean (parsed:ParseResult) :
  if not empty?(args(parsed)) :
    throw(Exception("Command clean does not take arguments."))
  clean()

public val BUILD-COMMAND = Command("build", One("[target_name]"),
                                  append-all(["\tBuilds a Stanza project. It looks for stanza.build in the\n"
                                             ,"\tcurrent working directory. Default target name is main."]), [], build)
public val INIT-COMMAND = Command("init", None(), "\tInitializes a Stanza project. Creates a default project file called stanza.build in the current working directory." [], init)
public val CLEAN-COMMAND = Command("clean", None(), "\tRemoves all generated files created for the project." [], clean)

;============================================================
;===================== Path =================================
;============================================================

defn show-path (parsed:ParseResult) :
  ;Verification
  if not empty?(args(parsed)) :
    throw $ Exception("The stanza path command does not take any arguments.")
  read-config-file()
  println(STANZA-INSTALL-DIR)

public val PATH-COMMAND = Command("path", None(), "\tOutputs the path for where Stanza is installed.", [], show-path)

;============================================================
;======================= Repl Command =======================
;============================================================

defn repl-command (parsed:ParseResult) :
  ;Read configuration file
  read-config-file()

  ;Add pkg directories to pkg-dirs
  for dir in multiple?(parsed, "pkg", List()) do :
    STANZA-PKG-DIRS = cons(dir, STANZA-PKG-DIRS)

  ;Add flags
  for flag in multiple?(parsed, "flags", List()) do :
    add-flag(to-symbol(flag))

  ;Launch REPL
  repl()

public val REPL-COMMAND =
  Command("repl",
    None(),
    "\tRead-eval-print loop. Interactive shell for Stanza.",
    [MultipleFlag("pkg", "Specify the Stanza package directories.", "pkg_dir", true)
     MultipleFlag("flags", "Specify flags to repl.", "flag",  true)],
    repl-command)

;============================================================
;======================= Run Command ========================
;============================================================

defn run-command (parsed:ParseResult) :
  ;Read configuration file
  read-config-file()

  ;Add pkg directories to pkg-dirs
  for dir in multiple?(parsed, "pkg", List()) do :
    STANZA-PKG-DIRS = cons(dir, STANZA-PKG-DIRS)

  ;Add flags
  for flag in multiple?(parsed, "flags", List()) do :
    add-flag(to-symbol(flag))

  ;Run in REPL
  run-in-repl(to-tuple(args(parsed)))

public val RUN-COMMAND =
  Command("run",
    One("stanza_src0 [stanza_src1 stanza_src2 ...]"),
    "\tRuns the following files in Stanza's repl.",
    [MultipleFlag("pkg", "List of directories to search for Stanza packages.", "pkg", true)
     MultipleFlag("flags", "Flags to the repl.", "flag", true)],
    run-command)

;============================================================
;================= Generate Bindings Command ================
;============================================================

defn generate-bindings-command (parsed:ParseResult) :
  read-config-file()
  val output-file = single(parsed, "o")
  generate-vmbindings(args(parsed), output-file)

public val GEN-BINDINGS-COMMAND =
  Command("gen-vmbindings",
   One("file0 [file1 file2 ...]"),
   append-all(["\tGenerate virtual machine bindings. Bindings can be generated\n",
              ,"\tfrom both source files and .pkg files. Optimized .pkg files are\n",
              ,"\tnot accepted."]),
   [SingleFlag("o", "Output is directed to output_file_name", "output_file_name", false)],
   generate-bindings-command)

;============================================================
;================= Dependency Analysis Command ==============
;============================================================

defn analyze-dependencies-command (parsed:ParseResult) :
  read-config-file()
  val output-file = single?(parsed, "o", false)
  val optimize? = has-flag?(parsed, "optimize")
  analyze-dependencies(args(parsed), optimize?, output-file)

public val ANALYZE-DEPENDENCIES-COMMAND =
  Command("analyze-dependencies",
   One("file0 [file1 file2 ...]"),
   "\tAnalyze the dependencies of the sources files, packages, and .pkg files.",
   [SingleFlag("o", "Output is directed to output_file_name", "output_file_name", true)
    MarkerFlag("optimize", "Turn on optimization.")]
    analyze-dependencies-command)

;============================================================
;================== Standard Commands =======================
;============================================================

public val STANZA-COMMANDS = [
  COMPILE-COMMAND
  INSTALL-COMMAND
  VERSION-COMMAND
  BUILD-COMMAND
  INIT-COMMAND
  CLEAN-COMMAND
  PATH-COMMAND
  REPL-COMMAND
  GEN-BINDINGS-COMMAND
  ANALYZE-DEPENDENCIES-COMMAND
  RUN-COMMAND
  EXTEND-COMMAND
  HELP-COMMAND]

;============================================================
;================== Main Interface ==========================
;============================================================

defn print-exceptions (e:Exception) :
  match(e) :
    (e:NoMatchException) : do(println, causes(e))
    (e) : println(e)

public defn stanza-main (args:Seqable<String>) :
  try :
    parse-args(STANZA-COMMANDS, COMPILE-COMMAND, args)
  catch (e:Exception) :
    print-exceptions(e)
    exit(-1)

public defn stanza-main () :
  initialize-process-launcher()
  set-max-heap-size(STANZA-MAX-COMPILER-HEAP-SIZE)
  stanza-main(command-line-arguments()[1 to false])
