defpackage stz/main :
   import core
   import reader
   import stz/compiler
   import stz/arg-parser
   import stz/params

;============================================================
;================== Config File Parsing =====================
;============================================================

defsyntax stanza-config :
   defn ut (x) :
      unwrap-token(x)

   defn first-info (form) -> Maybe<FileInfo> :
      match(form) :
         (form:Token) : One(info(form))
         (form:List) : first(first-info, form)
         (form) : None()

   defn PE (form, msg) :
      throw $ match(value?(first-info(form))) :
         (info:FileInfo) : Exception("%_: %_" % [info, msg])
         (info:False) : Exception(msg)

   defrule :
      sym = (?x) when ut(x) typeof Symbol : ut(x)
      string = (?x) when ut(x) typeof String : ut(x)
      string! = (?s:#string) : s
      string! != () : PE(form, "Expected a string here.")

      platform! = (?x:#sym) :
         match(to-platform(x)) :
            (x:Symbol) : x
            (_:False) : PE(form, "%_ is not a supported platform." % [x])
      platform! != () : PE(form, "Expected a platform here.")

      entry = (install-dir = ?path:#string!) :
         STANZA-INSTALL-DIR = path
      entry = (platform = ?p:#platform!) :
         OUTPUT-PLATFORM = p
      entry != () :
         PE(form, "Invalid configuration rule.")

defn to-platform (s:Symbol) :
   switch {s == _} :
      `os-x : s
      `linux : s
      else : false

defn read-config-file () :
   ;Extract parameters from config file
   label break :
      defn extract-from-file (filename:String) :
         if file-exists?(filename) :
            val forms = read-file(filename)
            with-syntax(stanza-config) :
               match-syntax(forms) :
                  (?e:#entry ...) : false
            break(false)

      defn extract-from-env (name:String) :
         match(get-env(name)) :
            (path:String) : extract-from-file(to-string("%_/.stanza" % [path]))
            (path:False) : false

      extract-from-file(".stanza")
      extract-from-env("STANZA_CONFIG")
      extract-from-env("HOME")
      throw(Exception("Could not locate .stanza configuration file."))

   ;Verify parameters
   val stanza-exe = to-string("%_/stanza" % [STANZA-INSTALL-DIR])
   if not file-exists?(stanza-exe) :
      throw $ Exception(STANZA-EXE-MSG % [STANZA-INSTALL-DIR, stanza-exe])

val STANZA-EXE-MSG = "Stanza install directory is set to %_, but could not locate stanza compiler at %_."   

;============================================================
;================== Compilation =============================
;============================================================
defn stanza-file (path:String) :
   to-string(path % [STANZA-INSTALL-DIR])
      
defn call-cc (asmfile:String, outfile:String, ccfiles:List<String>, ccflags:False|String) :
   ;Get list of all files and flags
   val all-files = cat-all $ [
      [asmfile,
       stanza-file("%_/runtime/driver.c")]
      ccfiles]
   val all-flags = match(ccflags) :
      (ccflags:False) : ["-lm"]
      (ccflags:String) : ["-lm" ccflags]
      
   ;Create command
   val cmd = to-string $
      "cc -std=c99 %* -o %_ %*" % [
         join(all-files, " "), outfile, join(all-flags, " ")]
   println(cmd)

   ;Call system compiler
   call-system(cmd)

defn compile (parsed:ParseResult) :
   ;Set up configuration
   read-config-file()

   ;Flag verification
   if (not has-flag?(parsed, "s")) and (not has-flag?(parsed, "o")) :
      throw $ Exception("Command compile requires at least one of the -s flag or the -o flag to be given.")

   ;Flag settings
   if has-flag?(parsed, "optimize") :
      add-flag(`OPTIMIZE)
   for flag in multiple?(parsed, "flags", List()) do :
      add-flag(to-symbol(flag))
   
   ;Platform settings
   match(flag?(parsed, "platform")) :
      (p:String) :
         match(to-platform(to-symbol(p))) :
            (p:Symbol) : OUTPUT-PLATFORM = p
            (_:False) : throw(Exception("%_ is not a supported platform." % [p]))
      (p:False) : false

   ;Input file settings
   val files =
      if has-flag?(parsed, "no-implicits") :
         args(parsed)
      else :
         to-list $ cat-all $ [
            [stanza-file("%_/core/core.stanza")
             stanza-file("%_/core/collections.stanza")]
            args(parsed)]

   ;Call CC
   defn call-cc? (asmfile:String) :
      match(flag?(parsed, "o")) :
         (outfile:String) :
            val ccfiles = multiple?(parsed, "ccfiles", List())
            val ccflags = single?(parsed, "ccflags", false)
            call-cc(asmfile, outfile, ccfiles, ccflags)
         (outfile:False) : false         

   ;Call compile
   match(flag?(parsed, "s")) :
      (asmfile:String) :
         if compile(files, asmfile) :
            call-cc?(asmfile)
      (asmfile:False) :
         val asmfile* = to-string("%_.s" % [gensym("tmp")])
         if compile(files, asmfile*) :
            call-cc?(asmfile*)
            delete-file(asmfile*)

;============================================================
;================== Main Interface ==========================
;============================================================

defn main () :
   val compile-comm = Command("compile", [
                         SingleFlag("s", true),
                         SingleFlag("o", true),
                         SingleFlag("platform", true)
                         MultipleFlag("ccfiles", true)
                         MultipleFlag("flags", true)
                         GreedyFlag("ccflags", true)
                         MarkerFlag("optimize")
                         MarkerFlag("no-implicits")])
   val comms = [compile-comm]
   try :      
      val parsed = parse-args(comms, compile-comm, command-line-arguments()[1 to false])
      switch {command(parsed) == _} :
         "compile" : compile(parsed)
   catch (e:Exception) :
      println(e)
      false

main()