defpackage stz/main :
   import core
   import verse
   import stz/compiler

;============================================================
;================== Parameter Parsing =======================
;============================================================

defn parse-parameters (args:Array<String>, flags:List<Symbol>) :
   val table = HashTable<Symbol,List<Symbol>>(symbol-hash)
   var flag: False|Symbol = false
   for arg in stream(to-symbol, args) do :
      if arg[0] == '-' :
         if contains?(flags, arg) :
            error("Duplicate flag: ~" % [arg]) when key?(table, arg)
            table[arg] = List()
            flag = arg
         else :
            error("Unrecognized flag: ~" % [arg])
      else :
         match(flag) :
            (flag:Symbol) : table[flag] = List(arg, table[flag])
            (flag:False) : false
   for k in keys(table) do :
      table[k] = reverse(table[k])
   table

;============================================================
;===================== Driver ===============================
;============================================================

defn main () :
   val params = parse-parameters(commandline-arguments(), `(-i, -o))
   val input-files = map(to-string, params[`-i])
   val output-file = to-string(head(params[`-o]))
   compile(input-files, output-file)

main()