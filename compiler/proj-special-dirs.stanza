defpackage stz/proj-special-dirs :
  import core
  import collections
  import core/parsed-path
  import stz/proj-ir
  import stz/proj-stage0
  import stz/printing-utils

;============================================================
;=========== Entry Point: Create SpecialDirTable ============
;============================================================

;Create a SpecialDirTable out of the given files and working directory.
public defn SpecialDirTable (files:Seqable<ProjFileS0>, workdir:String) -> SpecialDirTable :
  val table = SpecialDirTable(workdir)
  for file in files do : add-projdirs(table, file)
  table

;Special case for building a SpecialDirTable for just one value.
;The special id 0 is given to the proj-file-id. 
public defn SpecialDirTable (workdir:String, proj-path:String) -> SpecialDirTable :
  val table = SpecialDirTable(workdir)
  projdirs(table)[0] = to-string(enclosing-dir(proj-path))
  table

;============================================================
;=============== Performing Substitutions ===================
;============================================================

;Substitute all the WorkDir|ProjDir values in the ProjValue.
public defn substitute-special-dirs (v:ProjValue,
                                     dirtable:SpecialDirTable) -> ProjValue :
  match(v) :
    (v:WorkDir) :
      AtomValue(info(v), workdir(dirtable))
    (v:ProjDir) :
      AtomValue(info(v), projdirs(dirtable)[proj-file-id(v)])
    (v:ProjValue) :
      map(substitute-special-dirs{_ as ProjValue, dirtable}, v)

;============================================================
;==================== Representation ========================
;============================================================

;Hold all the paths needed to resolve WorkDir and ProjDir.
;- workdir: The working directory. Used to replace {WORKDIR}.
;- projdirs: Each entry, ID => PATH, means that the proj
;  file with id 'ID' has path 'PATH'. Used to replace {.}.
public defstruct SpecialDirTable :
  workdir:String
  projdirs:IntTable<String> with:
    init => IntTable<String>()

defmethod print (o:OutputStream, t:SpecialDirTable) :
  val items = [
    simple-field("workdir", written(workdir(t)))
    named-list-fields("projdirs", seq(written, projdirs(t)))]
  print(o, "SpecialDirTable%_" % [colon-field-list(items)])

;============================================================
;===================== Scanning =============================
;============================================================

;Scan the given file and add its entries to projdirs.
defn add-projdirs (t:SpecialDirTable, file:ProjFileS0) -> False :

  ;Add a new project directory to the table.
  defn add-proj-dir (id:Int, proj-path:String) :
    projdirs(t)[id] = to-string(enclosing-dir(proj-path))

  ;Scan a statement and add entries to prodirs.
  defn scan (stmt:ProjStmt) :
    match(stmt:IncludedStmtsS0) :
      add-proj-dir(proj-file-id(stmt), full-path(stmt))
      do(scan, stmts(stmt))

  ;Launch!
  add-proj-dir(id(file), full-path(file))
  do(scan, stmts(file))