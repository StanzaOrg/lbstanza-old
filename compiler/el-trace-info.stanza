;<doc>=======================================================
;====================== Documentation =======================
;============================================================

This is a small utility for retrieving the computed
stack trace information for EL-IR. 

;============================================================
;=======================================================<doc>

defpackage stz/el-trace-info :
  import core
  import collections
  import stz/el-ir
  import stz/trace-info
  import stz/absolute-info

;============================================================
;================== Representation ==========================
;============================================================

;Represents the trace information as it is being
;computed through the various stages.
public deftype TraceInfo :

  ;Trace information starts in this form. Program code is annotated
  ;with their line numbers and filenames.
  AbsoluteFileInfo <: TraceInfo

  ;If some code doesn't have any line numbers, then it
  ;is annotated with false.
  False <: TraceInfo

  ;After we compute the context of the program code,
  ;e.g. the package it is in, the signature of the function
  ;it is in, we replace all TraceInfo with StackTraceInfo.
  StackTraceInfo <: TraceInfo

;============================================================
;==================== Annotation of Items ===================
;============================================================

;Not all EL items have trace information.
;The ones that do not return NoTraceInfo. 
public defmulti info? (item:ELItem) -> TraceInfo|NoTraceInfo :
  NoTraceInfo()

;Replace the stack trace information in the given item.
public defmulti sub-info<?T> (item:?T&ELItem, info:TraceInfo) -> T&ELItem

;Returns true if the item is meant to have trace information.
public defn has-trace-info? (item:ELItem) -> True|False :
  info?(item) is-not NoTraceInfo

;Use to retrieve the TraceInfo on an item that is supposed
;to have it. Calls fatal if accidentally called on item
;that is not meant to have trace info.
public defn info (item:ELItem) -> TraceInfo :
  match(info?(item)) :
    (info:TraceInfo) :
      info
    (info:NoTraceInfo) :
      fatal("Item %_ has no trace information." % [object-type(item)])

;After computing contexts, all AbsoluteFileInfo have been
;replaced with StackTraceInfo. 
public defn stack-trace-info (item:ELItem) -> StackTraceInfo|False :
  match(info(item)) :
    (info:StackTraceInfo|False) :
      info
    (info:AbsoluteFileInfo) :
      fatal("Error: Item %_ should have had AbsoluteFileInfo \
             replaced with StackTraceInfo." % [item])

;Dummy structure for marking an item has not having
;trace information.
defstruct NoTraceInfo

;============================================================
;===================== Check Info ===========================
;============================================================

;Ensure that all items have their TraceInfos replaced.
;No item should contain an AbsoluteFileInfo anymore.
public defn ensure-all-items-have-stack-trace-info! (item:ELItem) -> False :
  #if-not-defined(OPTIMIZE) :
    let loop (item:ELItem = item) :
      ;If the item is meant to have trace info.
      if has-trace-info?(item) :
        ;Ensure that it is of type StackTraceInfo|False
        if info(item) is-not StackTraceInfo|False :
          fatal $ "The following item has invalid trace info of type %_:\n%_" % [
            object-type(info(item)), Indented(item)]
      ;Recurse
      do(loop, item)
  false