;See License.txt for details about licensing.

;Use utilities for defining ASTs quickly
#use-added-syntax(stz-ast-lang)

defpackage stz/asm-ir :
  import core
  import collections
  import stz/typeset
  import stz/trace-info

;<doc>=======================================================
;====================== Link Utilities ======================
;============================================================

# Local Labels and References #

Label: creates a package-local label. This label is only visible
within the package assembly code.

LocalMem: refers to a label defined in the current package.

# Linked Labels and References #

LinkLabel: creates the label for an item exported in the PackageIO
header.

LinkId: refers to a label imported in the PackageIO header.

# Absolute References #

Mem: refers to an absolute label. Note that the only absolute labels
that are known to a package are the system labels, such as
current_stack, registers, heap_pointer, etc.

There is no way for a package to define an absolute label.

;============================================================
;=======================================================<doc>

;============================================================
;=================== Immediates =============================
;============================================================

public deftype Imm <: Equalable
public defstruct IntImm <: Imm : (value: Byte|Int|Long)
public defstruct Mem <: Imm : (n:Int, offset:Int)
public defstruct ExMem <: Imm : (lbl:Symbol, offset:Int)
public defstruct LocalMem <: Imm : (n:Int)
public defstruct TagImm <: Imm : (n:Int, marker?:True|False)
public defstruct LinkId <: Imm : (id:Int)
public defstruct StackMap <: Imm : (size:Int, indices:Tuple<Int> with: (ensure => unique!))

public deftype Loc <: Imm
public defstruct RegSP <: Loc
public defstruct Reg <: Loc : (n:Int)
public defstruct FReg <: Loc : (n:Int)

public deftype ASMType <: Equalable
public defstruct ByteT <: ASMType
public defstruct IntT <: ASMType
public defstruct LongT <: ASMType
public defstruct FloatT <: ASMType
public defstruct DoubleT <: ASMType

;============================================================
;==================== Conditions ============================
;============================================================

defn unique! (description:String, xs:Tuple<Int>) :
  val xs-set = IntSet()
  for x in xs do :
    if not add(xs-set, x) :
      fatal("Value %_ given to %_ is not unique!" % [xs, description])

;============================================================
;====================== Equality ============================
;============================================================

defmethod equal? (a:Imm, b:Imm) :
  match(a, b) :
    (a:IntImm, b:IntImm) : value(a) == value(b)
    (a:TagImm, b:TagImm) : (n(a) == n(b)) and (marker?(a) == marker?(b))
    (a:Mem, b:Mem) : n(a) == n(b) and offset(a) == offset(b)
    (a:ExMem, b:ExMem) : lbl(a) == lbl(b) and offset(a) == offset(b)
    (a:RegSP, b:RegSP) : true
    (a:Reg, b:Reg) : n(a) == n(b)
    (a:FReg, b:FReg) : n(a) == n(b)
    (a:StackMap, b:StackMap) : size(a) == size(b) and indices(a) == indices(b)
    (a:LinkId, b:LinkId) : id(a) == id(b)
    (a:LocalMem, b:LocalMem) : n(a) == n(b)
    (a, b) : false

defmethod equal? (a:ASMType, b:ASMType) :
  match(a, b) :
    (a:ByteT, b:ByteT) : true
    (a:IntT, b:IntT) : true
    (a:LongT, b:LongT) : true
    (a:FloatT, b:FloatT) : true
    (a:DoubleT, b:DoubleT) : true
    (a, b) : false

;============================================================
;=================== Instructions ===========================
;============================================================

public defast :
  ;Instructions
  deftype Ins
  defnodes Ins :
    ;==== Local Instructions ====
    XchgIns :
      x: Loc
      y: Loc
    SetIns :
      type: ASMType
      x: Loc
      y: Imm
    ConvertIns :
      xtype: ASMType
      x: Loc
      ytype: ASMType
      y: Imm
    InterpretIns :
      xtype: ASMType
      x: Loc
      ytype: ASMType
      y: Imm
    NoOp
    UnaOp :
      type: ASMType
      x: Loc
      op: Op
      y: Imm
    BinOp :
      type: ASMType
      x: Loc
      op: Op
      y: Imm
      z: Imm
    VoidBinOp :
      type: ASMType
      op: Op
      y: Imm
      z: Imm
    DualOp :
      type: ASMType
      x1: Loc
      x2: Loc
      op: Op
      y: Imm
      z: Imm
    Load :
      type: ASMType
      x: Loc
      y: Imm
      offset: Int
    Store :
      type: ASMType
      x: Imm
      y: Imm
      offset: Int
    Call :
      x: Imm
    Return
    Goto :
      x: Imm
    LoadGoto :
      x: Imm
    Break :
      type: ASMType
      x: Imm
      op: Op
      y: Imm
      z: Imm
    LinkLabel :
      id: Int
    Label :
      n: Int
      trace-entry: False|StackTraceInfo with: (default => false)
    Safepoint :
      id: Int
      trace-entry: StackTraceInfo
    ExLabel :
      name: Symbol
    Match :
      xs: List<Imm>
      branches: List<Branch>
      no-branch: Imm
    Dispatch :
      xs: List<Imm>
      branches: List<Branch>
      no-branch: Imm
      amb-branch: Imm
    MethodDispatch :
      multi: Int
      num-header-args: Int
      no-branch: Imm
      amb-branch: Imm

    ;==== Data Instructions ====
    DefData
    DefText
    DefDirectives
    DefExportLabel: (value:Symbol)
    DefByte : (value:Byte)
    DefInt : (value:Int)
    DefLong : (value:Long)
    DefFloat : (value:Float)
    DefDouble : (value:Double)
    DefString : (value:String)
    DefBytes : (value:ByteArray)
    DefSpace : (size:Int)
    DefLabel : (n:Int)

    ;==== Misc Instructions ====
    Comment :
      msg: String

  ;Mapper Utilities
  defmapper (f:Imm -> Imm) :
    (x:Loc) : f(x) as Loc
    (x:Imm) : f(x)
    (x:List<Imm>) : map(f,x)
    (x:List<Branch>) : for b in x map : Branch(tags(b), f(dst(b)))
  defdoer (f:Imm -> ?) :
    (x:Loc) : f(x)
    (x:Imm) : f(x)
    (x:List<Imm>) : do(f,x)
    (x:List<Branch>) : do(f{dst(_)}, x)

  ;Other
  ignore :
    ASMType
    Op
    Byte
    Int
    Long
    Float
    Double
    String
    ByteArray
    Symbol
    False|StackTraceInfo
    StackTraceInfo

  ;Mappers
  make-mapper(f:Imm -> Imm, e:Ins)
  make-doer(f:Imm -> ?, e:Ins)

public defstruct Branch :
  tags: List<TypeSet>
  dst: Imm

;============================================================
;====================== Operations ==========================
;============================================================
public deftype Op
public defstruct AddOp <: Op
public defstruct SubOp <: Op
public defstruct MulOp <: Op
public defstruct DivOp <: Op
public defstruct ModOp <: Op
public defstruct AndOp <: Op
public defstruct OrOp <: Op
public defstruct XorOp <: Op
public defstruct ShlOp <: Op
public defstruct ShrOp <: Op
public defstruct AshrOp <: Op
public defstruct EqOp <: Op
public defstruct NeOp <: Op
public defstruct LtOp <: Op
public defstruct GtOp <: Op
public defstruct LeOp <: Op
public defstruct GeOp <: Op
public defstruct UleOp <: Op
public defstruct UltOp <: Op
public defstruct UgtOp <: Op
public defstruct UgeOp <: Op
public defstruct NotOp <: Op
public defstruct NegOp <: Op
public defstruct DivModOp <: Op
public defstruct BitSetOp <: Op
public defstruct BitNotSetOp <: Op
public defstruct LowestZeroBitCountOp <: Op
public defstruct TestBitOp <: Op
public defstruct TestAndSetBitOp <: Op
public defstruct TestAndClearBitOp <: Op
public defstruct SetBitOp <: Op
public defstruct ClearBitOp <: Op
public defstruct TypeofOp <: Op : (tag:TypeSet)

;============================================================
;================ Operation Flipping ========================
;============================================================

public defn flip (op:Op) :
  match(op) :
    (op:EqOp) : NeOp()
    (op:NeOp) : EqOp()
    (op:LtOp) : GeOp()
    (op:GtOp) : LeOp()
    (op:LeOp) : GtOp()
    (op:GeOp) : LtOp()
    (op:UleOp) : UgtOp()
    (op:UltOp) : UgeOp()
    (op:UgtOp) : UleOp()
    (op:UgeOp) : UltOp()
    (op:BitSetOp) : BitNotSetOp()
    (op:BitNotSetOp) : BitSetOp()

public defn swap (op:Op) :
  match(op) :
    (op:EqOp) : op
    (op:NeOp) : op
    (op:LtOp) : GtOp()
    (op:GtOp) : LtOp()
    (op:LeOp) : GeOp()
    (op:GeOp) : LeOp()
    (op:UleOp) : UgeOp()
    (op:UltOp) : UgtOp()
    (op:UgtOp) : UltOp()
    (op:UgeOp) : UleOp()

;============================================================
;===================== Printing =============================
;============================================================
defmethod print (o:OutputStream, i:Ins) :
  print{o, _} $ match(i) :
    (i:XchgIns) : "   %~ <=> %~" % [x(i), y(i)]
    (i:SetIns) : "   %~: %~ = %~" % [type(i), x(i), y(i)]
    (i:ConvertIns) : "   %~:%~ = %~:%~" % [xtype(i), x(i), ytype(i), y(i)]
    (i:InterpretIns) : "   %~:%~ = interpret %~:%~" % [xtype(i), x(i), ytype(i), y(i)]
    (i:NoOp) : "   noop"
    (i:UnaOp) : "   %~: %~ = %~ %~" % [type(i), x(i), op(i), y(i)]
    (i:BinOp) : "   %~: %~ = %~ %~ %~" % [type(i), x(i), y(i), op(i), z(i)]
    (i:VoidBinOp) : "   %~: %~ %~ %~" % [type(i), y(i), op(i), z(i)]
    (i:DualOp) : "   %~: %~, %~ = %~ %~ %~" % [type(i), x1(i), x2(i), y(i), op(i), z(i)]
    (i:Load) : "   %~: %~ = [%~ + %~]" % [type(i), x(i), y(i), offset(i)]
    (i:Store) : "   %~: [%~ + %~] = %~" % [type(i), x(i), offset(i), y(i)]
    (i:Call) : "   call %~" % [x(i)]
    (i:Return) : "   return"
    (i:Goto) : "   goto %~" % [x(i)]
    (i:LoadGoto) : "   loadgoto %~" % [x(i)]
    (i:Break) : "   %~: break %~ when %~ %~ %~" % [type(i), x(i), y(i), op(i), z(i)]
    (i:Label) : "L<%~> : %_" % [n(i), trace-entry(i)]
    (i:Safepoint) : "safepoint %_" % [id(i)]
    (i:LinkLabel) : "linked %_" % [id(i)]
    (i:ExLabel) : "L<%~>" % [name(i)]
    (i:Match) : "   match(%,) %_ no: %_" % [xs(i), branches(i), no-branch(i)]
    (i:Dispatch) : "   dispatch(%,) %_ no: %_ amb: %_" % [xs(i), branches(i), no-branch(i), amb-branch(i)]
    (i:MethodDispatch) : "  method-dispatch(%_) no: %_ amb: %_" % [multi(i), no-branch(i), amb-branch(i)]
    (i:DefData) : "   .data"
    (i:DefText) : "   .text"
    (i:DefDirectives) : "   .section .drectve"
    (i:DefExportLabel) : \<S>   .asciz "  -export:\"%_\""<S> % [value(i)]
    (i:DefByte) : "   .byte %~" % [value(i)]
    (i:DefInt) : "   .int %~" % [value(i)]
    (i:DefLong) : "   .long %~" % [value(i)]
    (i:DefFloat) : "   .float %~" % [value(i)]
    (i:DefDouble) : "   .double %~" % [value(i)]
    (i:DefString) : "   .string %~" % [value(i)]
    (i:DefBytes) : "   .bytes %~" % [value(i)]
    (i:DefSpace) : "   .space %~" % [size(i)]
    (i:DefLabel) : "   .label L<%~>" % [n(i)]
    (i:Comment) : "   //%_" % [msg(i)]

defmethod print (o:OutputStream, b:Branch) :
  print(o, "(%,) => L%_" % [tags(b), dst(b)])

defmethod print (o:OutputStream, i:Imm) :
  print{o, _} $ match(i) :
    (i:IntImm) : value(i)
    (i:TagImm) : "T%_" % [n(i)]
    (i:Mem) :
      if offset(i) == 0 : "M%_" % [n(i)]
      else : "(M%_ + %_)" % [n(i), offset(i)]
    (i:ExMem) :
      if offset(i) == 0 : "M%_" % [lbl(i)]
      else : "(M%_ + %_)" % [lbl(i), offset(i)]
    (i:RegSP) : "rsp"
    (i:Reg) : "R%_" % [n(i)]
    (i:FReg) : "F%_" % [n(i)]
    (i:StackMap) : "stackmap(size = %_, indices = %_)" % [size(i), indices(i)]
    (i:LocalMem) : "LM%_" % [n(i)]
    (i:LinkId) : "linkid(%_)" % [id(i)]

defmethod print (o:OutputStream, t:ASMType) :
  print{o, _} $ match(t) :
    (t:ByteT) : "byte"
    (t:IntT) : "int"
    (t:LongT) : "long"
    (t:FloatT) : "float"
    (t:DoubleT) : "double"

defmethod print (o:OutputStream, op:Op) :
  print{o, _} $ match(op) :
    (op:AddOp) : "add"
    (op:SubOp) : "sub"
    (op:MulOp) : "mul"
    (op:DivOp) : "div"
    (op:ModOp) : "mod"
    (op:AndOp) : "and"
    (op:OrOp) : "or"
    (op:XorOp) : "xor"
    (op:ShlOp) : "shl"
    (op:ShrOp) : "shr"
    (op:AshrOp) : "ashr"
    (op:EqOp) : "eq"
    (op:NeOp) : "ne"
    (op:LtOp) : "lt"
    (op:GtOp) : "gt"
    (op:LeOp) : "le"
    (op:GeOp) : "ge"
    (op:UleOp) : "ule"
    (op:UltOp) : "ult"
    (op:UgtOp) : "ugt"
    (op:UgeOp) : "uge"
    (op:NotOp) : "not"
    (op:NegOp) : "neg"
    (op:DivModOp) : "divmod"
    (op:BitSetOp) : "bitset"
    (op:BitNotSetOp) : "bitnotset"
    (op:LowestZeroBitCountOp) : "lowestzerobitcount"
    (op:TestBitOp) : "testbit"
    (op:TestAndSetBitOp) : "testandsetbit"
    (op:TestAndClearBitOp) : "testandclearbit"
    (op:SetBitOp) : "setbit"
    (op:ClearBitOp) : "clearbit"
    (op:TypeofOp) : "typeof(%_)" % [tag(op)]
