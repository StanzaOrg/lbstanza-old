defpackage stz/auto-doc :
  import core
  import collections
  import reader
  import stz/namemap
  import stz/compiler
  import stz/front-end
  import stz/visibility
  import stz/il-ir
  import stz/pkg
  import stz/dl-ir
  import stz/algorithms
  import stz/proj-manager

;<DOC>=======================================================================
auto-doc produces mdbook documentation for requested Stanza packages.
auto-doc refers to generating API information from actual definitions as well as
doc strings which can have markdown (and html) strings.
Example usage:
```bash
jstanza doc lib/designs/scratch.stanza -o md-docs -pkg-filter xxx -toc-renamer yyy -fig-filter zzz -trace
```
where
* pkg-filter, fig-filter and toc-renamer are scripts that are run with pkg-name and pkg-filename as arguments
* filters scripts are expected to print to stdout `true` or `false` as a string
* pkg-filter determines the inclusion of packages -- default is `true`
* fig-filter determines which packages produce figures -- default is `true`
* toc-renamer script is expected to print to stdout a name to be used in the TOC -- default is pkg-name
* `-trace` flag determines if script running is traced

An example filter script is:
```stanza
val name     = command-line-arguments()[1]
val filename = command-line-arguments()[2]
val res =
  prefix?(filename, "open-components-database/components/") or 
  prefix?(filename, "open-components-database/modules/") or 
  prefix?(filename, "open-components-database/utils/")
println(res)
```

An example TOC renamer script is:
```stanza
val name     = command-line-arguments()[1]
val filename = command-line-arguments()[2]
val res =
  if prefix?(filename, "open-components-database/components/") :
    replace(name, "ocdb/", "components/")
  else if prefix?(filename, "open-components-database/modules/") :
    replace(name, "ocdb/", "modules/")
  else if prefix?(filename, "open-components-database/utils/") :
    replace(name, "ocdb/", "utils/")
  else :
    name
println(res)
```

Doc string examples include:
```stanza
DOC: "makes figures"
```
and
```stanza
DOC: \<s>makes figures<s>
```
where `\<tag>...<tag>` is the Stanza long comment syntax.

Doc strings can also contain a `FIG:(app, suffix, code)` within
where `app` is an app that is called with
* a URL as first arg, fig suffix as second arg, and code as third arg
App is responsible for running code and producing figure at given URL
A FIG example is:
```stanza
 <img src=FIG:(gen-ocdb-app, svg, view(URL, two-pin-package(0.35, 0.10, 0.14, 0.35, 0.14))) height="50">
```
where
* `gen-ocdb-app` is run with command line arguments of
  1. the base of the url to write and
  2. the url suffix (`svg`),
  3. the code string (e.g., `view(URL, two-pin-package(...))`) to run
* the app (e.g., `gen-ocdb-app`) is expected to bind the variable URL to the URL command line argument so that the
    the code can access it (e.g., `view(URL, ...)`),
* `FIG` returns the same url plus the suffix so that it can be used in the enclosing HTML or MD image form, and
* `gen-ocdb-app.stanza` lives in `open-components-database/utils/` and can be compiled with
```bash
stanza open-components-database/utils/gen-ocdb-app.stanza -o build/gen-ocdb
```

TODO:

 o Move pretty-printer out to general mechanism.
     There some tricky nuances involving precedence and operator associativity.
     Look at the type printer in stz-type to see how precedence is handled.
     Hopefully, can be refactored together with the pretty-printer into the same mechanism.
 o parse-iterms is fine for now. Has some bad performance characteristics that we can revisit later.
 o the FIG processing currently runs as part of running stanza doc,
     this will need to be revisited so that text can be updated without rerunning all the generation programs.
 o add timeout check for plugin execution
 o add support for special characters in package pathnames
 o add proper delete directory command that handles windows and escaping etc
 o would be good to factor print-definitions into creating datastructure and then processing/printing
;============================================================================== <DOC>

public defstruct AutoDocPluginCompletionException <: Exception :
  name: String
  state: ProcessState

defmethod print (o:OutputStream, e:AutoDocPluginCompletionException) :
  print(o, "Plugin failed to complete left in state %_" % [name(e), state(e)])

defn slurp-from (s:InputStream) -> String :
  val buffer = StringBuffer()
  let loop () :
     match(get-char(s)) :
        (c:Char) :
           add(buffer, c)
           loop()
        (c:False) : false
  to-string(buffer)

defn call-plugin (name:String, arguments:Seqable<String>) -> String :
  val proc = Process(name, cat([name], arguments), PROCESS-IN, PROCESS-OUT, PROCESS-ERR)
  val response = trim $ slurp-from(output-stream(proc))
  val state = wait(proc)
  match(state:ProcessDone) :
    throw(AutoDocPluginCompletionException(name, state)) when value(state) != 0
  else :
    throw(AutoDocPluginCompletionException(name, state))
  response

defn call-string-plugin (name:String, args:Seqable<String>) -> String :
  call-plugin(name, args)

public defstruct AutoDocPluginBooleanException <: Exception :
  name: String
  response: String

defmethod print (o:OutputStream, e:AutoDocPluginBooleanException) :
  print(o, "Read invalid response %_ from boolean plugin %_" % [response(e), name(e)])

defn call-boolean-plugin (name:String, args:Seqable<String>) -> True|False :
  val response = call-plugin(name, args)
  if contains?(["true", "false"], response) :
    response == "true"
  else :
    throw(AutoDocPluginBooleanException(name, response))

defn call-string-plugin (app-name:False|String, pkg:IPackage, default:IPackage -> String, trace?:True|False) -> String :
  val res =
    match(app-name:String) :
      call-string-plugin(app-name, [to-string(name(pkg)), filename(info(pkg) as FileInfo)])
    else : default(pkg)
  println("CALL %_ PKG-NAME %_ PKG-FILENAME %_ RES %_" % [app-name, name(pkg), filename(info(pkg) as FileInfo), res]) when trace?
  res

defn call-boolean-plugin (app-name:False|String, pkg:IPackage, default:IPackage -> True|False, trace?:True|False) -> True|False :
  val res =
    match(app-name:String) :
      call-boolean-plugin(app-name, [to-string(name(pkg)), filename(info(pkg) as FileInfo)])
    else : default(pkg)
  println("CALL %_ PKG-NAME %_ PKG-FILENAME %_ RES %_" % [app-name, name(pkg), filename(info(pkg) as FileInfo), res]) when trace?
  res

;=========================================
;========== PATHNAMES -> TREE ============
;=========================================

;String tree node
defstruct StringTree :
  key: String
  children: Tuple<StringTree>

defmethod print (o:OutputStream, node:StringTree) :
  print(o, "StringTree(%_, %_)" % [key(node), children(node)])

;Turns list of package strings into a tree of strings split at slashes
;  assumes input strings are sorted and trees maintain sorting
defn organize-strings (strings:Seqable<String>) -> Tuple<StringTree> :
  val split-strings = to-list $ for s in strings seq : to-list $ split(s, "/")
  let loop (string-chunkz:List<List<String>> = split-strings) :
    if empty?(string-chunkz) :
      []
    else :
      val tbl = HashTable<String, List<List<String>>>(List())
      for chunks in string-chunkz do :
        if not empty?(chunks) :
          tbl[head(chunks)] = cons(tail(chunks), tbl[head(chunks)])
      to-tuple $ lazy-qsort{key, _} $ for kv in tbl seq :
        StringTree(key(kv), loop(value(kv)))

;=============================================
;============ DEFINITION PRINTING ============
;=============================================

;mangle package name so that it can be used as a filename
defn mangle (name:String) -> Symbol :
  to-symbol(replace(name, '/', '$'))

defn mangle (name:Symbol) -> Symbol :
  mangle(to-string(name))

;find all public definitions in ipackage
defn public-definitions (ipackage:IPackage) -> Seq<IExp> :
  generate<IExp> :
    defn loop (e:IExp) :
      defn* loop-public (e:IExp, public?:True|False) :
        match(e) :
          (e:IBegin) :
            do(loop-public{_, public?}, exps(e))
          (e:IDefn|IDef|IDefChild|IDefType|IDefVar|IDefmulti|IDefmethod|ILSDefn|ILSDefType|ILSDefmethod|IDoc) :
            yield(e) when public?
          (e:IVisibility) :
            loop-public(exp(e), visibility(e) is Public)
          (e) :
            false
      match(e) :
        (e:IBegin) :
          do(loop, exps(e))
        (e:IDoc) :
          yield(e)
        (e:IDefmethod|ILSDefmethod) :
          yield(e)
        (e:IVisibility) :
          loop-public(exp(e), visibility(e) is Public)
        (e) :
          false
    for e in exps(ipackage) do :
      loop(e)

;lookup names in namemap
defn lookup (nm:NameMap, e:IExp) :
  match(e) :
    (e:VarN) : name(nm[n(e)])
    (e) : e

;print anchor for index jumping
defn print-anchor (o:OutputStream, e:IExp) :
  match(e:VarN) :
    println(o, "<a name=\"V%_\"></a>\n" % [n(e)])

defn pretty-targs (nm:NameMap, targs:List<IExp>) :
  "" when empty?(targs) else ("<%,>" % [pretties(nm, targs)])

;produce a version of exp like surface syntax
defn pretty (nm:NameMap, e:IExp) :
  match(e) :
    (e:IOf) : "%_%_" % [pretty(nm, class(e)), pretty-targs(nm, args(e))]
    (e:IAnd) : "%_&%_" % [pretty(nm, a(e)), pretty(nm, b(e))]
    (e:IOr) : "%_|%_" % [pretty(nm, a(e)), pretty(nm, b(e))]
    (e:IArrow) : "%_ -> %_" % [pretties(nm, a1(e)), pretty(nm, a2(e))]
    (e:IGradual) : "?"
    (e:IVoid) : "void"
    (e:INone) : "none"
    (e:ITuple) : "[%,]" % [pretties(nm, exps(e))]
    (e:IVar) : name(e)
    (e:ICap) : "?%_" % [pretty(nm, name(e))]
    (e:ILSOfT) : "%_%_" % [pretty(nm, class(e)), pretty-targs(nm, args(e))]
    (e:ILSRefT) : "ref<%_>" % [pretty(nm, type(e))]
    (e:VarN) : lookup(nm, e)
    (e:Raw) : pretty(nm, class(e))
    (e) : e

defn pretties (nm:NameMap, e:List<IExp>) :
  map(pretty{nm, _}, e)

defn pretty-arg-type (nm:NameMap, a:IExp, t:IExp) :
  "%_:%_" % [lookup(nm, a), pretty(nm, t)]

defn pretty-return-type (nm:NameMap, t:IExp) :
  "" when t is INone else (" -> %_" % [pretty(nm, t)])

defn pretty-parent (nm:NameMap, t:IExp) :
  "" when t is INone else (" <: %_" % [pretty(nm, t)])

defn pretty-type (nm:NameMap, t:IExp) :
  "" when t is INone else (" : %_" % [pretty(nm, t)])

defn pretty-args (nm:NameMap, targs:List<IExp>, args:List<IExp>, a1:List<IExp>, a2:IExp) :
  "%_ (%,)%_" % [pretty-targs(nm, targs), map(pretty-arg-type{nm, _, _}, args, a1), pretty-return-type(nm, a2)]

defn pretty-args (nm:NameMap, targs:List<IExp>, a1:List<IExp>, a2:IExp) :
  "%_ (%,)%_" % [pretty-targs(nm, targs), pretties(nm, a1), pretty-return-type(nm, a2)]

;records definition index information
defstruct DefRef :
  id:          Int
  pkg:         Symbol
  name:        Symbol
  description: String

;create defref from expression
defn maybe-define (pkg:Symbol, nm:NameMap, tbl:IntTable<DefRef>, e:IExp, descriptions:IntTable<String>) :
  match(e:VarN) :
    val name = name(nm[n(e)])
    tbl[n(e)] = DefRef(n(e), pkg, name, get?(descriptions, n(e), to-string $ name))

;record defref definitions in appropriate indices
defn collect-definition (pkg:Symbol, nm:NameMap, e:IExp, types:IntTable<DefRef>, vars:IntTable<DefRef>, functions:IntTable<DefRef>, descriptions:IntTable<String>) :
  match(e) :
    (e:ILSDefType) : maybe-define(pkg, nm, types, name(e), descriptions)
    (e:ILSDefn) :    maybe-define(pkg, nm, functions, name(e), descriptions)
    (e:IDefType) :   maybe-define(pkg, nm, types, class(e), descriptions)
    (e:IDef) :       maybe-define(pkg, nm, vars, name(e), descriptions)
    (e:IDefVar) :    maybe-define(pkg, nm, vars, name(e), descriptions)
    (e:IDefn) :      maybe-define(pkg, nm, functions, name(e), descriptions)
    (e:IDefmulti) :  maybe-define(pkg, nm, functions, name(e), descriptions)
    (e) :            false

;split up string into at most max length chunks splitting at char c
defn split (s:String, c:Char, max:Int) -> Tuple<String> :
  defn return (lc:False|Int) :
    if length(s) > 80 :
      match(lc:Int) :
        [s[0 to (lc + 1)], s[(lc + 1) to false]]
      else :
        [s]
    else :
      [s]
  let inner (start:Int = 0, lc:False|Int = false) :
    match(index-of-char(s, start to false, c)) :
      (j:Int) :
        if j > 80 : return(lc)
        else : inner(j + 1, j)
      (j:False) :
        return(lc)

;pprint signature splitting before args if greater than 80 and
;then splitting into at most 80 columns chunks
defn print-code (o:OutputStream, s:String) :
  val ss =
    if length(s) > 80 :
      match(index-of-char(s, '(')) :
        (i:Int) :
          val name = s[0 to i]
          val sig = string-join $ ["  " s[i to false]]
          if length(sig) > 80 :
            val res = Vector<String>()
            let loop (s:String = sig, i:Int = 0) :
              defn add-res (s:String) :
                add(res, s when (i == 0) else (string-join $ ["  ", s]))
              val ss = split(s, ',', 80)
              add-res(ss[0])
              loop(ss[1], i + 1) when length(ss) == 2
            cat-all $ [[name], res]
          else :
            [name, sig]
        (i:False) :
          [s]
    else :
      [s]
  println(o, "```stanza")
  for s in ss do : println(o, s)
  println(o, "```")

;do generate and record descriptions
defn put-description (id:IExp, gen:IExp -> Printable, descriptions:IntTable<String>) :
  match(id:VarN) :
    val d = to-string $ gen(id)
    descriptions[n(id)] = d
    d
  else :
    ""

;generate and record descriptions using namemap
defn gen-description (nm:NameMap, e:IExp, descriptions:IntTable<String>) -> String:
  match(e) :
    (e:ILSDefType) :
      put-description(name(e), { "lostanza deftype %_%_%_" % [lookup(nm, _) pretty-targs(nm, args(e)) pretty-parent(nm, parent(e))] }, descriptions)
    (e:IDefType) :
      put-description(class(e), { "deftype %_%_%_" % [lookup(nm, _) pretty-targs(nm, args(e)) pretty-parent(nm, parent(e))] }, descriptions)
    (e:IDef) :
      put-description(name(e), { "val %_%_" % [lookup(nm, _) pretty-type(nm, type(e))] }, descriptions)
    (e:IDefVar) :
      put-description(name(e), { "var %_%_" % [lookup(nm, _) pretty-type(nm, type(e))] }, descriptions)
    (e:ILSDefn) :
      put-description(name(e), { "lostanza defn %_%_" % [lookup(nm, _) pretty-args(nm, targs(e), args(e), a1(e) a2(e))] }, descriptions)
    (e:IDefn) :
      put-description(name(e), { "defn %_%_" % [lookup(nm, _) pretty-args(nm, targs(e), args(e), a1(e) a2(e))] }, descriptions)
    (e:IDefmulti) :
      put-description(name(e), { "defmulti %_%_" % [lookup(nm, _) pretty-args(nm, targs(e), a1(e) a2(e))] }, descriptions)
    (e) :
      ""

;Extract the form in the given string at the given index.
;Returns the lexed form and the index of the character after it. 
defn extract-form (string:String, start:Int) -> [?, Int] :
  val input-stream = StringInputStream(string[start to false], "UNTITLED")
  val form = reader/read(input-stream)
  val end = length(string) - length(input-stream)
  [form, end]

deftype ParsedItem
defstruct ParsedText <: ParsedItem : (string:String)
defstruct ParsedForm <: ParsedItem : (form)

;Extract all the "CODE:(...)" forms from the given string.
defn parse-items (string:String, tag:String) -> Vector<ParsedItem> :
  val items = Vector<ParsedItem>()
  val prefix = string-join $ [tag ":("]
  let loop (start:Int = 0) :
    match(index-of-chars(string, start to false, prefix)) :
      (i:Int) :
        val [form, end] = extract-form(string, i + length(tag) + 1)
        add(items, ParsedText(string[start to i]))
        add(items, ParsedForm(form))
        loop(end)
      (f:False) :
        add(items, ParsedText(string[start to false]))
  items

val script-counter = to-seq(0 to false)

defn gen-fig (item:ParsedForm, pkg:IPackage, figs-dir:String, run-fig-generation?:True|False) -> String :
  val id = next(script-counter)
  val script-name = to-string("script%_.stanza" % [id])
  val forms = unwrap-all(form(item))
  val app    = forms[0]
  val suffix = forms[1]
  val code   = tailn(forms, 2)
  val filename = to-string("%_/fig-%_.%_" % [name(pkg), id, suffix])
  if run-fig-generation? :
    val pathname = to-string("%_/%_" % [figs-dir, filename])
    val output = to-string("call-system(\"%_\", [\"%_\", \"%_\", \"%_\", \\<s>%_<s>])" % [app, app, pathname, suffix, code])
    spit(script-name, output)
    call-system("stanza", ["stanza", "run", script-name])
  to-string("figs/%_" % [filename])

defn print-definition (o:OutputStream, nm:NameMap, e:IExp, descriptions:IntTable<String>, pkg:IPackage,
                       figs-dir:String, run-fig-generation?:True|False) :
  match(e) :
    (e:ILSDefType) :
      print-anchor(o, name(e))   
      print-code(o, gen-description(nm, e, descriptions))
    (e:IDefType) :
      print-anchor(o, class(e))   
      print-code(o, gen-description(nm, e, descriptions))
    (e:IDef) :
      print-anchor(o, name(e))   
      print-code(o, gen-description(nm, e, descriptions))
    (e:IDefVar) :
      print-anchor(o, name(e))   
      print-code(o, gen-description(nm, e, descriptions))
    (e:ILSDefn) :
      print-anchor(o, name(e))   
      print-code(o, gen-description(nm, e, descriptions))
    (e:IDefn) :
      print-anchor(o, name(e))   
      print-code(o, gen-description(nm, e, descriptions))
    (e:IDefmulti) :
      print-anchor(o, name(e))   
      print-code(o, gen-description(nm, e, descriptions))
    ; (e:ILSDefmethod) :
    ;   println(o, "`lostanza defmethod `%_`%_`" % [lookup-and-link(nm, multi(e)) pretty-args(nm, targs(e), args(e), a1(e) a2(e))])
    ; (e:IDefmethod) :
    ;   println(o, "`defmethod `%_`%_`" % [lookup-and-link(nm, multi(e)) pretty-args(nm, targs(e), args(e), a1(e) a2(e))])
    (e:IDoc) :
      val str = value(string(e) as ILiteral)
      for item in parse-items(str, "FIG") do :
        match(item) :
          (item:ParsedText) :
            print(o, string(item))
          (item:ParsedForm) :
            val url = gen-fig(item, pkg, figs-dir, run-fig-generation?)
            print(o, "\"%_\"" % [url])
    (e) :
      false

;print description of package
defn print-defpackage (o:OutputStream, nm:NameMap, ipackage:IPackage) :
  println(o, "```stanza") 
  println(o, "defpackage %_" % [name(ipackage)])
  for imp in imports(ipackage) do :
    println(o, "  import %_" % [package(imp)])
  println(o, "```") 

;produce index of particular kind for each defref
defn gen-index (so:FileOutputStream, dir:String, kind:String, elts:IntTable<DefRef>) :
  println(so, "- [%_](./%_/README.md)" % [kind, kind])
  val kind-dir = string-join $ [dir "/" kind]
  create-dir(kind-dir) when not file-exists?(kind-dir)
  val ts = FileOutputStream(string-join $ [kind-dir "/README.md"])
  println(ts, "# %_\n" % [kind])
  val refs = qsort(name, values(elts))
  for ref in refs do :
    val url = string-join $ ["../packages/" mangle(pkg(ref)) ".html#V" id(ref)]
    println(ts, "[`%_`](%_)\n" % [description(ref), url])
  close(ts)

defn call-shell (args:Seqable<String>) :
  val earg = escape-shell-command $ args
  call-system("sh", ["sh", "-c", earg])

;copy existing figs for given master-figs-dir and package to mdbook destination dir
defn copy-figs (master-figs-dir:String, package-name:Symbol, info:False|FileInfo) :
  match(info:FileInfo) :
    val figs-dir = string-join $ [split-filepath(filename(info))[0], "figs/" package-name]
    if file-exists?(figs-dir) :
      val dst-figs-dir = string-join $ [master-figs-dir "/" package-name]
      call-shell $ ["mkdir" "-p" dst-figs-dir]
      for file in dir-files(figs-dir, false) do :
        copy-file(string-join $ [figs-dir "/" file], string-join $ [dst-figs-dir, "/" file])

;print table of contents using string trees
defn print-toc (so:OutputStream, start-depth:Int, trees:Tuple<StringTree>, packages:Vector<IPackage>) :
  var id:Int = -1
  let loop (depth:Int = start-depth, trees:Tuple<StringTree> = trees, path:List<String> = List()) :
    for tree in trees do :
      for i in 0 to (2 * depth) do : print(so, " ")
      val new-path = cons(key(tree), path)
      val pkg-name =
        if empty?(children(tree)) :
          id = id + 1
          mangle(name(packages[id]))
        else :
          mangle(reduce({ string-join $ [_ "/" _] }, reverse(new-path)))
      println(so, "- [%_](./packages/%_.md)" % [key(tree), pkg-name])
      if not empty?(children(tree)) :
        loop(depth + 1, children(tree), new-path)

defn unzip<?S,?T> (elts:Seqable<KeyValue<?S,?T>>) -> [Vector<S>, Vector<T>] :
  val ks = Vector<S>()
  val vs = Vector<T>()
  for e in elts do :
    add(ks, key(e))
    add(vs, value(e))
  [ks, vs]
  

;produce mdbook doc for dir directory using namemap on all given ipackages
;outputs summary, package files, and index files
public defn gen-doc (md-docs-dir:String, nm:NameMap, i-all-ipackages:Seqable<IPackage>, fig-filter-filename:False|String, toc-renamer-filename:False|String, trace?:True|False) :
  val all-ipackages = to-tuple $ i-all-ipackages
  val dir = string-join $ [md-docs-dir "/src"]
  call-shell $ ["mkdir" "-p" dir]
  create-dir(dir) when not file-exists?(dir)
  val pkg-dir = string-join $ [dir "/packages"]
  val so = FileOutputStream $ string-join $ [dir "/SUMMARY.md"]
  println(so, "# Summary\n")
  println(so, "- [Packages](./packages/README.md)")
  create-dir(pkg-dir) when not file-exists?(pkg-dir)
  val vars = IntTable<DefRef>()
  val types = IntTable<DefRef>()
  val functions = IntTable<DefRef>()
  val dt = IntTable<String>()
  val figs-dir = string-join $ [pkg-dir "/figs"]
  val sorted-packages = to-tuple $ qsort(name, all-ipackages)
  val env = HashTable<Symbol,String>()
  val pkg-strings = to-tuple $ for pkg in sorted-packages seq :
    pkg => call-string-plugin(toc-renamer-filename, pkg, { to-string(name(_)) }, trace?)
  val sorted-pkg-strings = to-tuple $ qsort(value, pkg-strings)
  ; val toc-trees = organize-strings(seq({ to-string(name(_)) }, sorted-packages))
  val [string-sorted-packages, sorted-strings] = unzip $ sorted-pkg-strings
  val toc-trees = organize-strings(sorted-strings)
  print-toc(so, 1, toc-trees, string-sorted-packages)
  for ipackage in sorted-packages do :
    println("IPACKAGE NAME %_ INFO %_" % [name(ipackage), info(ipackage)]) when trace?
    copy-figs(figs-dir, name(ipackage), info(ipackage))
    val definitions = to-tuple $ public-definitions(ipackage)
    val pn = string-join $ [pkg-dir "/" mangle(name(ipackage)) ".md"]
    val po = FileOutputStream(pn)
    println(po, "# %_\n" % [name(ipackage)])
    print-defpackage(po, nm, ipackage)
    val run-fig-generation? = call-boolean-plugin(fig-filter-filename, ipackage, { true }, trace?)
    for d in definitions do :
      print-definition(po, nm, d, dt, ipackage, figs-dir, run-fig-generation?)
      collect-definition(name(ipackage), nm, d, types, vars, functions, dt)
      println(po, "")
    println(po, "")
    close(po)
  gen-index(so, dir, "Types", types)
  gen-index(so, dir, "Vars", vars)
  gen-index(so, dir, "Functions", functions)
  close(so)

;Filter packages based on pkg-filter-filename
defn match-package-pathnames (ipackages:Seqable<IPackage>, pkg-filter-filename:False|String, trace?:True|False) -> Seqable<IPackage> :
  for pkg in ipackages filter :
    match(info(pkg)) :
      (info:FileInfo) : call-boolean-plugin(pkg-filter-filename, pkg, { true }, trace?)
      (info) : false

;produce mdbook auto-doc in given output directory
;  pkg-filter-filename:  what packages to include
;  fig-filter-filename:  what packages to generate figures for
;  toc-renamer-filename: "pathnames" to use for TOC
;  trace?:               trace pattern expression evaluation?
public defn auto-doc (settings:BuildSettings, output:String, pkg-filter-filename:False|String, fig-filter-filename:False|String, toc-renamer-filename:False|String, trace?:True|False) :
  val dep-result = dependencies(settings, true)
  val dir = match(output:String): output else: "docs"
  gen-doc(dir, namemap(dep-result),
          match-package-pathnames(filter-by<IPackage>(packages(dep-result)), pkg-filter-filename, trace?)
          fig-filter-filename,
          toc-renamer-filename,
          trace?)

