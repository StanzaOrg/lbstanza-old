#use-added-syntax(stz-serializer-lang)
defpackage stz/defs-db-serializer :
  import core
  import collections
  import stz/serializer

;===============================================================================
; =============================== Types ========================================
;===============================================================================
doc: "Represents the kind of item associated with a definition"
public defenum SrcDefinitionKind : 
  SrcDefUnknown
  SrcDefMulti 
  SrcDefMethod 
  SrcDefFunction 
  SrcDefVariable
  SrcDefType
  SrcDefPackage

doc: "Represents whether the definition was found in a source file or pkg"
public public defenum SrcDefinitionSource : 
  PkgDefinition 
  SrcDefinition

doc: "A single defined item"
public defstruct Definition : 
  name:      Symbol,
  file-info: FileInfo 
  kind:      SrcDefinitionKind 
  source:    SrcDefinitionSource
  pkg-name:  Symbol,

doc: "A collection of definitions and reserved words in a stanza project"
public defstruct DefinitionsDatabase: 
  reserved-words: Tuple<String>, 
  definitions: HashTable<Symbol, List<Definition>>

;===============================================================================
; =========================== Serializers =====================================
;===============================================================================
public defserializer (out:OutputStream, in:InputStream) : 
  defunion definitions-database (DefinitionsDatabase) :
    DefinitionsDatabase : (reserved-words:tuple(string), definitions:table)

  defunion definition (Definition) : 
    Definition : (name:symbol, file-info:fileinfo, kind:src-def-kind, source:src-def-src, pkg-name:symbol)
  
  defunion fileinfo (FileInfo) :
    FileInfo : (filename:string, line:int, column:int)

  reader defn read-table () :
    val n = read-int()
    to-hashtable<Symbol, List<Definition>> $ 
      for i in 0 to n seq : read-symbol() => read-list(read-definition)

  writer defn write-table (tbl:HashTable<Symbol, List<Definition>>) :
    write-int(length(tbl))
    for e in tbl do :
      write-symbol(key(e))
      write-list(write-definition, value(e))

  reader defn read-list<?T> (f: () -> ?T) :
    val n = read-int()
    to-list(repeatedly(f, n))

  writer defn write-list<?T> (f: T -> False, xs:List<?T>) :
    write-int(length(xs))
    do(f, xs)
  
  reader defn read-tuple<?T> (f: () -> ?T) :
    val n = read-int()
    to-tuple(repeatedly(f, n))

  writer defn write-tuple<?T> (f: T -> False, xs:Tuple<?T>) :
    write-int(length(xs))
    do(f, xs)

  defatom src-def-src (x:SrcDefinitionSource): 
    writer: 
      write-int(to-int(x))
    reader : 
      val i = read-int()
      if (i < 0) or (i >= SrcDefinitionSource-length) : 
        throw(DeserializeException())
      SrcDefinitionSource(i)

  defatom src-def-kind (x:SrcDefinitionKind) :
    writer :
      write-int(to-int(x))
    reader :
      val i = read-int()
      if i < 0 or i >= SrcDefinitionKind-length :
        throw(DeserializeException())
      SrcDefinitionKind(i)
  
  defatom symbol (x:Symbol) :
    writer :
      write-string(to-string(x))
    reader :
      to-symbol(read-string())

  defatom byte (x:Byte) :
    writer :
      put(out, x)
    reader :
      match(get-byte(in)) :
        (x:Byte) : x
        (x:False) : throw(DeserializeException())

  defatom char (x:Char) :
    writer :
      print(out, x)
    reader :
      match(get-char(in)) :
        (x:Char) : x
        (x:False) : throw(DeserializeException())

  defatom string (x:String) :
    writer :
      write-int(length(x))
      print(out, x)
    reader :
      val n = read-int()
      String(repeatedly(read-char, n))

  defatom int (x:Int): 
    writer: 
      to-var-int(x, put{out, _})
    reader:
      from-var-int(read-byte)

public defn read-definitions-database (in:InputStream) -> DefinitionsDatabase : 
  deserialize-definitions-database(in) as DefinitionsDatabase

defn to-var-int (x:Int, Y: Byte -> False) :
  defn B0 (x:Int) : Y(to-byte(x))
  defn B1 (x:Int) : Y(to-byte(x >> 8))
  defn B2 (x:Int) : Y(to-byte(x >> 16))
  defn B3 (x:Int) : Y(to-byte(x >> 24))
  if x >= 0 :
    if x < 250 : B0(x)
    else if x < 506 : (Y(250Y), B0(x - 250))
    else if x < 762 : (Y(251Y), B0(x - 506))
    else if x < 1018 : (Y(252Y), B0(x - 762))
    else if x < 32768 : (Y(253Y), B1(x), B0(x))
    else if x < 8388608 : (Y(254Y), B2(x), B1(x), B0(x))
    else : (Y(255Y), B3(x), B2(x), B1(x), B0(x))
  else :
    if x >= -32768 : (Y(253Y), B1(x), B0(x))
    else if x >= -8388608 : (Y(254Y), B2(x), B1(x), B0(x))
    else : (Y(255Y), B3(x), B2(x), B1(x), B0(x))

defn from-var-int (N: () -> Byte) -> Int :
  defn B0 () : to-int(N())
  defn B1 () : B0() << 8
  defn B2 () : B0() << 16
  defn S1 () : (B0() << 24) >>> 16
  defn S2 () : (B0() << 24) >>> 8
  defn S3 () : (B0() << 24)

  val x = N()
  switch(x) :
    255Y : S3() | B2() | B1() | B0()
    254Y : S2() | B1() | B0()
    253Y : S1() | B0()
    252Y : B0() + 762
    251Y : B0() + 506
    250Y : B0() + 250
    else : to-int(x)

;===============================================================================
; ============================= Printers =======================================
;===============================================================================
defmethod print (o:OutputStream, def:Definition):
  print(o, "Definition(name:%_,kind:%_,source:%_) in %_ @ %_" % [name(def), kind(def), source(def), pkg-name(def), file-info(def)])

defmethod print (o:OutputStream, ddb:DefinitionsDatabase):
  val o2 = IndentedStream(o)
  print(o,"Reserved Words:")
  do(lnprint{o2, _}, reserved-words(ddb))
  lnprint(o, "Definitions:")
  do(lnprint{o2, _}, definitions(ddb))

defmethod print (o:OutputStream, kind:SrcDefinitionKind):
  print{o, _} $ 
    match(kind):
      (_:SrcDefUnknown):  "unknown", 
      (_:SrcDefMulti):    "multi", 
      (_:SrcDefMethod):   "method", 
      (_:SrcDefFunction): "function", 
      (_:SrcDefVariable): "variable", 
      (_:SrcDefType):     "type", 
      (_:SrcDefPackage):  "package",

defmethod print (o:OutputStream, src:SrcDefinitionSource):
  print{o, _} $
    match(src):
      (_:SrcDefinition): ".stanza"
      (_:PkgDefinition): ".pkg|.fpkg"
