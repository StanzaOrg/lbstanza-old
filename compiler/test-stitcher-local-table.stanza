defpackage stz/test-stitcher-local-table :
  import core
  import collections
  import stz/stitcher-local-table
  import stz/code-emitter
  import stz/asm-ir

let :
  val local-table = LocalTable()

  val package-a = package-locals(local-table, `package-a)
  save-var-context(package-a, VarContext(0, [NamedVar(16, "variableA")
                                             NamedVar(24, "variableB")
                                             NamedVar(28, "variableC")]))  
  save-var-context(package-a, VarContext(10, [NamedVar(16, "variableX")
                                              NamedVar(24, "variableY")]))  
  save-var-context(package-a, VarContext(20, [NamedVar(16, "Theta")
                                              NamedVar(24, "Omega")]))
  save-varmap(package-a, 100, VarMap(0, [0, 1]))
  save-varmap(package-a, 101, VarMap(10, [1]))
  save-varmap(package-a, 102, VarMap(20, [0]))

  val package-b = package-locals(local-table, `package-b)
  save-var-context(package-b, VarContext(0, [NamedVar(16, "Theta")
                                             NamedVar(24, "Omega")
                                             NamedVar(28, "Delta")]))  
  save-var-context(package-b, VarContext(10, [NamedVar(16, "Alpha")
                                              NamedVar(24, "Beta")]))  
  save-var-context(package-b, VarContext(21, [NamedVar(16, "Gamma")
                                              NamedVar(24, "Omega")]))
  save-varmap(package-b, 100, VarMap(0, [0 1 2]))
  save-varmap(package-b, 101, VarMap(10, [0]))
  save-varmap(package-b, 102, VarMap(10, [1]))
  save-varmap(package-b, 103, VarMap(10, [0]))
  save-varmap(package-b, 104, VarMap(21, [0 1]))

  val label-counter = to-seq(100 to false)
  val test-emitter = new CodeEmitter :
    defmethod emit (this, i:Ins) :
      println("Emit: %_" % [i])
    defmethod unique-label (this) :
      next(label-counter)
      
  emit(local-table, test-emitter)  

