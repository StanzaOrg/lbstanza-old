#use-added-syntax(tests)
defpackage stz/test-stitcher-local-table :
  import core
  import collections
  import stz/stitcher-local-table
  import stz/code-emitter
  import stz/asm-ir
  import stz/codegen
  import stz/backend
  import stz/bytebuffer-emitter
  import stz/stable-arrays
  import core/local-table
  import stz/utils

;Return a local table for testing.
defn test-local-table () -> LocalTable :
  val local-table = LocalTable()

  val package-a = package-locals(local-table, `package-a)
  save-var-context(package-a, VarContext(0, [NamedVar(16, "variableA")
                                             NamedVar(24, "variableB")
                                             NamedVar(28, "variableC")]))  
  save-var-context(package-a, VarContext(10, [NamedVar(16, "variableX")
                                              NamedVar(24, "variableY")]))  
  save-var-context(package-a, VarContext(20, [NamedVar(16, "Theta")
                                              NamedVar(24, "Omega")]))
  save-varmap(package-a, 1009, VarMap(0, [0, 1]))
  save-varmap(package-a, 1019, VarMap(10, [1]))
  save-varmap(package-a, 1029, VarMap(20, [0]))

  val package-b = package-locals(local-table, `package-b)
  save-var-context(package-b, VarContext(0, [NamedVar(16, "Theta")
                                             NamedVar(24, "Omega")
                                             NamedVar(28, "Delta")]))  
  save-var-context(package-b, VarContext(10, [NamedVar(16, "Alpha")
                                              NamedVar(24, "Beta")]))  
  save-var-context(package-b, VarContext(21, [NamedVar(16, "Gamma")
                                              NamedVar(24, "Omega")]))
  save-varmap(package-b, 2009, VarMap(0, [0 1 2]))
  save-varmap(package-b, 2019, VarMap(10, [0]))
  save-varmap(package-b, 2029, VarMap(10, [1]))
  save-varmap(package-b, 2039, VarMap(10, [0]))
  save-varmap(package-b, 2049, VarMap(21, [0 1]))

  local-table

;Simple emitter that just prints out the instructions.
defn printing-emitter () -> CodeEmitter :
  val label-counter = to-seq(100 to false)
  new CodeEmitter :
    defmethod emit (this, i:Ins) :
      println("Emit: %_" % [i])
    defmethod unique-label (this) :
      next(label-counter)

;Emit to binary form.
defn to-binary (table:LocalTable) -> StableByteArray :
  val emitter = ByteBufferEmitter()
  emit(table,
       emitter,
       AsmStubs(X64Backend()))
  memory(emitter)

;Test: Emit the local table and print out instructions.
deftest print-local-var-table :
  emit(test-local-table(),
       printing-emitter(),
       AsmStubs(X64Backend()))

;Create a LocalVarTable from a StableByteArray.
lostanza defn LocalVarTable (a:ref<StableByteArray>) -> ref<LocalVarTable> :
  return LocalVarTable(a.data as ptr<LSLocalVarTable>)

let :
  val mem = to-binary(test-local-table())
  println("Binary Form:")
  println(to-hex(mem))
  println("")
  
  val table = LocalVarTable(mem)
  println(table)
