defpackage stz/stitcher-local-table :
  import core
  import collections
  import stz/asm-ir
  import stz/code-emitter

;============================================================
;========================= API ==============================
;============================================================

;Assembly table of locals.
public deftype LocalTable

;Represents the locals within a single package.
public deftype PackageLocals

;Retrieve the package locals for a given package.
public defmulti package-locals (t:LocalTable, package:Symbol) -> PackageLocals

;Save one mapping of variables.
public defmulti save-var-context (p:PackageLocals, ctxt:VarContext) -> False

;Record the variable mapping at a given spot in the assembly code.
public defmulti save-varmap (p:PackageLocals, label-id:Int, map:VarMap) -> False

;Emit the local table.
public defmulti emit (table:LocalTable, emitter:CodeEmitter) -> False

;============================================================
;=================== Implementation =========================
;============================================================

public defn LocalTable () -> LocalTable :

  ;Track whether a PackageLocals has been created for that package already.
  val package-local-set = HashSet<Symbol>()

  ;Accumulate all the given contexts.
  val context-list = Vector<VarContext>()

  ;Accumulate all the index maps.
  val index-maps = Vector<Tuple<Int>>()
  val index-map-table = HashTable<Tuple<Int>,Int>()

  ;Accumulate all the map entries.
  val map-list = Vector<VarMapEntry>()

  ;Return the index of the given var index map. 
  defn index-map-index (vars:Tuple<Int>) -> Int :
    match(get?(index-map-table, vars)) :
      (i:Int) :
        i
      (f:False) :
        val i = length(index-maps)
        add(index-maps, vars)
        index-map-table[vars] = i
        i

  ;Add a new entry in the map-list, returns its index.
  defn make-varmap-entry (label-id:Int, ctxt-index:Int, vars:Tuple<Int>) -> False :
    val map-index = index-map-index(vars)
    add(map-list, VarMapEntry(label-id, ctxt-index, map-index))

  ;Create the PackageLocals structure for adding package-specific information.
  defn make-package-locals (package:Symbol) -> PackageLocals :
    ;Sanity check: Ensure we don't create multiple local tables.
    if not add(package-local-set, package) :
      fatal("PackageLocals for '%_' has already been created." % [package])

    ;Each entry, CTXT => I, means that the context with id 'CTXT' in this
    ;package was saved at index 'I' in 'context-list'.
    val ctxt-indices = IntTable<Int>()

    new PackageLocals :

      ;Save a VarContext appearing in the given package.
      defmethod save-var-context (this, ctxt:VarContext) -> False :
        val index = length(context-list)
        add(context-list, ctxt)
        ctxt-indices[id(ctxt)] = index

      ;Save the variable map corresponding to a label.
      defmethod save-varmap (this, label-id:Int, map:VarMap) -> False :
        val ctxt-index = ctxt-indices[context(map)]
        make-varmap-entry(label-id, ctxt-index, vars(map))        

  ;Return the local table.
  new LocalTable :
    defmethod package-locals (this, package:Symbol) :
      make-package-locals(package)

;============================================================
;========= Representation of a Local Variable Map ===========
;============================================================

;Represents an entry in the local variable map.
defstruct VarMapEntry :
  label-id:Int
  context-index:Int
  index-map-index:Int