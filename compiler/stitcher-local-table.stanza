defpackage stz/stitcher-local-table :
  import core
  import collections
  import stz/asm-ir
  import stz/code-emitter
  import stz/codegen
  import stz/utils

;<doc>=======================================================
;==================== Doc ===================================
;============================================================

Emitted Format:

  //Local Variable Table
  .data
  .label local_var_table
  Lmap-list
  Lcontext-list
  Lnamed-var-list
  Lindex-maps
  Lindices

  .label map-list
  2003 //Length of map-list
  L1313 //Label id
  17    //Context index
  28    //Index map index
  ... repeated 2003 times ...

  .label context-list
  103 //Length of context-list
  4 //starting index of named vars
  ... repeated 103 times ...
  181 //ending index of named vars

  .label named-var-list
  108 //Length of named var list.
  4 //stack offset
  Lstring //pointer to name string
  ... repeated 108 times ...

  .label index-maps
  208 //Length of index maps
  4 //Starting index of map
  ... repeated 208 times ...
  130 //Ending index of index maps.

  .label indices
  99 //Length of indices
  1
  3
  28
  1
  ... repeated 99 times ...
  
  .text
  //End of Local Variable Table

;============================================================
;=======================================================<doc>

;============================================================
;========================= API ==============================
;============================================================

;Assembly table of locals.
public deftype LocalTable

;Represents the locals within a single package.
public deftype PackageLocals

;Retrieve the package locals for a given package.
public defmulti package-locals (t:LocalTable, package:Symbol) -> PackageLocals

;Save one mapping of variables.
public defmulti save-var-context (p:PackageLocals, ctxt:VarContext) -> False

;Record the variable mapping at a given spot in the assembly code.
public defmulti save-varmap (p:PackageLocals, label-id:Int, map:VarMap) -> False

;Emit the local table.
public defmulti emit (table:LocalTable, emitter:CodeEmitter, stubs:AsmStubs) -> False

;============================================================
;=================== Implementation =========================
;============================================================

public defn LocalTable () -> LocalTable :

  ;Track whether a PackageLocals has been created for that package already.
  val package-local-set = HashSet<Symbol>()

  ;Accumulate all the given contexts.
  val context-list = Vector<VarContext>()

  ;Accumulate all the index maps.
  val index-maps = Vector<Tuple<Int>>()
  val index-map-table = HashTable<Tuple<Int>,Int>()

  ;Accumulate all the map entries.
  val map-list = Vector<VarMapEntry>()

  ;Return the index of the given var index map. 
  defn index-map-index (vars:Tuple<Int>) -> Int :
    match(get?(index-map-table, vars)) :
      (i:Int) :
        i
      (f:False) :
        val i = length(index-maps)
        add(index-maps, vars)
        index-map-table[vars] = i
        i

  ;Add a new entry in the map-list, returns its index.
  defn make-varmap-entry (label-id:Int, ctxt-index:Int, vars:Tuple<Int>) -> False :
    val map-index = index-map-index(vars)
    add(map-list, VarMapEntry(label-id, ctxt-index, map-index))

  ;Create the PackageLocals structure for adding package-specific information.
  defn make-package-locals (package:Symbol) -> PackageLocals :
    ;Sanity check: Ensure we don't create multiple local tables.
    if not add(package-local-set, package) :
      fatal("PackageLocals for '%_' has already been created." % [package])

    ;Each entry, CTXT => I, means that the context with id 'CTXT' in this
    ;package was saved at index 'I' in 'context-list'.
    val ctxt-indices = IntTable<Int>()

    ;Return the package locals.
    new PackageLocals :

      ;Save a VarContext appearing in the given package.
      defmethod save-var-context (this, ctxt:VarContext) -> False :
        val index = length(context-list)
        add(context-list, ctxt)
        ctxt-indices[id(ctxt)] = index

      ;Save the variable map corresponding to a label.
      defmethod save-varmap (this, label-id:Int, map:VarMap) -> False :
        val ctxt-index = ctxt-indices[context(map)]
        make-varmap-entry(label-id, ctxt-index, vars(map))        

  ;Return the local table.
  new LocalTable :
    defmethod package-locals (this, package:Symbol) :
      make-package-locals(package)

    defmethod emit (this, emitter:CodeEmitter, stubs:AsmStubs) :
      defn E (x:Ins) : emit(emitter,x)

      ;Generate the necessary labels.
      val map-list-table = unique-id(stubs)
      val context-list-table = unique-id(stubs)
      val named-vars-table = unique-id(stubs)
      val index-maps-table = unique-id(stubs)
      val indices-table = unique-id(stubs)

      ;Create string table
      val string-table = HashTable<String,Int>()

      ;Retrieve the label for the given string.
      defn string-label (s:String) -> Int :
        set?(string-table, s, fn () : unique-id(stubs))

      ;Emit the indices table.
      defn emit-indices () -> False :
        val num-indices = sum(seq(length, index-maps))
        E(Comment("Indices for index maps"))
        E(Label(indices-table))
        E(DefInt(num-indices))
        for i in cat-all(index-maps) do :
          E(DefInt(i))

      ;Emit the index maps table.
      defn emit-index-maps () -> False :
        E(Comment("Index maps"))
        E(Label(index-maps-table))
        E(DefInt(length(index-maps)))
        val counter = Counter(0)
        for map in index-maps do :
          val index = next(counter, length(map))
          E(DefInt(index))
        E(DefInt(value(counter)))

      ;Emit the named vars.
      defn emit-named-vars () -> False :
        val num-named-vars = sum(seq(length{entries(_)}, context-list))
        E(Comment("Named vars"))
        E(Label(named-vars-table))
        E(DefInt(num-named-vars))
        for e in seq-cat(entries, context-list) do :
          E(DefLong(to-long(stack-offset(e))))
          E(DefLabel(string-label(name(e))))
          
      ;Emit the context-list.
      defn emit-contexts () -> False :
        E(Comment("Variable Contexts"))
        E(Label(context-list-table))
        E(DefInt(length(context-list)))
        val counter = Counter(0)
        for ctxt in context-list do :
          val index = next(counter, length(entries(ctxt)))
          E(DefInt(index))
        E(DefInt(value(counter)))

      ;Emit the map-list.
      defn emit-map-list () -> False :
        E(Comment("Local Variable Maps"))
        E(Label(map-list-table))
        E(DefInt(length(map-list)))
        for e in map-list do :
          E(DefLabel(label-id(e)))
          E(DefInt(context-index(e)))
          E(DefInt(/index-map-index(e)))

      ;Emit the table of all strings.
      defn emit-string-table () -> False :
        for entry in string-table do :
          val str = key(entry)
          val label-id = value(entry)
          E(Label(label-id))
          E(DefString(str))

      ;Launch!
      E(Comment("Local Variable Table"))
      E(DefData())
      E(Label(local-var-table(stubs)))
      E(DefLabel(map-list-table))
      E(DefLabel(context-list-table))
      E(DefLabel(named-vars-table))
      E(DefLabel(index-maps-table))
      E(DefLabel(indices-table))
      emit-map-list()
      emit-contexts()
      emit-named-vars()
      emit-index-maps()
      emit-indices()
      emit-string-table()      
      E(DefText())
      E(Comment("End of Local Variable Table"))

;============================================================
;========= Representation of a Local Variable Map ===========
;============================================================

;Represents an entry in the local variable map.
defstruct VarMapEntry :
  label-id:Int
  context-index:Int
  index-map-index:Int