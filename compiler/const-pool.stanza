defpackage stz/const-pool :
  import core
  import collections
  import stz/vm-ir
  import stz/utils

;============================================================
;=================== Constant Pool ==========================
;============================================================

public deftype ConstantPool
public defmulti intern (p:ConstantPool, v:VMValue) -> VMInternedConst
public defmulti consts (p:ConstantPool) -> Vector<VMValue>

public defn ConstantPool () :
  val consts = Vector<VMValue>()
  val const-table = HashTable<VMValue,Int>()
  defn intern-const (v:VMValue) -> VMInternedConst :
    if key?(const-table,v) :
      val id = const-table[v]
      VMInternedConst(ConstId(id))
    else :
      val v* = match(v) :
        (v:List) : map(intern-const, v)
        (v) : v
      val id = length(consts)
      add(consts, v*)
      const-table[v*] = id
      VMInternedConst(ConstId(id))
  new ConstantPool :
    defmethod intern (this, v:VMValue) :
      intern-const(v)
    defmethod consts (this) :
      consts

;============================================================
;=================== Const Compilation ======================
;============================================================

;These tags must match the definitions used by the deserializers
;in core.
val BYTE-CONST-TAG = 0
val CHAR-CONST-TAG = 1
val INT-CONST-TAG = 2
val LONG-CONST-TAG = 3
val FLOAT-CONST-TAG = 4
val DOUBLE-CONST-TAG = 5
val TRUE-CONST-TAG = 6
val FALSE-CONST-TAG = 7
val LIST-CONST-TAG = 8
val STRING-CONST-TAG = 9
val SYMBOL-CONST-TAG = 10
val TYPE-CONST-TAG = 11
val FN-CONST-TAG = 12
val INTERNED-CONST-TAG = 13

;Abstract writer for helping the encoder write
;out the necessary items.
public deftype ConstWriter
public defmulti align (w:ConstWriter, size:Int) -> False
public defmulti write (w:ConstWriter, b:Byte) -> False
public defmulti write (w:ConstWriter, i:Int) -> False
public defmulti write (w:ConstWriter, l:Long) -> False
public defmulti write (w:ConstWriter, id:CodeId) -> False

public defn write-const (writer:ConstWriter, v:VMValue) :
  let emit (v:VMValue = v) :
    match(v) :
      (v:Char) :
        align+write(writer, CHAR-CONST-TAG)
        write(writer, to-byte(v))
      (v:Byte) :
        align+write(writer, BYTE-CONST-TAG)
        write(writer, v)
      (v:Int) :
        align+write(writer, INT-CONST-TAG)
        align+write(writer, v)
      (v:Long) :
        align+write(writer, LONG-CONST-TAG)
        align+write(writer, v)
      (v:Float) :
        align+write(writer, FLOAT-CONST-TAG)
        align+write(writer, bits(v))
      (v:Double) :
        align+write(writer, DOUBLE-CONST-TAG)
        align+write(writer, bits(v))
      (v:String) :
        align+write(writer, STRING-CONST-TAG)
        emit-chars(writer, v)
      (v:Symbol) :
        align+write(writer, SYMBOL-CONST-TAG)
        emit-chars(writer, to-string(v))
      (v:List) :
        align+write(writer, LIST-CONST-TAG)
        align+write(writer, length(v))
        do(emit, v)
      (v:True) :
        align+write(writer, TRUE-CONST-TAG)
      (v:False) :
        align+write(writer, FALSE-CONST-TAG)
      (v:VMTypeObject) :
        align+write(writer, TYPE-CONST-TAG)
        align+write(writer, id(v))
      (v:VMClosure) :
        align+write(writer, FN-CONST-TAG)
        align+write(writer, id(v))
      (v:VMInternedConst) :
        align+write(writer, INTERNED-CONST-TAG)
        align+write(writer, id(id(v)))
      (v) :
        fatal("Unrecognized constant: %~" % [v])

;Helper functions for writing an element in an
;aligned way.
#for (Type in [Int, Long, CodeId],
      size in [4, 8, 8]) :
  defn align+write (w:ConstWriter, x:Type) -> False :
    align(w, size)
    write(w, x)

;Helper function to write out a String with the
;proper padding at the end.
defn emit-chars (writer:ConstWriter, s:String) :
  val n = length(s)
  align+write(writer, n)
  for c in s do :
    write(writer, to-byte(c))

;============================================================
;==================== Auto-Align ============================
;============================================================

;Given only a ConstWriter that implements the data-writing
;methods (and does not implement align), return a new ConstWriter
;that uses write(Byte) to automatically align the writes.

public defn AlignedConstWriter (w:ConstWriter,
                                prev-alignment:Int) -> ConstWriter :
  ;Keep track of how many bytes have been written thus far.
  var size:Long = to-long(prev-alignment)

  ;Increment the number of bytes that have been written.
  defn inc-size (amount:Int) :
    size = size + to-long(amount)
    
  new ConstWriter :
    defmethod align (this, alignment:Int) :
      val mask = to-long(alignment - 1)
      while size & mask > 0L :
        write(this, 0Y)
    defmethod write (this, x:Byte) :    
      write(w, x)
      inc-size(1)
    defmethod write (this, x:Int) :
      write(w, x)
      inc-size(4)
    defmethod write (this, x:Long) :
      write(w, x)
      inc-size(8)
    defmethod write (this, x:CodeId) :
      write(w, x)
      inc-size(8)

;By default, the previous alignment is 0.
public defn AlignedConstWriter (w:ConstWriter) -> ConstWriter :
  AlignedConstWriter(w, 0)

;============================================================
;================= ByteBuffer Writer ========================
;============================================================

;Return a ConstWriter that serializes constants out to a
;ByteBuffer.
public defn ByteBufferConstWriter (buffer:ByteBuffer,
                                   prev-alignment:Int) -> ConstWriter :
  val w = new ConstWriter :
    defmethod write (this, x:Byte) : put(buffer, x)
    defmethod write (this, x:Int) : put(buffer, x)
    defmethod write (this, x:Long) : put(buffer, x)
    defmethod write (this, x:CodeId) : put(buffer, to-long(id(x)))
  AlignedConstWriter(w, prev-alignment)