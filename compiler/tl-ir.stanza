;See License.txt for details about licensing.

defpackage stz/tl-ir :
  import core
  import collections
  import stz/primitives
  import stz/utils
  import stz/namemap
  import stz/dl-ir with :
    prefix(Child) => D
  import stz/absolute-info

#use-added-syntax(stz-ast-lang, stz-printer-lang)

;============================================================
;================== Type Hierarchy Definition ===============
;============================================================

public deftype HEntry
public defmulti n (h:HEntry) -> Int
public defmulti args (h:HEntry) -> List<Int>
public defmulti parent (h:HEntry) -> False|Type

public defstruct HSHEntry <: HEntry :
   n: Int with: (as-method => true)
   args: List<Int> with: (as-method => true)
   parent: False|Type with: (as-method => true)
with:
  printer => true

public defstruct LSHEntry <: HEntry :
   n: Int with: (as-method => true)
   args: List<Int> with: (as-method => true)
   parent: False|Type with: (as-method => true)
   fields: List<Field>
with:
  printer => true

public defstruct Child :
   n: Int
   args: List<Int>
   parent: Type

public defstruct Field :
   name: Symbol
   type: LSType
   mutable?: True|False

public deftype THierarchy <: Collection<HEntry>
public defmulti get (h:THierarchy, n:Int) -> HEntry
public defmulti add (h:THierarchy, e:HEntry) -> False

public defn THierarchy () :
   val entries = IntTable<HEntry>()
   new THierarchy :
      defmethod add (this, e:HEntry) :
         entries[n(e)] = e
      defmethod get (this, n:Int) :
         entries[n]
      defmethod to-seq (this) :
         to-seq(values(entries))

;============================================================
;==================  Comparison Values ======================
;============================================================

public deftype Unknown <: Equalable
public val unknown:Unknown = new Unknown
defmethod print (o:OutputStream, u:Unknown) :
   print(o, "unknown")

defmethod equal? (a:Unknown, b:Unknown) :
   true

public deftype Possibly <: Equalable
public val possibly:Possibly = new Possibly
defmethod print (o:OutputStream, m:Possibly) :
   print(o, "possibly")

defmethod equal? (a:Possibly, b:Possibly) :
   true

;============================================================
;==================  AST Definition =========================
;============================================================

public defmulti info (t:TComm) -> False|AbsoluteFileInfo

public defmulti type (t:TExp) -> False|Type
public defmulti exp-type (t:TExp) -> False|Type
public defmulti ctxt (t:TExp) -> Context|False
public defmulti info (t:TExp) -> False|AbsoluteFileInfo

public defmulti info (c:LSComm) -> False|AbsoluteFileInfo

public defmulti type (t:LSExp) -> False|LSType
public defmulti exp-type (t:LSExp) -> False|LSType
public defmulti ctxt (t:LSExp) -> Context|False
public defmulti info (t:LSExp) -> False|AbsoluteFileInfo

public defast :
   ;     Contexts
   ;     --------
   deftype Context
   defnodes Context :
      CDo: (args:List<False|Type>, ret:False|Type, all-args:List<List<Type>>)
      CExp: (type:False|Type)
      CMulti: (type:False|TArrow)
      CLSDo: (args:List<False|LSType>, ret:False|LSType, all-args:List<List<LSType>>)
      CLSExp: (type:False|LSType)

   ;     Selections
   ;     ----------
   deftype Selection
   defnodes Selection :
      SVar: (n:Int)
      SSel: (sels: List<True|False|Possibly|Unknown>)

   ;     Top Level Commands
   ;     ------------------
   deftype TComm :
      info: False|AbsoluteFileInfo with: (as-method => true)
   defnodes TComm :
      TDefType :
         n: Int
         args: List<Int>
         parent: False|Type
         children: List<Child>
      TLDefType :
         n: Int
         args: List<Int>
         parent: False|Type
         fields: List<Field>
      TDef :
         n: Int
         type: False|Type
         value: TExp
      TDefTuple :
         ns: List<Int>
         types: List<False|Type>
         value: TExp
      TDefVar :
         n: Int
         type: False|Type
         value: False|TExp
      TDefn :
         tail?: True|False
         n: Int
         targs: List<Int>
         cargs: List<Int>
         a1: List<False|Type>
         a2: False|Type
         args: List<Int>
         body: TExp
      TDefmulti :
         n: Int
         targs: List<Int>
         cargs: List<Int>
         a1: List<False|Type>
         a2: False|Type
      TDefmethod :
         tail?: True|False
         n: Int
         multi: TExp
         thisn: False|Int
         targs: List<Int>
         cargs: List<Int>
         a1: List<False|Type>
         a2: False|Type
         args: List<Int>
         body: TExp
      TInit :
         exp: TExp

      TLDef :
         n: Int
         type: LSType
         value: LSExp
      TLDefVar :
         n: Int
         type: LSType
         value: False|LSExp
      TLDefn :
         tail?: True|False
         n: Int
         targs: List<Int>
         cargs: List<Int>
         a1: List<LSType>
         a2: LSType
         args: List<Int>
         body: LSComm
      TLExternFn :
         n: Int
         a1: List<LSType>
         a2: LSType
         args: List<Int>
         body: LSComm
         lbl: Symbol
      TLDefmethod :
         tail?: True|False
         n: Int
         multi: TExp
         targs: List<Int>
         cargs: List<Int>
         a1: List<LSType>
         a2: LSType
         args: List<Int>
         body: LSComm
      TExtern :
         n: Int
         type: LSType
         lbl: Symbol
      TLInit :
         comm: LSComm
      TDoc :
         string: String

   ;     HiStanza Expressions
   ;     --------------------
   deftype TExp :
      type:False|Type with: (as-method => true)
      exp-type:False|Type with: (as-method => true)
      ctxt:False|Context with: (as-method => true)
      info:False|AbsoluteFileInfo with: (as-method => true)

   defnodes TExp :
      ;=== Stanza Forms ===
      TLet : (n:Int, ntype:False|Type, value:TExp, body:TExp)
      TLetVar : (n:Int, ntype:False|Type, value:False|TExp, body:TExp)
      TLetTuple : (ns:List<Int>, ntypes:List<False|Type>, value:TExp, body:TExp)
      TLetRec : (defns:List<TDefn>, body:TExp)
      TFn : (tail?:True|False, a1:List<False|Type>, a2:False|Type, args:List<Int>, body:TExp)
      TMulti : (funcs:List<TFn>)
      TSeq : (a:TExp, b:TExp)
      TMatch : (args:List<TExp>, branches:List<TBranch>)
      TBranch : (args:List<Int>, atypes:List<False|Type>, body:TExp)
      TNew : (class:Type, methods:List<TDefmethod>)
      TRef : (n:Int)
      TCast : (exp:TExp, targ:Type)
      TUpCast : (exp:TExp, targ:Type)
      TSet : (ref:TRef, value:TExp)
      TDo : (func:TExp, args:List<TExp>)
      TPrim : (op:Primitive, args:List<TExp>)
      TLiteral : (value:?)
      TTupleExp : (exps:List<TExp>)
      TMix : (sel:False|Selection, exps:List<TExp>)
      TCurry : (ref:TRef, targs:List<Type>, cargs:List<False|Type>)

   ;     Type Expressions
   ;     ----------------
   deftype Type <: Hashable & Equalable & Comparable<Type>
   defnodes Type :
      TMixed: (types:List<TArrow>) with: (constructor => #TMixed)
      TPoly : (targs:List<Int>, cargs:List<Int>, func:TArrow)
      TCap : (n:Int, name:Symbol|False)
      TOf : (n:Int, type:Type)
      TTuple : (types:List<Type>)
      TOr : (a:Type, b:Type) with: (constructor => #TOr)
      TAnd : (a:Type, b:Type) with: (constructor => #TAnd)
      TVar : (n:Int, name:Symbol|False)
      TArrow : (a:Type, b:Type)
      TGradual : ()
      TBot : ()
      TUVar : (n:Int)

   ;     LoStanza Types
   ;     --------------
   deftype LSType <: Hashable & Equalable & Comparable<LSType>
   defnodes LSType :
      ByteT
      IntT
      LongT
      FloatT
      DoubleT
      UnknownT
      PolyT : (targs:List<Int>, cargs:List<Int>, func:FnT)
      RestT: (type:LSType)
      PtrT: (type:LSType)
      RefT: (type:Type)
      FnT: (a:List<LSType>, r:False|LSType, b:LSType)
      StructT: (n:Int, type:Type)
      UVarT: (n:Int)

   ;     LoStanza Commands
   ;     -----------------
   deftype LSComm :
      info: False|AbsoluteFileInfo with: (as-method => true)
   defnodes LSComm :
      LSCall: (exp:LSExp)
      LSSet: (exp:LSExp, value:LSExp)
      LSLabels: (blocks:List<LSLabeledBlock>)
      LSLabeledBlock: (n:Int, args:List<Int>, atypes:List<LSType>, body:LSComm)
      LSGoto: (n:Int, args:List<LSExp>)
      LSReturn: (exp:LSExp)
      LSDef: (n:Int, type:False|LSType, value:LSExp)
      LSDefVar: (n:Int, type:LSType, value:False|LSExp)
      LSSeq: (a:LSComm, b:LSComm)
      LSIf: (pred:LSExp, conseq:LSComm, alt:LSComm)
      LSMatch: (args:List<LSExp>, branches:List<LSBranch>)
      LSBranch: (args:List<Int>, atypes:List<False|LSType>, body:LSComm)
      LSSkip

   ;     LoStanza Expressions
   ;     --------------------
   deftype LSExp :
      type: False|LSType with: (as-method => true)
      exp-type: False|LSType with: (as-method => true)
      ctxt: False|Context with: (as-method => true)
      info: False|AbsoluteFileInfo with: (as-method => true)

   defnodes LSExp :
      LSVar: (n:Int)
      LSNew: (n:Int, targ:Type, args:List<LSExp>)
      LSStruct: (n:Int, targ:Type, args:List<LSExp>)
      LSAddr: (exp:LSExp, unstable?:True|False)
      LSDeref: (exp:LSExp)
      LSSlot: (exp:LSExp, index:LSExp)
      LSField: (exp:LSExp, name:Symbol)
      LSDo: (func:LSExp, args:List<LSExp>)
      LSCallC: (func:LSExp, args:List<LSExp>)
      LSPrim: (op:LSPrimitive, args:List<LSExp>)
      LSSizeof: (targ:LSType)
      LSTagof: (n:Int)
      LSCast: (exp:LSExp, targ:LSType, conv?:True|False)
      LSLiteral: (value:?)
      LSAnd: (a:LSExp, b:LSExp)
      LSOr: (a:LSExp, b:LSExp)
      LSLetExp: (comm:LSComm, exp:LSExp)
      LSMix: (sel:False|Selection, exps:List<LSExp>)
      LSCurry: (ref:LSVar, targs:List<Type>, cargs:List<False|Type>)
      LSFn: (ref:TExp)

   ;     Mappers and Doers
   ;     -----------------
   make-mapper(f: TExp -> TExp, c:TComm)
   make-mapper(f: LSComm -> LSComm, c:TComm)
   make-mapper(f: LSExp -> LSExp, c:TComm)
   make-mapper(f: Type -> Type, c:TComm)
   make-mapper(f: LSType -> LSType, c:TComm)
   make-doer(f: TExp -> ?, c:TComm)
   make-doer(f: LSComm -> ?, c:TComm)
   make-doer(f: LSExp -> ?, c:TComm)
   make-doer(f: LSType -> ?, c:TComm)

   make-mapper(f: TExp -> TExp, e:TExp)
   make-mapper(f: TComm -> TComm, e:TExp)
   make-mapper(f: Context -> Context, e:TExp)
   make-mapper(f: Type -> Type, e:TExp)
   make-mapper(f: Selection -> Selection, e:TExp)
   make-doer(f: TComm -> ?, e:TExp)
   make-doer(f: TExp -> ?, e:TExp)

   make-mapper(f: LSExp -> LSExp, c:LSComm)
   make-mapper(f: LSComm -> LSComm, c:LSComm)
   make-mapper(f: LSType -> LSType, c:LSComm)
   make-doer(f: LSExp -> ?, c:LSComm)
   make-doer(f: LSComm -> ?, c:LSComm)

   make-mapper(f: LSExp -> LSExp, e:LSExp)
   make-mapper(f: LSComm -> LSComm, e:LSExp)
   make-mapper(f: LSType -> LSType, e:LSExp)
   make-mapper(f: Type -> Type, e:LSExp)
   make-mapper(f: TExp -> TExp, e:LSExp)
   make-mapper(f: Context -> Context, e:LSExp)
   make-mapper(f: Selection -> Selection, e:LSExp)

   make-doer(f: LSExp -> ?, e:LSExp)
   make-doer(f: LSComm -> ?, e:LSExp)
   make-doer(f: TExp -> ?, e:LSExp)

   make-mapper(f: Type -> Type, t:Type)
   make-doer(f: Type -> ?, t:Type)

   make-mapper(f: LSType -> LSType, t:LSType)
   make-mapper(f: Type -> Type, t:LSType)
   make-doer(f: LSType -> ?, t:LSType)
   make-doer(f: Type -> ?, t:LSType)

   make-mapper(f: Type -> Type, c:Context)
   make-mapper(f: LSType -> LSType, c:Context)

   defmapper (f:TExp -> TExp) :
      (x:TExp) : f(x)
      (x:TRef) : f(x) as TRef
      (x:False|TExp) : f(x as TExp) when x is-not False
      (x:List<TExp>) : map(f, x)
      (x:List<TFn>) : map({f(_) as TFn}, x)
      (x:List<TBranch>) : map({f(_) as TBranch}, x)
   defdoer (f:TExp -> ?) :
      (x:TExp) : f(x)
      (x:TRef) : f(x)
      (x:False|TExp) : f(x as TExp) when x is-not False
      (x:List<TExp>) : do(f, x)
      (x:List<TFn>) : do(f, x)
      (x:List<TBranch>) : do(f, x)

   defmapper (f:LSComm -> LSComm) :
      (x:LSComm) : f(x)
      (x:List<LSBranch>) : map({f(_) as LSBranch}, x)
      (x:List<LSLabeledBlock>) : map({f(_) as LSLabeledBlock}, x)
   defdoer (f:LSComm -> ?) :
      (x:LSComm) : f(x)
      (x:List<LSBranch>) : do(f, x)
      (x:List<LSLabeledBlock>) : do(f, x)

   defmapper (f:LSExp -> LSExp) :
      (x:LSExp) : f(x)
      (x:False|LSExp) : f(x as LSExp) when x is-not False
      (x:List<LSExp>) : map(f, x)
      (x:LSVar) : f(x) as LSVar
   defdoer (f:LSExp -> ?) :
      (x:LSExp) : f(x)
      (x:False|LSExp) : f(x as LSExp) when x is-not False
      (x:List<LSExp>) : do(f, x)
      (x:LSVar) : f(x)

   defmapper (f:Type -> Type) :
      (xs:List<Child>) : for x in xs map : map(f, x)
      (x:Type) : f(x)
      (x:False|Type) : f(x as Type) when x is-not False
      (x:TArrow) : f(x) as TArrow
      (x:False|TArrow) : f(x as Type) as False|TArrow when x is-not False
      (x:List<Type>) : map(f, x)
      (x:List<False|Type>) :
         for xi in x map :
            f(xi as Type) when xi is-not False
      (x:List<TArrow>) :
         map({f(_) as TArrow}, x)
      (xss:List<List<Type>>) :
         for xs in xss map :
            map(f, xs)
   defdoer (f:Type -> ?) :
      (xs:List<Child>) : for x in xs do : do(f, x)
      (x:Type) : f(x)
      (x:TArrow) : f(x)
      (x:List<Type>) : do(f, x)
      (x:List<TArrow>) : do(f, x)
      (x:False|Type) : f(x as Type) when x is-not False
      (x:List<False|Type>) :
         for xi in x do :
            f(xi as Type) when xi is-not False
      (xss:List<List<Type>>) :
         for xs in xss do :
            do(f, xs)

   defmapper (f:LSType -> LSType) :
      (xs:List<Field>) : for x in xs map : map(f, x)
      (x:FnT) : f(x) as FnT
      (x:LSType) : f(x)
      (x:False|LSType) : f(x as LSType) when x is-not False
      (x:List<LSType>) : map(f, x)
      (xs:List<False|LSType>) :
         for x in xs map :
            f(x as LSType) when x is-not False
      (xss:List<List<LSType>>) :
         for xs in xss map :
            map(f, xs)
   defdoer (f:LSType -> ?) :
      (xs:List<Field>) : for x in xs do : do(f, x)
      (x:FnT) : f(x)
      (x:LSType) : f(x)
      (x:False|LSType) : f(x as LSType) when x is-not False
      (x:List<LSType>) : do(f, x)
      (xs:List<False|LSType>) :
         for x in xs do :
            f(x as LSType) when x is-not False
      (xss:List<List<LSType>>) :
         for xs in xss do :
            do(f, xs)

   defmapper (f:TComm -> TComm) :
      (x:List<TDefn>) : map({f(_) as TDefn}, x)
      (x:List<TDefmethod>) : map({f(_) as TDefmethod}, x)
   defdoer (f:TComm -> ?) :
      (x:List<TDefn>) : do(f, x)
      (x:List<TDefmethod>) : do(f, x)

   defmapper (f:Selection -> Selection) :
      (x:False|Selection) : f(x as Selection) when x is-not False
   defdoer (f:Selection -> ?) :
      (x:False|Selection) : f(x as Selection) when x is-not False

   defmapper (f:Context -> Context) :
      (x:Context) : f(x)
      (x:False|Context) : f(x as Context) when x is-not False
   defdoer (f:Context -> ?) :
      (x:Context) : f(x)
      (x:False|Context) : f(x as Context) when x is-not False

   ignore :
      Int
      String
      List<Int>
      True|False
      False|Int
      Symbol
      Symbol|False
      False|AbsoluteFileInfo
      ?
      LSPrimitive
      Primitive

public defstruct TPackage :
  packageio: PackageIO with: (updater => sub-packageio)
  comms: List<TComm>

public defn name (p:TPackage) :
  package(packageio(p))

public defstruct TProg :
  packages: Tuple<TPackage> with: (updater => sub-packages)
  namemap: NameMap
  environment: Tuple<Export>

;============================================================
;============ Convenience Getters/Constructors ==============
;============================================================

public defn type (c:CDo) -> False|TArrow :
   defn #V (t:False|Type) :
      fail() when t is False
      t as Type
   attempt: TArrow(TTuple(map(#V,args(c))), #V(ret(c)))

public defn type (c:CLSDo) -> False|FnT :
   defn #V (t:False|LSType) :
      fail() when t is False
      t as LSType
   attempt: FnT(map(#V,args(c)), false, #V(ret(c)))

public defn TCap (n:Int) : TCap(n, false)
public defn TVar (n:Int) : TVar(n, false)

;============================================================
;==================== Printers ==============================
;============================================================

defprinter (p:TProg) :
   TProg :
      ($prog packages ...)

defprinter (p:TPackage) :
   TPackage :
      ($package packageio comms ...)

defprinter (e:TComm) :
   TDefType :
      ($deftype n (args ...) parent children ...)
   TLDefType :
      ($ls-deftype n (args ...) parent fields ...)
   TDef :
      ($def n type value)
   TDefTuple :
      ($deftuple (ns ...) (types ...) value)
   TDefVar :
      ($defvar n type value)
   TDefn :
      if tail?(e) : ($defn* n (targs ...) (cargs ...) (a1 ...) a2 (args ...) body)
      else : ($defn n (targs ...) (cargs ...) (a1 ...) a2 (args ...) body)
   TDefmulti :
      ($defmulti n (targs ...) (cargs ...) (a1 ...) a2)
   TDefmethod :
      if tail?(e) : ($defmethod* n multi thisn (targs ...) (cargs ...) (a1 ...) a2 (args ...) body)
      else : ($defmethod n multi thisn (targs ...) (cargs ...) (a1 ...) a2 (args ...) body)
   TInit :
      custom{exp(e)}

   TLDef :
      ($ls-def n type value)
   TLDefVar :
      ($ls-defvar n type value)
   TLDefn :
      if tail?(e) : ($ls-defn* n (targs ...) (cargs ...) (a1 ...) a2 (args ...) body)
      else : ($ls-defn n (targs ...) (cargs ...) (a1 ...) a2 (args ...) body)
   TLExternFn :
      ($ls-extern-fn n (a1 ...) a2 (args ...) body lbl)
   TLDefmethod :
      if tail?(e) : ($ls-defmethod* n multi (targs ...) (cargs ...) (a1 ...) a2 (args ...) body)
      else : ($ls-defmethod n multi (targs ...) (cargs ...) (a1 ...) a2 (args ...) body)
   TExtern :
      ($ls-extern n type lbl)
   TLInit :
      custom{comm(e)}


defprinter (e:TExp) :
   TLet :
      ($let n ntype value body)
   TLetVar :
      ($let-var n ntype value body)
   TLetTuple :
      ($let-tuple (ns ...) (ntypes ...) value body)
   TLetRec :
      ($let-rec (defns ...) body)
   TFn :
      if tail?(e) : ($fn* (a1 ...) a2 (args ...) body)
      else : ($fn (a1 ...) a2 (args ...) body)
   TMulti :
      ($multi funcs ...)
   TSeq :
      ($seq a b)
   TMatch :
      ($match (args ...) branches ...)
   TBranch :
      ($branch (args ...) (atypes ...) body)
   TNew :
      ($new class methods ...)
   TRef :
      custom{to-symbol("$v%_:%~" % [n(e), type(e)])}
   TCast :
      ($cast exp targ)
   TUpCast :
      ($upcast exp targ)
   TSet :
      ($set ref value)
   TDo :
      ($do func args ...)
   TPrim :
      ($prim op args ...)
   TLiteral :
      custom{value(e)}
   TTupleExp :
      ($tuple exps ...)
   TMix :
      ($mix sel (exps ...) type ctxt)
   TCurry :
      ($tcurry ref (targs ...) (cargs ...) type)


defprinter (t:Type) :
   TCap :
      ($cap n)
   TOf :
      ($of n type)
   TTuple :
      ($tuple types ...)
   TOr :
      ($or a b)
   TAnd :
      ($and a b)
   TVar :
      custom{to-symbol("$t%_" % [n(t)])}
   TPoly :
      ($poly targs cargs func)
   TMixed :
      ($mixed types ...)
   TArrow :
      ($-> a b)
   TGradual :
      custom{`?}
   TBot :
      custom{`void}
   TUVar :
      custom{to-symbol("$ut%_" % [n(t)])}


defprinter (t:LSType) :
   ByteT :
      ($byte)
   IntT :
      ($int)
   LongT :
      ($long)
   FloatT :
      ($float)
   DoubleT :
      ($double)
   UnknownT :
      ($?)
   PolyT :
      ($poly (targs ...) (cargs ...) func)
   PtrT :
      ($ptr type)
   RestT :
      ($rest type)
   RefT :
      ($ref type)
   FnT :
      ($-> (a ...) r b)
   StructT :
      ($struct n type)
   UVarT:
      custom{to-symbol("$ut%_" % [n(t)])}

defprinter (c:LSComm) :
   LSCall :
      custom{exp(c)}
   LSSet :
      ($ls-set exp value)
   LSLabels :
      ($ls-labels blocks ...)
   LSLabeledBlock :
      ($ls-block n (args ...) (atypes ...) body)
   LSGoto :
      ($ls-goto n args ...)
   LSReturn :
      ($ls-return exp)
   LSDef :
      ($ls-def n type value)
   LSDefVar :
      ($ls-defvar n type value)
   LSSeq :
      ($ls-seq a b)
   LSIf :
      ($ls-if pred conseq alt)
   LSMatch :
      ($ls-match (args ...) branches ...)
   LSBranch :
      ($ls-branch (args ...) (atypes ...) body)
   LSSkip :
      ($ls-skip)


defprinter (e:LSExp) :
   LSVar :
      custom{"$v%_" % [n(e)]}
   LSNew :
      ($ls-new n targ args ...)
   LSStruct :
      ($ls-struct n targ args ...)
   LSAddr :
      if unstable?(e) : ($ls-addr! exp)
      else : ($ls-addr exp)
   LSDeref :
      ($ls-deref exp)
   LSSlot :
      ($ls-slot exp index)
   LSField :
      ($ls-field exp name)
   LSDo :
      ($ls-do func args ...)
   LSPrim :
      ($ls-prim op args ...)
   LSCallC :
      ($ls-callc func args ...)
   LSSizeof :
      ($ls-sizeof targ)
   LSTagof :
      ($ls-tagof n)
   LSCast :
      ($ls-cast exp type conv?)
   LSLiteral :
      ($ls-value value)
   LSAnd :
      ($ls-and a b)
   LSOr :
      ($ls-or a b)
   LSLetExp :
      ($ls-let-exp comm exp)
   LSMix :
      ($ls-mix sel exps ...)
   LSCurry :
      ($ls-curry ref (targs ...) (cargs ...) type)
   LSFn:
      ($ls-fn ref)

defprinter (c:Context) :
   CExp :
      ($exp type)
   CMulti :
      ($multi type)
   CDo :
      ($do (args ...) ret)
   CLSDo :
      ($ls-do (args ...) ret)
   CLSExp :
      ($ls-exp type)

defprinter (s:Selection) :
   SVar :
      custom{"$s%_" % [n(s)]}
   SSel :
      ($sel sels ...)

defprinter (c:Child) :
   Child :
      ($child n args parent)

defprinter (f:Field) :
   Field :
      ($field name type mutable?)

public defn children (t:Type) -> Collection<Type> :
   val ts = Vector<Type>(4)
   do(add{ts, _}, t)
   ts

public defn children (t:LSType) -> Collection<LSType> :
   val ts = Vector<LSType>(4)
   do(add{ts, _:LSType}, t)
   ts

;============================================================
;==================== Mappers ===============================
;============================================================

public defn map (f: TComm -> TComm, prog:TProg) :
  val packages* = for p in packages(prog) map :
    TPackage(packageio(p), map(f, comms(p)))
  TProg(packages*, namemap(prog), environment(prog))

public defn do (f: TComm -> ?, prog:TProg) :
  for p in packages(prog) do :
    match(p:TPackage) :
      do(f, comms(p as TPackage))

public defn dor (fe: LSExp -> ?, e: LSExp) :
  defn fc (c:LSComm) : dor(fe, c)
  do(fe, e)
  do(fc, e)

public defn dor (fe: LSExp -> ?, c: LSComm) :
  defn fc (e:LSComm) : dor(fe, e)
  do(fe, c)
  do(fc, c)

public defn mapr (f: Type -> Type, t:LSType) :
  defn ft (t:LSType) : mapr(f, t)
  map(ft, map(f, t))

public defn map (f:Type -> Type, c:Child) :
  Child(n(c), args(c), f(parent(c)))
public defn do (f:Type -> ?, c:Child) :
  f(parent(c))

public defn map (f:LSType -> LSType, fd:Field) :
  Field(name(fd), f(type(fd)), mutable?(fd))
public defn do (f:LSType -> ?, fd:Field) :
  f(type(fd))

;============================================================
;======================== Equality ==========================
;============================================================

defmethod equal? (x:Type, y:Type) :
  match(x, y) :
    (x:TMixed, y:TMixed) : types(x) == types(y)
    (x:TPoly, y:TPoly)  :
      targs(x) == targs(y) and
      cargs(x) == cargs(y) and
      func(x) == func(y)
    (x:TCap, y:TCap)  : n(x) == n(y)
    (x:TOf, y:TOf)  : n(x) == n(y) and type(x) == type(y)
    (x:TTuple, y:TTuple)  : types(x) == types(y)
    (x:TOr, y:TOr)  : a(x) == a(y) and b(x) == b(y)
    (x:TAnd, y:TAnd)  : a(x) == a(y) and b(x) == b(y)
    (x:TVar, y:TVar)  : n(x) == n(y)
    (x:TArrow, y:TArrow)  : a(x) == a(y) and b(x) == b(y)
    (x:TGradual, y:TGradual)  : true
    (x:TBot, y:TBot)  : true
    (x:TUVar, y:TUVar)  : n(x) == n(y)
    (x, y) : false

defmethod equal? (x:LSType, y:LSType) :
  match(x, y) :
    (x:ByteT, y:ByteT) : true
    (x:IntT, y:IntT) : true
    (x:LongT, y:LongT) : true
    (x:FloatT, y:FloatT) : true
    (x:DoubleT, y:DoubleT) : true
    (x:UnknownT, y:UnknownT) : true
    (x:PolyT, y:PolyT) :
      targs(x) == targs(y) and
      cargs(x) == cargs(y) and
      func(x) == func(y)
    (x:RestT, y:RestT) : type(x) == type(y)
    (x:PtrT, y:PtrT) : type(x) == type(y)
    (x:RefT, y:RefT) : type(x) == type(y)
    (x:FnT, y:FnT) :
      a(x) == a(y) and
      r(x) == r(y) and
      b(x) == b(y)
    (x:StructT, y:StructT) : n(x) == n(y) and type(x) == type(y)
    (x:UVarT, y:UVarT) : n(x) == n(y)
    (x, y) : false

;============================================================
;====================== Hashing =============================
;============================================================

defmethod hash (t:Type) :
  hash $ match(t) :
    (t:TMixed) : [0 types(t)]
    (t:TPoly)  : [1 targs(t) cargs(t) func(t)]
    (t:TCap)  : [2 n(t)]
    (t:TOf)  : [3 n(t) type(t)]
    (t:TTuple)  : [4 types(t)]
    (t:TOr)  : [5 a(t) b(t)]
    (t:TAnd)  : [6 a(t) b(t)]
    (t:TVar)  : [7 n(t)]
    (t:TArrow)  : [8 a(t) b(t)]
    (t:TGradual)  : [9]
    (t:TBot)  : [10]
    (t:TUVar)  : [11 n(t)]

defmethod hash (t:LSType) :
  hash $ match(t) :
    (t:ByteT) : [0]
    (t:IntT) : [1]
    (t:LongT) : [2]
    (t:FloatT) : [3]
    (t:DoubleT) : [4]
    (t:UnknownT) : [5]
    (t:PolyT) : [6 targs(t) cargs(t) func(t)]
    (t:RestT) : [7 type(t)]
    (t:PtrT) : [8 type(t)]
    (t:RefT) : [9 type(t)]
    (t:FnT) : [10 a(t) r(t) b(t)]
    (t:StructT) : [11 n(t) type(t)]
    (t:UVarT) : [12 n(t)]

;============================================================
;==================== Comparisons ===========================
;============================================================
defn type-id (t:Type) :
  match(t) :
    (t:TMixed) : 0
    (t:TPoly) : 1
    (t:TCap) : 2
    (t:TOf) : 3
    (t:TTuple) : 4
    (t:TOr) : 5
    (t:TAnd) : 6
    (t:TVar) : 7
    (t:TArrow) : 8
    (t:TGradual) : 9
    (t:TBot) : 10
    (t:TUVar) : 11

defn ls-type-id (t:LSType) :
  match(t) :
    (t:ByteT) : 0
    (t:IntT) : 1
    (t:LongT) : 2
    (t:FloatT) : 3
    (t:DoubleT) : 4
    (t:UnknownT) : 5
    (t:PolyT) : 6
    (t:RestT) : 7
    (t:PtrT) : 8
    (t:RefT) : 9
    (t:FnT) : 10
    (t:StructT) : 11
    (t:UVarT) : 12

defmethod compare (x:Type, y:Type) -> Int :
  match(x, y) :
    (x:TMixed, y:TMixed) : compare(types(x), types(y))
    (x:TPoly, y:TPoly) : compare([targs(x), cargs(x), func(x)], [targs(y), cargs(y), func(y)])
    (x:TCap, y:TCap) : compare(n(x), n(y))
    (x:TOf, y:TOf) : compare([n(x), type(x)], [n(y), type(y)])
    (x:TTuple, y:TTuple) : compare(types(x), types(y))
    (x:TOr, y:TOr) : compare([a(x), b(x)], [a(y), b(y)])
    (x:TAnd, y:TAnd) : compare([a(x), b(x)], [a(y), b(y)])
    (x:TVar, y:TVar) : compare(n(x), n(y))
    (x:TArrow, y:TArrow) : compare([a(x), b(x)], [a(y), b(y)])
    (x:TGradual, y:TGradual) : 0
    (x:TBot, y:TBot) : 0
    (x:TUVar, y:TUVar) : compare(n(x), n(y))
    (x, y) : compare(type-id(x), type-id(y))

defmethod compare (x:LSType, y:LSType) -> Int :
  match(x, y) :
    (x:ByteT, y:ByteT) : 0
    (x:IntT, y:IntT) : 0
    (x:LongT, y:LongT) : 0
    (x:FloatT, y:FloatT) : 0
    (x:DoubleT, y:DoubleT) : 0
    (x:UnknownT, y:UnknownT) : 0
    (x:PolyT, y:PolyT) : compare([targs(x), cargs(x), func(x)], [targs(y), cargs(y), func(y)])
    (x:RestT, y:RestT) : compare(type(x), type(y))
    (x:PtrT, y:PtrT) : compare(type(x), type(y))
    (x:RefT, y:RefT) : compare(type(x), type(y))
    (x:FnT, y:FnT) : compare([a(x), r(x), b(x)], [a(y), r(y), b(y)])
    (x:StructT, y:StructT) : compare([n(x), type(x)], [n(y), type(y)])
    (x:UVarT, y:UVarT) : compare(n(x), n(y))
    (x, y) : compare(ls-type-id(x), ls-type-id(y))

;============================================================
;==================== Construction ==========================
;============================================================

public defn types (t:TOr) :
  let loop (t:Type = t, accum:List<Type> = List()) :
    match(t:TOr) : loop(a(t), loop(b(t), accum))
    else : cons(t, accum)

public defn types (t:TAnd) :
  let loop (t:Type = t, accum:List<Type> = List()) :
    match(t:TAnd) : loop(a(t), loop(b(t), accum))
    else : cons(t, accum)

public defn TOr (a:Type, b:Type) :
  match(a, b) :
    ;Fast tracks
    (a:TBot, b) : b
    (a, b:TBot) : a
    ;Merges
    (a:TOr, b:TOr) : reduce(#TOr, sorted-merge(types(a), types(b)))
    (a:TOr, b) : reduce(#TOr, sorted-merge(b, types(a)))
    (a, b:TOr) : reduce(#TOr, sorted-merge(a, types(b)))
    ;Otherwise
    (a, b) :
      switch(compare(a, b)) :
        -1 : #TOr(a, b)
        0 : a
        1 : #TOr(b, a)

public defn TAnd (a:Type, b:Type) :
  match(a, b) :
    ;Fast tracks
    (a:TBot, b) : a
    (a, b:TBot) : b
    ;Merges
    (a:TAnd, b:TAnd) : reduce(#TAnd, sorted-merge(types(a), types(b)))
    (a:TAnd, b) : reduce(#TAnd, sorted-merge(b, types(a)))
    (a, b:TAnd) : reduce(#TAnd, sorted-merge(a, types(b)))
    ;Otherwise
    (a, b) :
      switch(compare(a, b)) :
        -1 : #TAnd(a, b)
        0 : a
        1 : #TAnd(b, a)

public defn TOr (ts:List<Type>) :
  if empty?(ts) : TBot()
  else : reduce(TOr, ts)

public defn TAnd (ts:List<Type>) :
  if empty?(ts) : TGradual()
  else : reduce(TAnd, ts)

public defn TMixed (types:List<TArrow>) :
  val types* = to-list(lazy-qsort(types as List<Type>))
  #TMixed(types* as List<TArrow>)

;============================================================
;=================== Print a Type ===========================
;============================================================
public defn printable (nm:NameMap, t:Type) :
  defn get-name (n:Int) :
    if key?(nm,n) : name(nm[n])
    else : to-symbol("V%_" % [n])
  format(Formatter(get-name), t)

public defn printable (nm:NameMap, t:LSType) :
  defn get-name (n:Int) :
    if key?(nm,n) : name(nm[n])
    else : to-symbol("V%_" % [n])
  format(Formatter(get-name), t)

;============================================================
;================== Type Formatter ==========================
;============================================================

deftype Formatter
defmulti format (f:Formatter, t:Type) -> Printable
defmulti format (f:Formatter, t:LSType) -> Printable

defn Formatter (name:Int -> Symbol) :
  ;Wrap closure in printable object
  defn wrap-printable (f:OutputStream -> False) :
    new Printable :
      defmethod print (o:OutputStream, this) :
        f(o)

  ;Syntax level of type
  defn lslevel (t:LSType) :
    match(t) :
      ;Function
      (t:FnT|PolyT) : 0
      ;Everything else is atomic
      (t) : 1
  defn hslevel (t:Type) :
    match(t) :
      ;Arrows
      (t:TArrow|TPoly) : 0
      ;Or Types
      (t:TOr) : 1
      ;And Types
      (t:TAnd) : 2
      ;Atomic types
      (t) : 3

  ;Format HiStanza type
  defn hsfs (o:OutputStream, ts:Seqable<Type>, lvl:Int, angle-context:True|False) :
    for (t in ts, i in 0 to false) do :
      print(o, ", ") when i > 0
      hsf(o, t, lvl, angle-context)
  defn hsf (o:OutputStream, t:Type, lvl:Int, angle-context:True|False) :
    val paren? =
      if hslevel(t) < lvl : true
      else if angle-context : t is TArrow|TPoly
    val angle-context* = angle-context and not paren?
    print(o, "(") when paren?
    match(t) :
      (t:TArrow) :
        val a1 = types(a(t) as TTuple)
        if length(a1) == 1 :
          hsf(o, head(a1), 1, angle-context*)
          print(o, " -> ")
          hsf(o, b(t), 0, angle-context*)
        else :
          print(o, "(")
          hsfs(o, a1, 0, false)
          print(o, ") -> ")
          hsf(o, b(t), 0, angle-context*)
      (t:TPoly) :
        val type-args = cat(
          for v in targs(t) seq : "%~" % [name(v)]
          for v in cargs(t) seq : "?%~" % [name(v)])
        print(o, "<%,> . " % [type-args])
        hsf(o, func(t), 0, angle-context*)
      (t:TOr) :
        hsf(o, a(t), 1, angle-context*)
        print(o, "|")
        hsf(o, b(t), 1, angle-context*)
      (t:TAnd) :
        hsf(o, a(t), 2, angle-context*)
        print(o, "&")
        hsf(o, b(t), 2, angle-context*)
      ;Atomic
      (t:TOf) :
        write(o, name(n(t)))
        val args = match(type(t)) :
          (t:TTuple) : types(t)
          (t:TGradual) : List()
        if not empty?(args) :
          print(o, "<")
          hsfs(o, args, 0, true)
          print(o, ">")
      (t:TVar) :
        match(/name(t)) : ;[TODO: Remove this clunkiness]
          (n:Symbol) : write(o, n)
          (_:False) : write(o, name(n(t)))
      (t:TCap) :
        print(o, "?")
        match(/name(t)) : ;[TODO: Remove this clunkiness]
          (n:Symbol) : write(o, n)
          (_:False) : write(o, name(n(t)))
      (t:TGradual|TUVar) :
        print(o, "?")
      (t:TBot) :
        print(o, "Void")
      (t:TTuple) :
        print(o, "[")
        hsfs(o, types(t), 0, false)
        print(o, "]")
    print(o, ")") when paren?
    
  ;Format LoStanza type
  defn lsfs (o:OutputStream, ts:Seqable<LSType>, lvl:Int, angle-context:True|False) :
    for (t in ts, i in 0 to false) do :
      print(o, ", ") when i > 0
      lsf(o, t, lvl, angle-context)
  defn lsf (o:OutputStream, t:LSType, lvl:Int, angle-context:True|False) :
    val paren? =
      if lslevel(t) < lvl : true
      else if angle-context : t is FnT|PolyT
    val angle-context* = angle-context and not paren?
    print(o, "(") when paren?
    match(t) :
      ;Functions
      (t:PolyT) :
        val type-args = cat(
          for v in targs(t) seq : "%~" % [name(v)]
          for v in cargs(t) seq : "?%~" % [name(v)])
        print(o, "<%,> . " % [type-args])
        lsf(o, func(t), 0, angle-context*)
      (t:FnT) :
        if length(a(t)) == 1 and r(t) is False :
          lsf(o, a(t)[0], 1, angle-context*)
          print(o, " -> ")
          lsf(o, b(t), 0, angle-context*)
        else :
          print(o, "(")
          match(r(t)) :
            (r:False) :
              lsfs(o, a(t), 0, false)
              print(o, ") -> ")
            (r:LSType) :
              lsfs(o, cat(a(t), [r]), 0, false)
              print(o, " ...) -> ")
          lsf(o, b(t), 0, angle-context*)
      ;Atomic
      (t:ByteT) : print(o, "byte")
      (t:IntT) : print(o, "int")
      (t:LongT) : print(o, "long")
      (t:FloatT) : print(o, "float")
      (t:DoubleT) : print(o, "double")
      (t:UnknownT|UVarT) : print(o, "?")
      (t:PtrT) :
        print(o, "ptr<")
        lsf(o, type(t), 0, true)
        print(o, ">")
      (t:RestT) :
        lsf(o, type(t), 1, angle-context*)
        print(o, " ...")
      (t:StructT) :
        write(o, name(n(t)))
        val args = match(type(t)) :
          (t:TTuple) : types(t)
          (t:TGradual) : List()          
        if not empty?(args) :
          print(o, "<")
          hsfs(o, args, 0, true)
          print(o, ">")
      (t:RefT) :
        print(o, "ref<")
        hsf(o, type(t), 0, true)
        print(o, ">")      
    print(o, ")") when paren?  

  new Formatter :
    defmethod format (this, t:Type) :
      wrap-printable $ hsf{_, t, 0, false}
    defmethod format (this, t:LSType) :
      wrap-printable $ lsf{_, t, 0, false}

;============================================================
;==================== Dump to File ==========================
;============================================================

;Information for dumping to log.
defmethod stz/dump-to-log/object-log-name (p:TProg) : `tprog
defmethod stz/dump-to-log/object-extension (p:TProg) : "tl"