defpackage stz/printing-utils :
  import core

;============================================================
;========================= Type =============================
;============================================================

public deftype FormattedField <: Printable

;Represents a field that is always printed out.
public deftype SingleFormattedField <: FormattedField

;Represents a field that can choose whether or not to be
;printed out.
public deftype OptionalFormattedField <: FormattedField
defmulti empty? (f:OptionalFormattedField) -> True|False

;Represents a field that expands into multiple items.
public deftype MultiFormattedField <: FormattedField
defmulti items (f:MultiFormattedField) -> Seqable

;------------------------------------------------------------
;-------------------- Printing Algorithm --------------------
;------------------------------------------------------------

;Example:
;  beginning-header :
;    item1
;    item2
;    item3
public defn colon-field-list (fs:Seqable) :
  colon-list $ field-items(fs)

;Example:
;  beginning-header(
;    item1
;    item2
;    item3)
public defn indented-field-list (fs:Seqable) :
  indented-list $ field-items(fs)

;Example:
;  beginning-header(item1, item2, item3)
public defn comma-field-list (fs:Seqable) :
  "%," % [field-items(fs)]

;Expand a bunch of fields into individual items.
defn field-items (fs:Seqable) -> Seq :
  for f in fs seq-cat :
    match(f) :
      (f:SingleFormattedField) : [f]
      (f:OptionalFormattedField) : [] when empty?(f) else [f]
      (f:MultiFormattedField) : items(f)
      (f) : [f]

;============================================================
;===================== List of Fields =======================
;============================================================

;Example:
;  myfield: 23
public defn simple-field (name:String, x) :
  new SingleFormattedField :
    defmethod print (o:OutputStream, this) :
      print(o, "%_: %~" % [name, x])

;Example:
;  bold
public defn bool-flag-field (name:String, x:True|False) :
  new OptionalFormattedField :
    defmethod print (o:OutputStream, this) :
      print(o, name)
    defmethod empty? (this) :
      x is False      

;Example:
;  face? = "Times New Roman"
public defn falseable-field (name:String, x) :
  new OptionalFormattedField :
    defmethod print (o:OutputStream, this) :
      print(o, "%_: %~" % [name, x])
    defmethod empty? (this) :
      x is False

;Example:
;  "Times New Roman"
public defn falseable-field (x) :
  new OptionalFormattedField :
    defmethod print (o:OutputStream, this) :
      write(o, x)
    defmethod empty? (this) :
      x is False

;Example:
;  x
;  y
;  z
public defn inline-fields (xs:Seqable) :
  new MultiFormattedField :
    defmethod items (this) : xs

;Example:
;  nets :
;    net 13 (x, y, z)
;    net 14 (w, z)
public defn named-list-fields (name:String, xs:Seqable) :
  new SingleFormattedField :
    defmethod print (o:OutputStream, this) :
      print(o, "%_ %_" % [name, colon-field-list(xs)])

;============================================================
;==================== Print using Colons ====================
;============================================================

public defn indented-list (xs:Seqable) :
  val xs-seq = to-seq(xs)
  if empty?(xs-seq) :
    new Printable :
      defmethod print (o:OutputStream, this) :
        false
  else :
    Indented("\n%n" % [xs-seq])

public defn colon-list (xs:Seqable) :
  val xs-seq = to-seq(xs)
  if empty?(xs-seq) :
    new Printable :
      defmethod print (o:OutputStream, this) :
        print(o, ": ()")
  else :
    val items = Indented("%n" % [xs-seq])
    ":\n%_" % [items]

;============================================================
;===================== Abbreviation =========================
;============================================================

public defn abbreviate (xs:Tuple, n:Int) -> Tuple :
  val len = length(xs)
  if len <= n :
    xs
  else :
    val head-items = for i in 0 to (n - 1) seq : xs[i]
    val ellipsis = "%_" % ["..."]
    val last-item = xs[len - 1]
    to-tuple $ cat(head-items, [ellipsis, last-item])