defpackage stz/padder :
   import core
   import verse

public definterface PadItem
public defstruct Item <: PadItem :
   alignment: Int
   data
public defstruct Group <: PadItem :
   items: List<PadItem>
   data
public defstruct Padding <: PadItem :
   size: Int

defmethod print (o:OutputStream, i:PadItem) :
   print{o, _} $ match(i) :
      (i:Item) : "Item(~, ~)" << [alignment(i), data(i)]
      (i:Padding) : "Padding(~)" << [size(i)]
      (i:Group) : "{~@, ~}" << [join(items(i), ", "), data(i)]

public defn pad (xs:Streamable<PadItem>, min-aln:Int) -> [List<PadItem>, Int] :
   ;Given an item to pad, returns the padded item and the item
   ;alignment.
   defn pad-item (x:PadItem) -> [PadItem, Int] :
      match(x) :
         (x:Item) :
            [x, alignment(x)]
         (x:Group) :
            val [xs, aln] = pad(items(x), 1)
            [Group(xs, data(x)), aln]
            
   ;Hold the padded items
   val output = Vector<PadItem>()
   var accum = 0
   var group-aln = min-aln

   ;Align the accumulator to the given alignment
   defn align-accum (aln:Int) :
      defn smaller (x:Int) :
         switch {x == _} :
            8 : 4
            4 : 1            
      if accum % aln > 0 :
         val sz = smaller(aln)
         align-accum(sz)
         while accum % aln > 0 :
            add(output, Padding(sz))
            accum = accum + sz

   ;Add all the items aligned
   for x in xs do :
      val [x*, aln] = pad-item(x)
      align-accum(aln)
      add(output, x*)
      accum = accum + aln
      group-aln = max(group-aln, aln)
   align-accum(group-aln)

   ;Return aligned items
   [to-list(output), group-aln]