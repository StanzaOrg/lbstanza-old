defpackage stz/hash :
  import core
  import collections

;<doc>=======================================================
;===================== Algorithm ============================
;============================================================

# Fundamental State #

  buckets:Array<List<KeyValue<Int,T>>>
  bucket-indices:Array<Int>
  dtable:Array<Int>
  etable:Array<KeyValue<Int,T>|False>  

# Put entries into buckets #

Input:
  d0:Int
Output:
  buckets:Array<List<KeyValue<Int,T>>> (implicit)
  bucket-indices:Array<Int> (implicit)

# Computing a spreading d #

Input :
  dset: Int (implicit)
  dcounter: Int (implicit)
  keys: Collection<Int>
  max-d: Int
Output :
  d: Int|False

# Put items in etable #

Input :
  d: Int
  entries: Collection<KeyValue<Int,T>>

# Put buckets into etable #

Input :
  max-d: Int
Output :
  start: Int|False

If the operation succesfully spreads all multi-item buckets into
different slots, then it returns the starting index of the single-item
buckets. If the operation fails, then we return false.

# Put singles into etable #

Input :
  start: Int
Output :
  dtable:Array<Int> (implicit)
  etable:Array<KeyValue<Int,T>|False> (implicit)

Given the starting index of the single-item buckets, put their entries
into dtable and etable.

# Compute tables #

Output :
  d0:Int
  dtable:Array<Int> (implicit)
  etable:Array<KeyValue<Int,T>|False> (implicit)

Returns the initial d0 used for hashing into first-level table.

;============================================================
;=======================================================<doc>

;Returns a perfect hash table
public deftype PerfectHashTable<T> <: Lengthable
public defmulti d0 (h:PerfectHashTable) -> Int
public defmulti dentry (h:PerfectHashTable, i:Int) -> Int
public defmulti entry<?T> (h:PerfectHashTable<?T>, i:Int) -> KeyValue<Int,T>
public defmulti get?<?T> (h:PerfectHashTable<?T>, k:Int) -> T|False

;Construct perfect hash table
public defn PerfectHashTable<?T> (entries0:Collection<KeyValue<Int,?T>> & Lengthable) :
  ;Ensure that keys are unique
  ensure-keys-unique!(entries0)
  
  ;Get length
  val n = length(entries0)

  ;Hold buckets and sorted bucket indices
  var buckets:Array<List<KeyValue<Int,T>>>
  var bucket-indices:Array<Int>
  var dtable:Array<Int>
  var etable:Array<KeyValue<Int,T>|False>

  ;Put all entries in buckets
  defn put-in-buckets (d0:Int) :
    ;Initialize all tables
    buckets = Array<List<KeyValue<Int,T>>>(n, List())
    bucket-indices = to-array<Int>(0 to n)
    dtable = Array<Int>(n, 0)
    etable = Array<KeyValue<Int,T>|False>(n, false)

    ;Put in buckets
    for e in entries0 do :
      val slot = dhash(d0, key(e), n)
      buckets[slot] = cons(e, buckets[slot])
      
    ;Sort indices by bucket size
    qsort!({(- length(buckets[_]))}, bucket-indices)

  ;Computing a spreading d
  val dset = Array<Int>(n, -1)
  val dcounter = to-seq(0 to false)
  defn compute-d (keys:Collection<Int>, max-d:Int) :    
    let loop-d (d:Int = 2) :
      if d <= max-d :
        val dstamp = next(dcounter)
        val ks = to-seq(keys)
        let loop-k () :
          if empty?(ks) :
            d            
          else :
            val k = next(ks)
            val slot = dhash(d, k, n)
            if etable[slot] is-not False or dset[slot] == dstamp :
              loop-d(d + 1)
            else :
              dset[slot] = dstamp
              loop-k()

  ;Put items, with given d, into etable
  defn put-in-etable (d:Int, entries:Collection<KeyValue<Int,T>>) :
    for e in entries do :
      val slot = dhash(d, key(e), n)
      etable[slot] = e

  ;Place buckets into etable
  defn put-buckets-in-etable (max-d:Int) -> Int|False :
    let loop (i:Int = 0) :
      val b = bucket-indices[i]
      val bucket = buckets[b]
      val l = length(bucket)
      if l > 1 :
        match(compute-d(map(key,bucket), max-d)) :
          (d:Int) :
            put-in-etable(d, bucket)
            dtable[b] = d
            loop(i + 1)
          (d:False) :
            false
      else :
        i

  ;Place singles into etable and compute their slots for dtable
  defn put-singles-in-etable (start:Int) :
    val iseq = to-seq(start to n)
    for s in 0 to n do :
      if etable[s] is False :
        val i = next(iseq)
        val b = bucket-indices[i]
        etable[s] = head(buckets[b])
        dtable[b] = (- s) - 1

  ;Compute tables
  defn compute-tables () :
    let loop (d0:Int = 1) :
      put-in-buckets(d0)
      val start = put-buckets-in-etable(n * 10)
      match(start:Int) :
        put-singles-in-etable(start)
        d0
      else :
        loop(d0 + 1)
              
  ;Compute tables and initial hash family
  val d0 = compute-tables()

  ;Return generated hash table
  new PerfectHashTable :
    defmethod length (this) : n
    defmethod d0 (this) : d0
    defmethod dentry (this, i:Int) : dtable[i]
    defmethod entry (this, i:Int) : etable[i] as KeyValue<Int,T>
    defmethod get? (this, k:Int) :
      val dslot = dhash(d0,k,n)
      val d = dtable[dslot]
      if d == 0 :
        false
      else :
        val slot = (- (d + 1)) when d < 0
              else dhash(d,k,n)
        val e = etable[slot] as KeyValue<Int,T>
        value(e) when key(e) == k  

defn ensure-keys-unique! (xs:Collection<KeyValue<Int,?>>) :
  #if-not-defined(OPTIMIZE) :
    val intset = IntSet()
    for x in xs do :
      if not add(intset, key(x)) :
        fatal("Key %_ is a duplicate!" % [key(x)])
  false

;Returns a hash with given search d, key x, and total length of table n.
defn dhash (d:Int, x:Int, n:Int) :
  var a:Int = x
  a = (a + 0x7ed55d16 + d) + (a << 12)
  a = (a ^ 0xc761c23c) ^ (a >> 19)
  a = (a + 0x165667b1) + (a << 5)
  a = (a + 0xd3a2646c) ^ (a << 9)
  a = (a + 0xfd7046c5) + (a << 3)
  a = (a ^ 0xb55a4f09) ^ (a >> 16)
  (a & 0x7FFFFFFF) % n