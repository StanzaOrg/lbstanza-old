defpackage stz/compiler-linking :
  import core
  import collections
  import stz/compiler-build-settings
  import stz/compiler-result
  import stz/proj-ir
  import stz/proj-utils
  import stz/aux-file
  import stz/aux-file-utils
  import stz/system-dependencies
  import stz/external-dependencies
  import stz/linking-errors
  import stz/utils
  import stz/file-stamps
  import stz/foreign-package-files

;<doc>=======================================================
;================ High-Level Algorithm ======================
;============================================================

Linking the executable:

1) We have the list of Stanza packages that make up the program.
   Determine the final set of ccfiles and ccflags that those
   packages depend upon.

   Save these dependencies to a file if requested by
   the user.

2) Given the set of ccfiles and ccflags, compute the
   shell commands we need to execute to produce these
   files.

3) Execute the computed shell commands, keeping a record
   of which of them succeed and which fail.

4) Finally, call the final system compiler to link the
   generated assembly file to form the executable. Pass
   it the necessary files and flags.

Cleanup:

5) Update the aux file with information about all the successful
   build commands so that we don't have to run them again later.

;============================================================
;=======================================================<doc>

;============================================================
;======================= API ================================
;============================================================

;- build-settings: The build settings that were in effect
;  during compilation.
;- compiler-result: The result of the compilation.
;- proj: The final proj file in effect during compilation.
public defstruct LinkerInput :
  build-settings:BuildSettings
  compiler-result:CompilationResult
  proj:ProjFile
  auxfile:AuxFile

;The set of callbacks for performing the necessary actions.
public defstruct LinkerEnv

;Report to the caller that an error has occurred.
public defmulti issue-error (e:LinkerEnv, err:LinkingError) -> False

;Return the system dependencies that usages of a foreign-package-manager
;will induce. Note that foreign-packages are not allowed here, only ccfiles and ccflags.
public defmulti foreign-package-manager-dependencies (e:LinkerEnv,
                                                      params:ForeignPackageParamsStmt,
                                                      platform:Symbol)
                                                   -> ProjDependencies

;Report to the caller that the external dependencies have been computed.
public defmulti computed-dependencies (e:LinkerEnv, deps:ProjDependencies) -> False

;Report to the caller that build commands have been computed.
public defmulti computed-build-commands (e:LinkerEnv, stmts:Tuple<CompileStmt>) -> False :
  false

;Called to request for the given foreign package dependencies to be satisfied.
;If an error occurs, and the request cannot be satisfied, this call is expected to throw an exception,
;which will halt the compilation process.
;The function should return True if progress has been made, or false if the dependencies
;were already up-to-date and have not changed since they were last satisfied.
public defmulti satisfy-foreign-packages (e:LinkerEnv,
                                          files:ForeignPackageFiles,
                                          params:ForeignPackageParamsStmt,
                                          platform:Symbol) -> True|False

;Called to report to the caller that an external dependency has already been built.
public defmulti notify-external-dependency-up-to-date (e:LinkerEnv,
                                                       file?:True|False,
                                                       name:String|Tuple<String>) -> False

;Called to request that the caller execute a build command.
;Expected to throw an exception if some error occurs during execution.
public defmulti call-shell (e:LinkerEnv, platform:Symbol, command:String) -> False

;Called to request that the caller calls the C compiler to build the given exefile.
;Expected to return true if the operation succeeds, or false otherwise.
public defmulti call-cc (e:LinkerEnv,
                         platform:Symbol,
                         asm:String,
                         ccfiles:Tuple<String>,
                         ccflags:Tuple<String>,
                         exefile:String) -> True|False

;Called to request that the auxfile be updated with the additional records.
public defmulti update-aux-file (e:LinkerEnv,
                                 records:Tuple<AuxRecord>) -> False

;============================================================
;=================== Main Driver ============================
;============================================================

public defn link (input:LinkerInput, env:LinkerEnv) -> False :
  ;Preconditions
  ensure-ready-for-compilation!(build-settings(input))

  ;Save updates to the auxfile.
  within auxfile-updates = save-updates-to-auxfile(env) :

    ;Compute the set of all external dependencies required
    ;by the program.
    val deps = compute-dependencies(
                 compiler-result(input)
                 proj(input)
                 build-settings(input)
                 env)
    computed-dependencies(env, dependencies(deps))

    ;Proceed with the rest of the flow if dependencies
    ;were computed without errors.
    if not errors?(deps) :

      ;Case: An output executable is desired.
      if output-required?(build-settings(input)) :

        ;Compute the compilation statements that must be
        ;executed.
        val commands = compute-build-commands(dependencies(deps), proj(input), env)
        computed-build-commands(env, stmts(commands))

        ;Satisfy the foreign package dependencies.
        val build-platform = platform(build-settings(input)) as Symbol
        for package in foreign-packages(dependencies(deps)) do :
          satisfy-foreign-packages(env,
                                   package,
                                   package-manager-params(proj(input), package-manager(package)),
                                   build-platform)

        ;Execute the given build commands if they are not
        ;already up-to-date.        
        val build-result = execute-build-commands(
                             commands,
                             auxfile(input),
                             build-platform,
                             env)
        update-auxfile-for-external-dependencies(auxfile-updates,
                                                 build-result)

        ;Execute the final command for building the program executable.
        val build-prog? = not errors?(build-result)
                      and not errors?(commands)
        if build-prog? :

          ;Execute the final build command.
          val prog-result = execute-final-build-command(
                              build-settings(input),
                              dependencies(deps),
                              build-platform,
                              env)

          ;If the program built successfully, then update the
          ;auxfile.
          match(prog-result:FinalBuildResult) :
            update-auxfile-for-main-program(auxfile-updates,
                                            build-settings(input),
                                            build-result,
                                            compiler-result(input),
                                            prog-result,
                                            proj(input))

      ;Case: An output executable is not desired, but an
      ;assembly file is required.
      else if only-assembly-required?(build-settings(input)) :
        update-auxfile-for-assembly(auxfile-updates,
                                    build-settings(input),
                                    compiler-result(input),
                                    proj(input))

      ;Case: The only desired output are the .pkg files.
      else if only-pkgs-required?(build-settings(input)) :
        update-auxfile-for-pkgs(auxfile-updates,
                                build-settings(input),
                                compiler-result(input),
                                proj(input))

;============================================================
;================ Compute Dependencies ======================
;============================================================

;Compute the set of all external dependencies required
;by the program.
defn compute-dependencies (result:CompilationResult,
                           proj:ProjFile,
                           settings:BuildSettings,
                           env:LinkerEnv) -> AllDependencies :

  ;==========================================================
  ;=================== Error Tracking =======================
  ;==========================================================

  ;Flip to true if encountered-error is ever called.
  var errors?: True|False = false

  ;Encountered a new during dependency resolution.
  defn encountered-error (e:LinkingError) :
    issue-error(env, e)
    errors? = true

  ;==========================================================
  ;=================== Start of Iteration ===================
  ;==========================================================

  ;Dependencies that are provided by the .proj files.
  defn proj-file-dependencies () -> Seqable<ProjDependencies> :
    ;The requires statements tells us what dependencies each
    ;package has.
    val requires-table = to-hashtable(package,
      filter-by<RequiresStmt>(stmts(proj)))
    
    ;Gather both the compiled and binding packages.
    val all-packages = unique-join(compiled-packages(result),
                                   binding-packages(result))
    val package-dependencies =                                
      for package in all-packages seq :
        val requires = get?(requires-table, package)
        match(requires:RequiresStmt) :
          ProjDependencies(ccfiles(requires),
                           ccflags(requires),
                           foreign-packages(requires))
    filter-by<ProjDependencies>(package-dependencies)

  ;Explicit dependencies that are provided by the user directly
  ;on the command line.
  defn explicit-dependencies () -> ProjDependencies :
    ProjDependencies(
      ccfiles(settings)
      ccflags(settings)
      [])

  ;Default dependencies that are required by the system.
  defn system-dependencies () -> ProjDependencies :
    /system-dependencies(platform(settings) as Symbol)

  ;Retrieve the initial list of dependencies that we use
  ;to start the iterative process.
  defn all-initial-dependencies () -> ProjDependencies :
    merge $ cat-all $ [[system-dependencies()
                        explicit-dependencies()]
                       proj-file-dependencies()]

  ;==========================================================
  ;================== Iterative Step ========================
  ;==========================================================

  ;Dependencies in .proj files required for compiling
  ;external files or flags. 
  defn compilation-dependencies (deps:ProjDependencies) -> Seqable<ProjDependencies> :
    ;The compile statements tell us what foreign packages each
    ;compilation command requires.
    val compile-table = to-hashtable(name,
      filter-by<CompileStmt>(stmts(proj)))
      
    ;Gather all the dependencies from the compile statements
    ;necessitated by the given -ccfiles and -ccflags.
    val dependencies =
      for name in cat(ccfiles(deps), ccflags(deps)) seq :
        val stmt = get?(compile-table, name)
        match(stmt:CompileStmt) :
          ProjDependencies([],
                           [],
                           foreign-packages(stmt))
    filter-by<ProjDependencies>(dependencies)

  ;Dependencies imposed by the package managers.
  ;Based upon the required ForeignPackageFiles, retrieve the corresponding ForeignPackageParamsStmt
  ;from the .proj file, and request the environment to return the manager's system dependencies.
  ;If there is no ForeignPackageParamsStmt in the .proj file, then it means that the program
  ;depends upon packages from e.g. conan, but the project was not configured to work with conan.
  ;- already-included: Includes the set of foreign package managers whose dependencies are
  ;  already included in deps. This function will directly add the additional package managers
  ;  to already-included.
  defn package-manager-system-dependencies (deps:ProjDependencies,
                                            already-included:HashSet<Symbol>) -> Seqable<ProjDependencies> :
    ;Retrieve all the configurations for the foreign package managers.
    val package-params = to-hashtable(package-manager,
      filter-by<ForeignPackageParamsStmt>(stmts(proj)))

    ;Compute new set of dependencies.
    val new-deps = Vector<ProjDependencies>()
    for package in foreign-packages(deps) do :
      if add(already-included, package-manager(package)) :
        match(get?(package-params, package-manager(package))) :
          (params:ForeignPackageParamsStmt) :
            val platform = platform(settings) as Symbol
            add(new-deps, foreign-package-manager-dependencies(env, params, platform))
          (f:False) :
            encountered-error(NoConfigurationForPackageManager(package-manager(package), files(package)))

    ;Return the new dependencies
    new-deps    

  ;Based upon the initial set, add the additional dependencies from
  ;the compile statements and the package managers.
  ;- already-included-managers: Includes the set of foreign package
  ;  managers whose dependencies are already included in deps.
  defn add-additional-dependencies (deps:ProjDependencies,
                                    already-included-managers:HashSet<Symbol>) -> ProjDependencies|False :
    ;Compute the new set of dependencies.
    val new-deps = merge $ cat-all $ [                                
      [deps]
      compilation-dependencies(deps)
      package-manager-system-dependencies(deps, already-included-managers)]
    ;Return the new dependencies only if they are different.
    new-deps when new-deps != deps

  ;==========================================================
  ;=============== Main Iterative Loop ======================
  ;==========================================================

  ;Iteratively call add-additional-dependencies until convergence.
  defn iteratively-compute-dependencies () -> ProjDependencies :
    val included-managers = HashSet<Symbol>()
    let loop (deps:ProjDependencies = all-initial-dependencies()) :
      val added-deps = add-additional-dependencies(deps, included-managers)
      match(added-deps:ProjDependencies) :
        loop(added-deps)
      else :
        deps

  ;==========================================================
  ;==================== Launch! =============================
  ;==========================================================

  val deps = iteratively-compute-dependencies()
  AllDependencies(deps, errors?)

;Wrap up the computed dependencies along with information about
;whether any errors occurred.
defstruct AllDependencies :
  dependencies: ProjDependencies
  errors?:True|False
with:
  printer => true
     

;============================================================      
;================ Compute Shell Commands ====================
;============================================================      

;Returns the tuple of compilation statements that must be
;executed.
;
;Note that files that do not have a registered CompileStmt
;have an dummy one synthesized for them that contains an empty
;commands tuple. This is useful so that we can still remember
;their dependencies in the aux file.

defn compute-build-commands (deps:ProjDependencies,
                             proj:ProjFile,
                             env:LinkerEnv) -> BuildCommands :
  val compile-table = to-hashtable(name,
    filter-by<CompileStmt>(stmts(proj)))

  val stmts = Vector<CompileStmt>()
  var error?: True|False = false

  ;Encountered a new error.
  defn encountered-error (e:LinkingError) :
    issue-error(env, e)
    error? = true

  ;Helper: Create a dummy statement for the files that do not
  ;have a registered CompileStmt.
  defn dummy-stmt (name:String) -> CompileStmt :
    CompileStmt(true, name, [], [], [])

  ;Collect all compilation statements from files.
  for file in ccfiles(deps) do :
    val stmt = get?(compile-table,file)
    match(stmt:CompileStmt) :
      if not file?(stmt) : encountered-error(MismatchedCompilationStmt(true, file))
      else : add(stmts, stmt)
    else : add(stmts, dummy-stmt(file))
      
  ;Collect all compilation statements from flags.
  for flag in ccflags(deps) do :
    val stmt = get?(compile-table,flag)
    match(stmt:CompileStmt) :
      if file?(stmt) : encountered-error(MismatchedCompilationStmt(false, flag))
      else : add(stmts, stmt)

  ;Return collected statements.
  BuildCommands(to-tuple(stmts), error?)

;Wrap up the build commands and whether an error was encountered.
defstruct BuildCommands :
  stmts:Tuple<CompileStmt>
  errors?:True|False
with:
  printer => true

;============================================================
;=============== Execute Build Commands =====================
;============================================================

;Execute the given build commands if they are not
;already up-to-date.
defn execute-build-commands (cmds:BuildCommands,
                             auxfile:AuxFile,
                             platform:Symbol,
                             env:LinkerEnv) -> BuildResult :

  ;Helper: Create the AuxFile external file record.
  ;Note: This part may fail because of computing the filestamps.
  defn ext-rec (stmt:CompileStmt) -> ExternalFileRecord|False :
    try :
      val filetype = ExternalFile(filestamp(name(stmt) as String)) when file?(stmt)
                else ExternalFlag(name(stmt))
      val deps = map(filestamp, dependencies(stmt))
      ExternalFileRecord(filetype, deps, commands(stmt))
    catch (e) : false

  ;Accumulate all the external file records from
  ;the successful build commands.
  val saved-records = Vector<ExternalFileRecord>()

  ;Track whether any error has occurred during execution.
  var errors?:True|False = false

  ;Execute each statement in turn.
  for stmt in stmts(cmds) do :      
    ;Check whether the external file has already been compiled,
    ;by checking the aux file.
    val prev-ext-rec = ext-rec(stmt)
    val already-compiled? = match(prev-ext-rec) :
      (rec:ExternalFileRecord) : key?(auxfile, rec)
      (rec) : false

    ;If the file is up-to-date, then notify the environment.
    if already-compiled? :    
      notify-external-dependency-up-to-date(env, file?(stmt), name(stmt))
      
      ;Save the record.
      add(saved-records, prev-ext-rec as ExternalFileRecord)

    ;If not up-to-date, then execute the commands.
    else :
      ;Execute the commands, and track any execution error
      ;that occurs.
      val execution-error = 
        try :
          for command in commands(stmt) do :
            call-shell(env, platform, command)
          false
        catch (e) :
          e
      ;If there was an error during execution.
      match(execution-error:Exception) :
        issue-error(env, 
                    ErrorCompilingExternalDependency(file?(stmt), name(stmt), execution-error))
        errors? = true
      ;Otherwise, try recording the external file dependency.
      else :
        val rec = ext-rec(stmt)
        match(rec:ExternalFileRecord) :
          add(saved-records, rec)

  ;Return the result of the build commands.
  BuildResult(to-tuple(saved-records), errors?)

;Wrap up the results of executing the shell commands.
defstruct BuildResult :
  records:Tuple<ExternalFileRecord>
  errors?:True|False
with:
  printer => true

;============================================================
;=========== Executing the Final Program Compilation ========
;============================================================

;Execute the final command for building the program executable.
;If the command succeeds, and we are able to compute their filestamps,
;returns a FileBuildResult.

defn execute-final-build-command (settings:BuildSettings,
                                  deps:ProjDependencies,
                                  platform:Symbol,
                                  env:LinkerEnv) -> FinalBuildResult|False :

  ;Retrieve the relevant filenames.
  val asmfile = assembly(settings) as AsmFile
  val exefile = output(settings) as String

  ;Execute the C compiler.
  val success? =
    try :
      call-cc(env,
              platform,
              filename(asmfile),
              ccfiles(deps),
              flat-ccflags(deps),
              exefile)
    catch (e) :
      issue-error(env, ErrorLinkingAsmfile(filename(asmfile), exefile, e))
      false

  ;If successful, then try and return a FileBuildResult containing
  ;their filestamps.
  if success? :
    try :
      val asmstamp = filestamp(filename(asmfile)) when not auto-generated?(asmfile)
      val exestamp = filestamp(exefile)
      FinalBuildResult(asmstamp, exestamp)
    catch (e) :
      false    
  
;Holds the filestamps of the final build result.
defstruct FinalBuildResult :
  asm-filestamp: FileStamp|False
  exe-filestamp: FileStamp

;============================================================
;========= Calculate All Stamps To Save to AuxFile  =========
;============================================================

;Keep a list of all the AuxRecord to add to the auxfile.
defstruct AuxFileUpdates :
  records:Vector<AuxRecord> with:
    init => Vector<AuxRecord>()

;Update the auxfile to save our progress on all the external
;files that were built successfully.
defn update-auxfile-for-external-dependencies (updates:AuxFileUpdates,
                                               build-result:BuildResult) -> False :
  ;All the ExternalFileRecord from compiling the external
  ;dependencies should be saved, if they have trackable dependencies.
  defn trackable-dependencies? (r:ExternalFileRecord) -> True|False :
    filetype(r) is ExternalFile or
    not empty?(dependencies(r))

  add-all(records(updates),
          filter(trackable-dependencies?, records(build-result)))

;Update the auxfile to save our progress on the main program
;that was built successfully.
defn update-auxfile-for-main-program (updates:AuxFileUpdates,
                                      settings:BuildSettings,
                                      build-result:BuildResult,
                                      compiler-result:CompilationResult,
                                      prog-result:FinalBuildResult,
                                      projfile:ProjFile) -> False :


  val package-inputs = inputs(settings) as BuildPackages
  val build-target = original-target(package-inputs)
  match(build-target:Symbol) :

    ;Compute the project isolate.
    val proj-isolate = isolate-stmts(projfile, all-packages) where :
      val all-packages = unique-join(compiled-packages(compiler-result),
                                     binding-packages(compiler-result))

    ;Compute the set of all filestamps.
    val filestamps = Vector<FileStamp>()

    ;Add stamps from finished output pkgfiles.
    add-all(filestamps, output-pkgs(compiler-result))

    ;Add stamps from external dependencies.
    for rec in records(build-result) do :
      match(filetype(rec)) :
        (f:ExternalFile) : add(filestamps, filestamp(f))
        (f:ExternalFlag) : false
      add-all(filestamps, dependencies(rec))

    ;Add stamps from final artifact.
    match(asm-filestamp(prog-result)) :
      (s:FileStamp) : add(filestamps,s)
      (f:False) : false
    add(filestamps, exe-filestamp(prog-result))

    ;Create the build record.
    val rec = BuildRecord(
                build-target,
                package-stamps(compiler-result),
                to-tuple(filestamps),
                BuildRecordSettings(settings),
                proj-isolate)
    add(records(updates), rec)


;Update the auxfile to save our progress on generating the assembly
;file.
defn update-auxfile-for-assembly (updates:AuxFileUpdates,
                                  settings:BuildSettings,
                                  compiler-result:CompilationResult,
                                  projfile:ProjFile) -> False :
  val package-inputs = inputs(settings) as BuildPackages
  val build-target = original-target(package-inputs)
  match(build-target:Symbol) :

    ;Compute the project isolate.
    val proj-isolate = isolate-stmts(projfile, all-packages) where :
      val all-packages = unique-join(compiled-packages(compiler-result),
                                     binding-packages(compiler-result))

    ;Compute the set of all filestamps.
    val filestamps = Vector<FileStamp>()

    ;Add stamps from finished output pkgfiles.
    add-all(filestamps, output-pkgs(compiler-result))

    ;Add stamps from assembly file.
    val asm-file = original-asm(settings) as String
    add(filestamps, filestamp(asm-file))

    ;Create the build record.
    val rec = BuildRecord(
                build-target,
                package-stamps(compiler-result),
                to-tuple(filestamps),
                BuildRecordSettings(settings),
                proj-isolate)
    add(records(updates), rec)

;Update the auxfile to save our progress on generating the assembly
;file.
defn update-auxfile-for-pkgs (updates:AuxFileUpdates,
                              settings:BuildSettings,
                              compiler-result:CompilationResult,
                              projfile:ProjFile) -> False :
  val package-inputs = inputs(settings) as BuildPackages
  val build-target = original-target(package-inputs)
  match(build-target:Symbol) :

    ;Compute the project isolate.
    val proj-isolate = isolate-stmts(projfile, all-packages) where :
      val all-packages = unique-join(compiled-packages(compiler-result),
                                     binding-packages(compiler-result))

    ;Compute the set of all filestamps.
    val filestamps = Vector<FileStamp>()

    ;Add stamps from finished output pkgfiles.
    add-all(filestamps, output-pkgs(compiler-result))

    ;Create the build record.
    val rec = BuildRecord(
                build-target,
                package-stamps(compiler-result),
                to-tuple(filestamps),
                BuildRecordSettings(settings),
                proj-isolate)
    add(records(updates), rec)

;Record all the updates to the auxfile, and save them after executing
;the body.
defn save-updates-to-auxfile<?T> (body:AuxFileUpdates -> ?T, env:LinkerEnv) :
  val updates = AuxFileUpdates()
  try :
    body(updates)
  finally :
    if not empty?(records(updates)) :
      update-aux-file(env, to-tuple(records(updates)))

;============================================================
;==================== Small Utilities =======================
;============================================================

;Helper: Unique join.
defn unique-join<?T> (xs:Tuple<?T>, ys:Tuple<?T>) -> Tuple<T> :
  val visited = HashSet<?>()
  to-tuple $ for v in cat(xs,ys) filter :
    add(visited,v)

;Retrieve the ForeignPackageParamsStmt statement from the .proj file.
defn package-manager-params (proj:ProjFile, name:Symbol) -> ForeignPackageParamsStmt :
  for stmt in filter-by<ForeignPackageParamsStmt>(stmts(proj)) find! :
    package-manager(stmt) == name