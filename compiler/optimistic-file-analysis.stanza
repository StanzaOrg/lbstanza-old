defpackage stz/optimistic-file-analysis :
  import core
  import collections
  import reader
  import stz/core-macros
  import stz/input
  import stz/il-ir

;============================================================
;=================== Identify IPackages =====================
;============================================================

;Scan through the given file for any IPackage structures.
public defn identify-ipackages-in-file (filename:String) -> Tuple<IPackage> :
  try :
    filename $> read-file-optimistic
             $> identify-ipackages-in-tokens
  catch (e) :
    []

;Scan through the given text for any IPackage structures.
public defn identify-ipackages-in-text (text:String) -> Tuple<IPackage> :
  StringInputStream(text) $> read-optimistic
                          $> identify-ipackages-in-tokens

;============================================================
;================== Common Entry Point ======================
;============================================================

;Scan through the list of tokens for any IPackage structures.
defn identify-ipackages-in-tokens (tokens:List<Token>) -> Tuple<IPackage> :
  ;Identify the defpackage patterns.
  val patterns = identify-defpackage-patterns(tokens)
  ;For each pattern expand them to core forms and convert to ipackage.
  to-tuple $ for pat in patterns seq? :
    val expanded = expand-to-core-forms(pat)
    if empty?(expanded) : None()
    else : to-ipackage(value!(expanded))  

;============================================================
;================== Helpers =================================
;============================================================

;Struct to hold parsed information for a defpackage construct.
defstruct DefPackagePattern :
  name
  body:List
with:
  printer => true

;Syntax for identifying the defpackage pattern.
;Change this part if we need a more robust pattern.
defsyntax optimistic-analysis :
  public defproduction defpackage-pattern: DefPackagePattern
  defrule defpackage-pattern = (defpackage ?name:_  : (?body ...)) :
    DefPackagePattern(name, body)
  defrule defpackage-pattern = (defpackage ?name) :
    DefPackagePattern(name, List())

;Scan through a list of tokens and detect whether a defpackage pattern
;exists within it.
defn identify-defpackage-patterns (tokens:List<Token>) -> List<DefPackagePattern> :
  if empty?(tokens) :
    List()
  else if unwrap-token(head(tokens)) == `defpackage :
    match-syntax[optimistic-analysis](tokens) :
      (?p:#defpackage-pattern ?rest ...) : cons(p, identify-defpackage-patterns(rest))
      (_ ...) : identify-defpackage-patterns(tail(tokens))
  else :
    identify-defpackage-patterns(tail(tokens))

;Use macroexpansion to expand the DefPackage pattern into
;Stanza core forms.
defn expand-to-core-forms (p:DefPackagePattern) -> Maybe<?> :
  val form = qquote(defpackage ~ (name(p)) : ~ (body(p)))
  try : One(parse-syntax[core / #exp](form))
  catch (e) : None()

;Analyze the given core form and return the IPackage.
defn to-ipackage (core-form) -> Maybe<IPackage> :
  try :
    val packages = to-ipackages(core-form, [])
    One(packages[0]) when length(packages) == 1 else None()
  catch (e) :
    None()