defpackage stz/type-variance :
  import core
  import collections
  import stz/types

;A covariance/contravariance selector.
public defenum Variance :
  Covariant
  Contravariant

;Flip the variance.
public defn flip (v:Variance) -> Variance :
  Contravariant when v == Covariant else Covariant

;Indicate that a type appears in both variance positions.
public defstruct Bivariant

;Detect all the variances in the given types.
public defn variances (ts:Seqable<Type|LSType>, initial-v:Variance) -> IntTable<Variance|Bivariant> :
  ;Collect all the variances here.
  val table = IntTable<Variance|Bivariant>()

  ;Record the variance of the given variable.
  defn record (n:Int, v:Variance) -> False :
    val new-v = match(get?(table,n)) :
      (old-v:Bivariant) :
        old-v
      (old-v:Variance) :
        if v == old-v : v
        else : Bivariant()
      (f:False) :
        v
    table[n] = new-v

  ;Scan the given type assuming it appears in variance position v.
  defn scan (t:Type|LSType|False, v:Variance) -> False :
    match(t) :
      (t:TCap) :
        record(n(t), v)
      (t:TArrow) :
        val inv-v = flip(v)
        do(scan{_, inv-v}, a1(t))
        scan(a2(t), v)
      (t:FnT) :
        val inv-v = flip(v)
        do(scan{_, inv-v}, a(t))
        scan(r(t), inv-v)
        scan(b(t), v)
      (t:Type|LSType):
        do(scan{_ as Type|LSType, v}, t)
      (f:False) :
        false

  ;Launch!
  do(scan{_, initial-v}, ts)
  table