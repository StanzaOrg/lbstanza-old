defpackage stz/foreign-package-manager :
  import core
  import collections
  import stz/external-dependencies
  import stz/proj-value-types

;============================================================
;======================= Registry ===========================
;============================================================

;Accumulate all of the registered package managers here.
val REGISTERED-PACKAGE-MANAGERS = Vector<ForeignPackageManager>()

;Register a new foreign package manager.
public defn register-foreign-package-manager (pm:ForeignPackageManager) -> False :
  add(REGISTERED-PACKAGE-MANAGERS, pm)

;Retrieve all of the currently registered package managers.
public defn registered-foreign-package-managers () -> Tuple<ForeignPackageManager> :
  to-tuple(REGISTERED-PACKAGE-MANAGERS)

;============================================================
;================== Single Package Manager ==================
;============================================================

;The parameters of the package manager.
public defstruct PackageManagerParams :
  projdir: String
  platform: Symbol
  entries: Tuple<KeyValue<Symbol,?>>

;This represents the capability of a foreign package manager.
public deftype ForeignPackageManager

;Return the name of the package manager.
public defmulti name (pm:ForeignPackageManager) -> Symbol

;Return the parameters that a user should specify in their .proj file.
public defmulti configuration-params (pm:ForeignPackageManager) -> Tuple<TableEntry>

;Retrieve the additional system dependencies for this project.
;Note that only ccfiles and ccflags are acceptable. 
public defmulti system-dependencies (pm:ForeignPackageManager,
                                     params:PackageManagerParams) -> ProjDependencies

;Retrieve the additional .proj file variables created by
;the package manager.
public defmulti proj-variables (pm:ForeignPackageManager,
                                params:PackageManagerParams,
                                platform:Symbol) -> Tuple<KeyValue<Symbol,?>>

;Satisfy the requested package dependencies.
;Return false if packages have already been satisfied and no change occurred.
;[TODO] This return value is currently ignored. 
public defmulti satisfy-dependencies (pm:ForeignPackageManager,
                                      packages:Tuple<String>,
                                      params:PackageManagerParams,
                                      system:System) -> True|False

;============================================================
;===================== System Interface =====================
;============================================================

;Represents the system functions that the package manager
;is allowed to use.
public deftype System

;May throw exception.
public defmulti read-file (s:System, filename:String) -> String

;May throw exception.
public defmulti write-file (s:System, filename:String, contents) -> False

;May throw exception.
public defmulti file-exists? (s:System, filename:String) -> True|False

;May throw exception.
public defmulti ensure-directory-exists (s:System, path:String) -> False

;May throw exception.
public defmulti call-system (s:System,
                             prog:String,
                             args:Tuple<String>,
                             workdir:String|False,
                             env-vars:Tuple<KeyValue<String,String>>|False) -> Int

;May throw exception.
public defmulti call-system-and-get-output (s:System,
                                            prog:String,
                                            args:Tuple<String>,
                                            workdir:String|False,
                                            env-vars:Tuple<KeyValue<String,String>>|False) -> String