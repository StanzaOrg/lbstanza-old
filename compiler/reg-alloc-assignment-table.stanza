defpackage stz/reg-alloc-assignment-table :
  import core
  import collections
  import stz/reg-alloc-ir
  import stz/reg-alloc-datastructures
  import stz/printing-utils

;============================================================
;==================== Assignment Table ======================
;============================================================

public deftype AssignmentTable

;Record that the given variable has been saved.
;The shuffling engine needs to know which variables are saved so that
;it doesn't emit extraneous Save statements.
public defmulti set-saved (t:AssignmentTable, v:Int, s:True|False) -> False

;Return whether the variable has been saved.
public defmulti saved? (t:AssignmentTable, v:Int) -> True|False

;Assign the given register to the given variable.
;Condition: r must not be assigned already.
public defmulti assign (t:AssignmentTable, v:Int, r:Reg|FReg) -> False

;Unassign the variable, such that it doesn't hold any register.
;Condition: v must have an assigned register.
public defmulti unassign (t:AssignmentTable, v:Int) -> False

;Retrieve the register that the variable is assigned to (if any).
public defmulti get? (t:AssignmentTable, v:Int) -> Reg|FReg|False

;Retrieve the variable that the given register is assigned to (if any).
public defmulti get? (t:AssignmentTable, r:Reg|FReg) -> Int|False

;Retrieve a free register of the following type.
;Used for:
;- Identifying swap registers.
;Arguments:
;- category: The type of register that is desired.
;- allow-reserved?: If false, then registers that are marked as reserved
;  are not considered.
;- allow-reserved-input?: If false, then registers that are marked in the
;  reserved-input set are not considered.
public defmulti free-register (t:AssignmentTable,
                               category:AnyReg|AnyFReg,
                               allow-reserved?:True|False,
                               allow-reserved-input?:True|False) -> Reg|FReg

;Mark and clear the reserved register set.
;Used in free-register calculation when selecting registers for output variables.
public defmulti clear-reserved (t:AssignmentTable) -> False
public defmulti mark-reserved (t:AssignmentTable, r:Reg|FReg) -> True|False

;Mark and clear the reserved-input register set.
;Used in free-register calculation when selecting registers for input variables.
public defmulti clear-reserved-input (t:AssignmentTable) -> False
public defmulti mark-reserved-input (t:AssignmentTable, r:Reg|FReg) -> False

;Record the registers that were ultimately chosen for an operation statement.
public defmulti record-arg-register (t:AssignmentTable, arg-index:Int, r:Reg|FReg) -> False
public defmulti record-temp-register (t:AssignmentTable, temp-index:Int, r:Reg|FReg) -> False
public defmulti record-result-register (t:AssignmentTable, result-index:Int, r:Reg|FReg) -> False

;============================================================
;==================== Implementation ========================
;============================================================

public defn AssignmentTable (resources:ResourceProvider) :
  ;Hold the mapping from variables to registers.
  val var-table = VarTable<Reg|FReg>(resources)

  ;Holds the mapping from registers to variables.
  val reg-table = RegisterTable<Int>(resources)

  ;Hold all the saved variables.
  val var-saved = VarSet(resources)

  ;Implementation of methods.
  new AssignmentTable :
  
    ;Record that the given variable has been saved.
    defmethod set-saved (this, v:Int, s:True|False) :
      if s : add(var-saved,v)
      else : remove(var-saved,v)
      false

    ;Return true if the given variable is saved.
    defmethod saved? (this, v:Int) :
      var-saved[v]

    ;Assign the given register to the given variable.
    defmethod assign (this, v:Int, r:Reg|FReg) :
      #if-not-defined(OPTIMIZE) :
        if key?(var-table, v) : fatal("Variable V%_ already assigned." % [v])
        if key?(reg-table, r) : fatal("Register %_ is occupied." % [r])
      var-table[v] = r
      reg-table[r] = v

    defmethod print (o:OutputStream, this) :
      print(o, "var-saved: %_" % [var-saved])
      lnprint(o, "var-table: %_" % [var-table])
      lnprint(o, "reg-table: %_" % [reg-table])
