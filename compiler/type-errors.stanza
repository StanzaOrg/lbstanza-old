defpackage stz/type-errors :
  import core
  import collections

;Represents all type errors.
public deftype TypeError <: Exception

;Bundled type errors.
public defstruct TypeErrors <: TypeError :
  errors:Tuple<TypeError>

defmethod print (o:OutputStream, e:TypeErrors) :
  print(o, "%n" % [errors(e)])

;Represents the location of an error.
public defstruct ErrorLoc : (location:FileInfo|PackageName)
public defstruct PackageName : (name:Symbol)

defmethod print (o:OutputStream, l:ErrorLoc) :
  match(location(l)) :
    (loc:FileInfo) : print(o, " at %_" % [loc])
    (loc:PackageName) : print(o, "in package %~" % [name(loc)])

;Occurs when there is a cycle in the type hierarchy.
public defstruct DefinedType: (name:Symbol, loc:ErrorLoc)
public defstruct TypeCycle <: TypeError :
  types:Tuple<DefinedType>

defmethod print (o:OutputStream, t:TypeCycle) :
  print(o, "Illegal cycle in the type hierarchy. The following types are parents \
            of each other:")
  do(lnprint{o, Indented(_)}, types(t))
  
defmethod print (o:OutputStream, t:DefinedType) :
  print(o, "%_ %_" % [name(t), loc(t)])

;Occurs when the wrong number of type arguments is used
;to parameterize a class.
public defstruct WrongTypeArity <: TypeError :
  info:FileInfo|False
  name:Symbol
  targs:Tuple<String>
  arity:Int

defmethod print (o:OutputStream, e:WrongTypeArity) :
  print(o, "%_Incorrect number of type parameters for type '%_'. Expecting %_ \
            type parameters, but given arguments %,." % [
            info-str(info(e)), name(e), arity(e), seq(quotes,targs(e))])

;Surround x in single quotes.
defn quotes (x) : "'%_'" % [x]

;Format the FileInfo for the beginning of an error message.
defn info-str (info:FileInfo|False) :
  "" when info is False else "%_: " % [info]