#use-added-syntax(message-lang)
defpackage stz/type-errors :
  import core
  import collections

;============================================================
;==================== Type Definition =======================
;============================================================

;Represents all type errors.
public deftype TypeError <: Exception

;============================================================
;================= Format Definition ========================
;============================================================

deftype Formatted :
  TypeError <: Formatted

;Quick formatter definition for type error.
defmulti format (e:Formatted) -> ?

;Default implementation of print just prints the
;output of the formatter.
defmethod print (o:OutputStream, e:Formatted) :
  print(o, format(e))

;============================================================
;================= Message Definitions ======================
;============================================================

;Define the errors.
public defmessages TypeError :

  ;Bundled type errors.
  defmessage TypeErrors :
    errors: Tuple<TypeError>
  with:
    format: "%n" % [errors]

  ;Occurs when there is a cycle in the type hierarchy.
  defmessage TypeCycle :
    types:Tuple<DefinedType>
  with:
    format:
      val lines = for t in types seq-cat : ["\n" Indented(t)]
      "Illegal cycle in the type hierarchy. The following types are parents \
       of each other:%*" % [lines]

  ;Occurs when the wrong number of type arguments is used
  ;to parameterize a class.
  defmessage WrongTypeArity :
    info:FileInfo|False
    name:Symbol
    targs:Tuple<String>
    arity:Int
  with:
    format:
      "%_Incorrect number of type parameters for type '%_'. Expecting %_ \
       type parameters, but given arguments %,." % [
       info-str(info), name, arity, seq(quotes,targs)]

;Format an error location
public defmessage DefLoc <: Formatted :
  location:FileInfo|PackageName
with:
  format:
    match(location) :
      (l:FileInfo) : "at %_" % [l]
      (l:PackageName) : "in package %~" % [name(l)]

;Format a type defined at some location.
public defmessage DefinedType <: Formatted :
  name:Symbol
  loc:DefLoc
with:
  format: "%_ %_" % [name, loc]

;Represents the name of a Stanza package.
public defstruct PackageName : (name:Symbol)

;============================================================
;====================== Utilities ===========================
;============================================================

;Surround x in single quotes.
defn quotes (x) : "'%_'" % [x]

;Format the FileInfo for the beginning of an error message.
defn info-str (info:FileInfo|False) :
  "" when info is False else "%_: " % [info]