defpackage stz/reg-alloc-shuffle :
  import core
  import collections
  import stz/reg-alloc-ir

;============================================================
;==================== Fast Predicate ========================
;============================================================

;Returns true if the shuffling engine is required to perform
;the following parallel move. Returns false if a simple one-to-one
;move will work.
public defn needs-shuffle? (inputs:Tuple<Reg|FReg>,
                            outputs:Tuple<Location>) -> True|False :
  fatal("Not yet implemented")

;============================================================
;====================== Shuffling Engine ====================
;============================================================

;Represents an abstract type for performing shuffles.
public deftype ShuffleEngine

;Use the engine to perform a parallel move.
;- vars: The ids of the variables being shuffled.
;- inputs: The registers that the inputs are currently in.
;- saved: For each input, whether they are already saved.
;- outputs: The desired output locations for the variables.
;- free-reg: An optional free register to use during shuffling.
;- free-freg: An optional free floating-point register to use during shuffling.
;- emit: The function to use to emit the instructions for shuffling.
public defmulti shuffle (engine:ShuffleEngine,
                         vars:Tuple<Int>,
                         inputs:Tuple<Reg|FReg>,
                         saved:Tuple<True|False>,
                         outputs:Tuple<Location>,
                         free-reg:Reg|False,
                         free-freg:FReg|False,
                         emit:ProgramStmt -> ?) -> False 

;Create a shuffle engine that can perform shuffles.
public defn ShuffleEngine (num-regs:Int, num-fregs:Int) -> ShuffleEngine :
  new ShuffleEngine
  
