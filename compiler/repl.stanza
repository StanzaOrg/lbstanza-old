defpackage stz/repl :
  import core
  import collections
  import reader
  import parser/macroexpander
  import parser/errors
  import parser/syntax-package-registry
  import macro-utils
  import stz/utils
  import stz/il-ir
  import stz/check-lang-engine
  import stz/dl-ir with:
    prefix(Import) => DL
  import stz/tl-ir
  import stz/el-ir
  import stz/vm-ir
  import stz/vm
  import stz/core-macros
  import stz/input
  import stz/renamer
  import stz/resolver
  import stz/type
  import stz/tl-to-el
  import stz/dl
  import stz/el
  import stz/el-to-vm
  import stz/algorithms
  import stz/pkg
  import stz/pkg-ir
  import stz/pkg-errors
  import stz/ids
  import stz/params
  import stz/proj-manager
  import stz/proj
  import stz/proj-errors
  import stz/proj-ir
  import stz/front-end
  import stz/aux-file
  import core/sha256
  import stz/package-stamps
  import stz/terminal-style
  import stz/macroexpander
  import stz/timing-log-api
  import stz/standard-proj-env

;============================================================
;====================== Timers ==============================
;============================================================

val REPL-CREATION = TimerLabel("Repl Creation")
val REPL-FIND-PACKAGE = TimerLabel("Repl Find Package")
val REPL-EXP-EVALUATION = TimerLabel("Repl Exp Evaluation")
  val REPL-PROJ-MANAGER = TimerLabel("Repl Proj Manager", REPL-EXP-EVALUATION)
  val REPL-COMPILE-TO-VMPACKAGES = TimerLabel("Repl Compile To Vmpackages", REPL-EXP-EVALUATION)  
    val REPL-LOWERING-AND-COMPILATION = TimerLabel("Repl Lowering And Compilation", REPL-COMPILE-TO-VMPACKAGES)
      val REPL-LOWER-TO-UNOPTIMIZED = TimerLabel("Repl Lower To Unoptimized", REPL-LOWERING-AND-COMPILATION)
      val REPL-COMPILE-LOWERED = TimerLabel("Repl Compile Lowered", REPL-LOWERING-AND-COMPILATION)
  val REPL-LOAD-INTO-VM = TimerLabel("Repl Load Into Vm", REPL-EXP-EVALUATION)
  val REPL-INIT-PACKAGES = TimerLabel("Repl Init Packages", REPL-EXP-EVALUATION)
val REPL-RELOAD = TimerLabel("Repl Reload")

;============================================================
;===================== REPL Language ========================
;============================================================

public deftype RExp
public defstruct Load <: RExp :
  inputs: Tuple<String|Symbol>
  go-inside?: True|False
with:
  printer => true
public defstruct UseSyntax <: RExp :
  inputs: Tuple<Symbol>
  add-to-existing?: True|False
with:
  printer => true
public defstruct Update <: RExp
with:
  printer => true
public defstruct Reload <: RExp
with:
  printer => true
public defstruct Clear <: RExp
with:
  printer => true
public defstruct Import <: RExp :
  import: IImport
with:
  printer => true
public defstruct Inside <: RExp :
  package: Symbol|False
with:
  printer => true
public defstruct Unimport <: RExp :
  package: Symbol
with:
  printer => true
public defstruct Eval <: RExp :
  form
with:
  printer => true
public defstruct NoOp <: RExp
with:
  printer => true

defstruct ReplSyntaxError <: Exception :
  info: FileInfo|False
  message: String
defmethod print (o:OutputStream, e:ReplSyntaxError) :
  val infostr = "" when info(e) is False else "%_: " % [info(e)]
  print-all(o, [infostr, message(e)])

defsyntax repl :
  public defproduction rexp : RExp
  defrule rexp = (?x:#@rexp #E) : x

  defproduction E : False
  defrule E != (_)
  defrule E = () : false

  public defproduction @rexp : RExp
  defrule @rexp = (load ?input0:#input ?inputs:#input! ...) :
    Load(to-tuple(cons(input0, inputs)), true)
  defrule @rexp = (use-syntax ?name0:#symbol ?names:#symbol! ...) :
    UseSyntax(to-tuple(cons(name0, names)), false)
  defrule @rexp = (use-added-syntax ?name0:#symbol ?names:#symbol! ...) :
    UseSyntax(to-tuple(cons(name0, names)), true)
  defrule @rexp = (?e:#import-clause #E) :
    Import(e)
  defrule @rexp = (inside - #E) :
    Inside(false)
  defrule @rexp = (inside ?p:#symbol) :
    Inside(p)
  defrule @rexp = (unimport ?name:#symbol) :
    Unimport(name)
  defrule @rexp = (update #E) :
    Update()
  defrule @rexp = (reload #E) :
    Reload()
  defrule @rexp = (clear #E) :
    Clear()
  defrule @rexp = (?forms ...) :
    if empty?(forms) : NoOp()
    else : Eval(forms)

  ;===== Inputs =====
  defproduction input : String|Symbol
  defrule input = (?file:#string) : file
  defrule input = (?pkg:#symbol) : pkg

  defproduction input! : String|Symbol
  defrule input! = (?i:#input) : i
  fail-if input! = () : ReplSyntaxError(closest-info(), "Input must be either a string or a symbol.")

  ;===== Imports =====
  defproduction prefix-clause! : IPrefix
  defrule prefix-clause! = (prefix => ?p:#symbol!) :
    IPrefix(false, to-string(p))
  defrule prefix-clause! = (prefix(?names:#symbol! ...) => ?p:#symbol!) :
    IPrefix(to-tuple(names), to-string(p))
  fail-if prefix-clause! = () :
    ReplSyntaxError(closest-info(), "Expected a prefix clause here.")

  defproduction prefix-clauses : Tuple<IPrefix>
  defrule prefix-clauses = (with #:! (?ps:#prefix-clause! ...)) : to-tuple(ps)
  defrule prefix-clauses = () : []

  defproduction import-clause : IImport
  defrule import-clause = (import ?package:#symbol ?ps:#prefix-clauses) :
    IImport(package, ps)

  ;===== Primitives =====
  defproduction int : Int
  defrule int = (?x) when unwrap-token(x) is Int : unwrap-token(x)

  defproduction byte : Byte
  defrule byte = (?x) when unwrap-token(x) is Byte : unwrap-token(x)

  defproduction string : String
  defrule string = (?x) when unwrap-token(x) is String : unwrap-token(x)

  defproduction symbol : Symbol
  defrule symbol = (?x) when unwrap-token(x) is Symbol : unwrap-token(x)

  defproduction string! : String
  defrule string! = (?x:#string) : x
  fail-if string! = () : ReplSyntaxError(closest-info(), "Expected a string here.")

  defproduction symbol! : Symbol
  defrule symbol! = (?x:#symbol) : x
  fail-if symbol! = () : ReplSyntaxError(closest-info(), "Expected a symbol here.")

  defproduction :!
  defrule :! = (?x: ~ :) : x
  fail-if :! = () : ReplSyntaxError(closest-info(), "Colon expected here.")

defn read-repl-exp (read-line:() -> List<Token>|False) -> RExp|False :
  defn read-line! () :
    try : read-line()
    catch (e:Exception) : throw(ReplErrors([e]))
  try :
    let loop () :
      match(read-line!()) :
        (forms:List) :
          match(parse-syntax[repl / #rexp](forms)) :
            (e:NoOp) : loop()
            (e) : e
        (forms:False) :
          false
  catch (e:LexerException) :
    throw(ReplErrors([e]))
  catch (e:NoMatchError) :
    throw(ReplErrors(errors(e)))

defn read-repl-exp (inputstream:InputStream) :
  defn read-input-line () : /read-line(inputstream)
  read-repl-exp(read-input-line)

defn read-repl-exp (style:TerminalStyle) :
  defn read-input-line () :
    val prompt   = "stanza> "
    val continue = "      > "
    read-line(prompter(style, prompt, continue))
  flush(STANDARD-OUTPUT-STREAM as FileOutputStream)
  flush(STANDARD-ERROR-STREAM as FileOutputStream)
  read-repl-exp(read-input-line)

;============================================================
;================= Terminal Style ===========================
;============================================================

;Return a prompter given the terminal style.
defn prompter (style:TerminalStyle, prompt:String, continue:String) -> Prompter :
  switch(style) :
    SimpleTerminal :
      core/line-prompter/LinePrompter(prompt, continue)
    EditTerminal :
      #if-defined(PLATFORM-WINDOWS) :
        fatal("EditTerminal is currently not supported on Windows.")
      #else :
        stz/line-noise-prompter/LineNoisePrompter(prompt, continue)

;============================================================
;=================== REPL Syntax Packages ===================
;============================================================
public val REPL-INITIAL-SYNTAX-PACKAGES = Vector<Symbol>()
public defn register-initial-repl-syntax (name:Symbol) :
  add(REPL-INITIAL-SYNTAX-PACKAGES, name)

;============================================================
;==================== REPL Initial Load =====================
;============================================================
public val REPL-INITIAL-LOAD-PACKAGES = Vector<Symbol|String>()
public defn register-initial-repl-package (name:Symbol|String) :
  add(REPL-INITIAL-LOAD-PACKAGES, name)

;============================================================
;======================= Loading ============================
;============================================================

public deftype REPL
defmulti load-files (repl:REPL, inputs:Tuple<String|Symbol>, go-inside?:True|False) -> False
defmulti update-files (repl:REPL) -> False
defmulti reload (repl:REPL) -> False
defmulti load-repl (repl:REPL, form) -> False
defmulti import (repl:REPL, import:IImport) -> False
defmulti unimport (repl:REPL, package:Symbol) -> False
defmulti inside (repl:REPL, package:Symbol|False) -> False
defmulti clear (repl:REPL) -> False
defmulti use-syntax (repl:REPL, inputs:Tuple<Symbol>, add-to-existing?:True|False) -> False
defmulti shutdown (repl:REPL) -> False

public defn REPL (macro-plugins:Tuple<String>) :
  ;============================================================
  ;===================== REPL State ===========================
  ;============================================================
  val vm = VirtualMachine()
  val denv = DEnv()
  val repl-env = REPLEnv()
  val file-env = FileEnv()
  val proj-files = Vector<String>()
  val syntaxes = to-hashset<Symbol>(REPL-INITIAL-SYNTAX-PACKAGES)
  val macroexpander = StanzaMacroexpander()
  do(load-macro-plugin{macroexpander, _}, macro-plugins)

  ;============================================================
  ;=============== Ensure Syntax Packages Exist ===============
  ;============================================================
  match(syntax-packages-exist?(macroexpander, to-list(syntaxes))) :
    (t:True) : false
    (e:MissingPackages) : throw(ReplErrors([e]))

  ;============================================================
  ;===================== Project Manager ======================
  ;============================================================
  defn proj-manager () :
    within log-time(REPL-PROJ-MANAGER) :
      val proj = read-proj-files(proj-files, OUTPUT-PLATFORM, StandardProjEnv())
      val params = ProjParams(compiler-flags(), false)
      ProjManager(proj, params, AuxFile())

  add-all(proj-files, default-proj-files())
  defn add-proj-file (file:String) :
    add(proj-files, file)

  ;============================================================
  ;===================== File Loading =========================
  ;============================================================
  ;Executes the initializers for the given packages in sequence.
  ;Throws ReplHalt if any of the packages do not initialize successfully.
  defn init-packages (input-names:Seqable<Symbol>) :
    val names = to-seq(input-names)
    let loop () :
      if not empty?(names) :
        val package-name = next(names)
        val success? = init-package(vm, package-name)
        throw(ReplHalt()) when not success?
        loop()
  defn init-packages (pkgs:Seqable<VMPackage>) :
    init-packages(seq(name,pkgs))

  ;Load files
  ;Returns the name of the last package that was loaded if any.
  defn load-files (inputs:Tuple<String|Symbol>) -> Symbol|False :
    ;Load project files separately
    var proj-files-added?: True|False = false
    val inputs* = Vector<String|Symbol>()
    for input in inputs do :
      match(input:String) :
        if suffix?(input, ".proj") :
          proj-files-added? = true
          add-proj-file(input)
        else : add(inputs*, input)
      else : add(inputs*, input)

    ;Update the macroexpander if necessary.
    if proj-files-added? :
      set-proj-manager(macroexpander, proj-manager())

    if not empty?(inputs*) :
      within intercept-errors() :
        val vmpackages = within log-time(REPL-COMPILE-TO-VMPACKAGES) :
          compile-to-vmpackages(to-tuple(inputs*), live-recs, false)
        within log-time(REPL-LOAD-INTO-VM) :
          load(vm, vmpackages, false)
        within log-time(REPL-INIT-PACKAGES) :
          init-packages(vmpackages)
        if not empty?(vmpackages) :
          val n = length(vmpackages)
          name(vmpackages[n - 1])

  ;Ensure that a package is loaded
  defn ensure-package-loaded (package:Symbol) :
    within intercept-errors() :
      if packageio(denv,package) is False :
        load-files([package])

  ;Clear all repl definitions
  defn clear-repl () :  
    ;Compute what live repl records are required
    val live = compute-live(vm, repl-packages(repl-env))
    ;Unload from DEnvironment
    match(unload(denv, repl-packages(repl-env), live)) :
      (e:LoadErrors) : throw(ReplErrors(errors(e)))
      (e:LoadSuccess) : false
    ;Now clear the repl packages
    unload(vm, repl-packages(repl-env))
    clear(repl-env)

  ;Update files
  defn update-files () :
    within intercept-errors() :
      val inputs = changed-files(file-env)
      val vmpackages = compile-to-vmpackages(inputs, live-recs, false)
      load(vm, vmpackages, false)
      init-packages(vmpackages)

  ;Reload
  defn reload-files () :
    within log-time(REPL-RELOAD) :
      within intercept-errors() :
        val inputs = changed-files(file-env)
        val vmpackages = compile-to-vmpackages(inputs, {[]}, false)
        load(vm, vmpackages, false)

        ;Clear all globals
        clear-globals(vm)

        ;Clear all REPL definitions
        val r = unload(denv, repl-packages(repl-env), [])
        fatal("Could not unload repl definitions.") when r is LoadErrors
        unload(vm, repl-packages(repl-env))
        clear(repl-env)
        
        ;Rerun package initializers
        init-packages(ordered-pkg-names) where :
          val pkg-names = to-tuple $ seq(package,packageios(denv))
          val dependency-graph = package-dependency-graph(denv)
          val ordered-pkg-names = initialization-order(dependency-graph, pkg-names)

  ;Load from repl
  defn load-repl (form) :
    within intercept-errors() :
      val ipackage = to-ipackage(form)
      val vmpackages = compile-to-vmpackages([ipackage], live-recs, name(ipackage))
      load(vm, vmpackages, false)
      register-repl(repl-env, name(ipackage))
      init-packages(vmpackages)

  ;============================================================
  ;==================== Stages of Loading =====================
  ;============================================================
  defn to-ipackage (form) -> IPackage :
    val expanded-il =
      try :
        val expanded = macroexpand(macroexpander, form, to-list(syntaxes))
        to-il(expanded, true)
      catch (e:NoMatchError) :
        throw(ReplErrors(errors(e)))
      catch (e:Exception) :
        throw(ReplErrors([e]))
    repl-package(repl-env, expanded-il)

  defn live-recs (ios:Tuple<PackageIO>) :
    compute-live(vm, seq(package,ios))

  defn compile-to-vmpackages (inputs:Tuple<String|Symbol|IPackage>,
                              live-recs: Tuple<PackageIO> -> Tuple<Rec>,
                              repl-package?:Symbol|False) -> Tuple<VMPackage> :
    ;Compile to epackages
    val proj-manager = proj-manager()
    set-proj-manager(macroexpander, proj-manager)
    val result = /compile-to-el $ new FrontEndInputs :
      defmethod inputs (this) : inputs
      defmethod find-package (this, name:Symbol) :
        within log-time(REPL-FIND-PACKAGE) :
          match(package-location(file-env, name)) :
            (l:PkgLocation) : l
            (f:False) : find-package(proj-manager, name)
      defmethod environment-package? (this, name:Symbol) : packageio(denv, name)
      defmethod load-into-denv (this, ios:Tuple<PackageIO>) : load(denv, ios, live-recs(ios))
      defmethod conditional-dependencies (this, pkgs:Seqable<Symbol>) :
        val loaded-packages = seq(package, packageios(denv))
        conditional-imports(proj-manager, cat(loaded-packages,pkgs))
      defmethod transient? (this) :
        repl-package? is Symbol
      defmethod package-priority (this) :
        package-priority(repl-env, repl-package? as Symbol) when repl-package? is Symbol
      defmethod load-pkg-with-asm? (this) :
        false
      defmethod macroexpander (this) :
        macroexpander

    ;Register file associations with file environment.
    do(register{file-env, _}, pkgstamps(result))

    ;Register import lists with the repl environment.
    do(register{repl-env, _}, import-lists(result))

    ;Compile to vmpackages
    within log-time(REPL-LOWERING-AND-COMPILATION) :
      for p in packages(result) map :
        match(p) :
          (p:EPackage) :
            within log-time(REPL-LOWERING-AND-COMPILATION, suffix(name(p))) :
              val lowered = within log-time(REPL-LOWER-TO-UNOPTIMIZED) :
                lower-unoptimized(p)
              within log-time(REPL-COMPILE-LOWERED) :
                compile(lowered)
          (p:StdPkg) :
            vmp(p)

  defn intercept-errors (f:() -> ?) :
    try : f()
    catch (e:IOException
            |LexerException
            |CheckErrors
            |PkgException
            |RenameErrors
            |ResolveErrors
            |LoadErrors
            |FrontEndError
            |TypeErrors
            |ProjFileErrors
            |ProjFileError
            |ParserError
            |PatternError
            |ReplError) :
      throw(ReplErrors([e]))

  ;============================================================
  ;===================== REPL Structure =======================
  ;============================================================
  load-files([`core])
  load-files(to-tuple(REPL-INITIAL-LOAD-PACKAGES))
  new REPL :
    defmethod load-files (this, inputs:Tuple<String|Symbol>, go-inside?:True|False) :
      val last-package = load-files(inputs)
      if go-inside? :
        match(last-package:Symbol) :
          println(inside(repl-env, last-package))
    defmethod update-files (this) :
      update-files()
    defmethod reload (this) :
      reload-files()
    defmethod load-repl (this, form) :
      load-repl(form)
    defmethod clear (this) :
      clear-repl()
    defmethod inside (this, package:Symbol|False) :
      match(package:Symbol) : ensure-package-loaded(package)
      println(inside(repl-env, package))
    defmethod import (this, imp:IImport) :
      ensure-package-loaded(package(imp))
      import(repl-env, imp)
    defmethod unimport (this, package:Symbol) :
      println(unimport(repl-env, package))
    defmethod use-syntax (this, packages:Tuple<Symbol>, add-to-existing?:True|False) :
      ;Ensure that the syntax packages exist.
      val new-packages = to-list(cat(syntaxes,packages)) when add-to-existing?
                    else to-list(packages)
      try :              
        match(syntax-packages-exist?(macroexpander, new-packages)) :
          (t:True) : false
          (e:MissingPackages) : throw(ReplErrors([e]))
        ;Clear syntaxes when not add to existing syntaxes.
        clear(syntaxes) when not add-to-existing?
        add-all(syntaxes, packages)
      catch (e:Exception) :
        throw(ReplErrors([e]))
    defmethod shutdown (this) :
      shutdown(vm)

;============================================================
;=================== File Environment =======================
;============================================================

deftype FileEnv
defmulti register (e:FileEnv, pkgstamp:PackageStamp) -> False
defmulti changed-files (e:FileEnv) -> Tuple<String>
defmulti package-location (e:FileEnv, name:Symbol) -> PkgLocation|False

defn FileEnv () :
  ;Track which source file each package came from
  val pkgstamp-table = HashTable<Symbol,PackageStamp>()

  ;Determine whether a PackageStamp is still up-to-date.
  ;If it is no longer up-to-date, then return
  ;the file to reload. 
  defn changed? (stamp:PackageStamp) -> Maybe<String> :
    if not up-to-date?(stamp) :
      match(source-file(location(stamp)), pkg-file(location(stamp))) :
        (sf:String, pf) : One(sf)
        (sf:False, pf:String) : One(pf)
    else : None()

  new FileEnv :
    defmethod register (this, pkgstamp:PackageStamp) :
      pkgstamp-table[package(pkgstamp)] = pkgstamp
    defmethod changed-files (this) :
      to-tuple $ seq?(changed?, values(pkgstamp-table))
    defmethod package-location (this, name:Symbol) :
      if key?(pkgstamp-table, name) :
        location(pkgstamp-table[name])

;============================================================
;=================== Default Imports ========================
;============================================================

defn core-imports () :
  [IImport(`core), IImport(`collections)]

;<doc>=======================================================
;=================== REPL User Environment ==================
;============================================================

# Fundamental State #

  repl-packages: Vector<Symbol>
  imports: HashTable<Symbol,IImport>
  inside-package: Symbol|False
  import-list-table: HashTable<Symbol,ImportList>

All of the REPL packages, in the order that they were loaded, are
stored in repl-packages.

The currently active import statements are stored in imports. 

The package that the REPL is currently "inside" is stored in
inside-package. If the REPL is not currently inside any package, then
false is stored.

# Creating an IPackage from an Expression entered at the REPL #

Input:
  env: ReplEnv
  iexp: IExp
Output:
  ipackage: IPackage

The expanded and checked expression entered at the REPL is given in
iexp. This function creates an IPackage for representing the
expression, with the appropriate imports for the REPL, registers it
with the REPL environment, and returns the IPackage.

If the expression contains any expression that is not appropriate for
the REPL, e.g. defmulti, defmethod, etc. Then a REPLError is thrown.

# Package Priority #

Input:
  env: ReplEnv
  package-name: Symbol
Output:
  priority: Symbol -> Int

Returns a mapping from package names to their priority level. Higher
numbers indicate higher priority.

Definitions from the current repl expression have the highest priority
(INT-MAX), followed by definitions from earlier repl expressions. More
recent repl definitions have higher priority than older repl
definitions. Finally, all other packages have equal prioriity. 

# Private Use: Registering the imports of a source package #

  register (env:ReplEnv, importlist:ImportList) -> False

For every source package that is successfully loaded, its importlist
must be registered with the repl environment. This is used to
construct the import list for when a user goes inside a package. We
wish for the repl environment to inherit the import environment of
that package.

# Private Use: Registering the imports of a source package #

  register-repl (env:ReplEnv, package:Symbol) -> False

Used to register that a REPL package has been successfully loaded
without errors. This is necessary as future REPL expressions need to
import the definitions from the previously-loaded REPL expressions.

# Clearing the REPL Environment #

  clear (repl:REPLEnv)

Clears the list of imported REPL packages. Current imports,
inside-package, and import-list-table are left untouched.

# Importing a package #

  import (repl:REPLEnv, import:IImport) -> False

Either adds or overrides an import of a given package to the REPL
environment so that REPL expressions are able to refer to definitions
in these packages.

# Unimporting a package #

  unimport (repl:REPLEnv, package:Symbol) -> UnimportResult

Removes a package from the import list. 

;============================================================
;=======================================================<doc>

deftype REPLEnv

;For constructing the IPackage
defmulti repl-package (e:REPLEnv, exp:IExp) -> IPackage
defmulti package-priority (e:REPLEnv, package:Symbol) -> Symbol -> Int
defmulti register (env:REPLEnv, importlist:ImportList) -> False
defmulti register-repl (env:REPLEnv, package:Symbol) -> False
defmulti repl-packages (env:REPLEnv) -> Collection<Symbol>
defmulti clear (e:REPLEnv) -> False
defmulti import (e:REPLEnv, import:IImport) -> False
defmulti unimport (e:REPLEnv, package:Symbol) -> UnimportResult
defmulti inside (e:REPLEnv, package:Symbol|False) -> InsideResult

defn REPLEnv () :
  ;Fundamental State
  val previous-packages = Vector<Symbol>()
  val repl-imports = HashTable<Symbol, IImport>()
  var inside-package:Symbol|False = false
  val import-list-table = HashTable<Symbol,ImportList>()

  ;Initialize imports
  defn init-imports () :
    clear(repl-imports)
    for i in core-imports() do :
      repl-imports[package(i)] = i
  init-imports()

  ;Construct IPackage
  defn make-repl-package (exp:IExp) :
    ;First ensure legitimacy
    ensure-repl-expression(exp)

    ;Create the appropriate import list
    val exp-imports = HashTable<Symbol,IImport>()
    defn add-import (i:IImport) : exp-imports[package(i)] = i
    
    ;Previous REPL packages are imported (with visibility into their
    ;private definitions.)
    for p in previous-packages do :
      add-import(IImport(p, [], false, true))
    ;If we are inside a package, then inherit all of the imports from
    ;that package, and import the package itself (with visibility into private bindings).
    match(inside-package) :
      (p:Symbol) :
        ;If we have its imports, then add those imports.
        ;Packages loaded as .pkgs don't have imports.
        if key?(import-list-table, p) :
          do(add-import, imports(import-list-table[p]))
        add-import(IImport(p, [], false, true))
      (p:False) : false

    ;If we have custom imports from user interaction, then import those.
    do(add-import, values(repl-imports))

    ;Create IPackage
    IPackage(gensym(`repl),
             false,
             to-tuple(values(exp-imports)),
             List(wrap-display-result(exp)),
             info(exp))

  ;Construct environment object
  new REPLEnv :
    defmethod repl-package (this, exp:IExp) :
      make-repl-package(exp)
    defmethod package-priority (this, package:Symbol) :
      val package-index = to-hashtable<Symbol,Int>(previous-packages, 0 to false)
      fn (name:Symbol) :
        if name == package : INT-MAX
        else if key?(package-index, name) : package-index[name] + 1
        else : 0
    defmethod register (this, il:ImportList) :
      import-list-table[package(il)] = il
    defmethod register-repl (this, package:Symbol) :
      add(previous-packages, package)
    defmethod repl-packages (this) :
      previous-packages
    defmethod clear (this) :
      clear(previous-packages)
    defmethod import (this, import:IImport) :
      repl-imports[package(import)] = import
    defmethod inside (this, package:Symbol|False) :
      if inside-package == package :
        match(package:Symbol) : AlreadyInside(package)
        else : AlreadyOutside()
      else :
        val result = match(inside-package, package) :
          (p0:Symbol, p1:Symbol) : ChangedInside(p0, p1)
          (p0:False, p1:Symbol) : WentInside(p1)
          (p0:Symbol, p1:False) : WentOutside(p0)          
        if package is False : init-imports()
        else : clear(repl-imports)
        inside-package = package
        result
    defmethod unimport (this, package:Symbol) :
      if key?(repl-imports, package) :
        remove(repl-imports, package)
        PackageUnimported(package)
      else :
        PackageNotImported(package)

defn ensure-repl-expression (expression:IExp) :
  ;Detect illegal expressions
  val errors = Vector<Exception>()
  defn not-allowed! (e:IExp) :
    val type-str = match(e) :
      (e:IDefPackage) : "defpackage"
      (e:IDefType) : "deftype"
      (e:IDefmulti) : "defmulti"
      (e:IDefmethod) : "defmethod"
      (e:ILSDefType) : "lostanza deftype"
      (e:ILSDefmethod) : "lostanza defmethod"
      (e:ILSExternFn) : "externfn"
    add(errors, InvalidReplExp(type-str))

  ;Sweep through expressions and detect invalid expressions
  let loop (e:IExp = expression) :
    match(e) :
      (e:IBegin) : do(loop, exps(e))
      (e:IVisibility) : loop(exp(e))
      (e:IDefPackage|IDefType|IDefmulti|IDefmethod|
         ILSDefType|ILSDefmethod|ILSExternFn) : not-allowed!(e)
      (e) : false

  ;Throw errors if there are any
  throw(ReplErrors(errors)) when not empty?(errors)
  
defn import-list (p:IPackage) :
  ImportList(name(p), imports(p))

deftype UnimportResult
defstruct PackageNotImported <: UnimportResult : (package:Symbol)
defstruct PackageUnimported <: UnimportResult : (package:Symbol)

defmethod print (o:OutputStream, r:UnimportResult) :
  print{o, _} $ match(r) :
    (r:PackageNotImported) : "Package %~ has not been imported." % [package(r)]
    (r:PackageUnimported) : "Unimported package %~." % [package(r)]

deftype InsideResult
defstruct AlreadyInside <: InsideResult : (package:Symbol)
defstruct AlreadyOutside <: InsideResult
defstruct ChangedInside <: InsideResult : (old-package:Symbol, new-package:Symbol)
defstruct WentInside <: InsideResult : (package:Symbol)
defstruct WentOutside <: InsideResult : (package:Symbol)

defmethod print (o:OutputStream, r:InsideResult) :
  print{o, _} $ match(r) :
    (r:AlreadyInside) : "REPL environment is already inside package %~." % [package(r)]
    (r:AlreadyOutside) : "REPL environment is not inside any package."
    (r:ChangedInside) : "REPL environment left package %~ and is now inside package %~." % [old-package(r), new-package(r)]
    (r:WentInside) : "REPL environment is now inside package %~." % [package(r)]
    (r:WentOutside) : "REPL environment left package %~." % [package(r)]

;============================================================
;=================== Wrap Display Result ====================
;============================================================

;Helper: Wrap up the last expression (if appropriate) with a call to
;display-repl-result.
defn wrap-display-result (e:IExp) -> IExp :
  match(e) :
    ;Recurse into visibility.
    (e:IVisibility) :
      map(wrap-display-result, e)
    ;Wrap up the last expression in a Begin.
    (e:IBegin) :
      within (e, last?) = map-begin(e) :
        if last? : wrap-display-result(e)
        else : e
    (e) :
      ;If it is an expression, then print out
      ;its result.
      if histanza-expression?(e) :
        IDo(
          IVar(`core/display-repl-result, false),  ;func
          List(e),                                 ;args
          false)                                   ;info      
      ;Otherwise, assume that it doesn't have
      ;a result to print.
      else :
        e

;Helper: Return true if the given expression is a HiStanza expression.
defn histanza-expression? (e:IExp) -> True|False :
  e is IFn|IMulti|IMatch|INew|IVar|ICast|IUpCast|
       IDo|IPrim|ILiteral|ITuple|ILet

;============================================================
;======================== Errors ============================
;============================================================

public defstruct ReplErrors <: Exception :
  messages: Collection
defmethod print (o:OutputStream, e:ReplErrors) :
  print(o, "%n" % [messages(e)])

public deftype ReplError <: Exception

public defstruct ReplHalt <: ReplError
defmethod print (o:OutputStream, e:ReplHalt) :
  print(o, "An error occurred during execution.")

public defstruct InvalidReplExp <: ReplError :
  type:String
defmethod print (o:OutputStream, e:InvalidReplExp) :
  print(o, "The interactive REPL does not support %_ statements." % [type(e)])

public defstruct LoadMultipleScripts <: ReplError :
  script:String
defmethod print (o:OutputStream, e:LoadMultipleScripts) :
  print(o, "Invalid attempt to load script %~ alongside other files. Scripts must be loaded by themselves." % [script(e)])

;============================================================
;======================== REPL Loop =========================
;============================================================

defn script? (exp:Load) -> String|False :
  defn script? (s:String|Symbol) :
    match(s:String) : suffix?(s, ".repl")
  val s = find(script?, inputs(exp))
  match(s:String) :
    if length(inputs(exp)) > 1 :
      throw(ReplErrors([LoadMultipleScripts(s)]))
    s

defn eval-exp (repl:REPL, exp:RExp) :
  match(exp) :
    (exp:Load) :
      match(script?(exp)) :
        (file:String) : run-script(repl, file)
        (_:False) : load-files(repl, inputs(exp), go-inside?(exp))
    (exp:Eval) : load-repl(repl, form(exp))
    (exp:Import) : import(repl, import(exp))
    (exp:Unimport) : unimport(repl, package(exp))
    (exp:Inside) : inside(repl, package(exp))
    (exp:Update) : update-files(repl)
    (exp:Reload) : reload(repl)
    (exp:Clear) : clear(repl)
    (exp:UseSyntax) : use-syntax(repl, inputs(exp), add-to-existing?(exp))

defn run-script (repl:REPL, s:String) :
  try :
    val file = FileInputStream(s)
    try :
      let loop () :
        val exp = read-repl-exp(file)
        match(exp:RExp) :
          eval-exp(repl, exp)
          loop()
    finally :
      close(file)
  catch (e:IOException) :
    throw(ReplErrors([e]))

;============================================================
;==================== Main REPL Loop ========================
;============================================================

;Starts up an interactive REPL.
;Implements the 'stanza repl' command.

public defn repl (args:Tuple<String>,
                  style:TerminalStyle,
                  macro-plugins:Tuple<String>) :
  val repl = REPL(macro-plugins)
 
  ;Create a LoadExp expression out of the command line
  ;arguments. And execute them in the REPL.
  ;If there is an error, then just print them to the
  ;screen.
  defn load-initial-files () -> False :
    try :
      eval-exp(repl, make-load-exp(args, true))
    catch (e:ReplErrors) :
      do(println, messages(e))
    false

  ;Continuously read the next expression from the user
  ;and execute them in the REPL.
  defn* repl-loop () -> False :
    val loop? = 
      try :
        val exp = read-repl-exp(style)
        match(exp:RExp) :
          eval-exp(repl, exp)
          true      
      catch (e:ReplErrors) :
        ;Print out all errors except ReplHalt 
        val msgs = filter({_ is-not ReplHalt}, messages(e))
        do(println, msgs)
        true
    repl-loop() when loop?

  ;Launch!
  try :
    load-initial-files()
    repl-loop()
  finally :
    shutdown(repl)

;============================================================
;=================== Convenience Overloads ==================
;============================================================
;Default args is [].
;Default macro-plugins is [].
;Default terminal-style is default-terminal-style().

public defn repl (style:TerminalStyle) :
  repl([], style, [])
public defn repl (args:Tuple<String>) :
  repl(args, default-terminal-style(), [])
public defn repl () :
  repl([], default-terminal-style(), [])

;============================================================
;==================== Run Immediately =======================
;============================================================

;Execute the given arguments in the virtual
;machine. Implements the 'stanza run' command.
public defn run-in-repl (args:Tuple<String>,
                         macro-plugins:Tuple<String>) :
  val repl = within log-time(REPL-CREATION) :
    REPL(macro-plugins)
  try:
    within log-time(REPL-EXP-EVALUATION) :
      eval-exp(repl, make-load-exp(args, false))
  finally:
    shutdown(repl)
  
defn make-load-exp (args:Tuple<String>, go-inside?:True|False) :
  val inputs = for a in args map :
    if index-of-char(a, '.') is Int : a
    else : to-symbol(a)
  Load(inputs, go-inside?)