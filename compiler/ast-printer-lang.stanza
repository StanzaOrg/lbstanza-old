defpackage stz/ast-printer-lang :
   import core
   import collections
   import macro-utils
   import stz/core-macros

defstruct DefAstPrinter :
   exp: Symbol
   type
   clauses: List<Clause>
defstruct Clause :
   type
   form: Form
deftype Form
defstruct TagForm <: Form :
   tag: Symbol
   fields: List<Field>
defstruct CustomForm <: Form :
   exp
defstruct IfForm <: Form :
   pred
   conseq: Form
   alt: Form

deftype Field
defmulti name (f:Field) -> Symbol
defstruct SField <: Field :
   name:Symbol with: (as-method => true)
defstruct LField <: Field :
   name:Symbol with: (as-method => true)
defstruct RField <: Field :
   name:Symbol with: (as-method => true)

defsyntax stz-printer-lang :
   ;=== Symbols ===
   defn sym? (x) : unwrap-token(x) is Symbol
   defproduction sym: Symbol
   defrule sym = (?x) when sym?(x) : unwrap-token(x)  

   ;=== Imported ===
   import (type, exp) from core

   import exp4 from core
   defrule exp4 = (defprinter (?name:#sym : ?type:#type) :
                      ?clauses:#clause ... ?rest ...) :
      fatal("Not a printer clause: %_" % [rest]) when not empty?(rest)               
      val d = DefAstPrinter(name, type, clauses)
      parse-syntax[core / #exp](compile(d))

   defproduction clause: Clause
   defrule clause = (?t:#type : (?f:#form)) :
      Clause(t, f)
      
   defproduction form: Form   
   defrule form = ((?tag:#sym ?fs:#field ...)) :
      TagForm(tag, fs)
   defrule form = (if ?pred:#exp : ?conseq:#form else : ?alt:#form) :
      IfForm(pred, conseq, alt)
   defrule form = (custom{?exp:#exp}) :
      CustomForm(exp)

   defproduction field: Field
   defrule field = (?name:#sym ~ ...) :
      RField(name)
   defrule field = (?name:#sym) :
      SField(name)
   defrule field = ((?name:#sym ~ ...)) :
      LField(name)

defn format-string (f:TagForm) :
   val o = StringBuffer()
   print(o, "(%_" % [tag(f)])
   for f in fields(f) do :
      print{o, _} $ match(f) :
         (f:SField) : " %~"
         (f:LField) : " (%@)"
         (f:RField) : " %@"
   print(o, ")")
   to-string(o)

defn value-obj (e:Symbol, f:Field) :
   fill-template(`(name(e)), [
      `name => name(f)
      `e => e])

defn compile (e:Symbol, f:Form) :
   match(f) :
      (f:TagForm) :
         val template = `(core/print(#o, str % [vs]))
         fill-template(template, [
            `str => format-string(f)
            `vs => splice(map(value-obj{e, _}, fields(f)))])
      (f:CustomForm) :
         val template = `(core/print(#o, exp))
         fill-template(template, [
            `exp => exp(f)])
      (f:IfForm) :
         val template = `(if pred : conseq else : alt)
         fill-template(template, [
            `pred => pred(f)
            `conseq => compile(e, conseq(f))
            `alt => compile(e, alt(f))])

defn compile (d:DefAstPrinter) :
   val template = `(
      defmethod print (#o:core/OutputStream, e:Type) :
         match(e) :
            clauses{(e:Type) : body})
   fill-template(template, [
      `e => exp(d)
      `Type => type(d)
      `clauses => nested $
         for c in clauses(d) map : [
            `Type => type(c)
            `body => compile(exp(d), form(c))]])