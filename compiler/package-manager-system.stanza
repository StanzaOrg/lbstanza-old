defpackage stz/package-manager-system :
  import core
  import collections
  import stz/foreign-package-manager
  import stz/dir-utils

;This is a standard implementation of the system required by
;the foreign package manager. It just calls the system
;utilities directly.

public defn package-manager-system () -> System :
  new System :
    defmethod read-file (this, filename:String) -> String :
      slurp(filename)

    defmethod write-file (this, filename:String, contents) :
      spit(filename, contents)
    
    defmethod file-exists? (this, filename:String) -> True|False :
      file-exists?(filename)

    defmethod ensure-directory-exists (this, filepath:String) -> False :
      ensure-directory-exists(filepath)

    defmethod call-system (this,
                           prog:String,
                           args:Tuple<String>,
                           workdir:String|False,
                           env-vars:Tuple<KeyValue<String,String>>|False,
                           redirect-output:String|False) -> Int :
      match(redirect-output:String) :
        val out = FileOutputStream(redirect-output)
        try :
          val proc = Process(prog, args, STANDARD-IN, PROCESS-OUT, PROCESS-OUT, workdir, env-vars)
          val proc-out = output-stream(proc)
          let loop () :
            val c = get-char(proc-out)
            match(c:Char) :
              put(out,c)
              loop()
          val state = wait(proc)
          match(state:ProcessDone) :
            value(state)
          else :
            val msg = to-string("Abnormal termination of program %~." % [prog])
            throw(SystemCallException(msg))
        finally :
          close(out)
      else :
        call-system(prog, args, workdir, env-vars)

    defmethod call-system-and-get-output (this,
                                          prog:String,
                                          args:Tuple<String>,
                                          workdir:String|False,
                                          env-vars:Tuple<KeyValue<String,String>>|False) -> String :
      call-system-and-get-output(prog, args, workdir, env-vars)