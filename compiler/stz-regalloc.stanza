#include<"core/stringeater.stanza">
#include<"compiler/stz-algorithms.stanza">
#include<"compiler/stz-lexer.stanza">
#include<"compiler/stz-parser.stanza">

defpackage regalloc :
   import core
   import verse
   import stz/lexer
   import stz/parser
   import stz/algorithms

;============ Input IR =======================
definterface Ref
defmulti name (r:Ref) -> Symbol
defstruct Var <: Ref :
   name: Symbol with : (as-method => true)

definterface Exp
defstruct Args <: Exp :
   xs: List<Ref>
defstruct Set <: Exp :
   x: Ref
   y: Ref
defstruct Op <: Exp :
   xs: List<Ref>
   ys: List<Ref>
defstruct Do <: Exp :
   xs: List<Ref>
   ys: List<Ref>

definterface Block
defmulti name (b:Block) -> Symbol
defmulti exps (b:Block) -> List<Exp>
defmulti next (b:Block) -> List<Symbol>

defstruct SBlock <: Block :
   name: Symbol with : (as-method => true)
   exps: List<Exp> with : (as-method => true)
   next: List<Symbol> with : (as-method => true)

defstruct Program :
   blocks: List<Block>

;========== Parser =====================
defsyntax regir :
   val ut = unwrap-token

   defrule :
      sym = (?x) when ut(x) typeof Symbol : ut(x)

      exp = ((?xs:#sym ...) = args) :
         Args(map(Var,xs))
      exp = (?x:#sym = ?y:#sym) :
         Set(Var(x), Var(y))
      exp = ((?xs:#sym ...) = op(?ys:#sym ...)) :
         Op(map(Var, xs), map(Var, ys))
      exp = ((?xs:#sym ...) = f(?ys:#sym ...)) :
         Do(map(Var, xs), map(Var, ys))

      block = (block ?name:#sym :
                  ?es:#exp ...
                  goto (?ns:#sym ...)) :
         SBlock(name, es, ns)

      prog = (?bs:#block ...) :
         Program(bs)

defn parse-regir (filename:String) -> List<Program> :
   val lexed = lex-file(filename)
   with-syntax(regir) :
      match-syntax(lexed) :
         ((test : (?ps:#prog)) @...) : ps

;========== Working IR ==================
definterface Loc
defstruct Stack <: Loc
defstruct Reg <: Loc
defstruct Dead <: Loc
defstruct Unknown <: Loc

;defstruct LVar <: Ref :
;   name: Symbol with : (as-method => true)
;   loc: Loc

defstruct GetArgs <: Exp :
   xs: List<Ref>
   locs: List<Loc>
defstruct SetArgs <: Exp :
   xs: List<Ref>
defstruct Call <: Exp :
   live: List<Ref>
defstruct Save <: Exp :
   x: Ref
defstruct Load <: Exp :
   x: Ref

defstruct LBlock <: Block :
   name: Symbol with: (as-method => true)
   exps: List<Exp> with: (as-method => true)
   next: List<Symbol> with: (as-method => true)
   live-in: List<Ref>
   save-in: List<True|False>
   load-in: List<True|False>
   live-out: List<Ref>
   save-out: List<True|False>
   load-out: List<True|False>
   dist-out: List<Int>


;=========== Printing =====================
defn cms (xs) : join(xs, ", ")

defmethod print (o:OutputStream, p:Program) :
   for b in join(blocks(p), "\n") do :
      print(o, b)

defmethod print (o:OutputStream, b:SBlock) :
   print(o, "block ~ :" << [name(b)])
   for e in exps(b) do :
      print(o, "\n   ~" << [e])
   print(o, "\n   goto (~@)" << [cms(next(b))])

defmethod print (o:OutputStream, b:LBlock) :
   defn pio (x:Ref, s:True|False, l:True|False) :
      "~:~~" << [
         x,
         "S" when s else ""
         "L" when l else ""]
   defn pios (xs:List<Ref>,
              ss:List<True|False>,
              ls:List<True|False>) :
      stream(pio, xs, ss, ls)

   print(o, "lblock ~ :" << [name(b)])
   for e in exps(b) do :
      print(o, "\n   ~" << [e])
   print(o, "\n   goto (~@)" << [cms(next(b))])
   print(o, "\n   live-in: (~@)" << [cms(pios(live-in(b), save-in(b), load-in(b)))])
   print(o, "\n   live-out: (~@)" << [cms(pios(live-out(b), save-out(b), load-out(b)))])
   print(o, "\n   dist-out: (~@)" << [cms(dist-out(b))])

defmethod print (o:OutputStream, e:Exp) :
   defn ploc (x:Ref, l:Loc) : "~:~" << [x, l]
   defn plocs (xs:List<Ref>, ls:List<Loc>) : stream(ploc, xs, ls)
   print{o, _} $ match(e) :
      (e:Args) : "(~@) = args" << [cms(xs(e))]
      (e:Set) : "~ = ~" << [x(e), y(e)]
      (e:Op) : "(~@) = op(~@)" << [cms(xs(e)), cms(ys(e))]
      (e:Do) : "(~@) = f(~@)" << [cms(xs(e)), cms(ys(e))]
      (e:GetArgs) : "(~@) = Args" << [cms(plocs(xs(e), locs(e)))]
      (e:SetArgs) : "Args = (~@)" << [cms(xs(e))]
      (e:Call) : "Call with live: (~@)" << [cms(live(e))]
      (e:Save) : "save ~" << [x(e)]
      (e:Load) : "load ~" << [x(e)]

defmethod print (o:OutputStream, r:Ref) :
   print{o, _} $ match(r) :
      (r:Var) : name(r)
;      (r:LVar) : "~:~" << [name(r), loc(r)]

defmethod print (o:OutputStream, l:Loc) :
   print{o, _} $ match(l) :
      (l:Stack) : "stk"
      (l:Reg) : "reg"
      (l:Dead) : "X"
      (l:Unknown) : "?"

;====== Working Form ======
defn working-form (b:Block) :
   val exp-list = Vector<Exp>()
   defn #uk (xs:List) : map(Unknown{}, xs)
   defn #get-args (xs:List<Ref>) : GetArgs(xs, #uk(xs))
   defn #call () : Call(List())
   defn #lblock (es:List<Exp>) :
      val el = List()
      LBlock(name(b), es, next(b), el, el, el, el, el, el, el)
   defn #emit (e:Exp) : add(exp-list, e)

   for e in exps(b) do :
      match(e) :
         (e:Args) :
            #emit(#get-args(xs(e)))
         (e:Do) :
            #emit(SetArgs(ys(e)))
            #emit(#call())
            #emit(#get-args(xs(e)))
         (e) :
            #emit(e)
   #lblock(to-list(exp-list))

defn working-form (p:Program) :
   Program(map(working-form, blocks(p)))

;======== Liveness Analysis ============
;Block based liveness analysis
defstruct BlockLiveness :
   live-in: HashTable<Symbol,List<Symbol>>
   live-out: HashTable<Symbol,List<Symbol>>
   defs: HashTable<Symbol,List<Symbol>>

defmethod print (o:OutputStream, x:BlockLiveness) :
   defn ptable (name:String, t:HashTable) :
      print(o, "~: " << [name])
      for entry in t do :
         print(o, "\n   ~ : (~@)" << [key(entry), cms(value(entry))])
   ptable("Live In", live-in(x))
   ptable("\nLive Out", live-out(x))
   ptable("\nDefs", defs(x))

defn liveness-analysis (p:Program) :
   ;====== State ======
   defn bhash ([b,x]:[Symbol,Symbol]) : 7 * symbol-hash(b) + symbol-hash(x)
   val lengths = HashTable<Symbol,Int>(symbol-hash)
   val live-in-table = HashTable<[Symbol,Symbol], Int>(bhash)
   val live-out-table = HashTable<[Symbol,Symbol], Int>(bhash)
   val defs = HashTable<[Symbol,Symbol], True>(bhash)
   val pred-table = HashTable<Symbol,List<Symbol>>(symbol-hash)
   var changed: () -> False = {false}

   ;====== Utilities ======
   defn #def? (b:Symbol, x:Symbol) : key?(defs, [b, x])
   defn #def? (b:Block, x:Symbol) : #def?(name(b), x)
   defn #def? (b:Block, x:Ref) : #def?(b, name(x))
   defn #def (b:Block, x:Symbol) : defs[[name(b), x]] = true
   defn #def (b:Block, x:Ref) : #def(b, name(x))
   defn #def (b:Block, xs:List<Ref|Symbol>) : do(#def{b, _}, xs)
   defn #add-live-in (b:Block, x:Ref, i:Int) : #add-live-in(name(b), name(x), i)
   defn #add-live-in (b:Symbol, x:Symbol, i:Int) :
      val k = [b, x]
      defn update () :
         live-in-table[k] = i
         changed()
      match(get?(live-in-table, k, false)) :
         (i2:Int) : update() when i < i2
         (i2:False) : update()
   defn #add-live-out (b:Symbol, x:Symbol, i:Int) :
      val k = [b, x]
      defn update () :
         live-out-table[k] = i
         changed()
      match(get?(live-out-table, k, false)) :
         (i2:Int) : update() when i < i2
         (i2:False) : update()
   defn #add-pred (b:Symbol, p:Symbol) :
      pred-table[b] = List(p, get?(pred-table, b, List()))
   defn #add-pred (b:Symbol, p:Block) :
      #add-pred(b, name(p))
   defn #set-length (b:Block, n:Int) : lengths[name(b)] = n
   defn #length (b:Symbol) : lengths[b]
   defn #pred (b:Symbol) : get?(pred-table, b, List())

   ;====== Algorithm ======
   ;Base case analysis of a block
   defn compute-block-liveness (b:Block) :
      ;Utilities
      defn #use (x:Ref, i:Int) : #add-live-in(b, x, i) when not #def?(b, x)
      defn #use (xs:List<Ref>, i:Int) : do(#use{_, i}, xs)

      ;Analyze defs and uses
      for (e in exps(b), i in 0 to false) do :
         match(e) :
            (e:GetArgs) : #def(b, xs(e))
            (e:SetArgs) : #use(xs(e), i)
            (e:Set) : (#use(y(e), i), #def(b, x(e)))
            (e:Op) : (#use(ys(e), i), #def(b, xs(e)))
            (e:Call) : false
      #set-length(b, length(exps(b)))
      do(#add-pred{_, b}, next(b))

   ;Propagation analysis of a block
   defn propagate-block-liveness () :
      fixpoint $ fn (progress) :
         let-var changed = progress :
            ;Propagate live-ins to live-outs
            for e in live-in-table do :
               val [b, x] = key(e)
               val d = value(e)
               for p in #pred(b) do :
                  #add-live-out(p, x, d)
            ;Propagate live-outs to live-ins
            for e in live-out-table do :
               val [b, x] = key(e)
               val d = value(e)
               if not #def?(b, x) :
                  #add-live-in(b, x, d + #length(b))

   ;Compute interblock liveness
   defn accumulate-table (t:HashTable<[Symbol,Symbol],?>) :
      val accum = HashTable<Symbol,List<Symbol>>(symbol-hash)
      for [k v] in keys(t) do :
         accum[k] = List(v, get?(accum, k, List()))
      accum
   do(compute-block-liveness, blocks(p))
   propagate-block-liveness()
   val live-in-lists = accumulate-table(live-in-table)
   val live-out-lists = accumulate-table(live-out-table)
   defn #live-in (b:Block) : get?(live-in-lists, name(b), List())
   defn #live-out (b:Block) : get?(live-out-lists, name(b), List())

   ;Finegrained liveness calculation within block
   defn compute-intrablock-liveness (b:Block) :
      ;State
      val live = HashTable<Symbol,True|False>(symbol-hash)
      val exp-list = Vector<Exp>()
   
      ;Utilities
      defn #live? (x:Ref) : get?(live, name(x), false)
      defn #set-live (x:Symbol, l:True|False) : live[x] = l
      defn #set-live (x:Ref, l:True|False) : #set-live(name(x), l)
      defn #set-live (xs:List<Symbol|Ref>, l:True|False) : do(#set-live{_, l}, xs)
      defn #live () : to-list(stream(Var{key(_)}, filter(value, live)))
      defn #loc (x:Ref) : Unknown() when #live?(x) else Dead()
      defn #locs (xs:List<Ref>) : map(#loc, xs)
      defn #with-live (e:Exp) :
         match(e) :
            (e:Call) : Call(#live())
            (e:GetArgs) : GetArgs(xs(e), #locs(xs(e)))
            (e) : e
      defn #emit (e:Exp) : add(exp-list, e)
      defn #live-exps () :
         to-list $
         for i in (length(exp-list) - 1) through 0 by -1 stream :
            exp-list[i]
      defn #var (xs:List<Symbol>) : map(Var, xs)
      defn #f (xs:List) : map({false}, xs)
      defn #dist (x:Symbol) : live-out-table[[name(b), x]]
      defn #dist (xs:List<Symbol>) : map(#dist, xs)
   
      ;Algorithm
      #set-live(#live-out(b), true)
      for e in reverse(exps(b)) do :
         #emit(#with-live(e))
         match(e) :
            (e:GetArgs) : #set-live(xs(e), false)
            (e:SetArgs) : #set-live(xs(e), true)
            (e:Set) : (#set-live(x(e), false), #set-live(y(e), true))
            (e:Op) : (#set-live(xs(e), false), #set-live(ys(e), true))
            (e:Call) : false
   
      LBlock(name(b),
             #live-exps(),
             next(b),
             #var(#live-in(b))
             #f(#live-in(b))
             #f(#live-in(b))
             #var(#live-out(b))
             #f(#live-out(b))
             #f(#live-out(b))
             #dist(#live-out(b)))

   Program(map(compute-intrablock-liveness, blocks(p)))


;====== Save/Load Emission ======
defn emit-save-load (b:LBlock) :
   ;Utilities
   defn #live-in () : live-in(b)

   ;====== Implementation ======
   ;Save live values onto the stack.
   defn emit-saves (es:List<Exp>) :
      ;State
      val save-req = HashTable<Symbol,True|False>(symbol-hash)
      val exp-list = Vector<Exp>()

      ;Utilities
      defn #req-save? (x:Ref) : get?(save-req, name(x), false)
      defn #req-save? (xs:List<Ref>) : map(#req-save?, xs)
      defn #req-save (x:Ref, v:True|False) : save-req[name(x)] = v
      defn #req-save (xs:List<Ref>, v:True|False) : do(#req-save{_, v}, xs)
      defn #emit (e:Exp) : add(exp-list, e)
      defn #save (xs:List<Ref>) : do(#save, xs)
      defn #save (x:Ref) :
         #emit(Save(x)) when #req-save?(x)
         #req-save(x, false)
      defn #reverse (es:Vector<Exp>) :
         for i in (length(es) - 1) through 0 by -1 stream :
            es[i]

      ;Algorithm
      for e in reverse(es) do :
         ;Save defined values if required
         match(e) :
            (e:GetArgs) :
               defn save-loc (x:Ref, l:Loc) :
                  l when l typeof Dead else
                  Stack() when #req-save?(x) else
                  Reg()
               val locs* = map(save-loc, xs(e), locs(e))
               #emit(GetArgs(xs(e), locs*))
            (e:SetArgs) :
               #emit(e)
            (e:Set) :
               #save(x(e))
               #emit(e)
            (e:Op) :
               #save(xs(e))
               #emit(e)
            (e:Call) :
               #emit(e)
               #req-save(live(e), true)

      ;Results
      val es* = #reverse(exp-list)
      val save-in = #req-save?(#live-in())
      [es*, save-in]

   ;Load arguments into registers before operating.
   defn emit-loads (es:Streamable<Exp>) :
      ;State
      val loaded = HashTable<Symbol,True|False>(symbol-hash)
      val load-in-table = HashTable<Symbol,True|False>(symbol-hash)
      val exp-list = Vector<Exp>()

      ;Utilities
      defn #emit (e:Exp) : add(exp-list, e)
      defn #set-load-in (x:Ref, v:True|False) : load-in-table[name(x)] = v
      defn #set-loaded (x:Ref, v:True|False) : loaded[name(x)] = v
      defn #set-loaded (xs:List<Ref>, v:True|False) : do(#set-loaded{_, v}, xs)
      defn #set-loaded (xs:List<Ref>, vs:List<True|False>) : do(#set-loaded, xs, vs)
      defn #load-in? (x:Ref) : get?(load-in-table, name(x), false)
      defn #load-in? (xs:List<Ref>) : map(#load-in?, xs)
      defn #reg? (l:Loc) : l typeof Reg
      defn #reg? (ls:List<Loc>) : map(#reg?, ls)
      defn #load (xs:List<Ref>) : do(#load, xs)
      defn #load (x:Ref) :
         match(get?(loaded, name(x), `any)) :
            (l:Symbol) : #set-load-in(x, true)
            (l:True) : false
            (l:False) : #emit(Load(x))
         #set-loaded(x, true)

      ;Algorithm
      for e in es do :
         ;Load operands if required
         match(e) :
            (e:GetArgs) : false
            (e:SetArgs) : false
            (e:Set) : #load(y(e))
            (e:Op) : #load(ys(e))
            (e:Call) : false
            (e:Save) : false
         ;Emit the expression
         #emit(e)
         ;Determine if load is required
         match(e) :
            (e:GetArgs) : #set-loaded(xs(e), #reg?(locs(e)))
            (e:SetArgs) : false
            (e:Set) : #set-loaded(x(e), true)
            (e:Op) : #set-loaded(xs(e), true)
            (e:Call) : #set-loaded(live(e), false)
            (e:Save) : false

      val load-in = #load-in?(#live-in())
      [exp-list, load-in]

   ;====== Driver ======
   val [saved, save-in] = emit-saves(exps(b))
   val [loaded, load-in] = emit-loads(saved)
   LBlock(name(b),
          to-list(loaded),
          next(b),
          live-in(b),
          save-in,
          load-in,
          live-out(b),
          save-out(b),
          load-out(b)
          dist-out(b))

defn emit-save-load (p:Program) :
   val bs = blocks(p) as List<LBlock>
   Program(map(emit-save-load, bs))


;====== Release ======
defn compute-release (b:LBlock) :
   val exps = to-array(exps(b))
   val n = length(exps)
   val live = HashTable<Symbol,True|False>(symbol-hash)
   val last-use-list = Array<List<Symbol>>(n, List())
   val no-use-list = Array<List<Symbol>>(n, List())

   defn #set-live (x:Ref, v:True|False) : live[name(x)] = v
   defn #set-live (xs:Streamable<Ref>, v:True|False) : do(#set-live{_, v}, xs)
   defn #live? (x:Ref) : get?(live, name(x), false)
   defn #live? (x:Ref, l:Loc) : l not-typeof Dead

   #set-live(live-out(b), true)
   for i in (n - 1) through 0 by -1 do :
      ;====== Utilities ======
      var last-uses:List<Symbol> = List()
      var no-uses:List<Symbol> = List()
      defn #def (x:Ref) :
         if not #live?(x) : no-uses = List(name(x), no-uses)
         #set-live(x, false)
      defn #use (x:Ref) :
         if not #live?(x) : last-uses = List(name(x), last-uses)
         #set-live(x, true)
      defn #def (xs:Streamable<Ref>) : do(#def, xs)
      defn #use (xs:Streamable<Ref>) : do(#use, xs)

      ;====== Algorithm ======
      match(exps[i]) :
         (e:GetArgs) : #def(filter(#live?, xs(e), locs(e)))
         (e:SetArgs) : #use(xs(e))
         (e:Set) : (#def(x(e)), #use(y(e)))
         (e:Op) : (#def(xs(e)), #use(ys(e)))
         (e:Call) : false
         (e:Save) : (#use(x(e)))
         (e:Load) : (#def(x(e)))

      last-use-list[i] = last-uses
      no-use-list[i] = no-uses

   val release-list = Array<List<Symbol>>(n)
   for i in 0 to n do :
      release-list[i] = unique $
         if i > 0 : concat(last-use-list[i], no-use-list[i - 1])
         else : last-use-list[i]
   release-list
   

;====== Time to Use ======
defn compute-time-to-use (b:LBlock) :
   val exps = to-array(exps(b))
   val n = length(exps)
   val dist-table = HashTable<Symbol,Int|False>(symbol-hash)
   val times = Array<List<KeyValue<Symbol,Int>>>(n + 1)

   defn #def (x:Ref) : dist-table[name(x)] = false
   defn #def (xs:Streamable<Ref>) : do(#def, xs)
   defn #use (x:Ref, i:Int) : dist-table[name(x)] = i
   defn #use (xs:List<Ref>, i:Int) : do(#use{_, i}, xs)
   defn #use (xs:List<Ref>, is:List<Int>) : do(#use, xs, is)
   defn #n-out () : map({_ + n}, dist-out(b))
   defn #live? (x:Ref, l:Loc) : l not-typeof Dead
   defn #live? (e:KeyValue<Symbol,Int|False>) : value(e) typeof Int
   
   #use(live-out(b), #n-out())
   for i in (n - 1) through 0 by -1 do :
      times[i + 1] = to-list(filter(#live?, dist-table)) as List<KeyValue<Symbol,Int>>      
      match(exps[i]) :
         (e:GetArgs) : #def(filter(#live?, xs(e), locs(e)))
         (e:SetArgs) : #use(xs(e), i)
         (e:Set) : (#def(x(e)), #use(y(e), i))
         (e:Op) : (#def(xs(e)), #use(ys(e), i))
         (e:Call) : false
         (e:Save) : #use(x(e), i)
         (e:Load) : #def(x(e))
   times[0] = to-list(filter(#live?, dist-table)) as List<KeyValue<Symbol,Int>>      

   times




;====== Finite Register Allocation ======
;defstruct Use
;defstruct Def

defn finite-register-allocation (b:LBlock) :
   ;====== State ======
   var num-reg = 0
   val loaded = HashTable<Symbol,True|False>(symbol-hash)
   val exp-list = Vector<Exp>()

   ;====== Utilities ======
   defn #set-loaded (x:Ref, v:True|False) : loaded[name(x)] = v
   defn #set-loaded (xs:List<Ref>, v:True|False) : do(#set-loaded{_, v}, xs)
   defn #load (x:Ref) :
      println("Load ~" << [x])
      #emit(Load(x))
      num-reg = num-reg + 1
      println("Num-reg increased to ~" << [num-reg])
      #set-loaded(x, true)
   defn #use (x:Ref) :
      println("~ is used." << [x])
      #load(x) when not loaded[name(x)]
   defn #release (x:Ref) :
      println("Release ~" << [x])
      num-reg = num-reg - 1
      println("Num-reg decreased to ~" << [num-reg])
      #set-loaded(x, false)
   defn #def (x:Ref) :
      println("~ was defined." << [x])
      num-reg = num-reg + 1
      println("Num-reg increased to ~" << [num-reg])
      #set-loaded(x, true)
   defn #use (xs:List<Ref>) : do(#use, xs)
   defn #def (xs:List<Ref>) : do(#def, xs)
   defn #release (xs:List<Ref>) : do(#release, xs)
   defn #emit (e:Exp) : add(exp-list, e)

   println("=== Try to allocate ===")
   do(println, exps(b))
   println("=== Work ===")

   ;====== Algorithm ======
   Basic Operations :
      Spill :
         Let v = argmax(v in VL) s.t. time-used(v)
         emit(Save(v))
         Loaded(v) = false
         nr = nr - 1
      Load(y) :
         if not Loaded(y) :
            Spill when nr == N
            emit(Load(y))
            Loaded(y) = true
            nr = nr + 1
      Alloc(n) :
         while nr + n > N : Spill()
      Release(x) :
         if Loaded(x) :
            nr = nr - 1
            Loaded(x) = false         
         
   Track the number of registers currently being used :
      This count increases for every new value that is assigned to a register.
      It decreases for every value in a register that is released.
      It drops to zero after a call, because calls destroys register contents.

   Track which values are loaded :
      A value is loaded when assigned to a register.
      A value is unloaded after a call, because calls destroys register contents.
      A value is unloaded if we spill it to the stack.

   Spilling a value :
      If the value is a value upon entry :
         Note that we expect the value to be on the stack on block entry.
      Otherwise :
         Emit a save for the value.
         Decrease the number of registers used.
      Make a note that the value is no longer loaded.
      
   Step through expressions in forward order :
      Every instruction uses, releases, and defines new values.
      Uses :
         Ensure that values that need to be in registers are loaded.
      Releases :
         Decrease the number of registers used appropriately for each released value.
      Defines :
         For each defined register value ensure there is a free
         register to store it into by spilling the latest used value.
         For GetArg nodes, we simply store the value on the stack if it is spilled.

   #set-loaded(#live-in(), true)
   num-reg = num-reg + length(#live-in())
   for [e, rs] in exps-with-release() do :
      println("Considering: ~ with releases: ~@" << [e, cms(rs)])
      match(e) :
         (e:Args) :
            #release(rs)
            #def(xs(e))
         (e:Set) :
            #use(y(e))
            #release(rs)
            #def(x(e))
         (e:Op) :
            #use(ys(e))
            #release(rs)
            #def(xs(e))
         (e:Do) :
            #use(ys(e))
            #release(rs)
            #def(xs(e))
         (e:Save) :
            #use(x(e))
            #release(rs)
         (e:Load) :
            #release(rs)
            #def(x(e))
      #emit(e)
      println("After expression ~, num-reg = ~" << [e, num-reg])

   ;====== Print out Result ======
   println("=== Result ===")
   for e in exp-list do :
      println(e)



;;========== Spill Registers =============
;defn spill-registers (b:LBlock, N:Int) :
;   val last-uses = compute-last-use(b)
;   val next-uses = compute-uses(b)
;
;   ;Kill and Birth
;   var n:Int = 0
;   val live = HashTable<Symbol,True|False>(symbol-hash)
;   defn kill (x:Ref) :
;      if live[name(x)] :
;         live[name(x)] = false
;         n = n - 1
;   defn birth (x:Ref) :
;      if get?(live, name(x), false) :
;         live[name(x)] = true
;         n = n + 1
;
;   ;Spilling and Loading
;   val accum = Vector<Exp>()
;   defn spill (x:Ref) :
;      add(accum, Save(x))
;      kill(x)
;   defn load (x:Ref) :
;      add(accum, Load(x))
;      birth(x)
;
;   defn spill (es:List<Exp>) :
;      for (e in es, killed in last-uses, uses in next-uses) do :
;         ;Marking and Ensuring Live
;         defn reserve-reg () :
;            if n >= N :
;               val uses* = reverse(find-next-uses(uses))
;               val v = for v in uses* find :
;                  get?(live, v, false)
;               spill(Var(v as Symbol))
;         defn mark-live (x:Ref) :
;            reserve-reg()
;            birth(x)
;         defn ensure-live (x:Ref) :
;            if not live[name(x)] :
;               reserve-reg()
;               load(x)
;
;         match(e) :
;            (e:Args) :
;               do(mark-live{Var(_)}, xs(e))
;               add(accum, e)
;            (e:Set) :
;               ensure-live(y(e))
;               do(kill, killed)
;               mark-live(x(e))
;               add(accum, e)
;            (e:Op) :
;               do(ensure-live, ys(e))
;               do(kill, killed)
;               do(mark-live, xs(e))
;               add(accum, e)
;;            (e:Do) :
;;               do(
;;
;;
;;               do(mark-use, ys(e)) ;;asdfasdf
;            (e:Save) :
;               kill(x(e))
;               add(accum, e)
;            (e:Load) :
;               mark-live(x(e))
;               add(accum, e)
;
;
;defn compute-last-use (p:Program) :
;   for b in blocks(p) as List<LBlock> do :
;      println("Block ~:" << [name(b)])
;      val lu = compute-last-use(b)
;      val us = compute-uses(b)
;      for (e in exps(b), u in lu, us in us) do :
;         if empty?(u): println("   ~ USES(~@)" << [e, cms(us)])
;         else : println("   ~  KILLED(~@) USES(~@)" << [e, cms(u), cms(us)])




;========= Driver ======================
defn test (p:Program) :
   println("====== Test ======")
   println(p)
   println("====== Working Form ======")
   val p1 = working-form(p)
   println(p1)
   println("====== Liveness Analysis ======")
   val p2 = liveness-analysis(p1)
   println(p2)
   println("====== Emit Save/Load ======")
   val p3 = emit-save-load(p2)
   println(p3)
   println("====== Release/Time to Use ======")
   for b in blocks(p3) as List<LBlock> do :      
      val rs = compute-release(b)
      val ts = compute-time-to-use(b)
      for (e in exps(b), i in 0 to false) do :
         println("~: ~, release ~@, time ~@" << [i, e, cms(rs[i]), cms(ts[i])])
   println("==================\n\n\n")

defn main () :
   val filename = commandline-arguments()[1]
   val progs = parse-regir(filename)
   do(test, progs)

main()