#include<"core/stringeater.stanza">
#include<"compiler/stz-algorithms.stanza">
#include<"compiler/stz-lexer.stanza">
#include<"compiler/stz-parser.stanza">

defpackage regalloc :
   import core
   import verse
   import stz/lexer
   import stz/parser
   import stz/algorithms

;============ Input IR =======================
definterface Ref
defmulti name (r:Ref) -> Symbol
defstruct Var <: Ref :
   name: Symbol with : (as-method => true)   

definterface Exp
defstruct Args <: Exp :
   xs: List<Ref>
defstruct Set <: Exp :
   x: Ref
   y: Ref
defstruct Op <: Exp :
   xs: List<Ref>
   ys: List<Ref>
defstruct Do <: Exp :
   xs: List<Ref>
   ys: List<Ref>

definterface Block
defmulti name (b:Block) -> Symbol
defmulti exps (b:Block) -> List<Exp>
defmulti next (b:Block) -> List<Symbol>

defstruct SBlock <: Block :
   name: Symbol with : (as-method => true)
   exps: List<Exp> with : (as-method => true)
   next: List<Symbol> with : (as-method => true)

defstruct Program :
   blocks: List<Block>

;========== Parser =====================
defsyntax regir :
   val ut = unwrap-token

   defrule :
      sym = (?x) when ut(x) typeof Symbol : ut(x)

      exp = ((?xs:#sym ...) = args) :
         Args(map(Var,xs))
      exp = (?x:#sym = ?y:#sym) :
         Set(Var(x), Var(y))
      exp = ((?xs:#sym ...) = op(?ys:#sym ...)) :
         Op(map(Var, xs), map(Var, ys))
      exp = ((?xs:#sym ...) = f(?ys:#sym ...)) :
         Do(map(Var, xs), map(Var, ys))

      block = (block ?name:#sym :
                  ?es:#exp ...
                  goto (?ns:#sym ...)) :
         SBlock(name, es, ns)

      prog = (?bs:#block ...) :
         Program(bs)

defn parse-regir (filename:String) -> List<Program> :
   val lexed = lex-file(filename)
   with-syntax(regir) :
      match-syntax(lexed) :
         ((test : (?ps:#prog)) @...) : ps

;========== Working IR ==================
definterface Loc
defstruct Stack <: Loc
defstruct Reg <: Loc

defstruct Status :
   saved?: True|False
   loaded?: True|False

defstruct Dead <: Ref

defstruct LVar <: Ref :
   name: Symbol with : (as-method => true)
   loc: Loc

defstruct GetArgs <: Exp :
   xs: List<Ref>
   locs: List<Loc>
defstruct SetArgs <: Exp :
   xs: List<Ref>
defstruct Call <: Exp :
   live: List<Ref>
defstruct Save <: Exp :
   x: Ref
defstruct Load <: Exp :
   x: Ref

defstruct LBlock <: Block :
   name: Symbol with: (as-method => true)
   exps: List<Exp> with: (as-method => true)
   next: List<Symbol> with: (as-method => true)
   live-in: List<Ref>
   status-in: List<Status>
   live-out: List<Ref>
   status-out: List<Status>
   dist-out: List<Int>

;=========== Printing =====================
defn cms (xs) : join(xs, ", ")

defmethod print (o:OutputStream, p:Program) :
   for b in join(blocks(p), "\n") do :
      print(o, b)

defmethod print (o:OutputStream, b:SBlock) :
   print(o, "block ~ :" << [name(b)])
   for e in exps(b) do :
      print(o, "\n   ~" << [e])
   print(o, "\n   goto (~@)" << [cms(next(b))])

defmethod print (o:OutputStream, s:Status) :
   print{o, _} $ match(saved?(s), loaded?(s)) :
      (s:True, l:True) : "SL"
      (s:True, l:False) : "S"
      (s:False, l:True) : "L"
      (s:False, l:False) : "?"

defmethod print (o:OutputStream, b:LBlock) :
   defn ps (x:Ref, s:Status) : "~:~" << [x, s]
   defn ps (xs:List<Ref>, ss:List<Status>) : stream(ps, xs, ss)
   print(o, "lblock ~ :" << [name(b)])
   for e in exps(b) do :
      print(o, "\n   ~" << [e])
   print(o, "\n   goto (~@)" << [cms(next(b))])
   print(o, "\n   live-in: (~@)" << [cms(ps(live-in(b), status-in(b)))])
   print(o, "\n   live-out: (~@)" << [cms(ps(live-out(b), status-out(b)))])
   print(o, "\n   dist-out: (~@)" << [cms(dist-out(b))])

defmethod print (o:OutputStream, e:Exp) :
   defn ploc (x:Ref, l:Loc) : "~:~" << [x, l]
   defn plocs (xs:List<Ref>, ls:List<Loc>) : stream(ploc, xs, ls)
   print{o, _} $ match(e) :
      (e:Args) : "(~@) = args" << [cms(xs(e))]
      (e:Set) : "~ = ~" << [x(e), y(e)]
      (e:Op) : "(~@) = op(~@)" << [cms(xs(e)), cms(ys(e))]
      (e:Do) : "(~@) = f(~@)" << [cms(xs(e)), cms(ys(e))]
      (e:GetArgs) : "(~@) = Args" << [cms(plocs(xs(e), locs(e)))]
      (e:SetArgs) : "Args = (~@)" << [cms(xs(e))]
      (e:Call) : "Call with live: (~@)" << [cms(live(e))]
      (e:Save) : "save ~" << [x(e)]
      (e:Load) : "load ~" << [x(e)]

defmethod print (o:OutputStream, r:Ref) :
   print{o, _} $ match(r) :
      (r:Var) : name(r)
      (r:Dead) : "dead"
      (r:LVar) : "~:~" << [name(r), loc(r)]
;      (r:LVar) : "~:~" << [name(r), loc(r)]

defmethod print (o:OutputStream, l:Loc) :
   print{o, _} $ match(l) :
      (l:Stack) : "stk"
      (l:Reg) : "reg"

;====== Working Form ======
defn working-form (b:Block) :
   val exp-list = Vector<Exp>()
   defn #call () : Call(List())
   defn #lblock (es:List<Exp>) :
      val el = List()
      LBlock(name(b), es, next(b), el, el, el, el, el)
   defn #emit (e:Exp) : add(exp-list, e)

   ;for e in exps(b) do :
   ;   match(e) :
   ;      (e:Args) :
   ;         #emit(#get-args(xs(e)))
   ;      (e:Do) :
   ;         #emit(SetArgs(ys(e)))
   ;         #emit(#call())
   ;         #emit(#get-args(xs(e)))
   ;      (e) :
   ;         #emit(e)
   ;#lblock(to-list(exp-list))
   #lblock(exps(b))

defn working-form (p:Program) :
   Program(map(working-form, blocks(p)))

;======== Liveness Analysis ============
defn liveness-analysis (p:Program) :
   ;====== State ======
   defn bhash ([b,x]:[Symbol,Symbol]) : 7 * symbol-hash(b) + symbol-hash(x)
   val lengths = HashTable<Symbol,Int>(symbol-hash)
   val live-in-table = HashTable<[Symbol,Symbol], Int>(bhash)
   val live-out-table = HashTable<[Symbol,Symbol], Int>(bhash)
   val defs = HashTable<[Symbol,Symbol], True>(bhash)
   val pred-table = HashTable<Symbol,List<Symbol>>(symbol-hash)
   var changed: () -> False = {false}

   ;====== Utilities ======
   defn #def? (b:Symbol, x:Symbol) : key?(defs, [b, x])
   defn #def? (b:Block, x:Symbol) : #def?(name(b), x)
   defn #def? (b:Block, x:Ref) : #def?(b, name(x))
   defn #def (b:Block, x:Ref) : #def(b, name(x))
   defn #def (b:Block, xs:List<Ref|Symbol>) : do(#def{b, _}, xs)
   defn #use (b:Block, xs:List<Ref>, i:Int) : do(#use{b, _, i}, xs)
   defn #add-live-in (b:Block, x:Ref, i:Int) : #add-live-in(name(b), name(x), i)
   defn #add-pred (b:Symbol, p:Symbol) : pred-table[b] = List(p, get?(pred-table, b, List()))
   defn #add-pred (b:Symbol, p:Block) : #add-pred(b, name(p))
   defn #set-length (b:Block, n:Int) : lengths[name(b)] = n
   defn #length (b:Symbol) : lengths[b]
   defn #pred (b:Symbol) : get?(pred-table, b, List())

   ;====== Computing the Block Liveness ======
   defn #def (b:Block, x:Symbol) :
      defs[[name(b), x]] = true

   defn #use (b:Block, x:Ref, i:Int) :
      #add-live-in(b, x, i) when not #def?(b, x)
   
   defn #add-live-in (b:Symbol, x:Symbol, i:Int) :
      val k = [b, x]
      defn update () :
         live-in-table[k] = i
         changed()
      match(get?(live-in-table, k, false)) :
         (i2:Int) : update() when i < i2
         (i2:False) : update()
         
   defn #add-live-out (b:Symbol, x:Symbol, i:Int) :
      val k = [b, x]
      defn update () :
         live-out-table[k] = i
         changed()
      match(get?(live-out-table, k, false)) :
         (i2:Int) : update() when i < i2
         (i2:False) : update()

   defn compute-block-liveness (b:Block) :
      ;Analyze defs and uses
      for (e in exps(b), i in 0 to false) do :
         match(e) :
            ;(e:GetArgs) : #def(b, xs(e))
            ;(e:SetArgs) : #use(b, xs(e), i)
            (e:Set) : (#use(b, y(e), i), #def(b, x(e)))
            (e:Op) : (#use(b, ys(e), i), #def(b, xs(e)))
            ;(e:Call) : false
            (e:Args) : #def(b, xs(e))
            (e:Do) : (#use(b, ys(e), i), #def(b, xs(e)))
            
      ;Record length of block      
      #set-length(b, length(exps(b)))
      
      ;Record predecessors of block
      do(#add-pred{_, b}, next(b))

   ;====== Propagating Liveness ======
   ;Propagation analysis of a block
   defn propagate-block-liveness () :
      fixpoint $ fn (progress) :
         let-var changed = progress :
            ;Propagate live-ins to live-outs
            for e in live-in-table do :
               val [b, x] = key(e)
               val d = value(e)
               for p in #pred(b) do :
                  #add-live-out(p, x, d)
            ;Propagate live-outs to live-ins
            for e in live-out-table do :
               val [b, x] = key(e)
               val d = value(e)
               if not #def?(b, x) :
                  #add-live-in(b, x, d + #length(b))

   ;====== Accumulate Live-in and Live-out Tables ======
   defn accumulate (t:HashTable<[Symbol,Symbol],?>) :
      val accum = HashTable<Symbol,List<Symbol>>(symbol-hash)
      for [k v] in keys(t) do :
         accum[k] = List(v, get?(accum, k, List()))
      accum

   do(compute-block-liveness, blocks(p))
   propagate-block-liveness()
   val live-in-lists = accumulate(live-in-table)
   val live-out-lists = accumulate(live-out-table)

   defn wrap-live (b:Block) :
      defn #var (xs:List<Symbol>) : map(Var, xs)
      defn #any (xs:List) : map(Status{false, false}, xs)
      defn #dist (xs:List<Symbol>) : map({live-out-table[[name(b), _]]}, xs)
      defn #live-in () : get?(live-in-lists, name(b), List())
      defn #live-out () : get?(live-out-lists, name(b), List())
      LBlock(name(b),
             exps(b),
             next(b),
             #var(#live-in())
             #any(#live-in())
             #var(#live-out())
             #any(#live-out())
             #dist(#live-out()))

   Program(map(wrap-live, blocks(p)))             

;;====== Time to Use ======
defstruct Pos :
   i: Int
   mid?: True|False

defclass UsageTable <: Gettable<Pos, List<KeyValue<Symbol, Int>>>

defn hash (p:Pos) :
   match(mid?(p)) :
      (m:True) : i(p) * 2 + 1
      (m:False) : i(p) * 2

defn compute-usage-table (b:LBlock) :
   ;====== State ======
   val exps = to-array(exps(b))
   val n = length(exps)
   val dist-table = HashTable<Symbol,Int|False>(symbol-hash)
   val usages = Array<List<KeyValue<Symbol,Int>>>(n * 2 + 1)

   ;====== Utilities ======   
   defn set-usages (p:Pos, xs:List<KeyValue<Symbol,Int>>) : usages[hash(p)] = xs
   defn set-dist (x:Ref, d:Int|False) : dist-table[name(x)] = d
   defn set-dist (xs:List<Ref>, d:Int|False) : do(set-dist{_, d}, xs)
   defn set-dist (xs:List<Ref>, ds:List<Int|False>) : do(set-dist, xs, ds)
   defn live-vars () :
      val live-e = filter({value(_) typeof Int}, dist-table)
      to-list(live-e) as List<KeyValue<Symbol,Int>>

   ;====== Algorithm ======         
   set-dist(live-out(b), map({_ + n}, dist-out(b)))
   set-usages(Pos(n, false), live-vars())
   for i in (n - 1) through 0 by -1 do :
      ;Effect of defs
      match(exps[i]) :
         (e:Set) : set-dist(x(e), false)
         (e:Op) : set-dist(xs(e), false)
         (e:Args) : set-dist(xs(e), false)
         (e:Do) : set-dist(xs(e), false)
      set-usages(Pos(i, true), live-vars())
      ;Effect of uses
      match(exps[i]) :
         (e:Set) : set-dist(y(e), i)
         (e:Op) : set-dist(ys(e), i)
         (e:Args) : false
         (e:Do) : set-dist(ys(e), i)
      set-usages(Pos(i, false), live-vars())

   new UsageTable :
      defmethod get (this, p:Pos) : usages[hash(p)]

defn compute-usage-table (p:Program) :
   for b in blocks(p) do :
      println("For block: ~" << [name(b)])
      val t = compute-usage-table(b as LBlock)
      val n = length(exps(b))
      for (e in exps(b), i in 0 to false) do :
         println("   ~" << [e])
         println("      entry: ~@" << [cms(t[Pos(i,false)])])
         println("      mid: ~@" << [cms(t[Pos(i,true)])])
      println("      out: ~@" << [cms(t[Pos(n, false)])])  

;====== Finite Register Allocation ======
defn finite-allocation (b:LBlock) :
   var num-reg = 0
   val N = 8
   val loaded = HashTable<Symbol,True|False>(symbol-hash)
   val exp-list = Vector<Exp>()
   val usage-table = compute-usage-table(b)

   defn emit (e:Exp) :
      add(exp-list, e)
   
   defn save (x:Symbol) :
      emit(Save(Var(x)))

   defn save (xs:Stream<Symbol>) :
      do(save, xs)

   defn unload-all () :
      clear(loaded)
      num-reg = 0

   defn loaded? (x:Symbol) :
      get?(loaded, x, false)

   defn loaded-vars () :
      filter(loaded?, keys(loaded))

   defn set-loaded (x:Symbol, v:True|False) :
      match(get?(loaded, x, false), v) :
         (l:False, v:True) :
            loaded[x] = v
            num-reg = num-reg + 1
         (l:True, v:False) :
            loaded[x] = v
            num-reg = num-reg - 1
         (l, v) :
            false            

   defn set-loaded (x:Ref, v:True|False) :
      if x not-typeof Dead :
         set-loaded(name(x), v)

   defn set-loaded (xs:List<Ref>, v:True|False) :
      do(set-loaded{_, v}, xs)

   defn spill (p:Pos) :
      defn farthest (a:Symbol, b:Symbol) :
         val ta = lookup(usage-table[p], a)
         val tb = lookup(usage-table[p], b)
         match(ta, tb) :
            (ta:False, tb) : true
            (ta, tb:False) : false
            (ta:Int, tb:Int) : ta > tb
      val v = maximum(loaded-vars(), farthest)
      match(lookup(usage-table[p], v)) :
         (d:Int) : emit(Save(Var(v)))
         (d:False) : false
      set-loaded(v, false)

   defn live-vars (p:Pos) :
      stream(key, usage-table[p])

   defn alloc (p:Pos, n:Int) :
      while num-reg + n > N :
         spill(p)
         
   defn alloc (p:Pos, x:Ref) :
      alloc(p, 1)

   defn alloc (p:Pos, xs:List<Ref>) :
      alloc(p, length(xs))

   defn load (p:Pos, x:Ref) :
      alloc(p, 1) when not loaded?(name(x))         
      emit(Load(x))
      set-loaded(x, true)

   defn load (p:Pos, xs:List<Ref>) :
      do(load{p, _}, xs)

   defn keep-live (p:Pos, xs:List<Ref>) :
      val live = to-list(live-vars(p))
      for x in xs map :
         if contains?(live, name(x)) : x
         else : Dead()

   set-loaded(live-in(b), true)
   alloc(Pos(0, false), 0)
   for (e in exps(b), i in 0 to false) do :
      match(e) :
         (e:Args) :
            emit(Args(keep-live(Pos(i + 1, false), xs(e))))
            set-loaded(xs(e), true)
            alloc(Pos(i + 1, false), 0)            
         (e:Set) :
            load(Pos(i,false), y(e))
            alloc(Pos(i,true), x(e))
            emit(e)
            set-loaded(x(e), true)
         (e:Op) :
            load(Pos(i,false), ys(e))
            alloc(Pos(i,true), xs(e))
            emit(e)
            set-loaded(xs(e), true)
         (e:Do) :
            save(live-vars(Pos(i,true)))
            emit(Do(keep-live(Pos(i + 1, false), xs(e)), ys(e)))
            unload-all()
            set-loaded(xs(e), true)
            alloc(Pos(i + 1, false), 0)

   LBlock(name(b),
          to-list(exp-list),
          next(b),
          live-in(b),
          status-in(b),
          live-out(b),
          status-out(b),
          dist-out(b))

defn finite-allocation (p:Program) :
   Program(
      map(finite-allocation, blocks(p) as List<LBlock>))



;====== Save/Load Elision ======
defstruct Any
defn save-load-elision (b:LBlock) :
   val saved = HashTable<Symbol,True|False|Any>(symbol-hash)
   val loaded = HashTable<Symbol,True|False|Any>(symbol-hash)
   var assumptions = Vector<Exp>()

   val save-buffer = HashTable<Symbol,True|False>(symbol-hash)
   val load-buffer = HashTable<Symbol,True|False>(symbol-hash)
   defn status (assumptions:Vector<Exp>, xs:List<Ref>) :
      clear(save-buffer)
      clear(load-buffer)
      for e in assumptions do :
         match(e) :
            (e:Save) : save-buffer[name(x(e))] = true
            (e:Load) : load-buffer[name(x(e))] = true
      for x in xs map :
         match(x) :
            (x:Dead) :
               Status(false, false)
            (x) :
               Status(get?(save-buffer, name(x), false)
                      get?(load-buffer, name(x), false))

   defn mark-loaded (x:Ref, v:True|False|Any) :
      if x not-typeof Dead :
         loaded[name(x)] = v

   defn mark-loaded (xs:List<Ref>, v:True|False|Any) :
      do(mark-loaded{_, v}, xs)
      
   defn mark-saved (x:Ref, v:True|False|Any) :
      if x not-typeof Dead :
         saved[name(x)] = v

   defn mark-saved (xs:List<Ref>, v:True|False|Any) :
      do(mark-saved{_, v}, xs)

   defn assume (e:Exp) :
      add(assumptions, e)

   defn saved-ref? (x:Ref) :
      get?(saved, name(x), false)
      
   defn loaded-ref? (x:Ref) :
      get?(loaded, name(x), false)

   defn elide (es:List<Exp>) -> List<Exp> :
      defn elide-and-gather (xs:List<Ref>, es:List<Exp>) :
         let-var assumptions = Vector<Exp>() :
            clear(loaded)
            mark-saved(xs, Any())
            mark-loaded(xs, Any())
            var body = elide(es)
            val ss = status(assumptions, xs)
            val xs* = for (x in xs, s in ss) map :
               match(x, saved?(s), loaded?(s)) :
                  (x:Dead, s, l) : x
                  (x, s:True, l:False) :
                     LVar(name(x), Stack())
                  (x, s:False, l:True) :
                     LVar(name(x), Reg())
                  (x, s:False, l:False) :
                     mark-loaded(x, true)
                     LVar(name(x), Reg())
                  (x, s:True, l:True) :
                     body = List(Save(x), body)
                     LVar(name(x), Reg())
            [xs*, body]

      if empty?(es) :
         List()
      else :   
         val e = head(es)
         val rest = tail(es)
         match(e) :
            (e:Args) :
               val [xs*, rest*] = elide-and-gather(xs(e), rest)
               List(Args(xs*), rest*)
            (e:Set) :
               mark-loaded(x(e), true)
               mark-saved(x(e), false)
               List(e, elide(rest))
            (e:Op) :           
               mark-loaded(xs(e), true)
               mark-saved(xs(e), false)
               List(e, elide(rest))
            (e:Do) :
               val [xs*, rest*] = elide-and-gather(xs(e), rest)
               List(Do(xs*, ys(e)), rest*)
            (e:Save) :
               match(saved-ref?(x(e))) :
                  (s:True) : elide(rest)
                  (s:False) : (mark-saved(x(e), true), List(e, elide(rest)))
                  (s:Any) : (assume(e), mark-saved(x(e), true), elide(rest))
            (e:Load) :
               match(loaded-ref?(x(e))) :
                  (l:True) : elide(rest)
                  (l:False) : (mark-loaded(x(e), true), List(e, elide(rest)))
                  (l:Any) : (assume(e), mark-loaded(x(e), true), elide(rest))

   mark-saved(live-in(b), Any())
   mark-loaded(live-in(b), Any())
   val exps* = elide(exps(b))
   val status-in* = status(assumptions, live-in(b))
   val status-out* = for x in live-out(b) map :
      val s = get?(saved, name(x), false) typeof True
      val l = get?(loaded, name(x), false) typeof True
      Status(s, l)
      
   LBlock(name(b),
          exps*,
          next(b),
          live-in(b),
          status-in*,
          live-out(b),
          status-out*,
          dist-out(b))

defn save-load-elision (p:Program) :
   Program(
      map(save-load-elision, blocks(p) as List<LBlock>))

;   defn compute-assumptions (xs:List<Symbol>, assume:Vector<Exp>) :
;      val loaded = HashTable<Symbol,True|False>(symbol-hash)
;      val saved = HashTable<Symbol,True|False>(symbol-hash)
;      for e in assume do :
;         match(e) :
;            (e:Save) : saved[name(x(e))] = true
;            (e:Load) : loaded[name(x(e))] = true
;      val save-in = for x in xs map : get?(saved, x, false)
;      val load-in = for x in xs map : get?(loaded, x, false)
;      [save-in, load-in]
;
;   val assumptions = Vector<Exp>()
;   val exps* = get-assumptions(exps(b), assumptions)
;   val [save-in, load-in] = compute-assumptions(live-in(b), assumptions)
;   val save-out = for x in live-out(b) map : #saved(x) typeof True
;   val 
;
;
;   for e in exps(b) do :
;      match(e) :
;         (e:GetArgs) : asdf
;         (e:Save) :
;            #save(x(e))
;            #emit-rest()
;         (e:SetArgs) :
;            #emit(e)
;            #emit-rest()
;         (e:Set) :
;            #emit(e)
;            #mark-saved(x(e), false)
;            #emit-rest()
;         (e:Op) :
;            #emit(e)
;            #mark-saved(xs(e), false)
;            #emit-rest()
;         (e:Call) :
;            #emit(e)            
;            ???
;            #emit-rest()
;         (e:Load) :
;            #mark-saved(x(e), false)
;            
;
;
;         (e:SetArgs) :
;            #emit(e)
;         (e:Set) :
;            #emit(e)
;            mark-not-saved(x(e))
;         (e:Op) : mark-not-saved(xs(e))
;         (e:Call) : mark-all-not-saved()
;         (e:Load) : mark-not-saved(x(e))
;
;
;   defn elide (es:List<Exp>) -> List<Exp> :
;      if empty?(es) :
;         es
;      else :
;         match(head(es)) :
;            (e:GetArgs)
;            (e:Save) : save(x(e))
;            (e:SetArgs) : false
;            (e:Set) : mark-not-saved(x(e))
;            (e:Op) : mark-not-saved(xs(e))
;            (e:Call) : mark-all-not-saved()
;            (e:Load) : mark-not-saved(x(e))
;   
;   for e in exps(b) do :
;      ;For each operation
;      ;1. If it is a save, check whether:
;      ;   i. The value is floating: Mark the value as saved
;      ;   ii. The value is saved already: Elide the save
;      ;   iii. The value is not saved: Keep the save
         




;;========== Spill Registers =============
;defn spill-registers (b:LBlock, N:Int) :
;   val last-uses = compute-last-use(b)
;   val next-uses = compute-uses(b)
;
;   ;Kill and Birth
;   var n:Int = 0
;   val live = HashTable<Symbol,True|False>(symbol-hash)
;   defn kill (x:Ref) :
;      if live[name(x)] :
;         live[name(x)] = false
;         n = n - 1
;   defn birth (x:Ref) :
;      if get?(live, name(x), false) :
;         live[name(x)] = true
;         n = n + 1
;
;   ;Spilling and Loading
;   val accum = Vector<Exp>()
;   defn spill (x:Ref) :
;      add(accum, Save(x))
;      kill(x)
;   defn load (x:Ref) :
;      add(accum, Load(x))
;      birth(x)
;
;   defn spill (es:List<Exp>) :
;      for (e in es, killed in last-uses, uses in next-uses) do :
;         ;Marking and Ensuring Live
;         defn reserve-reg () :
;            if n >= N :
;               val uses* = reverse(find-next-uses(uses))
;               val v = for v in uses* find :
;                  get?(live, v, false)
;               spill(Var(v as Symbol))
;         defn mark-live (x:Ref) :
;            reserve-reg()
;            birth(x)
;         defn ensure-live (x:Ref) :
;            if not live[name(x)] :
;               reserve-reg()
;               load(x)
;
;         match(e) :
;            (e:Args) :
;               do(mark-live{Var(_)}, xs(e))
;               add(accum, e)
;            (e:Set) :
;               ensure-live(y(e))
;               do(kill, killed)
;               mark-live(x(e))
;               add(accum, e)
;            (e:Op) :
;               do(ensure-live, ys(e))
;               do(kill, killed)
;               do(mark-live, xs(e))
;               add(accum, e)
;;            (e:Do) :
;;               do(
;;
;;
;;               do(mark-use, ys(e)) ;;asdfasdf
;            (e:Save) :
;               kill(x(e))
;               add(accum, e)
;            (e:Load) :
;               mark-live(x(e))
;               add(accum, e)
;
;
;defn compute-last-use (p:Program) :
;   for b in blocks(p) as List<LBlock> do :
;      println("Block ~:" << [name(b)])
;      val lu = compute-last-use(b)
;      val us = compute-uses(b)
;      for (e in exps(b), u in lu, us in us) do :
;         if empty?(u): println("   ~ USES(~@)" << [e, cms(us)])
;         else : println("   ~  KILLED(~@) USES(~@)" << [e, cms(u), cms(us)])




;========= Driver ======================
defn test (p:Program) :
   println("====== Test ======")
   println(p)
   println("====== Working Form ======")
   val p1 = working-form(p)
   println(p1)
   println("====== Liveness Analysis ======")
   val p2 = liveness-analysis(p1)
   println(p2)
   ;println("====== Usage Table ======")
   ;compute-usage-table(p2)
   println("====== Allocation ======")
   val p3 = finite-allocation(p2)
   println(p3)
   println("====== Save/Load Elision ======")
   val p4 = save-load-elision(p3)
   println(p4)
;   println("====== Emit Save/Load ======")
;   val p3 = emit-save-load(p2)
;   println(p3)
;   println("====== Release/Time to Use ======")
;   for b in blocks(p3) as List<LBlock> do :      
;      val rs = compute-release(b)
;      val ts = compute-time-to-use(b)
;      for (e in exps(b), i in 0 to false) do :
;         println("~: ~, release ~@, time ~@" << [i, e, cms(rs[i]), cms(ts[i])])
;   println("====== Finite Allocation ======")
;   for b in blocks(p3) as List<LBlock> do :
;      finite-allocation(b)
   println("==================\n\n\n")

defn main () :
   val filename = commandline-arguments()[1]
   val progs = parse-regir(filename)   
   do(test, progs)

main()