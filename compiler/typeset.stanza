defpackage stz/typeset :
  import core
  import collections
  import stz/utils

;============================================================
;================== Struct Definitions ======================
;============================================================
  
public deftype TypeSet <: Equalable & Comparable<TypeSet> & Hashable

public defstruct AndType <: TypeSet :
  types: Tuple<TypeSet> with:
    ensure => and!<Tuple<TypeSet>>(ordered!, no-ands!)
  
public defstruct OrType <: TypeSet :
  types: Tuple<TypeSet> with:
    ensure => and!<Tuple<TypeSet>>(ordered!, no-ors!)
  
public defstruct TopType <: TypeSet

public defstruct SingleType <: TypeSet :
  type: Int

;============================================================
;==================== Invariants ============================
;============================================================

defn and!<T> (a: (String, T) -> True|False, b: (String, T) -> True|False) :
  fn (s:String, x:T) :
    a(s,x)
    b(s,x)

defn ordered! (description:String, ts:Tuple<Comparable>) :
  if length(ts) < 2 :
    fatal("The %_ with value %_ has length less than 2." % [description, ts])
  else :
    val n = length(ts)
    for i in 0 to n - 1 do :
      if ts[i] >= ts[i + 1] :
        fatal("The %_ with value %_ is not strictly ordered." % [description, ts])

defn no-ands! (description:String, ts:Tuple<TypeSet>) :
  for t in ts do :
    if t is AndType :
      fatal("The %_ cannot accept 'and' type %_." % [description, t])

defn no-ors! (description:String, ts:Tuple<TypeSet>) :
  for t in ts do :
    if t is OrType :
      fatal("The %_ cannot accept 'or' type %_." % [description, t])

;============================================================
;=================== Membership Testing =====================
;============================================================

;Assume that we have a routine for checking whether something
;is an instance of a SingleType.
;This function computes whether that thing is a subtype of the given TypeSet,
;by handling TopType/AndType/OrType constructs.
public defn test-instanceof? (subtype?:SingleType -> True|False,
                              t:TypeSet) -> True|False :
  let loop (t:TypeSet = t) :
    match(t) :
      (t:TopType) : true
      (t:SingleType) : subtype?(t)
      (t:AndType) : all?(loop, types(t))
      (t:OrType) : any?(loop, types(t))

;Assume that we have a routine for checking whether one SingleType
;is a subtype of another.
;This function computes whether TypeSet a is guaranteed to be a subtype of
;TypeSet b.
public defn test-instanceof? (subtype?:(SingleType, SingleType) -> True|False,
                              a:TypeSet, b:TypeSet) -> True|False :
  match(a) :
    (a:TopType) :
      let loop (t:TypeSet = b) :
        match(t) :
          (t:TopType) : true
          (t:SingleType) : false
          (t:AndType) : all?(loop, types(t))
          (t:OrType) : any?(loop, types(t))
    (a:SingleType) :
      test-instanceof?(subtype?{a, _}, b)
    (a:AndType) :
      any?(test-instanceof?{subtype?, _, b}, types(a))
    (a:OrType) :
      all?(test-instanceof?{subtype?, _, b}, types(a))

;============================================================
;====================== Normalization =======================
;============================================================

public defn OrType? (ts:Seqable<TypeSet>) :
  label<TypeSet> return :
    val types = Vector<TypeSet>()
    for t in ts do :
      match(t) :
        (t:TopType) : return(t)
        (t:OrType) : add-all(types, /types(t))
        (t) : add(types,t)
    qsort!(types)
    remove-duplicates!(types)
    switch(length(types)) :
      1 : types[0]
      else : OrType(to-tuple(types))

public defn AndType? (ts:Seqable<TypeSet>) :
  val types = Vector<TypeSet>()
  for t in ts do :
    match(t) :
      (t:TopType) : false
      (t:AndType) : add-all(types, /types(t))
      (t) : add(types,t)
  qsort!(types)
  remove-duplicates!(types)
  switch(length(types)) :
    0 : TopType()
    1 : types[0]
    else : AndType(to-tuple(types))

;============================================================
;====================== Printer =============================
;============================================================

defmethod print (o:OutputStream, t:TypeSet) :
  print{o, _} $ match(t) :
    (t:SingleType) : type(t)
    (t:TopType) : "?"
    (t:AndType) : "and(%,)" % [types(t)]
    (t:OrType) : "or(%,)" % [types(t)] 

defn rank (t:TypeSet) :
  match(t) :
    (t:AndType) : 0
    (t:OrType) : 1
    (t:SingleType) : 2
    (t:TopType) : 3

defmethod hash (t:TypeSet) :
  val base = rank(t) * 13
  defn H (y) : base + hash(y)
  match(t) :
    (t:AndType) : H $ types(t)
    (t:OrType) : H $ types(t)
    (t:SingleType) : H $ type(t)
    (t:TopType) : base

defmethod equal? (a:TypeSet, b:TypeSet) :
  match(a, b) :
    (a:AndType, b:AndType) : types(a) == types(b)
    (a:OrType, b:OrType) : types(a) == types(b)
    (a:SingleType, b:SingleType) : type(a) == type(b)
    (a:TopType, b:TopType) : true
    (a, b) : false

defmethod compare (a:TypeSet, b:TypeSet) :
  match(a, b) :
    (a:AndType, b:AndType) : compare(types(a), types(b))
    (a:OrType, b:OrType) : compare(types(a), types(b))
    (a:SingleType, b:SingleType) : compare(type(a), type(b))
    (a:TopType, b:TopType) : 0
    (a, b) : compare(rank(a), rank(b))
