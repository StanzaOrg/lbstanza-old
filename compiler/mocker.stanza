defpackage stz/mocker :
  import core
  import collections

;============================================================
;====================== MockScript ==========================
;============================================================

public deftype MockScript
defmulti send-message (s:MockScript, args:Tuple) -> CallerResult

public deftype MockCaller
defmulti message (c:MockCaller) -> Maybe<Tuple>
defmulti clear-message (c:MockCaller) -> False
defmulti reply-with-value (c:MockCaller, value:CallerResult) -> False
defmulti throw-exception-on-error? (c:MockCaller) -> True|False

deftype CallerResult
defstruct NormalValue <: CallerResult :
  value
defstruct ExceptionValue <: CallerResult :
  exception: Exception

public defn MockScript (body: MockCaller -> ?) -> MockScript :
  MockScript(body, false)

;+[Mocking Constructor Definition]
;Create a new MockScript
public defn MockScript (body: MockCaller -> ?,
                        throw-exception-on-error?:True|False) -> MockScript :
  val co = Coroutine<Tuple,?> $ fn (co, initial-message) :
    var message:Maybe<Tuple> = One(initial-message)
    val caller = new MockCaller :
      defmethod message (this) :
        message
      defmethod clear-message (this) :
        message = None()
      defmethod reply-with-value (this, value:CallerResult) :        
        message = One(suspend(co, value))
      defmethod throw-exception-on-error? (this) :
        throw-exception-on-error?
    body(caller)
    ;Check that if the body called expect, then there is
    ;a corresponding reply.
    if empty?(message) :
      fatal("Expect was called on caller. Script finished before replying to message.")
    else :
      throw?(throw-exception-on-error?, ScriptFinished(value!(message)))
  new MockScript :
    defmethod send-message (this, args:Tuple) :
      resume(co, args)

;+[Mocking Call Script Definition]
;Call the script with a message.
public defn call (s:MockScript, args:Tuple) -> ? :
  ;Check preconditions
  if length(args) < 1 or args[0] is-not Symbol : 
    fatal("Invalid arguments to call. First element in argument tuple must be a Symbol \
           representing the name of the function.")
  ;Send message
  match(send-message(s, args)) :
    (r:NormalValue) : value(r)
    (r:ExceptionValue) : throw(exception(r))

;Retrieve the next message from the caller. Run a generic verification
;on the message.
defn expect (caller:MockCaller, verify-message:Tuple -> ?) -> Tuple :
  val m = message(caller)
  if empty?(m) :
    fatal("Expect was just called. MockCaller is expecting a reply.")
  clear-message(caller)
  verify-message(value!(m))
  value!(m)

;+[Mocking Expect Definition]
;Expect the next message. Always succeeds.
public defn expect (caller:MockCaller) -> Tuple :
  expect(caller, {false})

;Expect the next message of a certain type.
public defn expect (caller:MockCaller, message-type:Symbol) -> Tuple :
  defn ensure-message-type (message:Tuple) :
    if message[0] != message-type :
      throw?(throw-exception-on-error?(caller),
             WrongExpectedMessageType(message, message-type))
  expect(caller, ensure-message-type)

;Expect the next message of a certain type and value.
public defn expect (caller:MockCaller, full-message:Tuple) -> Tuple :
  defn ensure-message (message:Tuple) :
    if message != full-message :
      throw?(throw-exception-on-error?(caller),
             WrongExpectedMessage(message, full-message))
  expect(caller, ensure-message)
;/[Mocking Expect Definition]

;Reply to the caller with a value.
public defn reply (caller:MockCaller, value) -> False :
  ;Check that we called expect before this reply.
  if not empty?(message(caller)) :
    fatal("Expect must be called before calling reply.")
  reply-with-value(caller, NormalValue(value))

;Reply to the caller with a value.
public defn reply-with-exception (caller:MockCaller, e:Exception) -> False :
  ;Check that we called expect before this reply.
  if not empty?(message(caller)) :
    fatal("Expect must be called before calling reply.")
  reply-with-value(caller, ExceptionValue(e))

;============================================================
;===================== Utility ==============================
;============================================================

;Either throw e as an exception or fatal error. 
defn throw? (throw?:True|False, e:Exception) :
  if throw? : throw(e)
  else : fatal(e)

;============================================================
;======================= Errors =============================
;============================================================

public deftype MockError <: Exception

;Indicates that we have reached the end of the script.
public defstruct ScriptFinished <: MockError :
  message:Tuple

defmethod print (o:OutputStream, e:ScriptFinished) :
  print(o, "Script finished unexpectedly. Caller is expecting a reply to message %_." % [message(e)])

;Indicates that we received a message of the wrong type.
public defstruct WrongExpectedMessageType <: MockError :
  message:Tuple
  expected-type:Symbol

defmethod print (o:OutputStream, e:WrongExpectedMessageType) :
  print(o, "Received a message of the wrong type. Expected message type is '%~', but actual message has type '%~'." % [
    expected-type(e), message(e)[0]])
  print(o, " Full received message is %_." % [message(e)])  

;Indicates that we received the wrong message.
public defstruct WrongExpectedMessage <: MockError :
  message:Tuple
  expected:Tuple

defmethod print (o:OutputStream, e:WrongExpectedMessage) :
  print(o, "Received an unexpected message. Full expected message is %_. Actual received message is %_." % [
    expected(e), message(e)])