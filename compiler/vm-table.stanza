defpackage stz/vm-table :
  import core
  import collections
  import stz/vm-ir
  import stz/vm-load-unit
  import stz/typeset
  import stz/vm
  import stz/algorithms
  import stz/stable-arrays
  import stz/utils
  import stz/dyn-tree
  import stz/branch-table
  import stz/dl-ir
  import core/stack-trace
  import stz/packed-class-table
  import stz/code-table
  import stz/cvm-code-table
  import stz/jit-code-table
  import stz/backend
  import stz/const-pool

;============================================================
;================ Definition of all Tables ==================
;============================================================
;Source of truth for all stored information about:
;- Branches
;- Globals
;- Classes
;- Constants
;- Datas
;- Functions
;- Instructions
;- Externs
;- Extern Defns
;- Stack Traces
;
;The raw memory pointers for these tables are extracted
;and arranged into VMState for the purpose of the runtime.

public lostanza deftype VMTable :
  ;Branches
  branch-table:ref<BranchTable>
  
  ;Globals
  global-table:ref<Vector<LoadedGlobal|False>>      ;For globals
  var global-offsets:ref<StableLongArray>           ;For global offsets
  globals:ref<Buffer>

  ;Classes
  class-table:ref<ClassTable>

  ;Constants
  consts:ref<Buffer>
  consts-data:ref<Buffer>

  ;Data
  var data-positions:ref<StableIntArray>
  data:ref<Buffer>

  ;Code
  code-table:ref<CodeTable>

  ;Functions
  var function-addresses:ref<StableLongArray>

  ;Trace Entries
  trace-table:ref<HashTable<Long,StackTraceEntry>>           

;============================================================
;======================= Initialization =====================
;============================================================

public lostanza defn VMTable (class-table:ref<ClassTable>,
                              branch-table:ref<BranchTable>,
                              code-table:ref<CodeTable>) -> ref<VMTable> :
  return new VMTable{
    ;Branches
    branch-table,
    
    ;Globals
    Vector<LoadedGlobal|False>(),
    StableLongArray(new Int{32}, new Long{-1L}),
    Buffer(),

    ;Classes
    class-table,

    ;Constants
    Buffer(),
    empty-consts-buffer(),

    ;Data
    StableIntArray(new Int{32}, new Int{-1}),
    Buffer(),

    ;Code
    code-table,

    ;Functions
    StableLongArray(new Int{1024}, new Long{-1}),
    
    ;Trace Table
    HashTable<Long,StackTraceEntry>()}

;============================================================
;================= Class Display Analysis ===================
;============================================================
public deftype ClassTable
public defmulti class? (this, c:Int) -> True|False
public defmulti instanceof? (t:ClassTable, child:Int, parent:TypeSet) -> True|False
public defmulti unique? (t:ClassTable, n:Int) -> True|False
public defmulti add (t:ClassTable, cs:Collection<LoadedClass>) -> False
public defmulti add (t:ClassTable, l:TreeListener) -> False
public defmulti get (t:ClassTable, c:Int) -> VMClass
public defmulti loaded-class (t:ClassTable, c:Int) -> LoadedClass
public defmulti children (t:ClassTable, c:Int) -> Tuple<Int>
public defmulti set-representation (t:ClassTable, c:Int) -> Tuple<Int>
public defmulti abstract-classes (t:ClassTable) -> IntSet

;Return the packed representation of the class table.
;Used by the runtime (e.g. GC) to introspect upon object layouts.
defmulti packed-table (t:ClassTable) -> StableByteArray

public defn ClassTable () :
  val class-table = IntTable<LoadedClass>()
  val class-tree = DynTree()
  var packed-table:StableByteArray = StableByteArray(0, 0Y)

  defn instanceof? (child:Int, t:TypeSet) :
    for p in t test-instanceof? :
      parent?(class-tree, child, type(p))
    
  new ClassTable :
    defmethod add (this, cs:Collection<LoadedClass>) :
      ;Add the classes to the class dynamic tree.
      defn node-state (c:VMClass) -> NodeState :
        match(c) :
          (c:VMAbstractClass) : NodeState(id(c), parents(c), children(c), false)
          (c) : NodeState(id(c), parents(c), [], true)      
      add(class-tree, seq(node-state{class(_)}, cs))
      
      ;Add the classes to the packed class table.
      defn record? (c:VMClass) -> Maybe<ClassTableRecord> :
        match(c) :
          (c:VMLeafClass) :
            One(LeafClassRecord(id(c), name(c), size(c), roots(c)))
          (c:VMArrayClass) :
            One(ArrayClassRecord(id(c), name(c),
                                 base-size(c), item-size(c), base-roots(c), item-roots(c)))
          (c:VMAbstractClass) :
            None()
      val records = to-tuple(seq?(record?{class(_)}, cs))
      packed-table = pack(records, packed-table)
      
      ;Add the classes to the class table.
      for c in cs do :
        class-table[id(class(c))] = c        
    defmethod add (this, l:TreeListener) :
      add(class-tree, l)
    defmethod get (this, c:Int) :
      class(class-table[c])
    defmethod loaded-class (this, c:Int) :
      class-table[c]
    defmethod class? (this, c:Int) :
      key?(class-table, c)
    defmethod unique? (this, n:Int) :
      parent?(class-tree, n, UNIQUE-TYPE)      
    defmethod instanceof? (this, child:Int, parent:TypeSet) :
      instanceof?(child, parent)
    defmethod children (this, c:Int) :
      all-leaves(class-tree, c)
    defmethod set-representation (this, c:Int) :
      all-children(class-tree, c)
    defmethod abstract-classes (this) :
      non-leaves(class-tree)      
    defmethod packed-table (this) :
      packed-table

public lostanza defn packed-class-table (ct:ref<ClassTable>) -> ptr<?> :
  return packed-table(ct).data

public defn subtype? (ct:ClassTable, a:TypeSet, b:TypeSet) :
  for (a1 in a, b1 in b) test-instanceof? :
    instanceof?(ct, type(a1), b1)

;============================================================
;=================== Global Loading =========================
;============================================================

defstruct LoadedGlobal :
  offset: Long
  size: Int
  roots: Tuple<Int>
  package: Symbol
with:
  printer => true

public defn roots (globals:Vector<LoadedGlobal|False>) -> Tuple<Int> :
  roots(globals, [])

public defn global-offset (vmt:VMTable, id:Int) -> Long :
  offset(global-table(vmt)[id] as LoadedGlobal)

public defn roots (globals:Vector<LoadedGlobal|False>, exclude:Seqable<Symbol>) -> Tuple<Int> :
  val exset = to-hashset<Symbol>(exclude)
  to-tuple $
    for g in filter-by<LoadedGlobal>(globals) seq-cat :
      if exset[package(g)] :
        []
      else :
        for r in roots(g) seq :
          to-int(offset(g) / 8L) + r  

public defn load-globals (vmt:VMTable, load-globals:Seqable<VMGlobal>, package:Symbol,
                          keep-existing-globals?:True|False) :
  val loaded? = IntSet()
  val gt = global-table(vmt)
  for g in load-globals do :
    val size* = (size(g) + 7) & -8
    add(loaded?, id(g))
    check-existing-entry() where :    
      defn* check-existing-entry () :
        match(get?(gt, id(g))) :
          (l:LoadedGlobal) :
            if keep-existing-globals? :
              fatal("New global size does not match existing global.") when size(l) != size*
              false ;Do nothing
            else :
              if size(l) <= size* : overwrite-entry(l)
              else : make-new-entry()
          (_:False) :
            make-new-entry()
      defn* overwrite-entry (l:LoadedGlobal) :
        val entry = LoadedGlobal(offset(l), size*, roots(g), package)
        put<LoadedGlobal>(gt, id(g), entry)
        void-roots(offset(l))
      defn* make-new-entry () :
        val offset = alloc-global(vmt, size*)
        val entry = LoadedGlobal(offset, size*, roots(g), package)
        put<LoadedGlobal>(gt, id(g), entry)
        set-global-offset(vmt, id(g), offset)
        void-roots(offset)
      defn* void-roots (offset:Long) :
        for r in roots(g) do :
          make-void(globals(vmt), to-int(offset / 8L) + r)
  ;Remove any unloaded globals        
  for i in 0 to length(gt) do :
    match(gt[i]) :
      (g:LoadedGlobal) :
        if /package(g) == package and not loaded?[i] :
          gt[i] = false
      (g:False) :
        false

lostanza defn set-global-offset (vmt:ref<VMTable>, d:ref<Int>, pos:ref<Long>) -> ref<False> :
  vmt.global-offsets = put(vmt.global-offsets, d, pos, new Long{-1L})
  return false

lostanza defn global-table (vmt:ref<VMTable>) -> ref<Vector<LoadedGlobal|False>> :
  return vmt.global-table
lostanza defn globals (vmt:ref<VMTable>) -> ref<Buffer> :
  return vmt.globals
lostanza defn alloc-global (vmt:ref<VMTable>, size:ref<Int>) -> ref<Long> :
  return new Long{alloc(vmt.globals, size.value)}

lostanza defn make-void (buffer:ref<Buffer>, i:ref<Int>) -> ref<False> :
  val mem:ptr<long> = buffer.mem
  mem[i.value] = void-marker()
  return false

;============================================================
;===================== Class Loading ========================
;============================================================

public lostanza defn load-classes (vmt:ref<VMTable>,
                                   classes:ref<Collection<LoadedClass>>) -> ref<False> :
  ;Add the classes to the class tree.
  add(vmt.class-table, classes)  
  return false

;============================================================
;===================== Const Loading ========================
;============================================================

public lostanza defn load-consts (vmt:ref<VMTable>, consts:ref<Tuple<VMConst>>) -> ref<False> :
  ;Put into const-positions table
  val nconsts = length(consts).value
  val const-space = nconsts * 8L
  val pos = alloc(vmt.consts, const-space) / 8
  for (var i:int = 0, i < nconsts, i = i + 1) :
    make-void(vmt.consts, new Int{(pos + i) as int})

  ;Compile data
  write-consts(vmt.consts-data, consts)

  return false

;============================================================
;=================== Const Compilation ======================
;============================================================

defn empty-consts-buffer () -> Buffer :
  val buffer = Buffer()
  alloc(buffer, 4)
  set-int(buffer, 0, 0)
  buffer

defn write-consts (buffer:Buffer, consts:Tuple<VMConst>) :
  ;Write to byte buffer  
  val bytebuffer = ByteBuffer()

  ;Const writer
  val prev-alignment = to-int(size(buffer) % 8L)
  val writer = ByteBufferConstWriter(bytebuffer, prev-alignment)
  do(write-const{writer, value(_)}, consts)

  ;Append byte buffer to buffer
  append!(buffer, bytebuffer)
  
  ;Increment number of constants
  val num-previous-consts = get-int(buffer, 0)
  set-int(buffer, 0, num-previous-consts + length(consts))
  
;============================================================
;=================== Build Trace Table ======================
;============================================================
defn load-trace-entries (vmt:VMTable, entries:Seqable<TraceTableEntry>) :
  val trace-table = trace-table(vmt)
  for e in entries do :
    trace-table[pc(e)] = entry(e)

lostanza defn trace-table (vmt:ref<VMTable>) -> ref<HashTable<Long,StackTraceEntry>> :
  return vmt.trace-table

;============================================================
;====================== Data Loading ========================
;============================================================

public lostanza defn load-data (vmt:ref<VMTable>, d:ref<VMData>) -> ref<False> :
  ;Put into data buffer
  val size = length(data(d)).value
  val size* = (size + 7L) & -8L
  val address = alloc(vmt.data, size*)
  ;val pos =  / 8
  ;Copy into buffer
  val src = addr!(data(d).data)
  val dst = vmt.data.mem + address
  call-c clib/memcpy(dst, src, size)
  if non-negative?(vmt.data-positions, id(d)) : fatal("Data already defined.")
  vmt.data-positions = put(vmt.data-positions, id(d), new Int{(address / 8) as int}, new Int{-1})
  return false

public defn load-datas (vmt:VMTable, ds:Tuple<VMData>) :
  do(load-data{vmt, _}, ds)

lostanza defn non-negative? (xs:ref<Array<Int>>, i:ref<Int>) -> long :
  val l = length(xs).value
  if i.value < l :
    if get(xs,i).value >= 0 : return 1L
    else : return 0L
  else :
    return 0L
  
;============================================================
;===================== Function Loading =====================
;============================================================

public lostanza defn load-function (vmt:ref<VMTable>,
                                    func:ref<VMDefn>,
                                    externfn?:ref<True|False>,
                                    resolver:ref<EncodingResolver>,
                                    backend:ref<Backend>) -> ref<False> :
  ;Encode the function and load it into the code table.
  val load-result = load-function(vmt.code-table, id(func), /func(func), externfn?, resolver, backend)

  ;Store the function address into the function-addresses table.
  val id = id(func)
  vmt.function-addresses = put(vmt.function-addresses, id, address(load-result), new Long{-1})

  ;Store the fileinfos into fileinfo table.
  load-trace-entries(vmt, trace-entries(load-result))

  return false

;============================================================
;========================= Utility ==========================
;============================================================

defn put<T> (xs:Vector<T|False>, k:Int, v:T) :
  if k >= length(xs) :
    lengthen(xs, k + 1, false)
  xs[k] = v
  
defn get?<?T> (xs:Vector<?T>, k:Int) -> T|False :
  if k < length(xs) : xs[k]
