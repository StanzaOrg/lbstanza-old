defpackage stz/earley-macros :
  import core
  import collections
  import parser
  import stz/core-macros  

;============================================================
;===================== User Syntax ==========================
;============================================================

public defstruct SPUPackage :
  name
  exps: List<SPUExp>

public deftype SPUExp

public defstruct SPUDefProduction <: SPUExp :
  info: FileInfo|False
  name
  public?: True|False

public defstruct SPUDefKeywords <: SPUExp :
  info: FileInfo|False
  name
  public?: True|False

public defstruct SPUDefClones <: SPUExp :
  clones: List<SPUDefClone>

public defstruct SPUDefClone <: SPUExp :
  info: FileInfo|False
  name
  clone-name
  public?: True|False

public defstruct SPUNotRule <: SPUExp :
  info: FileInfo|False
  production
  pattern: List

public defstruct SPUImport <: SPUExp :
  info: FileInfo|False
  names: List
  package

public defstruct SPURuleExp <: SPUExp :
  info: FileInfo|False
  production
  pattern: List
  guard: Maybe
  body: Maybe
  options: Maybe<List<KeyValue>>

public defstruct SPUStanzaExp <: SPUExp :
  form

;============================================================
;====================== Syntax ==============================
;============================================================

defsyntax stanza-earley :
  public defproduction syntax-package: SPUPackage
  public defproduction spuexp: SPUExp
  import (exp!, id!, id$, :!) from core

  ;defproduction sexp = clone(exp)
  defrule spuexp = (?e:#defclone) :
    e

  defproduction defclone:SPUDefClone
  defrule defclone = (?public?:#public? defproduction ?name:#id! = clone(?clone-name:#id$)) :
    SPUDefClone(closest-info(), name, clone-name, public?)

  ;public defproduction myrule
  defrule spuexp = (?public?:#public? defproduction ?name:#id!) :
    SPUDefProduction(closest-info(), name, public?)

  ;defproductions :
  ;  defproduction sexp = clone(exp)
  defrule spuexp = (defproductions #:! (?clones:#defclone! ...)) :
    SPUDefClones(clones)

  ;public defkeywords stanza-keywords
  defrule spuexp = (?public?:#public? defkeywords ?name:#id!) :
    SPUDefKeywords(closest-info(), name, public?)

  ;defrule exp = (a b c) when symbol?(a) : body with: (associativity => left)
  defrule spuexp = (defrule ?name:#id! = ?pat:#pattern! ?guard:#guard? ?body:#body? ?options:#options?) :
    SPURuleExp(closest-info(), name, pat, guard, body, options)

  ;defrule stanza-keywords != (for)
  defrule spuexp = (defrule ?name:#id! != ?pat:#pattern!) :
    SPUNotRule(closest-info(), name, pat)

  ;import (exp) from core
  defrule spuexp = (import (?names:#id! ...) from ?package:#id!) :
    SPUImport(closest-info(), names, package)
  defrule spuexp = (import ?name:#id! from ?package:#id!) :
    SPUImport(closest-info(), List(name), package)

  ;Ordinary stanza expression
  defrule spuexp = (?e:#exp!) :
    SPUStanzaExp(e)

  ;Errors
  defproduction defclone!: SPUDefClone
  defrule defclone! = (?e:#defclone) : e
  fail-if defclone! = () : EarleySyntaxError(closest-info(), "Expected a clone production here.")

  ;Patterns
  defproduction pattern!: List
  defrule pattern! = (?x:(_ ...)) : x
  fail-if pattern! = () : EarleySyntaxError(closest-info(), "Expected a pattern here.")

  ;Guards
  defproduction guard?: Maybe
  defrule guard? = (when ?e:#exp!) : One(e)
  defrule guard? = () : None()

  ;Body
  defproduction body?: Maybe
  defrule body? = (: ?e:#exp!): One(e)
  defrule body? = () : None()

  ;Options
  defproduction options?: Maybe<List<KeyValue>>
  defrule options? = (with #:! (?es:#option! ...)) : One(es)
  defrule options? = () : None()

  ;Option
  defproduction option!: KeyValue
  defrule option! = (?x:associativity => ?y:left) : x => y
  defrule option! = (?x:associativity => ?y:right) : x => y
  fail-if option! = (associativity =>) : EarleySyntaxError(closest-info(), "Invalid associativity option.")
  defrule option! = (?x:priority => ?y:#int!) : x => y
  defrule option! = (?x:lazy => ?y:#bool!) : x => y

  ;Public or not
  defproduction public?: True|False
  defrule public? = (public) : true
  defrule public? = () : false

  ;Integers
  defproduction int!: Int|Token
  defrule int! = (?x) when unwrap-token(x) is Int : x
  fail-if int! = () : EarleySyntaxError(closest-info(), "Expected an integer here.")

  ;Booleans
  defproduction bool!: True|False|Token
  defrule bool! = (?x) when unwrap-token(x) is True|False : x
  fail-if bool! = () : EarleySyntaxError(closest-info(), "Expected a boolean here.")

defstruct EarleySyntaxError <: Exception :
  info: FileInfo|False
  msg: String