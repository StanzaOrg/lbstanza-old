defpackage stz/proj :
  import core
  import collections
  import reader
  import stz/params
  import stz/utils
  import stz/parsed-path

;============================================================
;======================== Driver ============================
;============================================================

public defn read-proj-files (filenames:Seqable<String>, platform:Symbol) :
  combine $ for filename in filenames seq :
    flatten-relative-paths $
    normalize{_, platform} $
    variable-substitution $
    traverse-includes{_, platform} $
    ensure-wellformed{_, platform} $
    read-raw-proj-file(filename)

;============================================================
;===== All Project Files by Default During Compilation ======
;============================================================

public defn default-proj-files () -> Vector<String> :
  val files = Vector<String>()
  add(files, string-join $ [STANZA-INSTALL-DIR, "/stanza.proj"])
  add-all(files, STANZA-PROJ-FILES)
  add(files, "stanza.proj") when file-exists?("stanza.proj")
  files

;============================================================
;================ Retrieve a Build Target ===================
;============================================================

public defn build-target (proj:ProjFile, target:Symbol) -> BuildStmt|False :
  for s in filter-by<BuildStmt>(stmts(proj)) find :
    name(s) == target

public defn build-target! (proj:ProjFile, target:Symbol) -> BuildStmt :
  val s = build-target(proj, target)
  match(s:BuildStmt) : s
  else : throw(ProjFileError(false, to-string("No build target named %~." % [target])))

;============================================================
;================== Stanza Project File =====================
;============================================================

public defstruct ProjFile :
  stmts: Tuple<ProjStmt>
with: (printer => true)

public deftype ProjStmt

public defstruct DefinedInStmt <: ProjStmt & Equalable :
  package: Symbol
  filename: String
with: (printer => true)

public defstruct RequiresStmt <: ProjStmt & Equalable :
  package: Symbol
  ccfiles: Tuple<String>
  ccflags: Tuple<String>
with: (printer => true)

public defstruct ImportWhenStmt <: ProjStmt & Equalable :
  package: Symbol
  dependencies: Tuple<Symbol>
with: (printer => true)

public defstruct CompileStmt <: ProjStmt & Equalable :
  file?: True|False
  name: String
  dependencies: Tuple<String>
  commands: Tuple<String>
with: (printer => true)

public defstruct BuildStmt <: ProjStmt :
  name: Symbol
  inputs: Tuple<String|Symbol>
  supported-vm-packages: Tuple<String|Symbol>
  pkg: Maybe<String>
  output: Maybe<String>
  assembly: Maybe<String>
  ccfiles: Tuple<String>
  ccflags: Tuple<String>
  flags: Tuple<Symbol>
  optimize: True|False
with: (printer => true)

;============================================================
;======================= Equality ===========================
;============================================================

defmethod equal? (a:DefinedInStmt, b:DefinedInStmt) :
  package(a) == package(b) and
  filename(a) == filename(b)

defmethod equal? (a:RequiresStmt, b:RequiresStmt) :
  package(a) == package(b) and
  ccfiles(a) == ccfiles(b) and
  ccflags(a) == ccflags(b)

defmethod equal? (a:ImportWhenStmt, b:ImportWhenStmt) :
  package(a) == package(b) and
  dependencies(a) == dependencies(b)

defmethod equal? (a:CompileStmt, b:CompileStmt) :
  file?(a) == file?(b) and
  name(a) == name(b) and
  dependencies(a) == dependencies(b) and
  commands(a) == commands(b)

;============================================================
;==================== Staged AST ============================
;============================================================
defstruct ProjFileS0 :
  path: String
  full-path: String
  stmts: Tuple<ProjStmt>
with:
  printer => true

defmulti info (s:ProjStmt) -> FileInfo|False

defstruct IncludeStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  path: String
with: (printer => true)

defstruct IncludedStmtsS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  path: String
  full-path: String
  stmts: Tuple<ProjStmt>
with: (printer => true)

defstruct DefinedInStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  package: Symbol
  filename: ProjValue
with: (printer => true)

defstruct RequiresStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  package: Symbol
  ccfiles: Maybe<ProjValue>
  ccflags: Maybe<ProjValue>
with: (printer => true)

defstruct ImportWhenStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  package: Symbol
  dependencies: ProjValue
with: (printer => true)

defstruct CompileStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  file?: True|False
  name: String
  name-value: ProjValue
  dependencies: Maybe<ProjValue>
  commands: ProjValue
with: (printer => true)

defstruct BuildStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  name: Symbol
  inputs: ProjValue
  supported-vm-packages: Maybe<ProjValue>
  pkg: Maybe<ProjValue>
  output: Maybe<ProjValue>
  assembly: Maybe<ProjValue>
  ccfiles: Maybe<ProjValue>
  ccflags: Maybe<ProjValue>
  flags: Maybe<ProjValue>
  optimize: True|False
with: (printer => true)

defstruct VarStmtS0 <: ProjStmt :
  info: FileInfo|False with: (as-method => true)
  name: Symbol
  value: ProjValue

;------------------------------------------------------------
;--------------------- Values -------------------------------
;------------------------------------------------------------

deftype ProjValue
defmulti info (s:ProjValue) -> FileInfo|False
defmulti sub-info (s:ProjValue, info:FileInfo|False) -> ProjValue

defstruct AtomValue <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
  value: String|Symbol
with: (printer => true)
defstruct ProjValues <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
  values: Tuple<ProjValue>
with: (printer => true)
defstruct CondPlatform <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
  values: Tuple<KeyValue<Symbol,ProjValue>>
with: (printer => true)
defstruct VarValue <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
  name: Symbol
with: (printer => true)
defstruct SplicedString <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
  values: Tuple<ProjValue>
with: (printer => true)
defstruct ProjDir <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
with: (printer => true)
defstruct WorkDir <: ProjValue :
  info: FileInfo|False with: (as-method => true, updater => sub-info)
with: (printer => true)

;============================================================
;======================= Reader =============================
;============================================================
defn read-raw-proj-file (filename:String) :
  val forms = read-file(filename)
  val stmts = parse-syntax[stanza-projfile / #projstmt! ...](forms)
  val full-path = resolve-path(filename) as String
  ProjFileS0(filename, full-path, to-tuple(stmts))

;============================================================
;================= Project File Syntax ======================
;============================================================

defsyntax stanza-projfile :

  ;----------------------------------------------------------
  ;------------------- Main Productions ---------------------
  ;----------------------------------------------------------
  defproduction projstmt : ProjStmt
  defproduction projvalue: ProjValue

  defrule projstmt = (include ?path:#string!) :
    IncludeStmtS0(closest-info(), path)

  defrule projstmt = (package ?package:#symbol! defined-in ?filename:#projvalue!) :
    DefinedInStmtS0(closest-info(), package, filename)

  defrule projstmt = (package ?package:#symbol! requires #:! (?rs:#require! ...)) :
    RequiresStmtS0(closest-info(), package, entry?(rs, `ccfiles), entry?(rs, `ccflags))

  defrule projstmt = (import ?package:#symbol! when-imported ?deps:#projvalue!) :
    ImportWhenStmtS0(closest-info(), package, deps)

  defrule projstmt = (compile ?file?:#file? ?name:#string! ?dependencies:#dependencies #:! ?v:#projvalue!) :
    CompileStmtS0(closest-info(), file?, name, AtomValue(closest-info(),name), dependencies, v)
  defproduction file? : True|False
  defrule file? = (file) : true
  defrule file? = (flag) : false
  defproduction dependencies : Maybe<ProjValue>
  defrule dependencies = (from ?v:#projvalue!) : One(v)
  defrule dependencies = () : None()

  defrule projstmt = (build ?name:#symbol! #:! (?bs:#build-option! ...)) :
    within add-proj-file-info(closest-info()) :
      BuildStmtS0(closest-info(),
                  name,
                  entry!(bs, `inputs),
                  entry?(bs, `supported-vm-packages),
                  entry?(bs, `pkg),
                  entry?(bs, `o)
                  entry?(bs, `s)
                  entry?(bs, `ccfiles)
                  entry?(bs, `ccflags)
                  entry?(bs, `flags)
                  entry?(bs, `optimize, false))

  defrule projstmt = (var ?name:#symbol! = ?v:#projvalue!) :
    VarStmtS0(closest-info(), name, v)

  defrule projvalue = (on-platform #:! (?es:#platform-entry! ...)) :
    CondPlatform(closest-info(), to-tuple(es))
  defproduction platform-entry! : KeyValue<Symbol,ProjValue>
  defrule platform-entry! = (?platform:#symbol! #:! ?v:#projvalue!) : platform => v

  defrule projvalue = ({?name:#symbol!}) :
    VarValue(closest-info(), name)

  defrule projvalue = ((?vs:#projvalue! ...)) :
    ProjValues(closest-info(), to-tuple(vs))

  defrule projvalue = (?v:#symbol-or-string) :
    AtomValue(closest-info(), v)

  ;----------------------------------------------------------
  ;----------------- Require Statement Entries --------------
  ;----------------------------------------------------------
  defproduction require! : KeyValue<Symbol,ProjValue>
  defrule require! = (ccfiles #:! ?v:#projvalue!) : `ccfiles => v
  defrule require! = (ccflags #:! ?v:#projvalue!) : `ccflags => v
  fail-if require! = () : ProjFileError(closest-info(), "Expected a requirement entry here.")

  ;----------------------------------------------------------
  ;----------------- Build Option Entries -------------------
  ;----------------------------------------------------------
  defproduction build-option! : KeyValue<Symbol,?>
  defrule build-option! = (inputs #:! ?v:#projvalue!) : `inputs => v
  defrule build-option! = (supported-vm-packages #:! ?v:#projvalue!) : `supported-vm-packages => v
  defrule build-option! = (pkg #:! ?v:#projvalue!) : `pkg => v
  defrule build-option! = (o #:! ?v:#projvalue!) : `o => v
  defrule build-option! = (s #:! ?v:#projvalue!) : `s => v
  defrule build-option! = (ccfiles #:! ?v:#projvalue!) : `ccfiles => v
  defrule build-option! = (ccflags #:! ?v:#projvalue!) : `ccflags => v
  defrule build-option! = (flags #:! ?v:#projvalue!) : `flags => v
  defrule build-option! = (optimize) : `optimize => true

  ;----------------------------------------------------------
  ;--------------------- Error Productions ------------------
  ;----------------------------------------------------------
  public defproduction projstmt! : ProjStmt
  defproduction projvalue! : ProjValue

  defrule projstmt! = (?x:#projstmt) : x
  fail-if projstmt! = () : ProjFileError(closest-info(), "Expected a Stanza project statement here.")
  defrule projvalue! = (?x:#projvalue) : x
  fail-if projvalue! = () : ProjFileError(closest-info(), "Not a valid value.")

  defproduction :! : False
  defrule :! = (:) : false
  fail-if :! = () : ProjFileError(closest-info(), "Expected a colon here.")

  ;----------------------------------------------------------
  ;---------------------- Basics ----------------------------
  ;----------------------------------------------------------

  defn ut (x) : unwrap-token(x)

  public defproduction symbol: Symbol
  public defproduction string: String
  public defproduction char: Char
  public defproduction byte: Byte
  public defproduction int: Int
  public defproduction long: Long
  public defproduction float: Float
  public defproduction double: Double
  public defproduction symbol-or-string : Symbol|String

  public defproduction symbol!: Symbol
  public defproduction string!: String
  public defproduction char!: Char
  public defproduction byte!: Byte
  public defproduction int!: Int
  public defproduction long!: Long
  public defproduction float!: Float
  public defproduction double!: Double
  public defproduction symbol-or-string! : Symbol|String

  defrule symbol = (?x) when ut(x) is Symbol : ut(x)
  defrule string = (?x) when ut(x) is String : ut(x)
  defrule char = (?x) when ut(x) is Char : ut(x)
  defrule byte = (?x) when ut(x) is Byte : ut(x)
  defrule int = (?x) when ut(x) is Int : ut(x)
  defrule long = (?x) when ut(x) is Long : ut(x)
  defrule float = (?x) when ut(x) is Float : ut(x)
  defrule double = (?x) when ut(x) is Double : ut(x)
  defrule symbol-or-string = (?x) when ut(x) is Symbol|String : ut(x)

  defrule symbol! = (?x:#symbol) : x
  fail-if symbol! = () : ProjFileError(closest-info(), "Expected a symbol here.")
  defrule string! = (?x:#string) : x
  fail-if string! = () : ProjFileError(closest-info(), "Expected a string here.")
  defrule char! = (?x:#char) : x
  fail-if char! = () : ProjFileError(closest-info(), "Expected a char here.")
  defrule byte! = (?x:#byte) : x
  fail-if byte! = () : ProjFileError(closest-info(), "Expected a byte here.")
  defrule int! = (?x:#int) : x
  fail-if int! = () : ProjFileError(closest-info(), "Expected a int here.")
  defrule long! = (?x:#long) : x
  fail-if long! = () : ProjFileError(closest-info(), "Expected a long here.")
  defrule float! = (?x:#float) : x
  fail-if float! = () : ProjFileError(closest-info(), "Expected a float here.")
  defrule double! = (?x:#double) : x
  fail-if double! = () : ProjFileError(closest-info(), "Expected a double here.")
  defrule symbol-or-string! = (?x:#symbol-or-string) : x
  fail-if symbol-or-string! = () : ProjFileError(closest-info(), "Expected a symbol or string here.")

;============================================================
;===================== KeyValue Utilities ===================
;============================================================

defn entry?<?T> (es:Seqable<KeyValue<Symbol,?T>>, name:Symbol) :
  for e in es first :
    One(value(e)) when key(e) == name else None()

defn entry?<?T> (es:Seqable<KeyValue<Symbol,?T>>, name:Symbol, default:?T) :
  val v = entry?(es, name)
  value?(v, default)

defn entry!<?T> (es:Seqable<KeyValue<Symbol,?T>>, name:Symbol) :
  val v = entry?(es, name)
  if empty?(v) :
    throw(ProjFileError(false, to-string("No %_ entry given." % [name])))
  value!(v)

;============================================================
;============ Check Statements Under Platform ===============
;============================================================

defn ensure-wellformed (f:ProjFileS0, platform:Symbol) :
  val errors = Vector<ProjFileError>()
  defn emit-error (e:ProjFileError) : add(errors, e)

  defn ensure-suffix! (info:FileInfo|False, path:String, suffix:String) :
    if not suffix?(path, suffix) :
      val msg = "Expected a %_ file here, but found %~." % [suffix path]
      emit-error $ ProjFileError(info, to-string(msg))

  defn ensure-wellformed (type:Symbol, v:Maybe<ProjValue>) :
    ensure-wellformed(type,value!(v)) when not empty?(v)

  defn ensure-wellformed (type:Symbol, v:ProjValue) :
    ;Check whether platforms are supported in value
    defn check-platforms (v:ProjValue) :
      match(v) :
        (v:AtomValue) :
          false
        (v:ProjValues) :
          do(check-platforms, values(v))
        (v:CondPlatform) :
          ;First check keys are supported platforms or 'else'.
          val n = length(values(v))
          for (entry in values(v), i in 0 to false) do :
            if key(entry) == `else :
              if i != n - 1 :
                emit-error $ ProjFileError(info(v), "The 'else' keyword can only be used as last entry in list.")
            else :
              if not supported-platform?(key(entry)) :
                emit-error $ ProjFileError(info(v), to-string("'%~' does not refer to a supported platform." % [key(entry)]))
          ;Check whether given platform is supported.
          val platform-supported? =
            for entry in values(v) any? :
              key(entry) == `else or key(entry) == platform
          if not platform-supported? :
            emit-error $ ProjFileError(info(v), to-string("There is no available option for the current platform %~." % [platform]))
          ;Then recurse
          do(check-platforms{value(_)}, values(v))

    ;Launch!
    check-platforms(v)

  defn ensure-no-duplicates<?T> (error:(T, T) -> ProjFileError, key:T -> ?, stmts:Seqable<?T>) :
    for group in group-by(key, stmts) do :
      if length(value(group)) > 1 :
        val vs = reverse(value(group))
        val v0 = head(vs)
        for v in tail(vs) do :
          emit-error(error(v0, v))

  ;Scan through include statements
  for s in stmts(f) do :
    match(s:IncludeStmtS0) :
      ensure-suffix!(info(s), path(s), ".proj")

  ;Check for duplicate statements
  within (s0,s1) = ensure-no-duplicates(path, filter-by<IncludeStmtS0>(stmts(f))) :
    ProjFileError(info(s1), to-string $ "Duplicate include statement for file %~. Earlier statement at %_." % [
      path(s1), info(s0)])
  within (s0,s1) = ensure-no-duplicates(package, filter-by<DefinedInStmtS0>(stmts(f))) :
    ProjFileError(info(s1), to-string $ "Duplicate defined-in statement for package %_. Earlier statement at %_." % [
      package(s1), info(s0)])
  within (s0,s1) = ensure-no-duplicates(package, filter-by<RequiresStmtS0>(stmts(f))) :
    ProjFileError(info(s1), to-string $ "Duplicate requires statement for package %_. Earlier statement at %_." % [
      package(s1), info(s0)])
  within (s0,s1) = ensure-no-duplicates(name, filter-by<CompileStmtS0>(stmts(f))) :
    ProjFileError(info(s1), to-string $ "Duplicate compile statement for file %~. Earlier statement at %_." % [
      name(s1), info(s0)])
  within (s0,s1) = ensure-no-duplicates(name, filter-by<BuildStmtS0>(stmts(f))) :
    ProjFileError(info(s1), to-string $ "Duplicate build definition for target %~. Earlier definition at %_." % [
      name(s1), info(s0)])

  ;Throw exception if any errors
  throw(ProjFileErrors(errors)) when not empty?(errors)
  ;Return file unchanged
  f

;============================================================
;================== Traverse Includes =======================
;============================================================

defn traverse-includes (f:ProjFileS0, platform:Symbol) :
  defn process (s:ProjStmt, parent-paths:List<IncludePath>) :
    match(s:IncludeStmtS0) :
      val parent-path = head(parent-paths)
      val full-path = include-path $
        replace-path-head(path(parent-path), path(s))
      if not exists?(full-path) :
        throw(CannotFindIncludeProj(info(s), path(parent-path), path(full-path)))
      else if included?(parent-paths, full-path) :
        throw(IncludeCycle(info(s), path(full-path), map(path,parent-paths)))
      else :
        included-stmts(cons(full-path, parent-paths), info(s))
    else :
      s
  defn included-stmts (parent-paths:List<IncludePath>, info:FileInfo|False) :
    val ipath = head(parent-paths)
    val file = ensure-wellformed(read-raw-proj-file(path(ipath)), platform)
    val stmts* = map(process{_, parent-paths}, stmts(file))
    IncludedStmtsS0(info, path(ipath), full-path(ipath) as String, stmts*)

  ;Launch!
  val path* = include-path(path(f))
  fatal("Project file no longer resolvable.") when not exists?(path*)
  val stmts* = map(process{_, List(path*)}, stmts(f))
  ProjFileS0(path(f), full-path(f), stmts*)

defstruct IncludePath :
  path: String
  full-path: String|False

defn include-path (path:String) :
  IncludePath(path, resolve-path(path))

defn exists? (p:IncludePath) :
  full-path(p) is String

defn included? (paths:List<IncludePath>, p:IncludePath) :
  for p1 in paths any? :
    full-path(p1) == full-path(p)

defn replace-path-head (path:String, head:String) :
  val dir = enclosing-dir(parse-path(path))
  to-string(relative-to-dir(dir, parse-path(head)))

defn remove-path-head (path:String) :
  to-string(enclosing-dir(parse-path(path)))

;============================================================
;================= Variable Substitution ====================
;============================================================

defn variable-substitution (f:ProjFileS0) :
  ;Compute values of all symbols
  val symbol-table = HashTable<Symbol,ProjValue>()

  ;Accumulate errors
  val errors = Vector<ProjFileError>()

  ;Retrieve a value from the symbol table
  defn get-value! (info:FileInfo|False, name:Symbol) :
    if not key?(symbol-table, name) :
      val env-v = get-env(to-string(name))
      match(env-v:String) :
        AtomValue(info, env-v)
      else :
        ;Record error
        add(errors, ProjFileError(info, to-string("Cannot resolve variable %_." % [name])))
        ;Return dummy
        VarValue(info, name)
    else :
      sub-info(symbol-table[name], info)
  defn get-value! (info:FileInfo|False, name:String) :
    get-value!(info, to-symbol(name))

  ;Substitute variables into given string
  defn sub-string-vars (info:FileInfo|False, s:String) :
    within name = sub-curly(info, s) :
      if name == "." : ProjDir(info)
      else if name == "WORKDIR" : WorkDir(info)
      else : get-value!(info,name)

  ;Substitute variables into value
  defn sub-vars (v:ProjValue) :
    match(v) :
      (v:AtomValue) :
        match(value(v)) :
          (value:String) : sub-string-vars(info(v), value)
          (value:Symbol) : v
      (v:ProjValues) :
        ProjValues(info(v), map(sub-vars, values(v)))
      (v:CondPlatform) :
        CondPlatform(info(v), map-values(sub-vars, values(v)))
      (v:VarValue) :
        get-value!(info(v),name(v))

  ;Substitute all variables
  defn sub-vars (s:ProjStmt) :
    match(s) :
      (s:IncludedStmtsS0) :
        IncludedStmtsS0(
          info(s),
          path(s),
          full-path(s),
          map(sub-vars, stmts(s)))
      (s:DefinedInStmtS0) :
        DefinedInStmtS0(
          info(s),
          package(s),
          sub-vars(filename(s)))
      (s:RequiresStmtS0) :
        RequiresStmtS0(
          info(s),
          package(s),
          maybe?(sub-vars, ccfiles(s)),
          maybe?(sub-vars, ccflags(s)))
      (s:ImportWhenStmtS0) :
        ImportWhenStmtS0(
          info(s),
          package(s),
          sub-vars(dependencies(s)))
      (s:CompileStmtS0) :
        CompileStmtS0(
          info(s)
          file?(s)
          name(s)
          sub-vars(name-value(s)),
          maybe?(sub-vars, dependencies(s))
          sub-vars(commands(s)))
      (s:BuildStmtS0) :
        BuildStmtS0(
          info(s)
          name(s)
          sub-vars(inputs(s))
          maybe?(sub-vars, supported-vm-packages(s))
          maybe?(sub-vars, pkg(s))
          maybe?(sub-vars, output(s))
          maybe?(sub-vars, assembly(s))
          maybe?(sub-vars, ccfiles(s))
          maybe?(sub-vars, ccflags(s))
          maybe?(sub-vars, flags(s))
          optimize(s))
      (s:VarStmtS0) :
        val value* = sub-vars(value(s))
        symbol-table[name(s)] = value*
        VarStmtS0(info(s), name(s), value*)

  ;Launch!
  val stmts* = map(sub-vars,stmts(f))

  ;Check for errors
  throw(ProjFileErrors(errors)) when not empty?(errors)

  ;Return substituted Project File
  ProjFileS0(path(f), full-path(f), stmts*)


defn sub-curly (f:String -> ProjValue, info:FileInfo|False, s:String) -> ProjValue :
  if index-of-char(s, '{') is False :
    AtomValue(info, s)
  else :
    val buffer = Vector<ProjValue>()

    ;Iterate through the curlies
    let loop (start:Int = 0) :
      ;Determine curly bounds
      val [i, j] = let :
        val i = index-of-char(s, start to false, '{')
        match(i:Int) :
          [i, index-of-char(s, (i + 1) to false, '}')]
        else : [i, false]
      ;If there is a curly
      match(i:Int, j:Int) :
        ;Add string up to curly
        if start < i :
          add(buffer, AtomValue(info, s[start to i]))
        ;Add replacement
        val replacement = f(s[(i + 1) through (j - 1)])
        add(buffer, replacement)
        ;Continue past } char
        loop(j + 1)
      else :
        ;End of string, add the rest
        if start < length(s) :
          add(buffer, AtomValue(info, s[start to false]))

    ;Return spliced string
    SplicedString(info, to-tuple(buffer))

;============================================================
;============ Normalize Statements Under Platform ===========
;============================================================

defn normalize (f:ProjFileS0, current-platform:Symbol) :
  ;Track errors
  val errors = Vector<ProjFileError>()

  ;----------------------------------------------------------
  ;----------------- Checking Validity ----------------------
  ;----------------------------------------------------------
  defn ensure-stanza-input (v:ProjValue) :
    val stanza-input? =
      match(v) :
        (v:AtomValue) :
          match(value(v)) :
            (value:String) : any?(suffix?{value, _}, [".stanza" ".pkg" ".fpkg"])
            (value:Symbol) : true
        (v:SplicedString) :
          val n = length(values(v))
          val s = to-string(values(v)[n - 1])
          any?(suffix?{s, _}, [".stanza" ".pkg" ".fpkg"])
        (v) : false
    if not stanza-input? :
      add(errors, ProjFileError(info(v), "Expected a stanza input file here."))
    v

  defn ensure-string (v:ProjValue) :
    match(v:AtomValue) :
      if value(v) is Symbol :
        add(errors, ProjFileError(info(v), "Expected a string here."))
    v

  defn ensure-symbol (v:ProjValue) :
    val symbol? = match(v:AtomValue) : value(v) is Symbol
    if not symbol? :
      add(errors, ProjFileError(info(v), "Expected a symbol here."))
    v

  ;----------------------------------------------------------
  ;----------------- Retrieve Proper Value(s) ---------------
  ;----------------------------------------------------------
  defn single (name:String, v:ProjValue) :
    val vs = flatten(norm(v))
    if length(vs) == 1 :
      switch(name) :
        "string" : ensure-string(vs[0])
        "symbol" : ensure-symbol(vs[0])
        "stanza input file" : ensure-stanza-input(vs[0])
      vs[0]
    else :
      add(errors, ProjFileError(info(v), to-string("Expected a single %_ here." % [name])))
      v

  defn multiple (name:String, v:ProjValue) :
    val vs = flatten(norm(v))
    switch(name) :
      "string" : do(ensure-string, vs)
      "symbol" : do(ensure-symbol, vs)
      "stanza input file" : do(ensure-stanza-input, vs)
    ProjValues(info(v), vs)

  ;------------------------------------------------------------
  ;------------------- Normalize Statements -------------------
  ;------------------------------------------------------------
  defn norm (s:ProjStmt) :
    match(s) :
      (s:IncludedStmtsS0) :
        val stmts* = map(norm, stmts(s))
        IncludedStmtsS0(info(s), path(s), full-path(s), stmts*)
      (s:DefinedInStmtS0) :
        DefinedInStmtS0(info(s),
                        package(s),
                        single("string", filename(s)))
      (s:RequiresStmtS0) :
        RequiresStmtS0(info(s),
                       package(s),
                       maybe?(multiple{"string", _}, ccfiles(s)),
                       maybe?(multiple{"string", _}, ccflags(s)))
      (s:ImportWhenStmtS0) :
        ImportWhenStmtS0(info(s),
                         package(s),
                         multiple("symbol", dependencies(s)))
      (s:CompileStmtS0) :
        CompileStmtS0(info(s),
                      file?(s),
                      name(s),
                      single("string", name-value(s)),
                      maybe?(multiple{"string", _}, dependencies(s)),
                      multiple("string", commands(s)))
      (s:BuildStmtS0) :
        BuildStmtS0(info(s),
                    name(s),
                    multiple("stanza input file", inputs(s)),
                    maybe?(multiple{"stanza input file", _}, supported-vm-packages(s)),
                    maybe?(single{"string", _}, pkg(s)),
                    maybe?(single{"string", _}, output(s)),
                    maybe?(single{"string", _}, assembly(s)),
                    maybe?(multiple{"string", _}, ccfiles(s)),
                    maybe?(multiple{"string", _}, ccflags(s)),
                    maybe?(multiple{"symbol", _}, flags(s)),
                    optimize(s))
      (s:VarStmtS0) :
        s

  ;Normalize a value (evaluate all platform switches, and separate spliced strings)
  defn norm (v:ProjValue) :
    match(v) :
      (v:AtomValue|ProjDir|WorkDir) :
        v
      (v:ProjValues) :
        ProjValues(info(v), map(norm,values(v)))
      (v:SplicedString) :
        separate(SplicedString(info(v), map(norm,values(v))))
      (v:CondPlatform) :
        val v* = for e in values(v) first :
          if key(e) == current-platform or key(e) == `else :
            One(norm(value(e)))
          else : None()
        value!(v*)

  ;----------------------------------------------------------
  ;-------------------- Launch ------------------------------
  ;----------------------------------------------------------
  ;Launch!
  val stmts* = map(norm, stmts(f))
  ;Check for errors
  throw(ProjFileErrors(errors)) when not empty?(errors)
  ;Return file
  ProjFileS0(path(f), full-path(f), stmts*)

;Remove ProjValues nested within ProjValues
defn flatten (v:ProjValue) -> Tuple<ProjValue> :
  match(v:ProjValues) :
    val accum = Vector<ProjValue>()
    let loop (v:ProjValue = v) :
      match(v:ProjValues) : do(loop, values(v))
      else : add(accum,v)
    to-tuple(accum)
  else :
    [v]

;Separate a spliced string into a tuple of project values
;if necessary.
defn separate (s:SplicedString) -> ProjValue :
  ;Create buffer of values and separators
  val buffer = Vector<ProjValue|Separator>()

  ;Recursively add all values to buffer (with separators if necessary.)
  defn add-to-buffer (v:ProjValue) :
    val counter = to-seq(0 to false)
    let loop (v:ProjValue = v) :
      match(v) :
        (v:ProjValues) :
          do(loop, values(v))
        (v) :
          add(buffer, Separator()) when next(counter) > 0
          add(buffer, v)
  do(add-to-buffer, values(s))

  ;Join all pieces in the buffer
  val joined-buffer = Vector<ProjValue>()
  val buffer-seq = to-seq(buffer)
  while not empty?(buffer-seq) :
    ;Take until next separator
    val values = to-tuple $ take-while({_ is ProjValue}, buffer-seq)
    ;Add to joined buffer
    if length(values) == 1 : add(joined-buffer, values[0] as ProjValue)
    else : add(joined-buffer, SplicedString(info(s), values as Tuple<ProjValue>))
    ;Eat separator
    next(buffer-seq) when not empty?(buffer-seq)

  ;Return cases
  if length(joined-buffer) == 1 : joined-buffer[0]
  else : ProjValues(info(s), to-tuple(joined-buffer))

defstruct Separator

;============================================================
;=============== Flatten Relative Paths =====================
;============================================================
defn flatten-relative-paths (f:ProjFileS0) :
  ;Compute working directory
  val workdir = resolve-path(".") as String

  ;Accumulate flattened statements
  val accum = Vector<ProjStmt>()
  defn emit (s:ProjStmt) : add(accum,s)

  ;Substitute directories
  defn sub-dirs (v:ProjValue, projdir:String) -> String|Symbol :
    defn value-string (v:ProjValue) -> String :
      match(v) :
        (v:WorkDir) : workdir
        (v:ProjDir) : projdir
        (v:AtomValue) : to-string(value(v))
    match(v) :
      (v:WorkDir|ProjDir) : value-string(v)
      (v:SplicedString) : string-join $ seq(value-string,values(v))
      (v:AtomValue) : value(v)

  ;Process statement and sub-statements and push into accumulator.
  defn process (s:ProjStmt, parent-path:String, parent-full-path:String) :
    ;Compute the project dir
    val proj-dir = remove-path-head(parent-full-path)

    ;If s is a string then assume that it is a filename and add a directory so it
    ;such that it is relative to the correct directory.
    defn add-dir-to-path (s:String|Symbol) :
      match(s:String) : replace-path-head(parent-path, s)
      else : s

    defn to-path (v:ProjValue) :
      add-dir-to-path(sub-dirs(v, proj-dir))
    defn to-input (v:ProjValue) :
      sub-dirs(v, proj-dir)
    defn to-paths (v:ProjValue) :
      map(to-path, values(v as ProjValues))
    defn to-inputs (v:ProjValue) :
      map(to-input, values(v as ProjValues))

    match(s) :
      (s:IncludedStmtsS0) :
        do(process{_, path(s), full-path(s)}, stmts(s))
      (s:DefinedInStmtS0) :
        emit $ DefinedInStmt(package(s),
                             to-path(filename(s)) as String)
      (s:RequiresStmtS0) :
        emit $ RequiresStmt(package(s),
                            tuple?(to-paths,ccfiles(s)) as Tuple<String>,
                            tuple?(to-inputs,ccflags(s)) as Tuple<String>)
      (s:ImportWhenStmtS0) :
        emit $ ImportWhenStmt(package(s),
                              to-inputs(dependencies(s)) as Tuple<Symbol>)
      (s:CompileStmtS0) :
        val name* = to-path(name-value(s)) when file?(s) else to-input(name-value(s))
        emit $ CompileStmt(file?(s),
                           name* as String,
                           tuple?(to-paths,dependencies(s)) as Tuple<String>,
                           to-inputs(commands(s)) as Tuple<String>)
      (s:BuildStmtS0) :
        emit $ BuildStmt(
          name(s)
          to-paths(inputs(s))
          tuple?(to-paths, supported-vm-packages(s))
          maybe?(to-path, pkg(s)) as Maybe<String>
          maybe?(to-path, output(s)) as Maybe<String>
          maybe?(to-path, assembly(s)) as Maybe<String>
          tuple?(to-paths, ccfiles(s)) as Tuple<String>
          tuple?(to-inputs, ccflags(s)) as Tuple<String>
          tuple?(to-inputs, flags(s)) as Tuple<Symbol>
          optimize(s))
      (s:VarStmtS0) :
        false

  ;Launch!
  do(process{_, path(f), full-path(f)}, stmts(f))

  ;Return new project file
  ProjFile(to-tuple(accum))

;============================================================
;=================== Combine Files ==========================
;============================================================
defn combine (fs:Seqable<ProjFile>) :
  defn strip-by-key<?T> (key:T -> ?, stmts:Seqable<?T>) :
    val table = HashTable<?,T>()
    for s in stmts do : table[key(s)] = s
    values(table)

  val all-stmts = to-tuple $ seq-cat(stmts, fs)
  val new-stmts = to-tuple $ cat-all $ [
    strip-by-key(package, filter-by<DefinedInStmt>(all-stmts))
    strip-by-key(package, filter-by<RequiresStmt>(all-stmts))
    strip-by-key(package, filter-by<ImportWhenStmt>(all-stmts))
    strip-by-key(name, filter-by<CompileStmt>(all-stmts))
    strip-by-key(name, filter-by<BuildStmt>(all-stmts))]
  ProjFile(new-stmts)

;============================================================
;======================= Errors =============================
;============================================================

public defstruct ProjFileError <: Exception :
  info: FileInfo|False
  msg: String
defmethod print (o:OutputStream, e:ProjFileError) :
  val info-str = "" when info(e) is False
            else "%_: " % [info(e)]
  print(o, "%_%_" % [info-str, msg(e)])

public defstruct ProjFileErrors <: Exception :
  exceptions: Collection<Exception>
defmethod print (o:OutputStream, e:ProjFileErrors) :
  print(o, "%n" % [exceptions(e)])

public defn CannotFindIncludeProj (info:FileInfo|False, src-proj:String, load-proj:String) :
  val msg = to-string("The project file %~ cannot load non-existent project file %~." % [src-proj, load-proj])
  ProjFileError(info, msg)

public defn IncludeCycle (info:FileInfo|False, path:String, parent-paths:List<String>) :
  val msg = to-string("Cyclic include error when attempting to re-include project file %~. Already included through paths: %@." % [
    path, parent-paths])
  ProjFileError(info, msg)

defn add-proj-file-info<?T> (f:() -> ?T, info:FileInfo|False) :
  try :
    f()
  catch (e:ProjFileError) :
    throw(ProjFileError(info, msg(e)))

;============================================================
;======================== Utilities =========================
;============================================================

defn maybe?<?T,?S> (f:T -> ?S, x:Maybe<?T>) -> Maybe<S> :
  if empty?(x) : None()
  else : One(f(value!(x)))

defn tuple?<?T,?S> (f:T -> Tuple<?S>, x:Maybe<?T>) -> Tuple<S> :
  if empty?(x) : []
  else : f(value!(x))

defn map-values<?K,?V1,?V2> (f:V1 -> ?V2, xs:Tuple<KeyValue<?K,?V1>>) :
  for x in xs map : key(x) => f(value(x))