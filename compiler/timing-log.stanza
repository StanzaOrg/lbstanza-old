defpackage stz/timing-log :
  import core
  import collections

;============================================================
;====================== API =================================
;============================================================

public deftype TimingLog
public defmulti id (l:TimingLog, name:String, parent:Int|False) -> Int
public defmulti log (l:TimingLog, id:Int, e:EventType) -> False
public defmulti flush (l:TimingLog) -> False
public defmulti close (l:TimingLog) -> False

public defenum EventType :
  StartEvent
  StopEvent
  LogEvent

  ;Internal
  IdEvent
  BeginEvent
  EndEvent

;============================================================
;================= Implementation ===========================
;============================================================

public defn TimingLog (filename:String) :
  val stream = FileOutputStream(filename)
  write-type(stream, BeginEvent)
  write-long(stream, current-time-us())
  val id-counter = to-seq(0 to false)
  new TimingLog :
    defmethod id (this, name:String, parent:Int|False) -> Int :
      val id = next(id-counter)
      write-type(stream, IdEvent)
      write-int(stream, id)
      write-int?(stream, parent)
      write-string(stream, name)
      id
    defmethod log (this, id:Int, e:EventType) -> False :
      write-type(stream, e)
      write-int(stream, id)
      write-long(stream, current-time-us())
    defmethod flush (this) :
      flush(stream)
    defmethod close (this) :
      write-type(stream, EndEvent)
      write-long(stream, current-time-us())
      close(stream)

;============================================================
;================== Readers/Writers =========================
;============================================================

defn write-int (o:OutputStream, x:Int) :
  put(o, x)

defn write-long (o:OutputStream, x:Long) :
  put(o, x)

defn write-int? (o:OutputStream, x:Int|False) :
  match(x:Int) :
    put(o, 1Y)
    write-int(o, x)
  else :
    put(o, 0Y)

defn write-string (o:OutputStream, s:String) :
  put(o, length(s))
  do(put{o, _}, s)

defn write-type (o:OutputStream, t:EventType) :
  put(o, to-int(t))