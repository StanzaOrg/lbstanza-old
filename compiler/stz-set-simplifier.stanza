defpackage stz/set-simplifier :
  import core
  import collections
  import stz/utils

;============================================================
;========================= Input ============================
;============================================================

public deftype Term <: Comparable<Term> & Equalable & Hashable

public defstruct Union <: Term :
  terms: Tuple<Term> with: (ensure => length-at-least-two!)
public defstruct Intersection <: Term :
  terms: Tuple<Term> with: (ensure => length-at-least-two!)
public defstruct Var <: Term :
  id: Int
public defstruct Top <: Term
public defstruct Bot <: Term

;============================================================
;======================= Precondition =======================
;============================================================

defn length-at-least-two! (description:String, value:Tuple) :
  if length(value) < 2 :
    fatal("Tuple passed to %_ has length less than two." % [description])

;============================================================
;====================== Comparisons =========================
;============================================================

defn rank (t:Term) :
  match(t) :
    (t:Union) : 0
    (t:Intersection) : 1
    (t:Var) : 2
    (t:Top) : 3
    (t:Bot) : 4
    
defmethod compare (a:Term, b:Term) :
  val c0 = compare(rank(a), rank(b))
  if c0 == 0 :
    match(a,b) :
      (a:Union, b:Union) : compare(terms(a),terms(b))
      (a:Intersection, b:Intersection) : compare(terms(a),terms(b))
      (a:Var, b:Var) : compare(id(a), id(b))
      (a:Top, b:Top) : 0
      (a:Bot, b:Bot) : 0
  else : c0

defmethod equal? (a:Term, b:Term) :
  compare(a,b) == 0

defmethod hash (t:Term) :
  match(t) :
    (t:Top) : 1
    (t:Bot) : 2
    (t:Var) : 3 * id(t)
    (t:Union) : 4 * hash(terms(t))
    (t:Intersection) : 5 * hash(terms(t))

;============================================================
;===================== Mappers ==============================
;============================================================

defn map (f:Term -> Term, t:Term) :
  match(t) :
    (t:Union) : Union(map(f,terms(t)))
    (t:Intersection) : Intersection(map(f,terms(t)))
    (t:Var) : t
    (t:Top) : t
    (t:Bot) : t

defn do (f:Term -> ?, t:Term) -> False :
  defn g (t:Term) : (f(t), t)
  map(g,t)
  false

;============================================================
;==================== Normalize =============================
;============================================================

defn union-terms (return:Term -> ?, t:Term) :
  let loop (t:Term = t) :
    match(t:Union) : do(loop, terms(t))
    else : return(t)

defn intersection-terms (return:Term -> ?, t:Term) :
  let loop (t:Term = t) :
    match(t:Intersection) : do(loop, terms(t))
    else : return(t)

defn Union? (ts:Vector<Term>) -> Term :
  switch(length(ts)) :
    0 : Bot()
    1 : ts[0]
    else : Union(to-tuple(ts))

defn Intersection? (ts:Vector<Term>) -> Term :
  switch(length(ts)) :
    0 : Top()
    1 : ts[0]
    else : Intersection(to-tuple(ts))

defn normalize-terms! (ts:Vector<Term>) :
  qsort!(ts)
  remove-duplicates!(ts)

defn normalize (t:Term) -> Term :
  match(t) :
    (t:Union) :
      val terms* = Vector<Term>()
      within term = union-terms(t) :
        match(normalize(term)) :
          (t:Union) : add-all(terms*, terms(t))
          (t) : add(terms*, t)          
      remove-when({_ is Bot}, terms*)
      if any?({_ is Top}, terms*) :
        Top()
      else :
        normalize-terms!(terms*)
        Union?(terms*)
    (t:Intersection) :
      val terms* = Vector<Term>()
      within term = intersection-terms(t) :
        match(normalize(term)) :
          (t:Intersection) : add-all(terms*, terms(t))
          (t) : add(terms*, t)          
      remove-when({_ is Top}, terms*)
      if any?({_ is Bot}, terms*) :
        Bot()
      else :
        normalize-terms!(terms*)
        Intersection?(terms*)
    (t) : t

;============================================================
;================ Disjunctive Normal Form ===================
;============================================================

;DNF Form: (ab | ac | ae | bc | ...)
defn dnf-form (term:Term) -> Term :
  ;Normalize terms and create a clause.
  defn normalized-clause (make-term:Vector<Term> -> Term, input-terms:Seqable<Term>) -> Term :
    val terms = to-vector<Term>(input-terms)
    normalize-terms!(terms)
    make-term(terms)

  ;Union tuple
  defn union-tuple (t:Term) -> Tuple<Term> :
    match(t) :
      (t:Union) : terms(t)
      (t) : [t]

  ;Permutations
  defn permutations (return:Array<Int> -> ?, lengths:Tuple<Int>) :
    val dims = length(lengths)
    val indices = Array<Int>(dims, 0)
    let loop (d:Int = 0) :
      if d < dims :
        for i in 0 to lengths[d] do :
          indices[d] = i
          loop(d + 1)
      else :
        return(indices)

  ;Retrieve the given indices in the given term tuple.
  defn gather-intersection-vars (termss:Tuple<Tuple<Term>>, indices:Array<Int>) -> Seq<Term> :
    for (i in indices, terms in termss) seq-cat :
      match(terms[i]) :
        (t:Intersection) : /terms(t)
        (t) : [t]

  ;Launch!
  match(term) :
    (term:Union) :
      val all-terms = seq-cat(union-tuple{dnf-form(_)}, terms(term))
      normalized-clause(Union?, all-terms)
    (term:Intersection) :
      val terms* = map(union-tuple{dnf-form(_)}, terms(term))
      val num-terms = length(terms*)
      val dnf-terms* = Vector<Term>()
      within indices = permutations(map(length, terms*)) :
        val clause-terms* = gather-intersection-vars(terms*, indices)
        add(dnf-terms*, normalized-clause(Intersection?,clause-terms*))
      Union?(dnf-terms*)
    (term) : term

;============================================================
;=================== Absorption Laws ========================
;============================================================

defn absorption (t:Term) -> Term :
  match(t:Union) : union-absorption(t)
  else : t

defn union-absorption (dnf:Union) -> Term :
  ;Sort terms by number of conjunctions
  val conj-terms = to-vector<Term|False>(terms(dnf))
  defn num-conjunctions (t:Term) -> Int :
    match(t:Intersection) : length(terms(t))
    else : 1
  qsort!(num-conjunctions, conj-terms as Vector<Term>)
  
  ;Returns true if the term a exists in b.
  defn covers? (a:Term, b:Term) -> True|False :
    val avars = conj-vars(a)
    val bvars = conj-vars(b)
    all?(contains?{bvars, _}, avars)

  ;Remove all covered terms
  val num-terms = length(conj-terms)
  for i in 0 to num-terms do :
    match(conj-terms[i]) :
      (t:Term) :
        for j in 0 to num-terms do :
          if i != j and conj-terms[j] is Term :
            if covers?(t, conj-terms[j] as Term) :
              conj-terms[j] = false            
      (f:False) :
        false
  remove-when({_ is False}, conj-terms)
  Union?(conj-terms as Vector<Term>)      

;Returns all conjoined variables in term.
defn conj-vars (t:Term) -> Tuple<Var> :
  match(t) :
    (t:Intersection) : terms(t) as Tuple<Var>
    (t:Var) : [t]

;============================================================
;================== Grouping Simplification =================
;============================================================

defn grouping-simplification (t:Term) -> Term :
  match(t:Union) :
    val t* = union-grouping-simplification(t)
    ;Successful simplification.
    match(t*:Term) :
      ;Pull out factors and continue simplification.
      val ft = factor-dnf(t*)
      val ft* = factor-grouping-simplification(ft)
      substitute(ft*)
    ;Could not simplify
    else : t
  ;Not a union term, does not need grouping simplification
  else : t

defn factor-grouping-simplification (f:Factor) -> Factor :    
  val term* = grouping-simplification(term(f))
  val subterms* = for subterm in subterms(f) map : key(subterm) => grouping-simplification(value(subterm))
  Factor(term*, subterms*)

defn union-grouping-simplification (dnf:Union) -> Term|False :
  ;Get array of all terms
  val terms-array = to-array<Term|False> $ terms(dnf)

  ;Retrieve variable that occurs most often.
  defn common-var () -> Var|False :
    ;Count occurrences of each variable
    val var-counts = VarTable<Int>(0)
    for term in terms-array do :
      match(term:Term) :
        for v in conj-vars(term) do :      
          var-counts[v] = var-counts[v] + 1
    val vars = keys(var-counts)
    if not empty?(vars) :
      val v = maximum({var-counts[_]}, vars)
      v when var-counts[v] > 1

  ;Create term grouped by variable
  defn group-by-var (v:Var) -> Term :
    ;Return true if the given term contains the given variable.
    defn has-var? (t:Term, v:Var) -> True|False :
      contains?(conj-vars(t), v)
    ;Remove the given variable from the term.
    defn remove-var (t:Term, v:Var) -> Term :
      val terms* = to-vector<Term> $
        for tv in conj-vars(t) filter :
          tv != v
      Intersection?(terms*)
    ;Launch!
    val factored-terms = Vector<Term>()
    for i in 0 to length(terms-array) do :
      if terms-array[i] is Term :
        val term = terms-array[i] as Term
        if has-var?(term,v) :
          add(factored-terms, remove-var(term,v))
          terms-array[i] = false
    normalize-terms!(factored-terms)      
    val term* = Union?(factored-terms)
    Intersection([v, term*])

  ;Launch!
  val terms* = Vector<Term>()
  let loop (progress?:True|False = false) :
    val v = common-var()
    match(v:Var) :
      add(terms*, group-by-var(v))
      loop(true)
    else :
      if progress? :
        add-all(terms*, filter-by<Term>(terms-array))
        normalize-terms!(terms*)
        Union?(terms*)

;============================================================
;====================== Factor DNF ==========================
;============================================================

defstruct Factor :
  term: Term
  subterms: Tuple<KeyValue<Var,Term>>

defmethod print (o:OutputStream, f:Factor) :
  if empty?(subterms(f)) :
    print(o, term(f))
  else :
    print(o, "%_ where:" % [term(f)])
    val o2 = IndentedStream(o)
    for t in subterms(f) do :
      lnprint(o2, "%_ = %_" % [key(t), value(t)])

defn num-vars (t:Term) -> Int :
  var n:Int = 0
  let loop (t:Term = t) :
    match(t:Var) : n = max(n, id(t) + 1)
    else : do(loop, t)
  n
 
defn factor-dnf (t:Term) -> Factor :
  val vartable = HashTable<Term,Var>()
  val var-counter = to-seq(num-vars(t) to false)
  defn make-var (t:Term) -> Var :
    set?(vartable, t, fn () :
      Var(next(var-counter)))
  defn factor-union (t:Term) :
    match(t:Union) : Union(map(factor-clause, terms(t)))
    else : t
  defn factor-clause (t:Term) :
    match(t:Intersection) : Intersection(map(factor-var, terms(t)))
    else : t
  defn factor-var (t:Term) :
    match(t:Var) : t
    else : make-var(t)
  val t* = factor-union(t)
  val subterms = to-tuple $
    for entry in vartable seq :
      value(entry) => key(entry)
  Factor(t*, subterms)

defn substitute (ft:Factor) -> Term :
  let loop (t:Term = term(ft)) :
    match(t:Var) : lookup?(subterms(ft), t, t)
    else : map(loop, t)

;============================================================
;========================= VarTable =========================
;============================================================

deftype VarTable<T>
defmulti keys (t:VarTable) -> Seq<Var>
defmulti key? (t:VarTable, v:Var) -> True|False
defmulti get<?T> (t:VarTable<?T>, v:Var) -> T
defmulti set<?T> (t:VarTable<?T>, v:Var, x:T) -> False

defn VarTable<T> (default:T) :
  val items = Vector<Maybe<T>>()
  new VarTable<T> :
    defmethod keys (this) :
      for (item in items, id in 0 to false) seq? :
        if empty?(item) : None()
        else : One(Var(id))
    defmethod key? (this, v:Var) :
      id(v) < length(items) and not empty?(items[id(v)])
    defmethod get (this, v:Var) :
      if not key?(this,v) : default
      else : value!(items[id(v)])
    defmethod set (this, v:Var, x:T) :
      if length(items) <= id(v) :
        lengthen(items, id(v) + 1, None())
      items[id(v)] = One(x)

;============================================================
;======================= Printer ============================
;============================================================

defmethod print (o:OutputStream, t:Term) :
  print{o, _} $ match(t) :
    (t:Union) : "(%*)" % [join(terms(t), "|")]
    (t:Intersection) : "(%*)" % [join(terms(t), "&")]
    (t:Var) : "V%_" % [id(t)]
    (t:Top) : "top"
    (t:Bot) : "bot"

;============================================================
;====================== Main Algorithm ======================
;============================================================

public defn simplify (t:Term) -> Term :
  defn tap (msg) :
    fn (t:Term) :
      println(msg)
      println(t)
      t
  normalize $
  grouping-simplification $
  absorption $
;  tap("DNF Form") $
  dnf-form $
;  tap("Normalized") $
  normalize $
  t

;============================================================
;======================== Test ==============================
;============================================================

defn ex1 () :
  val A = Var(0)
  val B = Var(1)
  val C = Var(2)
  val D = Var(3)
  defn bit-or (a:Term, b:Term) : Union([a,b])
  defn bit-and (a:Term, b:Term) : Intersection([a,b])
  ((A | D) & ((A | B) | C)) | D

defn ex2 () :
  val A = Var(0)
  val B = Var(1)
  val C = Var(2)
  val D = Var(3)
  val top = Top()
  val bot = Bot()
  defn bit-or (a:Term, b:Term) : Union([a,b])
  defn bit-and (a:Term, b:Term) : Intersection([a,b])
  (A | bot | (top & bot)) | (A | (B | bot))

defn ex3 () :
  val A = Var(0)
  val B = Var(1)
  val C = Var(2)
  val D = Var(3)
  val top = Top()
  val bot = Bot()
  defn bit-or (a:Term, b:Term) : Union([a,b])
  defn bit-and (a:Term, b:Term) : Intersection([a,b])
  (A | bot | (top & bot)) | (A | (B | top))

defn ex4 () :
  val A = Var(0)
  val B = Var(1)
  val C = Var(2)
  val D = Var(3)
  val E = Var(4)
  val F = Var(5)
  val G = Var(6)
  val H = Var(7)
  val top = Top()
  val bot = Bot()
  defn bit-or (a:Term, b:Term) : Union([a,b])
  defn bit-and (a:Term, b:Term) : Intersection([a,b])
  ((A | B | C) & (D | E | F) & (G | H)) | ((A | B) & (C | D)) | D

defn ex5 () :
  val A = Var(0)
  val B = Var(1)
  val C = Var(2)
  val D = Var(3)
  defn bit-or (a:Term, b:Term) : Union([a,b])
  defn bit-and (a:Term, b:Term) : Intersection([a,b])
  ((A & B) | C) & B

defn main () :
  val t = ex5()
  println(t)
  println(simplify(t))

;main()

