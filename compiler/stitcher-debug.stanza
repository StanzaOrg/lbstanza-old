defpackage stz/stitcher-debug :
  import core
  import collections
  import stz/vm-ir
  import stz/codegen
  import stz/code-emitter
  import stz/packed-debug-table
  import stz/asm-ir

;============================================================
;=============== API for Emitting Debug Table ===============
;============================================================

;A utility type for emitting the assembly of a debug table.
public deftype AsmDebugTable

;Type for providing information about variables.
public deftype VarInfo

;Type for providing information about variables in a specific package.
public deftype PackageVarInfo

;Retrieve the package variable information
public defmulti package-info (info:VarInfo, name:Symbol) -> PackageVarInfo

;Retrieve the global offset for the given variable.
public defmulti global-offset (info:PackageVarInfo, id:Int) -> Int

;Emits the whole table to assembly.
;Used as the final step.
public defmulti emit (t:AsmDebugTable, emitter:CodeEmitter, info:VarInfo) -> False

;============================================================
;===================== Implementation =======================
;============================================================

public defn AsmDebugTable (packages:Collection<VMPackage>, stubs:AsmStubs) -> AsmDebugTable :

  ;Translate a set of VMPackage into a DebugTable.
  defn to-debug-table (ps:Collection<VMPackage>, info:VarInfo) -> DebugTable :
    DebugTable $ to-tuple $ for p in ps seq :
      package-debug-info(p, package-info(info, name(p)))   

  ;Translate a VMPackage into a PackageDebugInfo.
  defn package-debug-info (p:VMPackage, info:PackageVarInfo) -> PackageDebugInfo :
    val entries = for e in entries(debug-name-table(p)) map :
      DebugEntry(name(e), global-offset(info, id(e)))
    PackageDebugInfo(to-string(name(p)), entries)

  ;Create a StaticPacker for the debug table from the
  ;given code emitter.
  defn packer (emitter:CodeEmitter) -> StaticPacker :
    defn E (i:Ins) : emit(emitter, i)
    new StaticPacker :
      defmethod make-label (this) : unique-label(emitter)
      defmethod emit-label (this, id:Int) : E(Label(id))
      defmethod emit-pointer-to-label (this, id:Int) : E(DefLabel(id))
      defmethod emit (this, x:Long) : E(DefLong(x))
      defmethod emit (this, x:String) : E(DefString(x))
      defmethod emit-comment (this, s:String) : E(Comment(s))

  ;Return the AsmDebugTable.
  new AsmDebugTable :
    defmethod emit (this, emitter:CodeEmitter, info:VarInfo) :
      defn E (i:Ins) : emit(emitter, i)
      E(DefData())
      E(ExLabel(`stanza_debug_table))
      E(Label(debug-table(stubs)))      
      pack(packer(emitter), to-debug-table(packages, info))
      E(DefText())
  