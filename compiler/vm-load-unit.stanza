defpackage stz/vm-load-unit :
  import core
  import collections
  import stz/vm-ir
  import stz/printing-utils

;<doc>=======================================================
;===================== LoadUnit =============================
;============================================================

Represents a group of packages ready to be loaded into the VM.

# For each package #

  name: Symbol
  globals: Tuple<VMGlobal>
  methods: Tuple<VMMethod>

These definitions must be grouped by package because old definitions
must be removed in order to preserve semantics. Old globals must be
removed so that they are not considered live. Old methods must be
removed so that we do not consider them during method dispatch.

# For each extern defn #

  index: Int
  function-id: Int

The index field refers to the extern defn slot. The generated stub
will call the VM with that index. The VM will then lookup the extern
defn table at the given slot to find the function-id.

# For the unit #

  packages: Tuple<LoadPackage>
  datas: Tuple<VMData>
  consts: Tuple<VMConst>
  classes: Tuple<LoadedClass>
  funcs: Tuple<VMDefn>
  callbacks: Tuple<Callback>

All datas and consts are interned. The new datas and consts necessary
for this LoadUnit are included here.

All newly defined classes are listed.

All newly defined functions are listed.

All newly defined extern defn callbacks are listed here.

Within each function:
  ExternId will refer to the index of the address of the extern.
  ExternDefnId will refer to the index of the callback. 

;============================================================
;=======================================================<doc>

public defstruct LoadUnit :
  packages: Tuple<LoadPackage>
  datas: Tuple<VMData>
  consts: Tuple<VMConst>
  classes: Tuple<LoadedClass>
  funcs: Tuple<VMDefn>
  callbacks: Tuple<Callback>

public defstruct LoadedClass :
  package:Symbol
  class:VMClass

public defstruct LoadPackage :
  name: Symbol
  globals: Tuple<VMGlobal>
  methods: Tuple<VMMethod>

public defstruct Callback :
  index: Int
  function-id: Int
  a1: Tuple<VMType>
  a2: VMType
with:
  printer => true

;============================================================
;======================= Printers ===========================
;============================================================

defmethod print (o:OutputStream, u:LoadUnit) :
  val items = [
    inline-fields(packages(u))
    inline-fields(datas(u))
    inline-fields(consts(u))
    inline-fields(classes(u))
    inline-fields(funcs(u))
    inline-fields(callbacks(u))]
  print(o, "LoadUnit%_" % [colon-field-list(items)])

defmethod print (o:OutputStream, p:LoadedClass) :
  print(o, "LoadedClass in %~:\n%_" % [package(p), Indented(class(p))])

defmethod print (o:OutputStream, p:LoadPackage) :
  val items = cat(globals(p), methods(p))
  print(o, "LoadPackage %~%_" % [name(p), colon-field-list(items)])