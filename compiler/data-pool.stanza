defpackage stz/data-pool :
  import core
  import collections
  import stz/vm-ir

public deftype DataPool
public defmulti intern (p:DataPool, v:ByteArray) -> Int
public defmulti datas (p:DataPool) -> Vector<ByteArray>

public defn DataPool () :
  val datas = Vector<ByteArray>()
  val data-table = HashTable<ByteArray,Int>(content-hash, content-equal?)
  new DataPool :
    defmethod intern (this, v:ByteArray) :
      match(get?(data-table, v)) :
        (i:Int) :
          i
        (_:False) :
          val i = length(datas)
          add(datas, v)
          data-table[v] = i
          i
    defmethod datas (this) :
      datas
  
defn content-hash (b:ByteArray) :
  var h:Int = length(b)
  for x in b do : h = (7 * h) + to-int(x)
  h

defn content-equal? (a:ByteArray, b:ByteArray) :
  length(a) == length(b) and
  all?(equal?, a, b)