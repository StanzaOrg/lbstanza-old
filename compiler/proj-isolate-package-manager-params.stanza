defpackage stz/proj-isolate-package-manager-params :
  import core
  import collections
  import stz/proj-ir
  import stz/proj-stage0

;This pass pulls out all of the ForeignPackageParamsStmtS0 within the given files,
;but nested within the same file structure as before.
;This is to allow running the standard normalization, checking, flattening passes, etc.
;on just the ForeignPackageParamsStmtS0 statements.
;That is necessary because after we have the final configuration, we need to send
;that information to the foreign package manager to compute the additional set of variables
;declared by the package manager for use within the .proj files.

;Returns [files-with-params-stmts, files-without-params-stmts]. 
public defn isolate-package-manager-params (files:Tuple<ProjFileS0>)
                                        -> [Tuple<ProjFileS0>, Tuple<ProjFileS0>] :

  ;Returns [stmt-with-params-stmts, stmt-without-params-stmts].
  defn isolate (s:ProjStmt) -> [ProjStmt|False, ProjStmt|False] :
    match(s) :
      (s:IncludedStmtsS0) :
        val [stmts-with-params, stmts-without-params] = isolate(stmts(s))
        val stmt-with-params = sub-stmts(s, stmts-with-params) when not empty?(stmts-with-params)
        val stmt-without-params = sub-stmts(s, stmts-without-params) when not empty?(stmts-without-params)
        [stmt-with-params, stmt-without-params]
      (s:VarStmtS0) :
        [false, false]
      (s:ForeignPackageParamsStmtS0) :
        [s, false]
      (s) :
        [false, s]

  ;Returns [stmts-with-params-stmts, stmts-without-params-stmts].
  defn isolate (ss:Tuple<ProjStmt>) -> [Tuple<ProjStmt>, Tuple<ProjStmt>] :
    if empty?(ss) :
      [[], []]
    else :
      val stmts = to-tuple $ zip-all(seq(isolate,ss))
      val stmts-with-params = to-tuple $ filter-by<ProjStmt>(stmts[0])
      val stmts-without-params = to-tuple $ filter-by<ProjStmt>(stmts[1])
      [stmts-with-params, stmts-without-params]

  ;Returns [file-with-params-stmts, file-without-params-stmts].
  defn isolate (f:ProjFileS0) -> [ProjFileS0|False, ProjFileS0|False] :
    val [stmts-with-params, stmts-without-params] = isolate(stmts(f))
    val file-with-params = sub-stmts(f, stmts-with-params) when not empty?(stmts-with-params)
    val file-without-params = sub-stmts(f, stmts-without-params) when not empty?(stmts-without-params)
    [file-with-params, file-without-params]

  ;Launch!
  if empty?(files) :
    [[], []]
  else :
    val new-files = to-tuple(zip-all(seq(isolate,files)))
    val files-with-params = to-tuple $ filter-by<ProjFileS0>(new-files[0])
    val files-without-params = to-tuple $ filter-by<ProjFileS0>(new-files[1])
    [files-with-params, files-without-params]