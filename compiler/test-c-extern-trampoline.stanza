defpackage stz/test-c-extern-trampoline :
  import core
  import collections
  import stz/c-extern-trampoline
  import stz/code-emitter
  import stz/asm-emitter
  import stz/backend
  import stz/asm-ir

;Return an appropriate backend for the current platform.
defn current-backend () -> Backend :
  switch(CURRENT-PLATFORM) :
    Windows: W64Backend()
    OS-X: X64Backend()
    Linux: L64Backend()

;Return a new asm emitter that saves its instructions
;to a file.
defn asm-emitter (body:CodeEmitter -> ?, filename:String, backend:Backend) -> False :
  val stream = FileOutputStream(filename)
  try :
    val label-counter = to-seq(0 to false)
    val emitter = new CodeEmitter :
      defmethod unique-label (this) :
        next(label-counter)
      defmethod emit (this, e:Ins) :
        emit-asm(current-output-stream(), e, backend)
        emit-asm(stream, e, backend)
    body(emitter)
  finally :
    close(stream)

;Main testing function.
defn main () :
  val backend = current-backend()
  within emitter = asm-emitter("c-extern-code.s", backend) :
    compile-c-extern-dynamic-code-template(backend, emitter)
    compile-c-extern-trampoline-stub(backend, emitter)

;Launch!
main()