defpackage stz/macro-plugin :
  import core
  import collections
  import parser/syntax-package-registry
  import parser/core-macroexpander
  import parser/macroexpander
  import parser/errors
  import stz/core-macros
  import stz/fastio-runtime
  import stz/plugin-interface
  import stz/test-lang
  import stz/fastio-serializer-macros
  import stz/sexp-serializer
  import stz/params
  import stz/sexp-checker

;The interface for communicating with the plugin.
val PLUGIN-INTERFACE = PluginInterface(SExpIO())

;============================================================
;============== Macroexpansion Entry Point ==================
;============================================================

;The entry-point for performing macro-expansion.
extern defn macroexpand (input:ptr<byte>) -> ptr<byte> :
  return receive(PLUGIN-INTERFACE, input, fn(macroexpand-sexp))

;Expand the given sexpression using the Stanza core
;macros.
defn macroexpand-sexp ([sexp, overlays]:[?, List<Symbol>]) -> ? :
  val expander = PluginMacroexpander()
  val result = within with-core-macroexpander(expander) :
    macroexpand(expander, sexp, overlays)
  check-valid-sexp(result)
  result

;============================================================
;==================== Plugin Macroexpander ==================
;============================================================
;The PluginExpander is identical to the SimpleMacroexpander,
;except that if it encounters a NoSyntaxPackage it replaces
;it with a NoSyntaxPackageInPlugin. This makes it clear to the
;user, that it's not that a syntax package was missing, but that
;it was missing in this particular loaded plugin.

defn PluginMacroexpander () :
  new Macroexpander :
    defmethod macroexpand (this, form, overlay-specifiers:List<Symbol>) :
      try :
        syntax-parse(`core, overlay-specifiers, List(form), `exp, false)
      catch (e) :
        throw(annotate-plugin-information(e))

;Replace all NoSyntaxPackage with NoSyntaxPackageInPlugin.
defn annotate-plugin-information (e:Exception) -> Exception :
  match(e) :
    (e:NoSyntaxPackage) :
      NoSyntaxPackageInPlugin(name(e), syntax-packages())
    (e:ParseErrors) :
      ParseErrors(map(annotate-plugin-information, errors(e)))
    (e) :
      e

;Used as replacement for NoSyntaxPackage
defstruct NoSyntaxPackageInPlugin <: Exception :
  name:Symbol
  packages:Tuple<Symbol>

defmethod print (o:OutputStream, e:NoSyntaxPackageInPlugin) :
  defn quotes (s:Symbol) : "'%~'" % [s]
  print(o, "Could not resolve syntax package '%~' in this macro plugin." % [name(e)])
  print(o, " The plugin supports the following syntax packages: %,." % [seq(quotes, packages(e))])

;============================================================
;============== List Syntax Packages Entry Point ============
;============================================================

;The entry-point for retrieving the list of all syntax packages.
extern defn list_syntax_packages (input:ptr<byte>) -> ptr<byte> :
  return receive(PLUGIN-INTERFACE, input, fn(list-syntax-packages))

;List all supported syntax packages.
defn list-syntax-packages (f:False) -> Tuple<Symbol> :
  syntax-packages()

;============================================================
;============== Add Compiler Flags Entry Point ==============
;============================================================

;The entry-point for adding all of the initial compiler flags.
extern defn add_compiler_flags (input:ptr<byte>) -> ptr<byte> :
  return receive(PLUGIN-INTERFACE, input, fn(add-compiler-flags))

;Add all the compiler flags.
defn add-compiler-flags (flags:Tuple<Symbol>) -> False :
  do(add-flag, flags)