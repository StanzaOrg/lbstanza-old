defpackage stz/dynamic-graph :
  import core
  import collections
  import stz/keyed-set

;============================================================
;===================== Dynamic Graph ========================
;============================================================

public defstruct EdgeSet :
  id: Int
  edges: Tuple<Edge>
  
public defstruct Edge <: Comparable<Edge> :
  src: Int
  dst: Int

public deftype Node
public defmulti id (n:Node) -> Int
public defmulti compute-value (n:Node, v0:Maybe) -> ?

public defstruct GraphChange :
  nodes: Tuple<Node>
  edge-sets: Tuple<EdgeSet>

;============================================================
;======================= Printers ===========================
;============================================================

defmethod print (o:OutputStream, e:Edge) :
  print(o, "%_ => %_" % [src(e), dst(e)])

defmethod print (o:OutputStream, e:EdgeSet) :
  print(o, "edgeset %_ :" % [id(e)])
  val o2 = IndentedStream(o)
  do(lnprint{o2, _} edges(e))

;============================================================
;================= Graph Implementation =====================
;============================================================

public deftype DynamicGraph
public defmulti update (g:DynamicGraph, c:GraphChange) -> False
public defmulti inputs (g:DynamicGraph, node:Int) -> Collection<Int>
public defmulti value (g:DynamicGraph, node:Int) -> ?

public defn DynamicGraph () :
  ;Track all edge records and nodes
  val edge-records = IntTable<EdgeSetRecord>()
  val nodes = IntTable<NodeRecord>()

  ;Track all the nodes whose values need to be recomputed.
  val nodes-to-update = Vector<Int>()

  ;Track whether a node has been visited or not
  var current-marker:Int = 0
  defn mark-visited (n:NodeRecord) :
    if marker(n) != current-marker :
      set-marker(n, current-marker)
      true

  ;Add all the nodes to the node table
  defn add-node (n:Node) :
    match(get?(nodes,id(n))) :
      (r:NodeRecord) : set-node(r, n)
      (_:False) : nodes[id(n)] = NodeRecord(n)
    add(nodes-to-update, id(n))

  ;Add an edge to the graph and return its edge record
  defn add-edge (e:Edge) -> EdgeRecord :
    add(nodes-to-update, dst(e))
    val input-key = add(inputs(nodes[dst(e)]), src(e))
    val output-key = add(outputs(nodes[src(e)]), dst(e))
    EdgeRecord(e, input-key, output-key)

  ;Remove an edge from the graph given its edge record
  defn remove-edge (e:EdgeRecord) -> False :
    add(nodes-to-update, dst(edge(e)))
    remove(inputs(nodes[dst(edge(e))]), input-key(e))
    remove(outputs(nodes[src(edge(e))]), output-key(e))

  ;Sort the given edgeset
  defn sort (e:EdgeSet) :
    EdgeSet(id(e), qsort(edges(e)))

  ;Update the given edge set in the graph
  defn update-edge-set (e0:EdgeSet) :
    val e = sort(e0)
    match(get?(edge-records, id(e))) :
      (r:EdgeSetRecord) :
        val records* = Vector<EdgeRecord>()
        merge{_, edges(r), edges(e)} $ new Merger<EdgeRecord,Edge> :
          defmethod key (this, e:EdgeRecord|Edge) :
            match(e:EdgeRecord) : edge(e)
            else : e as Edge
          defmethod yield-left (this, e:EdgeRecord) : remove-edge(e)
          defmethod yield-right (this, e:Edge) : add(records*, add-edge(e))
          defmethod yield-merged (this, e:EdgeRecord, e2:Edge) : add(records*, e)        
        val r* = EdgeSetRecord(id(e), to-tuple(records*))
        edge-records[id(e)] = r*
      (_:False) :
        val r = EdgeSetRecord(id(e), map(add-edge, edges(e)))
        edge-records[id(e)] = r

  ;Call update value on all nodes in data-flow order.
  defn update-nodes () :
    val update = Vector<Int>()    
    current-marker = current-marker + 1
    defn visit (node-index:Int) :
      val node = nodes[node-index]
      if mark-visited(node) :
        do(visit, outputs(node))
        add(update, node-index)
    do(visit, nodes-to-update)
    clear(nodes-to-update)
    for n in in-reverse(update) do :
      val r = nodes[n]
      val v* = compute-value(node(r), value(r))
      set-value(r, One(v*))

  new DynamicGraph :
    defmethod update (this, g:GraphChange) :
      do(add-node, /nodes(g))
      do(update-edge-set, edge-sets(g))
      update-nodes()

    defmethod inputs (this, node:Int) :
      inputs(nodes[node])

    defmethod value (this, node:Int) :
      value!(value(nodes[node]))
      
    defmethod print (o:OutputStream, this) :
      print(o, "DynamicGraph:")
      val o2 = IndentedStream(o)
      for node in values(nodes) do :
        lnprint(o2, "Node %_" % [id(node)])
        lnprint(o2, "  Inputs: %," % [inputs(node)])
        lnprint(o2, "  Outputs: %," % [outputs(node)])

;============================================================
;=================== Comparing Edges ========================
;============================================================

defmethod compare (a:Edge, b:Edge) :
  defn key (e:Edge) : [src(e), dst(e)]
  compare(key(a), key(b))

;============================================================
;================= Internal Datastructures ==================
;============================================================
        
defstruct EdgeSetRecord :
  id: Int
  edges: Tuple<EdgeRecord>

defstruct EdgeRecord :
  edge: Edge
  input-key: ItemKey
  output-key: ItemKey

defstruct NodeRecord :
  node: Node with: (setter => set-node)
  inputs: KeyedSet<Int> with: (init => KeyedSet<Int>())
  outputs: KeyedSet<Int> with: (init => KeyedSet<Int>())
  marker: Int with: (init => -1, setter => set-marker)
  value: Maybe with: (init => None(), setter => set-value)

defn id (r:NodeRecord) : id(node(r))

;============================================================
;======================= Merge ==============================
;============================================================

deftype Merger<X,Y>
defmulti key<?X,?Y> (m:Merger<?X,?Y>, x:X|Y) -> Comparable
defmulti yield-left<?X,?Y> (m:Merger<?X,?Y>, x:X) -> False
defmulti yield-right<?X,?Y> (m:Merger<?X,?Y>, y:Y) -> False
defmulti yield-merged<?X,?Y> (m:Merger<?X,?Y>, x:X, y:Y) -> False

defn merge<?X,?Y> (merger:Merger<?X,?Y>,  xs:Seqable<X>, ys:Seqable<Y>) :
  val xs-seq = to-seq(xs)
  val ys-seq = to-seq(ys)

  let loop () :
    match(empty?(xs-seq), empty?(ys-seq)) :
      (ex:True, ey:True) :
        false
      (ex:True, ey:False) :
        yield-right(merger, next(ys-seq))
        loop()
      (ex:False, ey:True) :
        yield-left(merger, next(xs-seq))
        loop()
      (ex:False, ey:False) :
        val kx = key(merger, peek(xs-seq))
        val ky = key(merger, peek(ys-seq))
        switch(compare(kx, ky)) :
          -1 :
            yield-left(merger, next(xs-seq))
            loop()
          1 :
            yield-right(merger, next(ys-seq))
            loop()
          0 :
            yield-merged(merger, next(xs-seq), next(ys-seq))
            loop()

