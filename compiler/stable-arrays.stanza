defpackage stz/stable-arrays :
  import core
  import collections

lostanza deftype Autofree <: Finalizer :
  ptr: ptr<?>

lostanza defmethod run (a:ref<Autofree>) -> ref<False> :
  call-c clib/free(a.ptr)
  return false

#for (Prim in [Byte Int Long Float Double]
      prim in [byte int long float double]
      StablePrimArray in [StableByteArray StableIntArray StableLongArray StableFloatArray StableDoubleArray]
      x0 in [0Y 0 0L 0.0f 0.0]) :

  public lostanza deftype StablePrimArray <: Array<Prim> & Unique :
    length: long
    data: ptr<prim>

  public lostanza defn StablePrimArray (n:ref<Int>, x:ref<Prim>) -> ref<StablePrimArray> :
    core/ensure-non-negative-length(n)
    val l = n.value
    val data:ptr<prim> = call-c clib/malloc(l * sizeof(prim))
    val xv = x.value
    for (var i:long = 0, i < l, i = i + 1) :
      data[i] = xv
    val xs = new StablePrimArray{l, data}
    add-finalizer(new Autofree{data}, xs)
    return xs

  public defn StablePrimArray (n:Int) :
    StablePrimArray(n, x0)

  lostanza defmethod get (a:ref<StablePrimArray>, i:ref<Int>) -> ref<Prim> :
    core/ensure-index-in-bounds(a, i)
    return new Prim{a.data[i.value]}

  lostanza defmethod set (a:ref<StablePrimArray>, i:ref<Int>, v:ref<Prim>) -> ref<False> :
    core/ensure-index-in-bounds(a, i)
    a.data[i.value] = v.value
    return false

  lostanza defmethod length (a:ref<StablePrimArray>) -> ref<Int> :
    return new Int{a.length as int}

  public defn put (a:StablePrimArray, i:Int, v:Prim, default:Prim) :
    val a* = 
      if i >= length(a) : enlarge(a, i + 1, default)
      else : a
    a*[i] = v
    a*

  public defn enlarge (xs:StablePrimArray, min-size:Int, default:Prim) :
    ;Compute the new size.
    var new-size:Int = max(1, length(xs))
    while new-size < min-size : new-size = new-size * 2
    ;Create an enlarged array and copy things over.
    val ys = StablePrimArray(new-size)
    block-copy(length(xs), ys, 0, xs, 0)
    for i in length(xs) to new-size do :
      ys[i] = default
    ;Return the new array
    ys