defpackage stz/uitree :
  import core with:
    prefix(IndentedStream) => core-
  import collections

;============================================================
;=================== TreeItem Definition ====================
;============================================================

public defstruct UITree<T> :
  root:TreeItem
  engine:UITreeEngine<T>
  id-counter:Seq<Int>
  current-root-id:Int|False with:
    setter => set-current-root-id
    init => false

defstruct TreeItem :
  id:Int
  data
  expandable?:True|False
  current-expansion-key:Maybe<Equalable> with:
    setter => set-current-expansion-key
    init => None()
  expansions:Vector<KeyValue<Equalable,Expansion>> with:
    init => Vector<KeyValue<Equalable,Expansion>>()

defstruct Expansion :
  data
  items:Tuple<TreeItem>

;============================================================
;===================== Engine ===============================
;============================================================

public deftype UITreeEngine<T>
public defmulti print<?T> (d:UITreeEngine<?T>, o:OutputStream, data:T) -> False
public defmulti expand<?T> (d:UITreeEngine<?T>, data:T, key:Equalable) -> ExpandedData<T>
public defmulti expandable?<?T> (d:UITreeEngine<?T>, data:T) -> True|False

public defstruct ExpandedData<T> :
  data:T
  children:Tuple<T>

;============================================================
;==================== Default Constructor ===================
;============================================================

public defn UITree<?T> (engine:UITreeEngine<?T>, root:T) :
  val id-counter = to-seq(0 to false)
  val root-item = TreeItem(id-counter, engine, root)
  UITree<T>(root-item, engine, id-counter)

;============================================================
;==================== Internal Helpers ======================
;============================================================

;Helper constructor
defn TreeItem<?T> (id-counter:Seq<Int>,
                   engine:UITreeEngine<?T>,
                   data:T) -> TreeItem :
  TreeItem(
    next(id-counter),
    data,
    expandable?(engine, data))

defn current-expansion (item:TreeItem) -> Expansion|False :
  if not empty?(current-expansion-key(item)) :
    val key = value!(current-expansion-key(item))
    lookup?(expansions(item), key)      

defn current-root (tree:UITree) -> TreeItem :
  match(current-root-id(tree)) :
    (root-id:Int) : lookup!(root(tree), root-id)
    (f:False) : root(tree)

defn lookup! (item:TreeItem, id:Int) -> TreeItem :
  match(lookup(item,id)) :
    (t:TreeItem) : t
    (f:False) : fatal("No item with id %_." % [id])

defn lookup (item:TreeItem, id:Int) -> TreeItem|False :
  if /id(item) == id :
    item
  else :
    match(current-expansion(item)) :
      (e:Expansion) :
        value? $ for item in items(e) first :
          val result = lookup(item, id)
          match(result:TreeItem) : One(result)
          else : None()
      (f:False) :
        false

defn add-new-expansion (tree:UITree, item:TreeItem, key:Equalable) -> Expansion :
  val exdata = expand(engine(tree), data(item), key)
  val tree-items = for data in children(exdata) map :
    TreeItem(id-counter(tree), engine(tree), data)
  val expansion = Expansion(data(exdata), tree-items)
  add(expansions(item), key => expansion)
  expansion

;============================================================
;==================== Expansion =============================
;============================================================

public defn set-expansion (tree:UITree, id:Int, key:Maybe<Equalable>) :
  val item = lookup!(current-root(tree), id)

  ;Add new expansion if it doesn't already exist.
  if not empty?(key) :
    val expansion = lookup?(expansions(item), value!(key))
    if expansion is False :
      add-new-expansion(tree, item, value!(key))

  ;Set the expansion key.
  set-current-expansion-key(item, key)

public defn set-sole-expansion (tree:UITree, id:Int, key:Maybe<Equalable>) :
  val item = lookup!(current-root(tree), id)

  ;Set as only expansion.
  clear(expansions(item))
  if not empty?(key) :
    add-new-expansion(tree, item, value!(key))

  ;Set the expansion key.
  set-current-expansion-key(item, key)

public defn set-root (tree:UITree, root-id:Int|False) :
  set-current-root-id(tree, root-id)

public defn data (tree:UITree, id:Int) -> Maybe :
  match(lookup(current-root(tree), id)) :
    (item:TreeItem) :
      One(data(item))
    (f:False) :
      None()

public defn expansion-key (tree:UITree, id:Int) -> Maybe :
  match(lookup(current-root(tree), id)) :
    (item:TreeItem) : current-expansion-key(item)
    (f:False) : None()  

;============================================================
;===================== Printing =============================
;============================================================

defmethod print (o:OutputStream, t:UITree) :
  val root = current-root(t)
  val len = max-id-length(root)
  print(o, format(root, engine(t), len, current-root-id(t) is False))
  
defn format (item:TreeItem, engine:UITreeEngine, len:Int, root?:True|False) :
  new Printable :
    defmethod print (o:OutputStream, this) :
      ;Retrieve current expansion
      val e = current-expansion(item)

      ;Retrieve the current item data.
      ;It depends on whether item is expanded or not.
      val item-data = match(e:Expansion) : data(e)
                      else : data(item)

      ;Print header.
      if root? :
        print(engine, o, item-data)
      else :
        val id-str =
          if expandable?(item) : space-prefix(id(item), len)
          else : nspaces(len)
        print(o, "[%_] " % [id-str])
        print(engine, IndentedStream(o, len + 3, false), item-data)
        
      ;Print children.
      match(current-expansion(item)) :
        (e:Expansion) :          
          for item in items(e) do :
            val formatted = format(item, engine, len, false)
            if root? : lnprint(o, formatted)
            else : lnprint(o, Indented(formatted))
        (f:False) :
          false

defn all-ids (item:TreeItem) -> Seqable<Int> :
  match(current-expansion(item)) :
    (e:Expansion) :
      cat([id(item)], seq-cat(all-ids, items(e)))
    (f:False) :
      [id(item)]

defn max-id-length (item:TreeItem) -> Int :
  defn int-length (x:Int) : length(to-string(x))
  maximum(0, seq(int-length, all-ids(item)))

defn space-prefix (x:Int, n:Int) :
  new Printable :
    defmethod print (o:OutputStream, this) :
      val s = to-string(x)
      for i in 0 to n - length(s) do :
        print(o, ' ')
      print(o, s)

defn nspaces (n:Int) :
  new Printable :
    defmethod print (o:OutputStream, this) :
      for i in 0 to n do :
        print(o, ' ')

;============================================================
;=================== Indented Streams =======================
;============================================================

deftype IndentedStream <: OutputStream
defmulti stream (s:IndentedStream) -> OutputStream
defmulti indent (s:IndentedStream) -> Int

defn IndentedStream (o:OutputStream) :
  IndentedStream(o, 2, true)

defn IndentedStream (o:OutputStream, n:Int, initial-start-of-line?:True|False) :
  match(o) :
    (o:IndentedStream) :
      IndentedStream(stream(o), n + indent(o), initial-start-of-line?)
    (o) :
      var start-of-line? = initial-start-of-line?
      val spaces = String(n, ' ')
      defn put (c:Char) :
        if c == '\n' :
          print(o, c)
          start-of-line? = true
        else :
          print(o, spaces) when start-of-line?
          print(o, c)
          start-of-line? = false
      new IndentedStream :
        defmethod stream (this) : o
        defmethod indent (this) : n
        defmethod print (this, c:Char) : put(c)