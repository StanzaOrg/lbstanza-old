defpackage stz/timing-log-overlap-analysis :
  import core
  import collections

;============================================================
;======================= API ================================
;============================================================

public defstruct GroupedIntervals :
  intervals:Tuple<Interval>
  start:Int
  end:Int

public defstruct Interval :
  start:Int
  end:Int

public defstruct IntervalItem :
  index:Int
  position:Int
  type:ItemType

public defenum ItemType :
  Start
  End
  Full

public defn GroupedIntervals (intervals:Tuple<Interval>) :
  GroupedIntervals(intervals,
                   minimum(seq(start, intervals)),
                   maximum(seq(end, intervals)))

;============================================================
;==================== Overlap Analysis ======================
;============================================================

public defn analyze-overlaps (objects:Seqable<GroupedIntervals|Interval>) -> Tuple<IntervalItem> :
  ;Create all items.
  val items = Vector<IntervalItem>()
  for (obj in objects, index in 0 to false) do :  
    add(items, IntervalItem(index, start(obj), Start))
    add(items, IntervalItem(index, end(obj), End))
  qsort!(position, items)

  ;Determine whether two items are pairs of each other.
  defn pairs? (a:IntervalItem, b:IntervalItem) -> True|False :
    index(a) == index(b) and
    type(a) == Start and
    type(b) == End
    
  ;Collapse items
  val result = Vector<IntervalItem>()
  for item in items do :
    if empty?(result) :
      add(result, item)
    else :
      switch(type(item)) :
        Start :
          add(result, item)
        End :
          if pairs?(peek(result), item) :
            val last = pop(result)
            add(result, IntervalItem(index(last), position(last), Full))
          else :
            add(result, item)
  to-tuple(result)

  