defpackage stz/stitcher-safepoints :
  import core
  import collections
  import stz/code-emitter
  import stz/vm-ir
  import stz/codegen
  import stz/asm-ir
  import stz/packed-safepoint-table with:
    prefix(StaticPacker) => Safepoint

;============================================================
;=============== Collect and Emit Safepoints ================
;============================================================

;Type for collecting and emitting static safepoint table.
public deftype Safepoints

;Type for collecting the safepoints for just a single package.
public deftype PackageSafepoints

;Retrieve the collector for just a single package.
;First use this to retrieve the collector for a single package.
public defmulti package-safepoints (sp:Safepoints, package:Symbol) -> PackageSafepoints

;Record the label created for a given safepoint.
;Second use this to record the safepoints for the package.
public defmulti record-safepoint (sp:PackageSafepoints, id:Int, label-n:Int)  -> False

;Emit the safepoint table.
;Finally use this at the end to emit the entire safepoint table.
public defmulti emit (sp:Safepoints, emitter:CodeEmitter) -> False

;============================================================
;====================== Implementation ======================
;============================================================

;Create the collector for safepoints
public defn Safepoints (packages:Collection<VMPackage>, stubs:AsmStubs) -> Safepoints :
  ;Retrieve filename and line number of a given safepoint.
  val safepoint-info-tables = HashTable<Symbol,IntTable<[String,Int,Int]>>()
  val group-counter = to-seq(0 to false)
  for package in packages do :
    val group-table = IntTable-init<Int>(next{group-counter})
    val line-table = to-inttable<[String,Int,Int]> $
      for file in files(safepoint-table(package)) seq-cat :
        for e in entries(file) seq :
          id(e) => [filename(file), line(e), group-table[group(e)]]
    safepoint-info-tables[name(package)] = line-table      

  ;Safepoint location table
  val safepoint-records = make-safepoint-table() where :
    defn make-safepoint-table () :
      HashTable-init<String,IntTable<Vector<SafepointRecord>>>(make-file-table)      
    defn make-file-table (file:String) :
      IntTable-init<Vector<SafepointRecord>>(new-vec)
    defn new-vec (line:Int) :
      Vector<SafepointRecord>()

  ;Record the location of a safepoint at the given filename and line.
  ;Adds the entry to 'safepoint-records'.
  defn record-safepoint-location (filename:String, line:Int, label-id:Int, group:Int) :
    val recs = safepoint-records[filename][line]
    add(recs, SafepointRecord(SafepointLabel(label-id), group))

  ;Create collector for package safepoints.
  defn collect-package-safepoints (package:Symbol) -> PackageSafepoints :
    val info-table = safepoint-info-tables[package]
    new PackageSafepoints :
      defmethod record-safepoint (this, id:Int, label-id:Int) :
        val [filename, line, group] = info-table[id]
        record-safepoint-location(filename, line, label-id, group)

  ;Create the FileSafepoints entries.
  defn collect-file-safepoints () -> Tuple<FileSafepoints> :
    to-tuple $ for file-entry in safepoint-records seq :
      val filename = key(file-entry)
      val entries = to-tuple $
        for line-entry in value(file-entry) seq :
          val line = key(line-entry)
          val locs = value(line-entry)
          SafepointEntry(line, to-tuple(locs))
      FileSafepoints(filename, entries)

  ;Emit the table
  defn emit-table (safepoints:Tuple<FileSafepoints>, emitter:CodeEmitter) :
    defn E (i:Ins) : emit(emitter, i)
    val packer = new SafepointStaticPacker :
      defmethod make-label (this) : unique-label(emitter)
      defmethod emit-label (this, id:Int) : E(Label(id))
      defmethod emit-pointer-to-label (this, id:Int) : E(DefLabel(id))
      defmethod emit (this, x:Long) : E(DefLong(x))
      defmethod emit (this, x:String) : E(DefString(x))
    E(Comment("Safepoint Table"))
    E(DefData())
    E(ExLabel(`stanza_safepoint_table))
    E(Label(safepoint-table(stubs)))
    pack(safepoints, packer)
    E(DefText())
    E(Comment("End of Safepoint Table"))

  ;Return everything
  new Safepoints :
    defmethod package-safepoints (this, package:Symbol) :
      collect-package-safepoints(package)
    defmethod emit (this, emitter:CodeEmitter) :
      emit-table(collect-file-safepoints(), emitter)