defpackage stz/line-noise-prompter :
  import core
  import collections
  import reader

extern linenoiseSetMultiLine : int -> int
extern linenoise : ptr<byte> -> ptr<byte>
extern linenoiseHistoryAdd : ptr<byte> -> int

lostanza defn set-multi-line (x:ref<True|False>) -> ref<False> :
  if x == true : call-c linenoiseSetMultiLine(1)
  else : call-c linenoiseSetMultiLine(0)
  return false
set-multi-line(true)

lostanza defn line-noise (prompt:ref<String>) -> ref<String|False> :
  val s = call-c linenoise(addr!(prompt.chars))
  if s == 0L as ptr<?> :
    return false
  else :
    val str = String(s)
    call-c clib/free(s)
    return str

lostanza defn add-history (str:ref<String>) -> ref<False> :
  call-c linenoiseHistoryAdd(addr!(str.chars))
  return false

public defn LineNoisePrompter (prompt:String, continue:String) :
  var line-counter = to-seq(0 to false)
  new Prompter :
    defmethod get-line (this) :
      val msg = prompt when next(line-counter) == 0
           else continue
      val l = line-noise(msg)
      match(l:String) :
        add-history(l)
        l