defpackage stz/ehier :
  import core
  import collections
  import stz/dl-ir
  import stz/el-ir  

public deftype EHier
public defmulti subtype? (hier:EHier, a:EType, b:EType) -> True|False


public defn EHier (epackage:EPackage) :
  ;Precompute the IOTable
  val iotable = IOTable(packageio(epackage))

  ;Hold the parent identifiers of all parents of each type
  val parent-table = IntTable<List<Int>>(List())

  ;Add "p is a parent of n" to the parent-table.
  defn add-to-parent-table (n:Int, p:Int) -> False :
    update(parent-table, cons{p, _}, n)
    false

  ;Add "n is declared as a subtype of t" to the parent-table.
  defn add-to-parent-table (child-n:Int, t:EType|DType|False) -> False :
    match(t) :
      (t:DOf) : add-to-parent-table(child-n, n(iotable,id(t)))
      (t:DAnd) : do(add-to-parent-table{child-n, _}, types(t))
      (t:EOf) : add-to-parent-table(child-n, n(t))
      (t:EAnd) : do(add-to-parent-table{child-n, _}, [a(t), b(t)])
      (t) : false

  ;Add all relations in the PackageIO to the parent table.
  for e in cat(imports(packageio(epackage)), exports(packageio(epackage))) do :
    match(rec(e)) :
      (r:StructRec) :
        add-to-parent-table(n(e), parent(r))
      (r:TypeRec|TypeDecl) :
        add-to-parent-table(n(e), parent(r))
        for c in children(r) do :
          val child-id = n(iotable, id(c))
          val parent-id = n(iotable, id(parent(c)))
          add-to-parent-table(child-id, parent-id)        
      (r) :
        false
  ;Add all DefObject relations in the package to the parent table.
  for e in filter-by<EDefObject>(exps(epackage)) do :
    add-to-parent-table(n(e), parent(e))

  ;Subtype relation
  defn subtype? (x:EType, y:EType) :    
    defn st (x:EType, y:EType) :
      match(x, y) :
        ;4. Top and Bottom Type: Fast Path
        (x, y:ETop) : true
        (x:EBot, y) : true
        ;3. Combinatory types
        (x:EOr, y) : st(a(x), y) and st(b(x), y)
        (x, y:EAnd) : st(x, a(y)) and st(x, b(y))
        (x:EAnd, y:EOr) : st(x,a(y)) or st(x,b(y)) or st(a(x),y) or st(b(x),y)
        (x, y:EOr) : st(x,a(y)) or st(x,b(y))
        (x:EAnd, y) : st(a(x),y) or st(b(x),y)
        ;2. Unitary types
        (x:EOf, y:EOf) :
          if n(x) == n(y) : true
          else : any?(st{EOf(_), y}, parent-table[n(x)])
        ;1. Ground types
        (x:ETVar, y:ETVar) : n(x) == n(y)
        ;Fall through
        (x, y) : false
    fatal("Not a reference type: %_" % [x]) when not reftype?(x)
    fatal("Not a reference type: %_" % [y]) when not reftype?(y)
    st(x,y)

  ;Return hierarchy
  new EHier :
    defmethod subtype? (this, a:EType, b:EType) : subtype?(a,b)