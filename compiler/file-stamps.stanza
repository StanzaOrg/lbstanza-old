defpackage stz/file-stamps :
   import core
   import collections
   import core/sha256

;Represents the hash information of an existing file.
;Stores its filename, and its SHA256 hash.
public defstruct FileStamp <: Hashable & Equalable :
  filename: String
  hashstamp: ByteArray

;============================================================
;==================== Main Constructor ======================
;============================================================

;Compute the filestamp of the given file.
;May throw an exception if the file does not exist.
public defn filestamp (filename:String) -> FileStamp :
  val path = resolve-path!(filename)
  val hashstamp = sha256-hash-file(filename)
  FileStamp(path as String, hashstamp)

;============================================================
;================== Check Up-to-Date ========================
;============================================================

;Check whether the given filestamp is still up-to-date.
;Returns false if the file is now missing, or has changed.
public defn up-to-date? (s:FileStamp) -> True|False :
  if file-exists?(filename(s)) :
    val hash = sha256-hash-file(filename(s))
    hash-equal?(hashstamp(s), hash)

;============================================================
;==================== Printing ==============================
;============================================================

defmethod print (o:OutputStream, s:FileStamp) :
  print(o, "%~ (%_)" % [filename(s), to-hex(hashstamp(s))])

val HEX-CHARS = ['0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F']

;Convert a byte into two character string.
defn to-hex (b:Byte) -> String :
  val i = to-int(b)
  val c1 = HEX-CHARS[i & 0xF]
  val c2 = HEX-CHARS[(i >> 4) & 0xF]
  String([c2, c1])

;Convert a bytearray into a hex string.
public defn to-hex (barray:ByteArray) -> String :
  string-join(seq(to-hex, barray))

;============================================================
;================ Hashing and Equality ======================
;============================================================

defmethod equal? (a:FileStamp, b:FileStamp) :
  filename(a) == filename(b) and
  hash-equal?(hashstamp(a), hashstamp(b))

defmethod hash (a:FileStamp) :
  hash $ [filename(a), hash-hash(hashstamp(a))]

;Implement content-equality of two byte arrays.
public defn hash-equal? (a:ByteArray|False, b:ByteArray|False) -> True|False :
  match(a,b) :
    (a:ByteArray, b:ByteArray) : same-contents?(a,b)
    (a:False, b:False) : true
    (a, b) : false

;Return a hash of the bytearray that is useful
;for checking its contents.
public defn hash-hash (a:ByteArray) -> Int :
  var i = 1
  for b in a do :
    i = (7 * i) + to-int(b)
  i