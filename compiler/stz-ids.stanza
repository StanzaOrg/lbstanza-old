defpackage stz/ids :
   import core
   import verse



val ID-COUNTER = to-stream(1000000 to false)
public defn fresh-id () : next(ID-COUNTER)


;                        Special Functions
;                        =================

public val EXTEND-HEAP-ID = fresh-id()
public val EXTEND-STACK-ID = fresh-id()
public val VARIABLE-UNINITIALIZED-ERROR-ID = fresh-id()
public val TUPLE-LENGTH-ERROR-ID = fresh-id()
public val BRANCH-ERROR-ID = fresh-id()
public val CAST-ERROR-ID = fresh-id()
public val ARITY-ERROR-ID = fresh-id()

println("EXTEND-HEAP-ID = ~" << [EXTEND-HEAP-ID])
println("EXTEND-STACK-ID = ~" << [EXTEND-STACK-ID])
println("VARIABLE-UNINITIALIZED-ERROR-ID = ~" << [VARIABLE-UNINITIALIZED-ERROR-ID])
println("TUPLE-LENGTH-ERROR-ID = ~" << [TUPLE-LENGTH-ERROR-ID])
println("BRANCH-ERROR-ID = ~" << [BRANCH-ERROR-ID])
println("CAST-ERROR-ID = ~" << [CAST-ERROR-ID])
println("ARITY-ERROR-ID = ~" << [ARITY-ERROR-ID])

;                         Special Types
;                         =============

public val FN-TYPE-ID = fresh-id()
public val TYPE-TYPE-ID = fresh-id()
public val INT-TYPE-ID = fresh-id()
public val BOX-TYPE-ID = fresh-id()
public val TUPLE-TYPE-ID = fresh-id()
public val FALSE-TYPE-ID = fresh-id()
public val TRUE-TYPE-ID = fresh-id()
public val STRING-TYPE-ID = fresh-id()
public val SYMBOL-TYPE-ID = fresh-id()
public val LIST-TYPE-ID = fresh-id()
public val STACK-TYPE-ID = fresh-id()

println("FN-TYPE-ID = ~" << [FN-TYPE-ID])
println("TYPE-TYPE-ID = ~" << [TYPE-TYPE-ID])
println("INT-TYPE-ID = ~" << [INT-TYPE-ID])
println("BOX-TYPE-ID = ~" << [BOX-TYPE-ID])
println("TUPLE-TYPE-ID = ~" << [TUPLE-TYPE-ID])
println("FALSE-TYPE-ID = ~" << [FALSE-TYPE-ID])
println("TRUE-TYPE-ID = ~" << [TRUE-TYPE-ID])
println("STRING-TYPE-ID = ~" << [STRING-TYPE-ID])
println("SYMBOL-TYPE-ID = ~" << [SYMBOL-TYPE-ID])
println("LIST-TYPE-ID = ~" << [LIST-TYPE-ID])

;                         Special Fields
;                         ==============

public val INT-VALUE-FIELD-ID = fresh-id()
public val FLOAT-VALUE-FIELD-ID = fresh-id()

println("INT-VALUE-FIELD-ID = ~" << [INT-VALUE-FIELD-ID])
println("FLOAT-VALUE-FIELD-ID = ~" << [FLOAT-VALUE-FIELD-ID])


;                        Compiled Bit Tags
;                        =================

public val INT-TAG-BITS = 0
public val REF-TAG-BITS = 1
public val MARKER-TAG-BITS = 2
public val VOID-TAG = (-1 << 3) + MARKER-TAG-BITS

public val TAG-TAG-BITS = 0
public val HEADER-TAG-BITS = 1

;                       Compiled Stack Layout
;                       =====================

var STACK-ACCUM = 0
defn next-stack-offset (sz:Int) :
   val o = STACK-ACCUM
   STACK-ACCUM = STACK-ACCUM + sz
   o

next-stack-offset(8) ;Word for Type Tag
public val STACK-POSITION-OFFSET = next-stack-offset(4)
public val STACK-MARK-OFFSET = next-stack-offset(4)
public val STACK-PARENT-OFFSET = next-stack-offset(8)
public val STACK-SP-OFFSET = next-stack-offset(8)
public val STACK-ITEMS-OFFSET = next-stack-offset(8)
public val STACK-SIZE = 512 * 8


;                     Compiled Program Labels
;                     =======================

;Heaps
public val HEAP-PTR-LBL = fresh-id()
public val HEAP-LIM-LBL = fresh-id()

;Stacks
public val STACK-PTR-LBL = fresh-id()
public val STACK-LIM-LBL = fresh-id()
public val STACK-POOL-LBL = fresh-id()
public val NUM-FREE-STACKS-LBL = fresh-id()
public val FREE-STACKS-LBL = fresh-id()
public val STACK-LBL = fresh-id()
public val RETRACT-STACK-LBL = fresh-id()

;Floating Point Default Values
public val FLOAT-ZERO-LBL = fresh-id()
public val DOUBLE-ZERO-LBL = fresh-id()

;Argument Buffer Label
public val ARG-LBL = fresh-id()

;Swap Label
public val SWAP-LBL = fresh-id()

;C Parameter Labels
public val C-RSP-LBL = fresh-id()
