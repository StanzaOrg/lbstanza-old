;Testing utility:
;CodeEmitter that outputs assembly instructions into a bytebuffer
;so that we can read it back.

defpackage stz/bytebuffer-emitter :
  import core
  import collections
  import stz/code-emitter
  import stz/asm-ir
  import stz/stable-arrays

;Represents the emitter.
public deftype ByteBufferEmitter <: CodeEmitter

;Retrieve the stable byte array that holds the emitted binary data.
public defmulti memory (e:ByteBufferEmitter) -> StableByteArray

;Implementation.
public defn ByteBufferEmitter () :
  ;Count labels.
  val label-counter = to-seq(0 to false)

  ;Accumulate memory here.
  val buffer = ByteBuffer(1024)

  ;Accumulate labels and holes.
  val label-table = IntTable<Int>()
  val holes = Vector<KeyValue<Int,Int>>()

  ;Fill holes
  defn fill-holes (a:StableByteArray) -> False :
    for hole in holes do :
      val label-id = key(hole)
      val hole-pos = value(hole)
      val label-pos = get?(label-table, label-id)
      write-hole(a, hole-pos, label-pos)
  
  new ByteBufferEmitter :
    defmethod emit (this, i:Ins) -> False :
      match(i) :
        ;Record the position of labels.
        (i:Label) :
          label-table[n(i)] = write-position(buffer)
        ;Record the position of holes.
        (i:DefLabel) :
          add(holes, n(i) => write-position(buffer))
          put(buffer, 0L)
        ;Produce an integer.
        (i:DefInt) :
          put(buffer, value(i))
        ;Produce an 8-byte long.
        (i:DefLong) :
          put(buffer, value(i))
        ;Produce a string.
        (i:DefString) :
          ;Write out the characters with an ending 0.
          for c in value(i) do :
            put(buffer, c)
          put(buffer, 0Y)
          ;Align to 8-byte boundary.
          val p0 = write-position(buffer)
          val p1 = (p0 + 7) & -8
          for i in p0 to p1 do :
            put(buffer, 0Y)
        ;Ignored.
        (i:DefData|DefText|Comment) :
          false
        (i) :
          fatal("Instruction %_ not supported by ByteBufferEmitter." % [object-type(i)])

    defmethod unique-label (this) :
      next(label-counter)

    defmethod memory (this) :
      val a = copy-to-stable(buffer)
      fill-holes(a)
      a

;Copy the contents of a byte buffer to stable memory.
lostanza defn copy-to-stable (buffer:ref<ByteBuffer>) -> ref<StableByteArray> :
  val n = length(buffer)
  val copy = StableByteArray(n)
  call-c clib/memcpy(copy.data, data(buffer), n.value)
  return copy

;Write the hole position pointing to the given label.
lostanza defn write-hole (a:ref<StableByteArray>, hole-pos:ref<Int>, label-pos:ref<Int|False>) -> ref<False> :
  val mem = a.data
  val hole = addr(mem[hole-pos.value]) as ptr<ptr<?>>
  match(label-pos) :
    (pos:ref<Int>) :
      [hole] = mem + pos.value
    (pos:ref<False>) :
      [hole] = 0xcafebabeL as ptr<?>
  return false