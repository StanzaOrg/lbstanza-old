;See License.txt for details about licensing.

defpackage stz/il-reader :
   import core
   import collections
   import reader
   import stz/namemap
   import stz/visibility
   import stz/il-ir
   import stz/input

defsyntax il-ir :
  public defproduction ipackage : IPackage
  defrule ipackage = (IPackage(?name:#symbol, ?imports:#iimports, ?exps:#iexps, ?info:#info, ?namemap:#namemap)) :
    IPackage(name, imports, exps, info, namemap)
  
  defproduction iimport : IImport
  defrule iimport = (IImport(?package:#symbol, ?prefixes:#iprefixes, ?info:#info, ?import-private?:#bool)) :
    IImport(package, prefixes, info, import-private?)

  defproduction iprefix : IPrefix
  defrule iprefix = (IPrefix(?names:#symbols, ?prefix:#string)) : IPrefix(names, prefix)

  defproduction namemap : NameMap
  defrule namemap = (NameMap: (?entries:#ventry ...)) :
    val namemap = NameMap()
    do(add{namemap, _}, entries)
    namemap

  defproduction ventry : VEntry
  defrule ventry = (VEntry(?n:#int, ?package:#symbol, ?name:#symbol, ?visibility:#visibility, ?type:#etype, ?info:#info)) :
    VEntry(n, package, name, visibility, type, info)

  defproduction int : Int
  defrule int = (?x) when unwrap-token(x) is Int : unwrap-token(x)
  defproduction symbol : Symbol
  defrule symbol = (?x) when unwrap-token(x) is Symbol : unwrap-token(x)
  defproduction string : String
  defrule string = (?x) when unwrap-token(x) is String : unwrap-token(x)
  defproduction bool : True|False
  defrule bool = (true) : true
  defrule bool = (false) : false

  defproduction iimports : Tuple<IImport>
  defrule iimports = (tuple(?iimportz:#iimport ...)) : to-tuple(iimportz)
  defproduction iprefixes : Tuple<IPrefix>
  defrule iprefixes = (tuple(?iprefixes:#iprefix ...)) : to-tuple(iprefixes)
  defproduction iexps : List<IExp>
  defrule iexps = (list(?iexpz:#iexp ...)) : to-list(iexpz)
  defproduction symbols : Tuple<Symbol>
  defrule symbols = (tuple(?symbols:#symbol ...)) : to-tuple(symbols)

  defproduction iexp : IExp
  defrule iexp = (?x) : to-il(x)

  defproduction etype : EType
  defrule etype = (ValE) : ValE()
  defrule etype = (VarE) : VarE()
  defrule etype = (TVarE) : TVarE()
  defrule etype = (CapVarE) : CapVarE()
  defrule etype = (TypeE) : TypeE()
  defrule etype = (MultiE) : MultiE()
  defrule etype = (FnE) : FnE()
  defrule etype = (LValE) : LValE()
  defrule etype = (LVarE) : LVarE()
  defrule etype = (LFnE) : LFnE()
  defrule etype = (LTypeE) : LTypeE()
  defrule etype = (FieldE) : FieldE()
  defrule etype = (LabelE) : LabelE()

  defproduction visibility : Visibility
  defrule visibility = (Private) : Private()
  defrule visibility = (Protected) : Protected()
  defrule visibility = (Public) : Public()

  defproduction info : False|FileInfo
  defrule info = (false) : false
  defrule info = (FileInfo(?filename:#string, ?line:#int, ?column:#int)) : FileInfo(filename, line, column)

public defn read-il-package (filename:String) -> IPackage :
  val forms = read-file(filename)
  parse-syntax[il-ir / #ipackage](forms)

