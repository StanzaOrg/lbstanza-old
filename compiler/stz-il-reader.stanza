;See License.txt for details about licensing.

defpackage stz/il-reader :
   import core
   import collections
   import reader
   import stz/namemap
   import stz/visibility
   import stz/il-ir
   import stz/input

defsyntax il-ir :
  public defproduction ipackage : IPackage
  ; defrule ipackage = (IPackage(?name:#symbol, ?imports:#iimports, ?exps:#iexps, ?info:#info, ?namemap:#namemap)) :
  ;   IPackage(name, imports, exps, info, namemap)
  defrule ipackage = (IPackage(?name:#symbol, ?imports:#iimports, ?exps:#iexps, ?info:#info, ?namemap:#namemap)) :
    IPackage(name, imports, exps, info, namemap)
  
  defproduction iimport : IImport
  defrule iimport = (IImport(?package:#symbol, ?prefixes:#iprefixes, ?info:#info, ?import-private?:#bool)) :
    IImport(package, prefixes, info, import-private?)

  defproduction iprefix : IPrefix
  defrule iprefix = (IPrefix(?names:#symbols, ?prefix:#string)) :
    IPrefix(names, prefix)

  defproduction namemap : NameMap
  defrule namemap = (NameMap: (?entries:#ventry ...)) :
    val namemap = NameMap()
    do(add{namemap, _}, entries)
    namemap

  defproduction ventry : VEntry
  defrule ventry = (VEntry(?n:#int, ?package:#symbol, ?name:#symbol, ?visibility:#visibility, ?type:#etype, ?info:#info)) :
    VEntry(n, package, name, visibility, type, info)

  defproduction int : Int
  defrule int = (?x) when unwrap-token(x) is Int : unwrap-token(x)
  defproduction symbol : Symbol
  defrule symbol = (?x) when unwrap-token(x) is Symbol : unwrap-token(x)
  defproduction string : String
  defrule string = (?x) when unwrap-token(x) is String : unwrap-token(x)
  defproduction bool : True|False
  defrule bool = (true) : true
  defrule bool = (false) : false

  defproduction iimports : Tuple<IImport>
  defrule iimports = ([ ?iimportz:#iimport ... ]) : to-tuple(iimportz)
  defproduction iprefixes : Tuple<IPrefix>
  defrule iprefixes = ([ ?iprefixes:#iprefix ... ]) : to-tuple(iprefixes)
  defproduction iexps : List<IExp>
  defrule iexps = ((?iexpz:#iexp ...)) : to-list(iexpz)
  defproduction symbols : Tuple<Symbol>
  defrule symbols = ([ ?symbols:#symbol ... ]) : to-tuple(symbols)

  val NO-FILE-INFO = false

  defproduction iexp : IExp
  defrule iexp = (($package ?name:#iexp ?imports:#iexp ...)) : IDefPackage(name, imports, NO-FILE-INFO)
  defrule iexp = (($import ?package:#iexp ?prefixes:#iexp ...)) : IImportExp(package, prefixes, NO-FILE-INFO)
  defrule iexp = (($prefix-of (?names:#iexp ...) ?prefix:#iexp)) : IPrefixExp(names, prefix, NO-FILE-INFO)
  defrule iexp = (($prefix ?prefix:#iexp)) : IPrefixExp(false, prefix, NO-FILE-INFO)
  defrule iexp = (($public ?e:#iexp)) : IVisibility(e, Public(), NO-FILE-INFO)
  defrule iexp = (($protected ?e:#iexp)) : IVisibility(e, Protected(), NO-FILE-INFO)
  defrule iexp = (($private ?e:#iexp)) : IVisibility(e, Private(), NO-FILE-INFO)
  defrule iexp = (($loadpackage ?filename:#string, ?pkg)) : ILoadPackage(filename, pkg, NO-FILE-INFO)

  defrule iexp = (($doc ?exp:#iexp)) : IDoc(exp, NO-FILE-INFO)

  defrule iexp = (($deftype ?class:#iexp (?args:#iexp ...) ?parent:#iexp ?children:#iexp ...)) :
    IDefType(class, args, parent, children, NO-FILE-INFO)
  defrule iexp = (($defchild ?name:#iexp (?args:#iexp ...) ?parent:#iexp)) : IDefChild(name, args, parent, NO-FILE-INFO)
  defrule iexp = (($def ?name:#iexp ?type:#iexp ?value:#iexp)) : IDef(name, type, value, NO-FILE-INFO)
  defrule iexp = (($defvar ?name:#iexp ?type:#iexp ?value:#iexp)) : IDefVar(name, type, value, NO-FILE-INFO)
  defrule iexp = (($defn* ?name:#iexp (?targs:#iexp ...) (?a1:#iexp ...) ?a2:#iexp, (?args:#iexp ...) ?body:#iexp)) :
    IDefn(true, name, targs, a1, a2, args, body, NO-FILE-INFO)
  defrule iexp = (($defn ?name:#iexp (?targs:#iexp ...) (?a1:#iexp ...) ?a2:#iexp (?args:#iexp ...) ?body:#iexp)) :
    IDefn(true, name, targs, a1, a2, args, body, NO-FILE-INFO)
  defrule iexp = (($defmulti ?name:#iexp (?targs:#iexp ...) (?a1:#iexp ...) ?a2:#iexp)) :
    IDefmulti(name, , targs, a1, a2, NO-FILE-INFO)
  defrule iexp = (($defmethod* ?multi:#iexp (?targs:#iexp ...) (?a1:#iexp ...) ?a2:#iexp, (?args:#iexp ...) ?body:#iexp)) :
    IDefmethod(true, multi, false, targs, a1, a2, args, body, NO-FILE-INFO)
  defrule iexp = (($defmethod ?multi:#iexp (?targs:#iexp ...) (?a1:#iexp ...) ?a2:#iexp, (?args:#iexp ...) ?body:#iexp)) :
    IDefmethod(false, multi, false, targs, a1, a2, args, body, NO-FILE-INFO)

  defrule iexp = (($fn* (?a1:#iexp ...) ?a2:#iexp, (?args:#iexp ...) ?body:#iexp)) : IFn(true, a1, a2, args, body, NO-FILE-INFO)
  defrule iexp = (($fn (?a1:#iexp ...) ?a2:#iexp, (?args:#iexp ...) ?body:#iexp)) : IFn(false, a1, a2, args, body, NO-FILE-INFO)
  defrule iexp = (($multi ?funcs:#iexp ...)) :  IMulti(funcs, NO-FILE-INFO)
  defrule iexp = (($begin ?exps:#iexp ...)) :  IBegin(exps, NO-FILE-INFO)
  defrule iexp = (($match (?args:#iexp ...) ?branches:#iexp ...)) :  IMatch(args, branches, NO-FILE-INFO)
  defrule iexp = (($branch (?types:#iexp ...) (?args:#iexp ...) ?body:#iexp)) :  IBranch(types, args, body, NO-FILE-INFO)
  defrule iexp = (($new ?class:#iexp ?methods:#iexp ...)) :  INew(class, methods, NO-FILE-INFO)
  defrule iexp = (($cast ?exp:#iexp ?type:#iexp)) :  ICast(exp, type, NO-FILE-INFO)
  defrule iexp = (($upcast ?exp:#iexp ?type:#iexp)) :  IUpCast(exp, type, NO-FILE-INFO)
  defrule iexp = (($set ?name:#iexp ?value:#iexp)) :  ISet(name, value, NO-FILE-INFO)
  defrule iexp = (($do ?func:#iexp ?args:#iexp ...)) :  IDo(func, args, NO-FILE-INFO)
  defrule iexp = (($prim ?op:#iexp ?args:#iexp ...)) :  IPrim(op, args, NO-FILE-INFO)
  defrule iexp = (($literal ?value ?type:#iexp)) :  ILiteral(value, type, NO-FILE-INFO)
  defrule iexp = (($tuple ?exps:#iexp ...)) :  ITuple(exps, NO-FILE-INFO)
  defrule iexp = (($let ?exp:#iexp)) :  ILet(exp, NO-FILE-INFO)
  defrule iexp = (($of ?class:#iexp ?args:#iexp ...)) :  IOf(class, args, NO-FILE-INFO)
  defrule iexp = (($and ?a:#iexp ?b:#iexp)) :  IAnd(a, b, NO-FILE-INFO)
  defrule iexp = (($or ?a:#iexp ?b:#iexp)) :  IOr(a, b, NO-FILE-INFO)
  defrule iexp = (($-> (?a1:#iexp ...) ?a2:#iexp)) :  IArrow(a1, a2, NO-FILE-INFO)
  defrule iexp = (($cap ?name:#iexp)) :  ICap(name, NO-FILE-INFO)
  defrule iexp = (($?)) :  IGradual(NO-FILE-INFO)
  defrule iexp = (($void)) :  IVoid(NO-FILE-INFO)
  defrule iexp = (($none)) :  INone(NO-FILE-INFO)

  defrule iexp = (($ls-new ?type:#iexp ?args:#iexp ...)) :  ILSNew(type, args, NO-FILE-INFO)
  defrule iexp = (($ls-struct ?type:#iexp ?args:#iexp ...)) :  ILSStruct(type, args, NO-FILE-INFO)
  defrule iexp = (($ls-addr ?exp:#iexp)) :  ILSAddr(exp, false, NO-FILE-INFO) ; TODO: unstable?
  defrule iexp = (($ls-deref ?exp:#iexp)) :  ILSDeref(exp, NO-FILE-INFO)
  defrule iexp = (($ls-slot ?exp:#iexp ?index:#iexp)) :  ILSSlot(exp index, NO-FILE-INFO)
  defrule iexp = (($ls-field ?exp:#iexp ?name:#iexp)) :  ILSField(exp name , NO-FILE-INFO)
  defrule iexp = (($ls-do ?func:#iexp ?args:#iexp ...)) :  ILSDo(func, args, NO-FILE-INFO)
  defrule iexp = (($ls-call-c ?func:#iexp ?args:#iexp ...)) :  ILSCallC(func, args, NO-FILE-INFO)
  defrule iexp = (($ls-prim ?op:#iexp ?args:#iexp ...)) :  ILSPrim(op, args, NO-FILE-INFO)
  defrule iexp = (($ls-sizeof ?type:#iexp)) :  ILSSizeof(type, NO-FILE-INFO)
  defrule iexp = (($ls-tagof ?name:#iexp)) :  ILSTagof(name, NO-FILE-INFO)
  defrule iexp = (($ls-as ?exp:#iexp ?type:#iexp)) :  ILSAs(exp, type, NO-FILE-INFO)
  defrule iexp = (($ls-and ?a:#iexp ?b:#iexp)) :  ILSAnd(a, b, NO-FILE-INFO)
  defrule iexp = (($ls-or ?a:#iexp ?b:#iexp)) :  ILSOr(a, b, NO-FILE-INFO)
  defrule iexp = (($ls-letexp ?comm:#iexp ?exp:#iexp)) :  ILSLetExp(comm, exp, NO-FILE-INFO)
  defrule iexp = (($ls-fn ?ref:#iexp)) :  ILSFn(ref, NO-FILE-INFO)

  defrule iexp = (($ls-set ?exp:#iexp ?value:#iexp)) :  ILSSet(exp, value, NO-FILE-INFO)
  defrule iexp = (($ls-labels ?blocks:#iexp ...)) :  ILSLabels(blocks, NO-FILE-INFO)
  defrule iexp = (($ls-block ?name:#iexp (?args:#iexp ...) (?types:#iexp ...) ?body:#iexp)) :
    ILSLabeledBlock(name, args, types, body, NO-FILE-INFO)
  defrule iexp = (($ls-goto ?name:#iexp ?args:#iexp ...)) :  ILSGoto(name, args, NO-FILE-INFO)
  defrule iexp = (($ls-return ?exp:#iexp)) :  ILSReturn(exp, NO-FILE-INFO)
  defrule iexp = (($ls-let ?comm:#iexp)) :  ILSLet(comm, NO-FILE-INFO)
  defrule iexp = (($ls-if ?pred:#iexp ?conseq:#iexp ?alt:#iexp)) :  ILSIf(pred conseq alt, NO-FILE-INFO)
  defrule iexp = (($ls-match (?args:#iexp ...) ?branches:#iexp ...)) :  ILSMatch(args branches, NO-FILE-INFO)
  defrule iexp = (($ls-branch (?types:#iexp ...) (?args:#iexp ...) ?body:#iexp)) :  ILSBranch(types args body, NO-FILE-INFO)

  defrule iexp = (($ls-def ?name:#iexp ?type:#iexp ?exp:#iexp)) :  ILSDef(name, type, exp, NO-FILE-INFO)
  defrule iexp = (($ls-defvar ?name:#iexp ?type:#iexp ?exp:#iexp)) :  ILSDefVar(name, type, exp, NO-FILE-INFO)
  defrule iexp = (($ls-deffield ?mut:#iexp ?type:#iexp ?name:#iexp)) :  ILSDefField(mut, type, name, NO-FILE-INFO)
  defrule iexp = (($ls-deftype ?name:#iexp (?args:#iexp ...) ?parent:#iexp (?fields:#iexp ...) ?rfield:#iexp)) :
    ILSDefType(name, args, parent, fields, rfield, NO-FILE-INFO)
  defrule iexp = (($ls-extern ?name:#iexp ?type:#iexp)) :  ILSExtern(name, type, NO-FILE-INFO)
  defrule iexp = (($ls-defn* ?name:#iexp (?targs:#iexp ...) (?a1:#iexp ...) ?a2:#iexp (?args:#iexp ...) ?body:#iexp)) :
    ILSDefn(true, name, targs, a1, a2, args, body, NO-FILE-INFO)
  defrule iexp = (($ls-defn ?name:#iexp (?targs:#iexp ...) (?a1:#iexp ...) ?a2:#iexp (?args:#iexp ...) ?body:#iexp)) :
    ILSDefn(false, name, targs, a1, a2, args, body, NO-FILE-INFO)
  defrule iexp = (($ls-extern-fn ?name:#iexp (?a1:#iexp ...) ?a2:#iexp (?args:#iexp ...) ?body:#iexp)) :
    ILSExternFn(name, a1, a2, args, body, NO-FILE-INFO)
  defrule iexp = (($ls-defmethod* ?multi:#iexp (?targs:#iexp ...) (?a1:#iexp ...) ?a2:#iexp (?args:#iexp ...) ?body:#iexp)) :
    ILSDefmethod(true, multi, targs, a1, a2, args, body, NO-FILE-INFO)
  defrule iexp = (($ls-defmethod ?multi:#iexp (?targs:#iexp ...) (?a1:#iexp ...) ?a2:#iexp (?args:#iexp ...) ?body:#iexp)) :
    ILSDefmethod(false, multi, targs, a1, a2, args, body, NO-FILE-INFO)

  defrule iexp = (($ls-byte)) :  ILSByteT(NO-FILE-INFO)
  defrule iexp = (($ls-int)) :  ILSIntT(NO-FILE-INFO)
  defrule iexp = (($ls-long)) :  ILSLongT(NO-FILE-INFO)
  defrule iexp = (($ls-float)) :  ILSFloatT(NO-FILE-INFO)
  defrule iexp = (($ls-double)) :  ILSDoubleT(NO-FILE-INFO)
  defrule iexp = (($ls-?)) :  ILSUnknownT(NO-FILE-INFO)
  defrule iexp = (($ls-of ?class:#iexp ?args:#iexp ...)) :  ILSOfT(class, args, NO-FILE-INFO)
  defrule iexp = (($ls-ptr ?type:#iexp)) :  ILSPtrT(type, NO-FILE-INFO)
  defrule iexp = (($ls-ref ?type:#iexp)) :  ILSRefT(type, NO-FILE-INFO)
  defrule iexp = (($ls-fn (?a1:#iexp ...) ?ar:#iexp ?a2:#iexp)) :  ILSFnT(a1, ar, a2, NO-FILE-INFO)

  defrule iexp = (?name:#symbol) :
    val sname = to-string(name)
    val n = to-int(sname[2 to false]) when (length(sname) > 2)
    match(n:Int) : VarN(n, NO-FILE-INFO)
    else : IVar(name, NO-FILE-INFO)
  defrule iexp = (($let ?def:#iexp ?body:#iexp)) : Let(def, body, NO-FILE-INFO)
  defrule iexp = (($letrec (?defns:#iexp ...) ?body:#iexp)) : LetRec(defns, body, NO-FILE-INFO)
  defrule iexp = (($letpackage ?name:#symbol (?imports:#iexp ...) ?body:#iexp)) : LetPackage(name, imports, body, NO-FILE-INFO)
  defrule iexp = (($raw ?class:#iexp)) :  Raw(class, NO-FILE-INFO)
  defrule iexp = (($mix ?exps:#iexp ...)) :  Mix(exps, NO-FILE-INFO)

  defproduction etype : EType
  defrule etype = (ValE) : ValE()
  defrule etype = (VarE) : VarE()
  defrule etype = (TVarE) : TVarE()
  defrule etype = (CapVarE) : CapVarE()
  defrule etype = (TypeE) : TypeE()
  defrule etype = (MultiE) : MultiE()
  defrule etype = (FnE) : FnE()
  defrule etype = (LValE) : LValE()
  defrule etype = (LVarE) : LVarE()
  defrule etype = (LFnE) : LFnE()
  defrule etype = (LTypeE) : LTypeE()
  defrule etype = (FieldE) : FieldE()
  defrule etype = (LabelE) : LabelE()

  defproduction visibility : Visibility
  defrule visibility = (private) : Private()
  defrule visibility = (protected) : Protected()
  defrule visibility = (public) : Public()
  defrule visibility = (local) : Local()

  defproduction info : False|FileInfo
  defrule info = (false) : false
  defrule info = (FileInfo(?filename:#string, ?line:#int, ?column:#int)) : FileInfo(filename, line, column)

public defn read-il-package (filename:String) -> IPackage :
  val forms = read-file(filename)
  parse-syntax[il-ir / #ipackage](forms)

