defpackage stz/reg-alloc-error-utils :
  import core
  import collections

;Holds the current error handler.
var CURRENT-ERROR-HANDLER:Exception -> False =
  fn (e) :
    fatal("No error handler set.")

;Emit an error.
public defn error (e:Exception) -> False :
  CURRENT-ERROR-HANDLER(e)

;Stop a block on the first error.
public defn stop-on-first-error (body:() -> ?) -> False :
  val current-handler = CURRENT-ERROR-HANDLER
  label break :
    defn handler (e:Exception) :
      current-handler(e)
      break()
    let-var CURRENT-ERROR-HANDLER = handler :
      body()
    false

;Evaluate the given body and detect whether there are
;any errors. If there are, then wrap it up and throw
;the errors.
public defn throw-if-errors (body:() -> ?,
                             Error:Tuple<Exception> -> Exception) -> False :
  val buffer = Vector<Exception>()
  defn push-error-to-buffer (e:Exception) :
    add(buffer, e)
  let-var CURRENT-ERROR-HANDLER = push-error-to-buffer :
    body()
  if not empty?(buffer) :
    throw(Error(to-tuple(buffer)))