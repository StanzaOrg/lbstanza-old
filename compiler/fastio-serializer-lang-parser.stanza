defpackage stz/fastio-serializer-lang-parser :
  import core
  import collections
  import core/parsed-path
  import stz/fastio-serializer-lang
  import stz/core-macros
  import stz/fastio-errors

;============================================================
;==================== Syntax Definition =====================
;============================================================

defsyntax fastio-serializer-lang :
  import (id!, exp!, type!, type$, :!, id) from core

  ;Definition of overall defserializer.
  public defproduction defserializer: DefSerializer
  defrule defserializer = (defserializer ?name:#id! (?arguments ...) #:! (
                             ?entry-points:#entry-points!
                             ?exps:#texp! ...)) :
    val s = DefSerializer(closest-info(),
                          unwrap-token(name),
                          arguments,
                          entry-points,
                          to-tuple(exps))
    process-includes(s)

  ;Read the entry points for the overall defserializer.
  defproduction entry-points!: Tuple<Symbol>
  defrule entry-points! = (entry-points #:! (?names:#id! ...)) :
    to-tuple(unwrap-all(names))
  fail-if entry-points! = () :
    FSE(closest-info(), "Expected listing of serializer entry points here.")

  ;----------------------------------------------------------
  ;------------------- Top Level Expressions ----------------
  ;----------------------------------------------------------

  public defproduction texp!:TopExp

  ;Syntax for 'include'
  defrule texp! = (include ?filename:#string) :
    match(closest-info()) :
      (info:FileInfo) : IncludeFile(info, unwrap-token(filename))
      (f:False) : throw(FSE(false, "Include statement is not supported if \
                                    name of current file is unknown."))

  ;Syntax for 'defatom'
  defrule texp! = (defatom ?name:#id! (?binder:#id! #:! ?type:#type$) #:! (
                     #writer! #:! ?writer-exps:#special-exps
                     #reader! #:! ?reader-exps:#special-exps
                     ?constant-size:#size-or-skip! #:! ?skipper-exps:#special-exps)) :
    DefAtom(closest-info(),
            unwrap-token(name),
            unwrap-token(binder),
            type,
            constant-size
            writer-exps,
            reader-exps,
            skipper-exps)

  ;Syntax for 'defunion'
  defrule texp! = (defunion ?name:#id! (?type:#type$) #:! (
                     ?branches:#ubranch! ...)) :
    DefUnion(closest-info(),
             unwrap-token(name),
             type,
             to-tuple(branches))

  ;Syntax for a single union branch.
  defproduction ubranch!: UnionBranch
  defrule ubranch! = (?type:#type! #:! ?constructor:#constructor!) :
    UnionBranch(closest-info(), type, constructor)

  ;Syntax for 'defcombinator'
  defrule texp! = (defcombinator ?name:#id! (?args:#combinator-arg! ...)
                                 (?binder:#id! #:! ?type:#type$) #:! (
                     #writer! #:! ?writer-exps:#special-exps
                     #reader! #:! ?reader-exps:#special-exps
                     #skip! #:! ?skipper-exps:#special-exps)) :
    DefCombinator(closest-info(),
                  unwrap-token(name),
                  to-tuple(args),
                  unwrap-token(binder),
                  type,
                  writer-exps,
                  reader-exps,
                  skipper-exps)

  defproduction combinator-arg!: CombinatorArg
  defrule combinator-arg! = (?name:#id! #:! ?type-name:#id!) :
    CombinatorArg(closest-info(), unwrap-token(name), unwrap-token(type-name))

  ;Syntax for 'deftype'
  defrule texp! = (deftype ?name:#id! (?type:#type$) #:! ?constructor:#constructor!) :
    DefType(closest-info(),
            unwrap-token(name),
            type,
            constructor)

  ;Syntax for other stanza expressions.
  defrule texp! = (?e:#exp!) :
    StanzaExp(closest-info(), e)

  ;----------------------------------------------------------
  ;---------------------- Constructors ----------------------
  ;----------------------------------------------------------
  defproduction constructor!: Constructor

  ;Syntax for Enum constructors
  defrule constructor! = (enum) :
    EnumConstructor()

  ;Syntax for Struct constructors
  defrule constructor! = ((?args:#struct-field! ...)) :
    StructConstructor(to-tuple(args))

  defproduction struct-field!: StructField
  defrule struct-field! = (?name:#id! #:! ?spec:#spec!) :
    StructField(unwrap-token(name), spec)

  ;Syntax for Existing specs
  defrule constructor! = (?s:#spec!)

  ;----------------------------------------------------------
  ;-------------------- Specifications ----------------------
  ;----------------------------------------------------------
  defproduction spec: IOSpec

  ;Syntax for casted specification.
  defrule spec = (?spec:#spec as ?type:#type!) :
    CastedSpec(spec, type)

  ;Syntax for combinator specification.
  defrule spec = (?name:#id(?args:#spec! ...)) :
    CombinatorSpec(unwrap-token(name), to-tuple(args))

  ;Syntax for named definition.
  defrule spec = (?name:#id) :
    NamedSpec(unwrap-token(name))

  ;Force specification.
  public defproduction spec!: IOSpec
  defrule spec! = (?s:#spec) : s
  fail-if spec! = () : FSE(closest-info(), "Invalid syntax for specification.")

  ;----------------------------------------------------------
  ;-------------------- Special Expressions -----------------
  ;----------------------------------------------------------
  defproduction special-exps
  defrule special-exps = ((?exps ...)) :
    val parsed = parse-syntax[core + current-overlays, serializer-special-expressions / #exp!](
                   List(exps))
    lift-quoted-special-exps(parsed)
  fail-if special-exps = () :
    FSE(closest-info(), "Expected a parenthesized list of expressions here.")

  ;----------------------------------------------------------
  ;---------------------- Keywords --------------------------
  ;----------------------------------------------------------
  defproduction writer!
  defrule writer! = (writer)
  fail-if writer! = () : FSE(closest-info(), "Expected keyword 'writer' here.")

  defproduction reader!
  defrule reader! = (reader)
  fail-if reader! = () : FSE(closest-info(), "Expected keyword 'reader' here.")

  defproduction skip!
  defrule skip! = (skip)
  fail-if skip! = () : FSE(closest-info(), "Expected keyword 'skip' here.")

  ;Matches either 'size' or 'skip'.
  ;Returns true if it matches 'size'.
  defproduction size-or-skip!: True|False
  defrule size-or-skip! = (size) : true
  defrule size-or-skip! = (skip) : false
  fail-if size-or-skip! = () : FSE(closest-info(), "Expected either keyword 'size' or 'skip' here.")

  ;----------------------------------------------------------
  ;-------------------- Primitives --------------------------
  ;----------------------------------------------------------
  defproduction string: String|Token
  defrule string = (?s) when unwrap-token(s) is String

  defproduction int: Int
  defrule int = (?s) when unwrap-token(s) is Int

;============================================================
;==================== Special Expressions ===================
;============================================================
defsyntax serializer-special-expressions :

  import (exp4, exp$) from core
  import (spec!) from fastio-serializer-lang

  ;Syntax for writing according to a specificaiton.
  defrule exp4 = (~ #write[?spec:#spec!](?item:#exp$)) :
    val exp = WriteSpec(closest-info(), spec, item)
    qquote($quote ~ exp)
  fail-if exp4 = (~ #write) :
    FSE(closest-info(), "Invalid syntax for #write[spec] expression.")

  ;Syntax for reading according to a specification.
  defrule exp4 = (~ #read[?spec:#spec!]) :
    val exp = ReadSpec(closest-info(), spec)
    qquote($quote ~ exp)
  fail-if exp4 = (~ #read) :
    FSE(closest-info(), "Invalid syntax for #read[spec] expression.")

  ;Syntax for retrieving the size of a specification.
  defrule exp4 = (~ #size[?spec:#spec!]) :
    val exp = SizeSpec(closest-info(), spec)
    qquote($quote ~ exp)
  fail-if exp4 = (~ #size) :
    FSE(closest-info(), "Invalid syntax for #size[spec] expression.")

  ;Syntax for skipping an item given a specification.
  defrule exp4 = (~ #skip[?spec:#spec!]) :
    val exp = SkipSpec(closest-info(), spec)
    qquote($quote ~ exp)
  fail-if exp4 = (~ #skip) :
    FSE(closest-info(), "Invalid syntax for #skip[spec] expression.")

  ;Syntax for notifying an error.
  defrule exp4 = (~ #error) :
    val exp = NotifyError(closest-info())
    qquote($quote ~ exp)

  ;Syntax for reifying a buffer.
  defrule exp4 = (~ #buffer) :
    val exp = ReifyBuffer(closest-info())
    qquote($quote ~ exp)  

;============================================================
;================= Remove Quoted SpecialExps ================
;============================================================

;Lifts the [SpecialExp] out of the $quote form that they
;are in immediately after parsing.
defn lift-quoted-special-exps (form) -> ? :
  ;Helper: Return true if the form has structure ($quote [SpecialExp]).
  defn quoted-special-exp? (form:List) -> True|False :
    length(form) == 2 and
    unwrap-token(head(form)) == `$quote and
    form[1] is SpecialExp

  match(form) :
    (form:Token) :
      Token(lift-quoted-special-exps(item(form)), info(form))
    (form:List) :
      if quoted-special-exp?(form) : form[1]
      else : map(lift-quoted-special-exps, form)         
    (form) :
      form

;============================================================
;==================== Processing Includes ===================
;============================================================

;Parse the given file (relative to base) for top level expressions.
defn parse-serializer-exps (base:String, filename:String) -> List<TopExp> :
  val path = relative-to-file(parse-path(base), filename)
  val forms = reader/read-file(to-string(path))
  parse-syntax[fastio-serializer-lang + current-overlays / #texp! ...](forms)

;Process the includes in the DefSerializer.
defn process-includes (s:DefSerializer) -> DefSerializer :
  ;Accumulate processed expressions here.
  val accum = Vector<TopExp>()
  
  ;Process the given sequence of expressions.
  defn process (es:Seqable<TopExp>) -> False :
    for e in es do :
      match(e:IncludeFile) :       
        try :
          process $ parse-serializer-exps(
                      filename(info(e)), filename(e))
        catch (err:Exception) :
          throw(FastIOIncludeError(info(e), filename(e), err))
      else :
        add(accum, e)

  ;Return the new serializer.
  process(exps(s))
  sub-exps(s, to-tuple(accum))

;============================================================
;==================== Errors ================================
;============================================================
defn FSE (info:FileInfo|False, msg) :
  FastIOSyntaxError(info, msg)

