;See License.txt for details about licensing.

defpackage stz/params :
   import core
   import collections

;========= Compilation Flags ===========
val COMPILE-FLAGS = Vector<Symbol>()
public defn flag-defined? (s:Symbol) :
   contains?(COMPILE-FLAGS, s)
public defn add-flag (s:Symbol) :
   add(COMPILE-FLAGS, s)

;========= Stanza Configuration ========
public val STANZA-VERSION = [0 8 18]
public var STANZA-INSTALL-DIR:String = ""
public var OUTPUT-PLATFORM:Symbol = `platform
public var STANZA-PKG-DIRS:List<String> = List()
public var STANZA-FAST-PKG-DIRS:List<String> = List()

;========== System Paths ===============
;val SYSTEM-PATHS = Vector<String>()
;
;public defn add-system-path (path:String) :
;   add(SYSTEM-PATHS, path)
;
;public defn system-file (name:String) -> False|String :
;   val paths = generate<String> :
;      do(yield, SYSTEM-PATHS)
;      yield(procedure-dir())
;   for p in paths search :
;      val path = string-join([p "/" name])
;      path when file-exists?(path)
;   
;public defn system-file! (name:String) -> String :
;   match(system-file(name)) :
;      (path:String) :
;         path
;      (path:False) :
;         throw $ new Exception :
;            defmethod print (o:OutputStream, this) :
;               print-all{o, _} $
;               ["System file " name " could not be found."]

;======== Output Symbol Manging =========
public defn make-external-symbol (x:Symbol) :
   switch {OUTPUT-PLATFORM == _} :
      `os-x : symbol-join(["_", x])
      `linux : x
