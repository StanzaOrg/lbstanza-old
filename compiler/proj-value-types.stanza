defpackage stz/proj-value-types :
  import core
  import collections
  import stz/printing-utils

;============================================================
;===================== Type Specifiers ======================
;============================================================

public deftype ValueType

;The different atomic types that we support.
public defenum AtomType <: ValueType :
  StringType
  SymbolType
  StanzaInputType
  FilepathType

  ;Represents the valid settings for a C flag.
  ;Can be either a simple string, or a tuple of
  ;strings. Tuples of strings are used to represent
  ;flag combinations such as: -framework OpenGL.
  FlagType

  ;Represents either a name or a path depending
  ;on whether the string contains a slash. Used to
  ;match the behaviour of dlopen. 
  NameOrPathType

;Represents multiple values of the wrapped type.
public defstruct MultipleType <: ValueType :
  type: ValueType

;Represents a tuple of the wrapped type.
public defstruct TupleType <: ValueType :
  type: ValueType

;Represents a table with the given entries.
public defstruct TableType <: ValueType :
  entries:Tuple<TableEntry>

;Represents an entry in a table.
;- default-value: An s-expression (possibly containing ProjTable) that is
;  used as the default value if the entry is optional and no value is provided.
public defstruct TableEntry :
  name:Symbol
  type:ValueType
  optional?:True|False
  default-value:Maybe with: (default => None())

;============================================================
;==================== Printers ==============================
;============================================================

defmethod print (o:OutputStream, e:TableEntry) :
  val items = [
    simple-field("name", name(e))
    simple-field("type", type(e))
    simple-field("optional?", optional?(e))
    simple-field("default-value", default-value(e))]
  print(o, "TableEntry(%_)" % [indented-field-list(items)])

defmethod print (o:OutputStream, t:TableType) :
  print(o, "TableType(%_)" % [indented-field-list(entries(t))])

defmethod print (o:OutputStream, e:TupleType) :
  print(o, "TupleType(%_)" % [type(e)])

defmethod print (o:OutputStream, e:MultipleType) :
  print(o, "MultipleType(%_)" % [type(e)])

;============================================================
;================ Convenient Accessors ======================
;============================================================

;Returns true if the given type represents a single value,
;instead of multiple values.
public defn single? (t:ValueType) -> True|False :
  t is-not MultipleType

;============================================================
;==================== Type Shorthands =======================
;============================================================

public val SINGLE-STRING = StringType
public val MULTIPLE-STRINGS = MultipleType(StringType)
public val SINGLE-PATH = FilepathType
public val MULTIPLE-PATHS = MultipleType(FilepathType)
public val SINGLE-FLAG = FlagType
public val MULTIPLE-FLAGS = MultipleType(FlagType)
public val SINGLE-NAME-OR-PATH = NameOrPathType
public val SINGLE-SYMBOL = SymbolType
public val MULTIPLE-SYMBOLS = MultipleType(SymbolType)
public val MULTIPLE-STANZA-INPUTS = MultipleType(StanzaInputType)