;See License.txt for details about licensing.

defpackage stz/renamer :
   import core
   import collections
   import stz/il-ir
   import stz/namemap
   import stz/ids
   import stz/utils
   import stz/dl-ir
   import stz/visibility

;============================================================
;===================== Rename ===============================
;============================================================

public defn rename-il (ipackages:Tuple<IPackage>) -> RenameResult :
  ;Track errors
  val errors = Vector<Exception>()

  ;Check for duplicate packages
  var ipackages*:Tuple<IPackage> = check-duplicate-packages(ipackages, errors)
  
  ;Rename all packages
  ipackages* = to-tuple $
    for ipackage in ipackages* seq? :
      val eng = Engine(name(ipackage))
      val exps* = map(rename-exp{_, eng}, exps(ipackage))
      if empty?(/errors(eng)) :
        val ipackage* = sub-namemap(sub-exps(ipackage, exps*), namemap(eng))
        One(ipackage*)
      else :
        add-all(errors, /errors(eng))
        None()

  ;Return result
  val error = RenameErrors(to-tuple(errors)) when not empty?(errors)
  RenameResult(ipackages*, error)

public defstruct RenameResult :
  packages: Tuple<IPackage>
  errors: RenameErrors|False

;============================================================
;=============== Check for Duplicate Packages ===============
;============================================================

defn check-duplicate-packages (ipackages:Tuple<IPackage>, errors:Vector<Exception>) -> Tuple<IPackage> :
  val packages = HashTable<Symbol,IPackage>()
  to-tuple $ for p in ipackages filter :
    if key?(packages, name(p)) :
      val old-info = info(packages[name(p)])
      add(errors, DuplicatePackage(name(p), info(p), old-info))
      false
    else :
      packages[name(p)] = p
      true
      
;============================================================
;================== Specification ===========================
;============================================================

#use-added-syntax(stz-renamer-lang)
defrenamer rename-exp (e:IExp, eng:Engine) :
  e :
    ;Stanza
    IDefType: (class:c+, {args:t+}, children:e)
    IDefChild: ({args:t+})
    IDef: (name:v+, value:e)
    IDefVar: (name:mv+, value:e)
    IDefn: (name:f+, {targs:t+, args:v+, body:se})
    IDefmulti: (name:m+, {targs:t+})
    IDefmethod: ({targs:t+, args:v+, body:se})
    IFn: ({args:v+, body:se})
    IBranch: ({args:v+, body:se})
    IDo: (func:f, args:e)
    INew: (methods:e)
    ICast: (exp:e)
    IUpCast: (exp:e)
    ISet: (value:e)
    IPrim: (args:e)
    ILet: ({exp:se})
    LetRec: (group{defns:e}, body:e)
    IVisibility: (visibility{exp:e})

    ;LoStanza
    ILSDef: (name:lv+, exp:e)
    ILSDefVar: (name:lmv+, exp:e)
    ILSDefType: (name:lc+, {args:t+, fields:fd, rfield:fd})
    ILSExtern: custom{
      match(type(e)) :
        (t:ILSFnT) : ILSExtern(rename-lf+(name(e)), t, info(e))
        (t) : ILSExtern(rename-lmv+(name(e)), t, info(e))}
    ILSDefn: (name:lf+, {targs:t+, args:lv+, body:e})
    ILSExternFn: (name:lf+, {args:lv+, body:e})
    ILSDefmethod: ({targs:t+, args:lv+, body:e})
    ILSLabels: ({blocks:e})
    ILSLabeledBlock: (name:lbl+, {args:lv+, body:e})
    ILSLet: ({comm:e})
    ILSIf: ({conseq:e}, {alt:e})
    ILSBranch: ({args:lv+, body:e})
    ILSDo: (func:f, args:e)
    ILSPrim: (args:e)
    ILSSizeof: ()
    ILSTagof: ()
    ILSFn: ()
    ILSAs: (exp:e)

    ;Fallthrough
    IExp: (_:e)

  se :
    IExp: custom{rename-e(flatten-se(e))}

  f :
    IOf: (class:e)
    ILSOfT: (class:e)
    IExp: custom{rename-e(e)}

  fd :
    ILSDefField: (name:fd+)
    INone: ()

  v+ :
    IVar : register var
    ITuple : (_:v+)
  mv+ :
    IVar : register mutable-var
  t+ :
    IVar : register tvar
    ICap : (name:cv+)
  cv+ :
    IVar : register capvar
  c+ :
    IVar : register class
  m+ :
    IVar : register multi
  f+ :
    IVar : register fn

  lv+ :
    IVar : register ls-var
  lmv+ :
    IVar : register ls-mutable-var
  lf+ :
    IVar : register ls-fn
  lc+ :
    IVar : register ls-class
  fd+ :
    IVar: register ls-field
  lbl+ :
    IVar : register ls-label

;============================================================
;================= LetRec Grouping ==========================
;============================================================

defn begin-exps (e:IExp) -> List<IExp> :
  match(e) :
    (e:IBegin) : exps(e)
    (e) : List(e)

defn flatten-se (e:IExp) :
  defn loop (es:List<IExp>) -> IExp :
    if empty?(tail(es)) :
      head(es)
    else :
      match(head(es), loop(tail(es))) :
        (h:IDefn, t:LetRec) : LetRec(cons(h, defns(t)), body(t), info(h))
        (h:IDefn, t) : LetRec(List(h), t, info(h))
        (h:IDef|IDefVar, t) : Let(h, t, info(h))
        (h, t:IBegin) : Begin(cons(h, exps(t)), info(h))
        (h, t) : Begin(List(h, t), info(h))
  loop(begin-exps(e))

;============================================================
;=================== Renaming Engine ========================
;============================================================

deftype Engine
defmulti push-scope (e:Engine) -> False
defmulti pop-scope (e:Engine) -> False
defmulti push-group (e:Engine) -> False
defmulti pop-group (e:Engine) -> False
defmulti push-visibility (e:Engine, v:Visibility) -> False
defmulti pop-visibility (e:Engine) -> False
defmulti register (v:IVar, eng:Engine, type:Symbol) -> IExp
defmulti namemap (eng:Engine) -> NameMap
defmulti errors (eng:Engine) -> Vector<DuplicateError>

defn Engine (package:Symbol) :
  val vardefs = MultilevelTable<Symbol,VEntry>()
  val tvardefs = MultilevelTable<Symbol,VEntry>()
  val classdefs = MultilevelTable<Symbol,VEntry>()
  val labeldefs = MultilevelTable<Symbol,VEntry>()
  val fielddefs = MultilevelTable<Symbol,VEntry>()
  val groupdefs = MultilevelStack<VEntry>()
  val scope-stack = Vector<ScopeType>()
  val vis-stack = Vector<Visibility>()
  val errors = Vector<DuplicateError>()
  val namemap = NameMap()

  ;Add the given name to a multi-level table
  defn register (defs:MultilevelTable<Symbol,VEntry>, e:VEntry) :
    if key?(defs, name(e)) :
      already-defined(e, defs[name(e)])
    else :
      add(namemap, e)
      defs[name(e)] = e
  defn register! (defs:MultilevelTable<Symbol,VEntry>, e:VEntry) :
    if not key?(defs, name(e)) : defs[name(e)] = e
    add(namemap, e)
  defn already-defined (e:VEntry, existing:VEntry) :
    add(errors, DuplicateError(e, existing))

  ;Pop all scopes for finalization
  defn pop-all (e:Engine) :
    while not empty?(scope-stack) :
      match(peek(scope-stack)) :
        (s:GroupScope) : pop-group(e)
        (s:SingleScope) : pop-scope(e)

  defn initialize (e:Engine) :
    ;Top level starts as a recursive group
    push-group(e)
    ;Top level definitions are private by default
    push-visibility(e, Private())
    e

  initialize $ new Engine :
    defmethod namemap (this) :    
      pop-all(this)
      namemap
    defmethod errors (this) :
      pop-all(this)
      errors
    defmethod push-scope (this) :
      push-level(vardefs)
      push-level(tvardefs)
      push-level(classdefs)
      push-level(labeldefs)
      push-level(fielddefs)
      add(scope-stack, SingleScope())
      add(vis-stack, Local())
    defmethod pop-scope (this) :
      pop-level(vardefs)
      pop-level(tvardefs)
      pop-level(classdefs)
      pop-level(labeldefs)
      pop-level(fielddefs)
      pop(scope-stack)
      pop(vis-stack)
      false
    defmethod push-group (this) :
      push-level(groupdefs)
      add(scope-stack, GroupScope())
    defmethod pop-group (this) :
      for e in groupdefs peek-level :
        if key?(vardefs, name(e)) :
          already-defined(e, vardefs[name(e)])
      for e in groupdefs pop-level :
        register!(vardefs, e)
      pop(scope-stack)
      false
    defmethod push-visibility (this, v:Visibility) :
      add(vis-stack, v)
    defmethod pop-visibility (this) :
      pop(vis-stack)
      false
    defmethod register (v:IVar, this, type:Symbol) :
      ;Create VEntry
      switch(type) :
        `var : add-scope(vardefs, ValE())
        `mutable-var : add-scope(vardefs, VarE())
        `tvar : add-scope(tvardefs, TVarE())
        `capvar : add-scope(tvardefs, CapVarE())
        `class : add-scope(classdefs, TypeE())
        `ls-var : add-scope(vardefs, LValE())
        `ls-mutable-var : add-scope(vardefs, LVarE())
        `ls-class : add-scope(classdefs, LTypeE())
        `ls-field : add-scope-keep-name(fielddefs, FieldE())
        `ls-label : add-scope(labeldefs, LabelE())
        `multi : add-group(MultiE())
        `fn : add-group(FnE())
        `ls-fn : add-group(LFnE())
      where :
        defn make-ventry (etype:EType) :
          VEntry(fresh-id(), package, name(v), peek(vis-stack), etype, info(v))
        defn make-varn (e:VEntry) :
          VarN(n(e), info(v))
        defn add-scope (defs:MultilevelTable<Symbol,VEntry>, etype:EType) :
          val e = make-ventry(etype)
          register(defs, e)
          make-varn(e)
        defn add-scope-keep-name (defs:MultilevelTable<Symbol,VEntry>, etype:EType) :
          val e = make-ventry(etype)
          register(defs, e)
          v
        defn add-group (etype:EType) :
          val e = make-ventry(etype)
          match(peek(scope-stack)) :
            (s:GroupScope) : add(groupdefs, e)
            (s:SingleScope) : register(vardefs, e)          
          make-varn(e)

deftype ScopeType
defstruct GroupScope <: ScopeType
defstruct SingleScope <: ScopeType

;============================================================
;======================= Errors =============================
;============================================================

public defstruct DuplicateError <: Exception :
  entry: VEntry
  existing: VEntry

defmethod print (o:OutputStream, e:DuplicateError) :
  defn info? (e:VEntry) :
    match(info(e)) :
      (i:FileInfo) : i
      (_:False) : "package %~" % [package(e)]
  print(o, "%_: Duplicate definition of %~. Previous definition at %_." % [
    info?(entry(e)), name(entry(e)), info?(existing(e))])

public defstruct DuplicatePackage <: Exception :
  name: Symbol
  info: FileInfo|False
  existing: FileInfo|False

defmethod print (o:OutputStream, e:DuplicatePackage) :
  val info-str = match(info(e)) :
    (i:FileInfo) : "%_: " % [i]
    (i:False) : ""
  val existing-str = match(existing(e)) :
    (i:FileInfo) : " Previously defined at %_." % [i]
    (i:False) : ""
  print(o, "%_Duplicate definition of package %~.%_" % [info-str, name(e), existing-str])  

public defstruct RenameErrors <: Exception :
  errors: Collection<Exception>

defmethod print (o:OutputStream, e:RenameErrors) :
  print(o, "%n" % [errors(e)])
