defpackage stz/renamer :
   import core
   import verse
   import stz/il-ir
   import stz/namemap

;============================================================
;================== Specification ===========================
;============================================================

#use-overlay(stz/renamer-lang)
defrenamer rename-exp (e:IExp, eng:Engine) :
   e :
      ;Stanza
      IDefType: (class:c+, {args:t+})
      IDef: (name:v+, value:e)            
      IDefVar: (name:mv+, value:e)
      IDefn: (name:f+, {targs:t+, args:v+, body:se})
      IDefmulti: (name:m+, {targs:t+})
      IDefmethod: ({targs:t+, args:v+, body:se})
      IFn: ({args:v+, body:se})
      IBranch: ({args:v+, body:se})
      IDo: (func:f, args:e)
      INew: (methods:e)
      ICast: (exp:e)
      ISet: (value:e)
      IPrim: (args:e)
      LetRec: (group{defns:e}, body:e)
      IPublic: (public{exp:e})
      IProtected: (protected{exp:e})
      
      ;LoStanza
      ILSDef: (name:lv+, exp:e)
      ILSDefVar: (name:lmv+, exp:e)
      ILSDefType: (name:lc+, {args:t+, fields:fd+, rfield:fd+})
      ILSExtern: (name:lmv+)
      ILSExternFn: (name:lf+)
      ILSDefn: (name:lf+, {targs:t+, args:lv+, body:e})
      ILSLabels: ({names:lbl+, body:e})
      ILSLet: ({comm:e})
      ILSIf: ({conseq:e}, {alt:e})
      ILSBranch: ({args:lv+, body:e})
      ILSDo: (func:f, args:e)
      ILSPrim: (op:f, args:e)
      ILSSizeof: ()
      ILSTagof: ()
      ILSAs: (exp:e)

      ;Fallthrough
      IExp : (_:e)

   se :
      IExp: custom{rename-e(flatten-se(e))}

   f :
      IOf: (class:e)
      IExp: custom{rename-e(e)}

   v+ :
      IVar : register var
      ITuple : (_:v+)
   mv+ :
      IVar : register mutable-var
   t+ :
      IVar : register tvar
      ICap : (name:cv+)
   cv+ :
      IVar : register capvar
   c+ :
      IVar : register class
   m+ :
      IVar : register multi
   f+ :
      IVar : register fn

   lv+ :
      IVar : register ls-var
   lmv+ :
      IVar : register ls-mutable-var
   lf+ :
      IVar : register ls-fn
   lc+ :
      IVar : register ls-class
   fd+ :
      IVar : register ls-field
   lbl+ :
      IVar : register ls-label



;============================================================
;=================== Implementation =========================
;============================================================
defn flatten (e:IExp) -> List<IExp> :
   match(e) :
      (e:IBegin) : exps(e)
      (e) : list(e)

defn flatten-pe (e:IExp) :
   defn var-name! (e:IExp) : 
      name(e as IVar)
   defn loop (es:List<IExp>) -> [List<IExp>, List<LetPackage>] :
      if empty?(es) :
         [List(), List()]
      else :
         match(head(es)) :
            (h:IPackage) :
               val [es, ps] = loop(tail(es))
               val p = LetPackage(var-name!(name(h)),
                                  imports(h),
                                  IBegin(es, info(h)),
                                  info(h))
               [List(), List(p, ps)]
            (h) :
               val [es, ps] = loop(tail(es))
               [List(h, es), ps]
   val [es, ps] = loop(flatten(e))
   ps

defn flatten-se (e:IExp) :
   defn loop (es:List<IExp>) -> IExp :
      if empty?(tail(es)) :
         head(es)
      else :
         match(head(es), loop(tail(es))) :
            (h:IDefn, t:LetRec) : LetRec(List(h, defns(t)), body(t), info(h))
            (h:IDefn, t) : LetRec(list(h), t, info(h))
            (h:IDef, t) : Let(h, t, info(h))
            (h, t:IBegin) : IBegin(List(h, exps(t)), info(h))
            (h, t) :IBegin(list(h, t), info(h))
   loop(flatten(e))

definterface Engine
defmulti push-scope (e:Engine) -> False
defmulti pop-scope (e:Engine) -> False
defmulti push-group (e:Engine) -> False
defmulti pop-group (e:Engine) -> False
defmulti push-visibility (e:Engine, v:Vis) -> False
defmulti pop-visibility (e:Engine) -> False
defmulti register (v:IVar, eng:Engine, type:Symbol) -> IExp

definterface Item
defstruct Scope <: Item :
   entries: Vector<Item>
   top: True|False
defstruct Group <: Item :
   entries: Vector<Atom>
defstruct Atom <: Item :
   n: Int

public defn rename (e:IExp) :
   val packages = flatten-pe(e)
   val namemap = NameMap()
   val scopes = Vector<Scope>()
   
   val renamed = for p in packages map :
      val items = Vector<Scope|Group>()
      add(items, Scope(Vector<Item>(), true))
      val visibilities = Vector<Vis>()
      add(visibilities, Private())
      
      defn register-elem (vname:Symbol, type:EType, info:FileInfo) :
         val n = register(namemap, name(p), vname, peek(visibilities), type, info)
         add(entries(peek(items)), Atom(n))
         n
         
      val body* = rename-exp(body(p), eng) where :
         val eng = new Engine :
            defmethod push-scope (this) :
               add(items, Scope(Vector<Item>(), false))
               push-visibility(this, Local())
            defmethod pop-scope (this) :
               pop-visibility(this)
               add(scopes, pop(items) as Scope)
            defmethod push-group (this) :
               add(items, Group(Vector<Atom>()))
            defmethod pop-group (this) :
               val g = pop(items)
               add(entries(peek(items)), g)
            defmethod push-visibility (this, vis:Vis) :
               add(visibilities, vis)
            defmethod pop-visibility (this) :
               pop(visibilities)
               false
            defmethod register (v:IVar, this, type:Symbol) -> IExp :
               val etype = switch {type == _} :
                  `var : ValE()
                  `mutable-var : VarE()
                  `tvar : TVarE()
                  `capvar : CapVarE()
                  `class : TypeE()
                  `multi : MultiE()
                  `fn : FnE()
                  `ls-var : LValE()
                  `ls-mutable-var : LVarE()
                  `ls-fn : LFnE()
                  `ls-class : LTypeE()
                  `ls-field : FieldE()                  
                  `ls-label : LabelE()
               val n = register-elem(name(v), etype, info(v))
               VarN(n, info(v))

      add(scopes, pop(items) as Scope)
      LetPackage(name(p), imports(p), body*, info(p))

   check-duplicates(packages)
   check-duplicates(namemap, scopes)
   [namemap, IBegin(renamed, FileInfo())]

;         Errors during Renaming Stage
;         ============================

defstruct RenameError <: Exception

;         Check Duplicate Packages
;         ========================

defn check-duplicates (ps:List<LetPackage>) :
   val errors = Vector<?>()
   val table = HashTable<Symbol,LetPackage>(symbol-hash)
   
   defn duplicate! (fileinfo:FileInfo, name:Symbol, other:LetPackage) :
      add{errors, _} $
      "~: Duplicate definition of package ~. Also defined at ~." << [
         fileinfo, name, info(other)]

   for p in ps do :
      if key?(table, name(p)) :
         duplicate!(info(p), name(p), table[name(p)])
      else :
         table[name(p)] = p

   if not empty?(errors) :
      do(println, errors)
      throw(RenameError())


;        Check Duplicate Definitions
;        ===========================

defn check-duplicates (namemap:NameMap, scopes: Vector<Scope>) :
   defn name! (i:Int) : name(namemap[i] as VarEntry)
   defn info! (i:Int) : info(namemap[i] as VarEntry)
   defn type! (i:Int) : type(namemap[i] as VarEntry)

   val errors = Vector<?>()
   defn duplicate! (e:Atom, es:List<Int>) :
      val infos = for ei in es stream :
         "\n   ~ as ~" << [info!(ei), name!(ei)]
      val msg = "~: Duplicate definition of ~. Also defined at: ~@" <<
         [info!(n(e)), name!(n(e)), infos]
      add(errors, msg)

   ;Mapping for each type of definition into a map containing all the definitions
   val elems = Array<HashTable<Symbol,List<Int>>>(4)
   for i in 0 to length(elems) do :
      elems[i] = HashTable<Symbol,List<Int>>(symbol-hash)
      
   defn clear-elems () :
      for i in 0 to length(elems) do :
         clear(elems[i])
   defn ensure-no-duplicates (e:Atom, g:Int) :
      val name = name!(n(e))
      if key?(elems[g], name) :
         duplicate!(e, to-list(elems[g][name]))
   defn add-elem (e:Atom, g:Int) :
      val name = name!(n(e))
      elems[g][name] = List(n(e), get?(elems[g], name, List()))

   defn check-top-scope (s:Scope) :
      clear-elems()

      ;Element Types
      val variables = 0
      val functions = 1
      val types = 2
      
      for e in entries(s) as Vector<Atom> do :
         match(type!(n(e))) :
            ;Variables
            (t:ValE|VarE|LValE|LVarE) : 
               ensure-no-duplicates(e, variables)
               ensure-no-duplicates(e, functions)
               add-elem(e, variables)
            ;Functions   
            (t:FnE|MultiE|LFnE) :
               ensure-no-duplicates(e, variables)
               add-elem(e, functions)
            ;Types   
            (t:TypeE|LTypeE) :
               ensure-no-duplicates(e, types)
               add-elem(e, types)

   defn check-local-scope (s:Scope) :
      clear-elems()
      
      ;Element Types
      defn type-id (e:Atom) :
         match(type!(n(e))) :
            (t:ValE|VarE|FnE|LValE|LVarE) : 0
            (t:TVarE|CapVarE) : 1
            (t:LabelE) : 2
            (t:FieldE) : 3      
      defn ensure-no-dups (e:Atom) :
         ensure-no-duplicates(e, type-id(e))
      defn add (e:Atom) :
         add-elem(e, type-id(e))
      for e in entries(s) do :
         match(e) :
            (e:Atom) :
               ensure-no-dups(e)
               add(e)
            (e:Group) :
               do(ensure-no-dups, entries(e))
               do(add, entries(e))

   for s in scopes do :
      if top(s) : check-top-scope(s)
      else : check-local-scope(s)
   if not empty?(errors) :
      do(println, errors)
      throw(RenameError())

