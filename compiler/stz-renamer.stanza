defpackage stz/renamer :
   import core
   import verse
   import stz/il-ir
   import stz/namemap

defn flatten (e:IExp) -> List<IExp> :
   match(e) :
      (e:IBegin) : map-append(flatten, exps(e))
      (e) : list(e)

defn flatten-pe (e:IExp) :
   defn var-name! (e:IExp) : name(e as IVar)
   defn loop (es:List<IExp>) -> [List<IExp>, List<LetPackage>] :
      if empty?(es) :
         [List(), List()]
      else :
         match(head(es)) :
            (h:IPackage) :
               val [es, ps] = loop(tail(es))
               val p = LetPackage(var-name!(name(h)), imports(h), IBegin(es, info(h)), info(h))
               [List(), List(p, ps)]
            (h) :
               val [es, ps] = loop(tail(es))
               [List(h, es), ps]
   val [es, ps] = loop(flatten(e))
   ps

defn flatten-se (e:IExp) :
   defn loop (es:List<IExp>) -> IExp :
      if empty?(tail(es)) :
         head(es)
      else :
         match(head(es), loop(tail(es))) :
            (h:IDefn, t:LetRec) :
               LetRec(List(h, defns(t)), body(t), info(h))
            (h:IDefn, t) : LetRec(list(h), t, info(h))
            (h:IDef, t) : Let(h, t, info(h))
            (h, t:IBegin) : IBegin(List(h, exps(t)), info(h))
            (h, t) :IBegin(list(h, t), info(h))
               
   loop(flatten(e))

definterface Scope
defmulti entries (s:Scope) -> Vector<Int>
defstruct PScope <: Scope :
   entries: Vector<Int> with: (as-method => true)
defstruct BScope <: Scope :
   entries: Vector<Int> with: (as-method => true)
defstruct Group <: Scope :
   entries: Vector<Int> with: (as-method => true)

public defn rename (e:IExp) :
   val namespace = NameMap()
   val scopes = Vector<Scope>()
   var visibility = Private()
   var package:Symbol

   defn reg-vars (e:IExp, type:EType) :
      match(e) :
         (e:IVar) :
            val n = register(namespace, package, name(e), visibility, type, info(e), false)
            VarN(n, info(e))
         (e:ILSVar) :   
            val n = register(namespace, package, name(e), visibility, type, info(e), true)
            LSVarN(n, info(e))
         (e) :
            map(reg-vars{_, type}, e)

   defn #map (f: IExp -> IExp, e:IExp) : f(e)
   defn #map (f: IExp -> IExp, e:List<IExp>) : map(f, e)

   defn begin-scope () : println("Begin scope")
   defn end-scope () : println("End scope")
   defn begin-group () : println("Begin group")
   defn end-group () : println("End group")

   (((defn rename-pe (e : IExp) : (IBegin (@do-afn _ FileInfo (@do)) $ for e in flatten-pe (@do e) map : (package = name (@do e) begin-scope (@do) val body* = rename-e (@do body (@do e)) end-scope (@do) LetPackage (@do package imports (@do e) body* info (@do e))))) (defn gen16 (e : IExp) : (rename-e (@do flatten-se (@do e)))) (defn gen17 (e : IExp) : (reg-vars (@do e TypeE (@do)))) (defn gen18 (e : IExp) : (reg-vars (@do e TVarE (@do)))) (defn gen19 (e : IExp) : (reg-vars (@do e ValE (@do)))) (defn rename-v+ (e : IExp) : (reg-vars (@do e VarE (@do)))) (defn gen20 (e : IExp) : (reg-vars (@do e MultiE (@do)))) (defn gen21 (e : IExp) : (reg-vars (@do e FnE (@do)))) (defn rename-e (gen24 : IExp) : (match (@do gen24) : ((gen24 : IDefType) : ((val class33 = #map (@do gen17 class (@do gen24))) (begin-scope (@do) (val args35 = #map (@do gen18 args (@do gen24))) end-scope (@do)) (val parent38 = parent (@do gen24)) (val info40 = info (@do gen24)) IDefType (@do class33 args35 parent38 info40)) (gen24 : IDef) : ((val name43 = #map (@do gen19 name (@do gen24))) (val type45 = type (@do gen24)) (val value47 = #map (@do rename-e value (@do gen24))) (val info40 = info (@do gen24)) IDef (@do name43 type45 value47 info40)) (gen24 : IDefVar) : ((val name43 = #map (@do rename-v+ name (@do gen24))) (val type45 = type (@do gen24)) (val value47 = #map (@do rename-e value (@do gen24))) (val info40 = info (@do gen24)) IDefVar (@do name43 type45 value47 info40)) (gen24 : IDefn) : ((val tail?56 = tail? (@do gen24)) (val name43 = #map (@do gen21 name (@do gen24))) (begin-scope (@do) (val targs59 = #map (@do gen18 targs (@do gen24))) (val a161 = #map (@do gen22 a1 (@do gen24))) (val a263 = a2 (@do gen24)) (val args35 = #map (@do gen19 args (@do gen24))) (val body66 = #map (@do gen16 body (@do gen24))) end-scope (@do)) (val info40 = info (@do gen24)) IDefn (@do tail?56 name43 targs59 a161 a263 args35 body66 info40)) (gen24 : IDefmulti) : ((val name43 = #map (@do gen20 name (@do gen24))) (begin-scope (@do) (val targs59 = #map (@do gen18 targs (@do gen24))) (val a161 = #map (@do gen22 a1 (@do gen24))) end-scope (@do)) (val a263 = a2 (@do gen24)) (val info40 = info (@do gen24)) IDefmulti (@do name43 targs59 a161 a263 info40)) (gen24 : IDefmethod) : ((val tail?56 = tail? (@do gen24)) (val multi79 = multi (@do gen24)) (val thisn81 = thisn (@do gen24)) (begin-scope (@do) (val targs59 = #map (@do gen18 targs (@do gen24))) (val a161 = #map (@do gen22 a1 (@do gen24))) (val a263 = a2 (@do gen24)) (val args35 = #map (@do gen19 args (@do gen24))) (val body66 = #map (@do gen16 body (@do gen24))) end-scope (@do)) (val info40 = info (@do gen24)) IDefmethod (@do tail?56 multi79 thisn81 targs59 a161 a263 args35 body66 info40)) (gen24 : IFn) : ((val tail?56 = tail? (@do gen24)) (val a161 = a1 (@do gen24)) (val a263 = a2 (@do gen24)) (begin-scope (@do) (val args35 = #map (@do gen19 args (@do gen24))) (val body66 = #map (@do gen16 body (@do gen24))) end-scope (@do)) (val info40 = info (@do gen24)) IFn (@do tail?56 a161 a263 args35 body66 info40)) (gen24 : IBranch) : ((val types99 = types (@do gen24)) (begin-scope (@do) (val args35 = #map (@do gen19 args (@do gen24))) (val body66 = #map (@do gen16 body (@do gen24))) end-scope (@do)) (val info40 = info (@do gen24)) IBranch (@do types99 args35 body66 info40)) (gen24 : IDo) : ((val func106 = #map (@do gen23 func (@do gen24))) (val args35 = #map (@do rename-e args (@do gen24))) (val info40 = info (@do gen24)) IDo (@do func106 args35 info40)) (gen24 : INew) : ((val class33 = class (@do gen24)) (val methods112 = #map (@do rename-e methods (@do gen24))) (val info40 = info (@do gen24)) INew (@do class33 methods112 info40)) (gen24 : ICast) : ((val exp116 = #map (@do rename-e exp (@do gen24))) (val type45 = type (@do gen24)) (val info40 = info (@do gen24)) ICast (@do exp116 type45 info40)) (gen24 : ISet) : ((val name43 = name (@do gen24)) (val value47 = #map (@do rename-e value (@do gen24))) (val info40 = info (@do gen24)) ISet (@do name43 value47 info40)) (gen24 : IPrim) : ((val function125 = function (@do gen24)) (val args35 = #map (@do rename-e args (@do gen24))) (val info40 = info (@do gen24)) IPrim (@do function125 args35 info40)) (gen24 : ICallLS) : ((val function125 = function (@do gen24)) (val args35 = #map (@do rename-e args (@do gen24))) (val info40 = info (@do gen24)) ICallLS (@do function125 args35 info40)) (gen24 : LetRec) : ((begin-group (@do) (val defns134 = #map (@do rename-e defns (@do gen24))) end-group (@do)) (val body66 = #map (@do rename-e body (@do gen24))) (val info40 = info (@do gen24)) LetRec (@do defns134 body66 info40)) (gen24 : IExport) : ((val gen140 = visibility visibility = Public (@do) (val exp116 = #map (@do rename-e exp (@do gen24))) visibility = gen140) (val info40 = info (@do gen24)) IExport (@do exp116 info40)) (gen24 : ILSDefStruct) : ((val name43 = #map (@do gen17 name (@do gen24))) (val parents146 = parents (@do gen24)) (val types99 = types (@do gen24)) (val rtype149 = rtype (@do gen24)) (val fields151 = fields (@do gen24)) (val rfield153 = rfield (@do gen24)) (val info40 = info (@do gen24)) ILSDefStruct (@do name43 parents146 types99 rtype149 fields151 rfield153 info40)) (gen24 : ILSExtern) : ((val name43 = #map (@do rename-v+ name (@do gen24))) (val type45 = type (@do gen24)) (val info40 = info (@do gen24)) ILSExtern (@do name43 type45 info40)) (gen24 : ILSExternFn) : ((val name43 = #map (@do gen21 name (@do gen24))) (val type45 = type (@do gen24)) (val info40 = info (@do gen24)) ILSExternFn (@do name43 type45 info40)) (gen24 : ILSDefn) : ((val name43 = #map (@do gen21 name (@do gen24))) (val a161 = a1 (@do gen24)) (val a263 = a2 (@do gen24)) (begin-scope (@do) (val args35 = #map (@do rename-v+ args (@do gen24))) (val body66 = #map (@do rename-e body (@do gen24))) end-scope (@do)) (val info40 = info (@do gen24)) ILSDefn (@do name43 a161 a263 args35 body66 info40)) (gen24 : ILSDef) : ((val name43 = #map (@do rename-v+ name (@do gen24))) (val type45 = type (@do gen24)) (val exp116 = exp (@do gen24)) (val info40 = info (@do gen24)) ILSDef (@do name43 type45 exp116 info40)) (gen24 : ILSBegin) : ((val comms178 = #map (@do rename-e comms (@do gen24))) (val info40 = info (@do gen24)) ILSBegin (@do comms178 info40)) (gen24 : ILSTCall) : gen24 (gen24 : ILSSet) : gen24 (gen24 : ILSLabel) : gen24 (gen24 : ILSGoto) : gen24 (gen24 : ILSReturn) : gen24 (gen24 : ILSLet) : ((val comm182 = #map (@do rename-e comm (@do gen24))) (val info40 = info (@do gen24)) ILSLet (@do comm182 info40)) (gen24 : ILSIf) : ((val pred186 = pred (@do gen24)) (val conseq188 = #map (@do rename-e conseq (@do gen24))) (val alt190 = #map (@do rename-e alt (@do gen24))) (val info40 = info (@do gen24)) ILSIf (@do pred186 conseq188 alt190 info40)) (gen24 : ILSMatch) : ((val exp116 = exp (@do gen24)) (val branches195 = #map (@do rename-e branches (@do gen24))) (val info40 = info (@do gen24)) ILSMatch (@do exp116 branches195 info40)) (gen24 : ILSBranch) : ((val types99 = types (@do gen24)) (val body66 = #map (@do rename-e body (@do gen24))) (val info40 = info (@do gen24)) ILSBranch (@do types99 body66 info40)) (gen24 : ILSDo) : gen24 (gen24 : ILSCallC) : gen24 (gen24 : IExp) : (map (@do rename-e gen24))))) (defn gen22 (gen24 : IExp) : (match (@do gen24) : ((gen24 : IOf) : ((val class33 = class (@do gen24)) (val args35 = #map (@do gen22 args (@do gen24))) (val info40 = info (@do gen24)) IOf (@do class33 args35 info40)) (gen24 : IAnd) : ((val a277 = #map (@do gen22 a (@do gen24))) (val b279 = #map (@do gen22 b (@do gen24))) (val info40 = info (@do gen24)) IAnd (@do a277 b279 info40)) (gen24 : IOr) : ((val a277 = #map (@do gen22 a (@do gen24))) (val b279 = #map (@do gen22 b (@do gen24))) (val info40 = info (@do gen24)) IOr (@do a277 b279 info40)) (gen24 : IArrow) : ((val a161 = a1 (@do gen24)) (val a263 = #map (@do gen22 a2 (@do gen24))) (val info40 = info (@do gen24)) IArrow (@do a161 a263 info40)) (gen24 : ICap) : ((val name43 = #map (@do gen18 name (@do gen24))) (val info40 = info (@do gen24)) ICap (@do name43 info40)) (gen24 : IExp) : gen24))) (defn gen23 (gen24 : IExp) : (match (@do gen24) : ((gen24 : IOf) : ((val class33 = #map (@do rename-e class (@do gen24))) (val args35 = args (@do gen24)) (val info40 = info (@do gen24)) IOf (@do class33 args35 info40)) (gen24 : IExp) : (rename-e (@do gen24)))))))

   rename-pe(e)


   
