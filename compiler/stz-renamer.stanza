;See License.txt for details about licensing.

defpackage stz/renamer :
   import core
   import collections
   import stz/il-ir
   import stz/namemap
   import stz/ids
   import stz/pkg-ir

;============================================================
;================== Specification ===========================
;============================================================

#use-overlay(stz/renamer-lang)
defrenamer rename-exp (e:IExp, eng:Engine) :
   e :
      ;Stanza
      IDefType: (class:c+, {args:t+}, children:e)
      IDefChild: ({args:t+})
      IDef: (name:v+, value:e)
      IDefVar: (name:mv+, value:e)
      IDefn: (name:f+, {targs:t+, args:v+, body:se})
      IDefmulti: (name:m+, {targs:t+})
      IDefmethod: ({targs:t+, args:v+, body:se})
      IFn: ({args:v+, body:se})
      IBranch: ({args:v+, body:se})
      IDo: (func:f, args:e)
      INew: (methods:e)
      ICast: (exp:e)
      IUpCast: (exp:e)
      ISet: (value:e)
      IPrim: (args:e)
      ILet: ({exp:se})
      LetRec: (group{defns:e}, body:e)
      IPublic: (public{exp:e})
      IProtected: (protected{exp:e})

      ;LoStanza
      ILSDef: (name:lv+, exp:e)
      ILSDefVar: (name:lmv+, exp:e)
      ILSDefType: custom{
         let-var CLASS-NAME = name(name(e) as IVar) :
            rename-lst(e)}
      ILSExtern: custom{
         match(type(e)) :
            (t:ILSFnT) : ILSExtern(rename-lf+(name(e)), type(e), info(e))
            (t) : ILSExtern(rename-lmv+(name(e)), type(e), info(e))}
      ILSDefn: (name:lf+, {targs:t+, args:lv+, body:e})
      ILSExternFn: (name:lf+, {args:lv+, body:e})
      ILSDefmethod: ({targs:t+, args:lv+, body:e})
      ILSLabels: ({blocks:e})
      ILSLabeledBlock: (name:lbl+, {args:lv+, body:e})
      ILSLet: ({comm:e})
      ILSIf: ({conseq:e}, {alt:e})
      ILSBranch: ({args:lv+, body:e})
      ILSDo: (func:f, args:e)
      ILSDoInStack: (func:f, args:e)
      ILSDoStack: (func:f, arg:e)
      ILSPrim: (args:e)
      ILSSizeof: ()
      ILSTagof: ()
      ILSFn: ()
      ILSAs: (exp:e)

      ;Fallthrough
      IExp: (_:e)

   lst :
      ILSDefType: (name:lc+, {args:t+, fields:fd+, rfield:fd+})

   se :
      IExp: custom{rename-e(flatten-se(e))}

   f :
      IOf: (class:e)
      ILSOfT: (class:e)
      IExp: custom{rename-e(e)}

   v+ :
      IVar : register var
      ITuple : (_:v+)
   mv+ :
      IVar : register mutable-var
   t+ :
      IVar : register tvar
      ICap : (name:cv+)
   cv+ :
      IVar : register capvar
   c+ :
      IVar : register class
   m+ :
      IVar : register multi
   f+ :
      IVar : register fn

   lv+ :
      IVar : register ls-var
   lmv+ :
      IVar : register ls-mutable-var
   lf+ :
      IVar : register ls-fn
   lc+ :
      IVar : register ls-class
   fd+ :
      IVar: register ls-field
      INone: ()
   lbl+ :
      IVar : register ls-label

;============================================================
;================= LetRec Grouping ==========================
;============================================================

defn begin-exps (e:IExp) -> List<IExp> :
   match(e) :
      (e:IBegin) : exps(e)
      (e) : List(e)

defn flatten-se (e:IExp) :
   defn loop (es:List<IExp>) -> IExp :
      if empty?(tail(es)) :
         head(es)
      else :
         match(head(es), loop(tail(es))) :
            (h:IDefn, t:LetRec) : LetRec(cons(h, defns(t)), body(t), info(h))
            (h:IDefn, t) : LetRec(List(h), t, info(h))
            (h:IDef|IDefVar, t) : Let(h, t, info(h))
            (h, t:IBegin) : Begin(cons(h, exps(t)), info(h))
            (h, t) : Begin(List(h, t), info(h))
   loop(begin-exps(e))

;============================================================
;================= Package Grouping =========================
;============================================================

defn flatten-pe (e:IExp) :
   ;Create default package
   defn default-package (es:List<IExp>) :
      val info = info(head(es)) when not empty?(es)
      val imports = to-list $ [
         IImport(IVar(`core, false), List(), false)
         IImport(IVar(`collections, false), List(), false)]
      LetPackage(gensym(`default), imports, Begin(es, info), info)
   ;Returns [remaining, pkgs] where :
   ;   remaining is the list of expressions not following a package expression
   ;   pkgs is the list of package expressions comprising the program
   defn loop (es:List<IExp>) -> [List<IExp>, List<LetPackage|LoadPackage>] :
      if empty?(es) :
         [List(), List()]
      else :
         match(head(es)) :
            (h:IPackage) :
               val [es, ps] = loop(tail(es))
               val p = LetPackage(name!(h), imports(h), Begin(es, info(h)), info(h))
               [List(), cons(p, ps)]
            (h:LoadPackage) :
               val [es, ps] = loop(tail(es))
               val p = default-package(es)
               [List(), cons(h, p, ps)]
            (h) :
               val [es, ps] = loop(tail(es))
               [cons(h, es), ps]
   ;Scan and create default package if necessary
   val [es, ps] = loop(begin-exps(e))
   if empty?(es) : ps
   else : cons(default-package(es), ps)

;============================================================
;=================== Implementation =========================
;============================================================
var CLASS-NAME: False|Symbol = false

deftype Engine
defmulti push-scope (e:Engine) -> False
defmulti pop-scope (e:Engine) -> False
defmulti push-group (e:Engine) -> False
defmulti pop-group (e:Engine) -> False
defmulti push-visibility (e:Engine, v:Vis) -> False
defmulti pop-visibility (e:Engine) -> False
defmulti register (v:IVar, eng:Engine, type:Symbol) -> IExp

deftype Item
defstruct Scope <: Item :
   entries: Vector<Item>
   top: True|False
defstruct Group <: Item :
   entries: Vector<Atom>
defstruct Atom <: Item :
   n: Int

public defn rename (e:IExp) -> [NameMap List<LoadPackage|LetPackage>] :
   val packages = flatten-pe(e)
   val namemap = NameMap()
   val scopes = Vector<Scope>()

   val renamed = for p in packages map :
      val items = Vector<Scope|Group>()
      add(items, Scope(Vector<Item>(), true))
      val visibilities = Vector<Vis>()
      add(visibilities, Private())

      defn retrieve-id (package:Symbol, name:Symbol, type:EType) :
         val k = [package, name, type]
         switch {_ == k} :
            ;Core Types
            [`core `Byte LTypeE()] : BYTE-TYPE-ID
            [`core `Char LTypeE()] : CHAR-TYPE-ID
            [`core `Int LTypeE()] : INT-TYPE-ID
            [`core `Long LTypeE()] : LONG-TYPE-ID
            [`core `Float LTypeE()] : FLOAT-TYPE-ID
            [`core `Double LTypeE()] : DOUBLE-TYPE-ID
            [`core `String LTypeE()] : STRING-TYPE-ID
            [`core `Symbol TypeE()] : SYMBOL-TYPE-ID
            [`core `List TypeE()] : LIST-TYPE-ID
            [`core `Array TypeE()] : ARRAY-TYPE-ID
            [`core `CharArray LTypeE()] : CHAR-ARRAY-TYPE-ID
            [`core `True LTypeE()] : TRUE-TYPE-ID
            [`core `False LTypeE()] : FALSE-TYPE-ID
            [`core `Tuple LTypeE()] : TUPLE-TYPE-ID
            [`core `Fn LTypeE()] : FN-TYPE-ID
            [`core `Stack LTypeE()] : STACK-TYPE-ID
            ;Internal Types
            [`core `Type LTypeE()] : TYPE-TYPE-ID
            [`core `Box LTypeE()] : BOX-TYPE-ID
            ;Special Functions
            [`core `extend-heap LFnE()] : EXTEND-HEAP-ID
            [`core `extend-stack LFnE()] : EXTEND-STACK-ID
            [`core `variable-uninitialized-error LFnE()] : VARIABLE-UNINITIALIZED-ERROR-ID
            [`core `tuple-length-error LFnE()] : TUPLE-LENGTH-ERROR-ID
            [`core `no-branch-error LFnE()] : NO-BRANCH-ERROR-ID
            [`core `amb-branch-error LFnE()] : AMB-BRANCH-ERROR-ID
            [`core `cast-error LFnE()] : CAST-ERROR-ID
            [`core `arity-error LFnE()] : ARITY-ERROR-ID
            else : fresh-id()

      defn retrieve-field-id (package:Symbol, class:Symbol, name:Symbol) :
         switch {_ == [package class name]} :
            [`core `Byte `value] : BYTE-VALUE-FIELD-ID
            [`core `Char `value] : CHAR-VALUE-FIELD-ID
            [`core `Int `value] : INT-VALUE-FIELD-ID
            [`core `Float `value] : FLOAT-VALUE-FIELD-ID
            else : fresh-id()
            
      match(p) :
         (p:LoadPackage) :
            p
         (p:LetPackage) :
            defn register-elem (vname:Symbol, type:EType, info:FileInfo) :
               val n = match(type) :
                  (t:FieldE) : retrieve-field-id(name(p), CLASS-NAME as Symbol, vname)
                  (t) : retrieve-id(name(p), vname, type)
               register(namemap, n, name(p), vname, peek(visibilities), type, info)
               add(entries(peek(items)), Atom(n))
               n

            val body* = rename-exp(body(p), eng) where :
               val eng = new Engine :
                  defmethod push-scope (this) :
                     add(items, Scope(Vector<Item>(), false))
                     push-visibility(this, Local())
                  defmethod pop-scope (this) :
                     pop-visibility(this)
                     add(scopes, pop(items) as Scope)
                  defmethod push-group (this) :
                     add(items, Group(Vector<Atom>()))
                  defmethod pop-group (this) :
                     val g = pop(items)
                     add(entries(peek(items)), g)
                  defmethod push-visibility (this, vis:Vis) :
                     add(visibilities, vis)
                  defmethod pop-visibility (this) :
                     pop(visibilities)
                     false
                  defmethod register (v:IVar, this, type:Symbol) -> IExp :
                     val etype = switch {type == _} :
                        `var : ValE()
                        `mutable-var : VarE()
                        `tvar : TVarE()
                        `capvar : CapVarE()
                        `class : TypeE()
                        `multi : MultiE()
                        `fn : FnE()
                        `ls-var : LValE()
                        `ls-mutable-var : LVarE()
                        `ls-fn : LFnE()
                        `ls-class : LTypeE()
                        `ls-field : FieldE()
                        `ls-label : LabelE()
                     val n = register-elem(name(v), etype, info(v) as FileInfo)
                     VarN(n, info(v))

            add(scopes, pop(items) as Scope)
            LetPackage(name(p), imports(p), body*, info(p))

   check-duplicates(packages)
   check-duplicates(namemap, scopes)
   [namemap, renamed]

;============================================================
;========== Check Duplicate Package Declarations ============
;============================================================

defn check-duplicates (ps:List<LetPackage|LoadPackage>) :
   ;Check whether package already included
   val table = HashTable<Symbol,LetPackage|LoadPackage>()
   defn included? (name:Symbol, p:LetPackage|LoadPackage) :
      val b = key?(table, name)
      if not b : table[name] = p
      b

   ;Issue duplicate! error
   val errors = Vector<?>()
   defn duplicate! (e:LetPackage|LoadPackage, other:LetPackage|LoadPackage) :
      val msg-a = match(e) :
         (e:LoadPackage) : "Duplicate load of package %_ from %_." % [name(e), filename(e)]
         (e:LetPackage) : "%_: Duplicate definition of package %_." % [info(e), name(e)]
      val msg-b = match(other) :
         (o:LoadPackage) : "Already loaded from %_." % [filename(o)]
         (o:LetPackage) : "Already defined at %_." % [info(o)]
      add(errors, "%_ %_" % [msg-a, msg-b])

   ;Check duplicates for all packages
   for p in ps do :
      if included?(name(p), p) :
         duplicate!(p, table[name(p)])

   ;Issue any errors
   if not empty?(errors) :
      throw(RenameError(errors))

;============================================================
;========== Check Duplicate Definitions in Scope ============
;============================================================

defn check-duplicates (namemap:NameMap, scopes: Vector<Scope>) :
   defn name! (i:Int) : name(namemap[i])
   defn info! (i:Int) : info(namemap[i])
   defn type! (i:Int) : type(namemap[i])

   val errors = Vector<?>()
   defn duplicate! (e:Atom, es:List<Int>) :
      val infos = for ei in es seq :
         "\n   %~ as %~" % [info!(ei), name!(ei)]
      val msg = "%_: Duplicate definition of %_. Also defined at: %*" %
         [info!(n(e)), name!(n(e)), infos]
      add(errors, msg)

   ;Mapping for each type of definition into a map containing all the definitions
   val elems = Array<HashTable<Symbol,List<Int>>>(4)
   for i in 0 to length(elems) do :
      elems[i] = HashTable<Symbol,List<Int>>()

   defn clear-elems () :
      for i in 0 to length(elems) do :
         clear(elems[i])
   defn ensure-no-duplicates (e:Atom, g:Int) :
      val name = name!(n(e))
      if key?(elems[g], name) :
         duplicate!(e, to-list(elems[g][name]))
   defn add-elem (e:Atom, g:Int) :
      val name = name!(n(e))
      elems[g][name] = cons(n(e), get?(elems[g], name, List()))

   defn check-top-scope (s:Scope) :
      clear-elems()

      ;Element Types
      val variables = 0
      val functions = 1
      val types = 2

      for e in entries(s) as Vector<Atom> do :
         match(type!(n(e))) :
            ;Variables
            (t:ValE|VarE|LValE|LVarE) :
               ensure-no-duplicates(e, variables)
               ensure-no-duplicates(e, functions)
               add-elem(e, variables)
            ;Functions
            (t:FnE|MultiE|LFnE) :
               ensure-no-duplicates(e, variables)
               add-elem(e, functions)
            ;Types
            (t:TypeE|LTypeE) :
               ensure-no-duplicates(e, types)
               add-elem(e, types)

   defn check-local-scope (s:Scope) :
      clear-elems()

      ;Element Types
      defn type-id (e:Atom) :
         match(type!(n(e))) :
            (t:ValE|VarE|FnE|LValE|LVarE) : 0
            (t:TVarE|CapVarE) : 1
            (t:LabelE) : 2
            (t:FieldE) : 3
      defn ensure-no-dups (e:Atom) :
         ensure-no-duplicates(e, type-id(e))
      defn add (e:Atom) :
         add-elem(e, type-id(e))
      for e in entries(s) do :
         match(e) :
            (e:Atom) :
               ensure-no-dups(e)
               add(e)
            (e:Group) :
               do(ensure-no-dups, entries(e))
               do(add, entries(e))

   for s in scopes do :
      if top(s) : check-top-scope(s)
      else : check-local-scope(s)
   if not empty?(errors) :
      throw(RenameError(errors))

;============================================================
;===================== Errors ===============================
;============================================================

defstruct RenameError <: Exception :
   msgs: Seqable

defmethod print (o:OutputStream, e:RenameError) :
   print-all(o, join(msgs(e), "\n"))