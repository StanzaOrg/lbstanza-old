;See License.txt for details about licensing.

;============================================================
;================ defresolver lang ==========================
;============================================================

defpackage stz/resolver-lang :
   import core
   import collections
   import macro-utils

;======== Parse Structures ========
deftype Action
defstruct ArgAction <: Action :
   arg: Arg
defstruct MapAction <: Action :
   prod: Symbol
defstruct ResolveAction <: Action :
   type: Symbol

deftype Arg
defstruct DefineArg <: Arg :
   name: Symbol
defstruct SimpleArg <: Arg :
   name: Symbol
   prod: Symbol   
defstruct ScopeArg <: Arg :
   arg: Arg
defstruct BeginArg <: Arg :
   args: List<Arg>

defstruct Clause :
   type
   action: Action

deftype Prod
defmulti name (p:Prod) -> Symbol
defmulti type (p:Prod) -> ?
defmulti clauses (p:Prod) -> List<Clause>
defmulti plus-clauses (p:Prod) -> List<Symbol>
   
defstruct Definer <: Prod :
   name: Symbol with: (as-method => true)
   type with: (as-method => true)
   clauses: List<Clause> with: (as-method => true)
   plus-clauses: List<Symbol> with: (as-method => true)
   
defstruct Resolver <: Prod :
   name: Symbol with: (as-method => true)
   type with: (as-method => true)
   clauses: List<Clause> with: (as-method => true)
   plus-clauses: List<Symbol> with: (as-method => true)

defstruct DefResolver :
   name: Symbol
   exp: Symbol
   type: Symbol
   eng: Symbol
   engtype
   prods: List<Prod>

;======== Syntax Definition ========
defsyntax stz/resolver-lang :
   defn sym? (x) :
      match(unwrap-token(x)) :
         (x:Symbol) : x != `...
         (x) : false
         
   defn ensure-empty (xs:List, name:String) :
      if not empty?(xs) :
         fatal("Expected %_ but received %_." % [name, xs])

   defrule :
      sym = (?x) when sym?(x) : unwrap-token(x)
      prefix-op = (defresolver ?name:#sym (?exp:#sym:?type:#sym, ?eng:#sym:?engtype:#type) :
                      ?ps:#prod ... ?rest ...) :
         ensure-empty(rest, "production")              
         val r = DefResolver(name, exp, type, eng, engtype, ps)
         stz/langs/expande(compile(r))
         

      type? = ((?t:#type)) : t
      type? = () : false
      
      prod = (define ?name:#sym ?type:#type? :
                 ((! +) ?cs:#clause) @...
                 (+ ?pcs:#sym) @...
                 ?rest ...) :
         ensure-empty(rest, "clause")        
         Definer(name, type, cs, pcs)
      prod = (resolve ?name:#sym ?type:#type? :
                 ((! +) ?cs:#clause) @...
                 (+ ?pcs:#sym) @...
                 ?rest ...) :
         ensure-empty(rest, "clause")        
         Resolver(name, type, cs, pcs)

      clause = (?type:#type : ?action:#action) : Clause(type, action)

      action = (resolve ?type:#sym) : ResolveAction(type)
      action = ((~ _ : ?type:#sym)) : MapAction(type)
      action = (?arg:#arg) : ArgAction(arg)

      arg = ({?args:#arg ...}) : ScopeArg(BeginArg(args))
      arg = ((?args:#arg ...)) : BeginArg(args)
      arg = (?name:#sym :+) : DefineArg(name)
      arg = (?name:#sym : ?type:#sym) : SimpleArg(name, type)

;======== Compilation ========
defn compile (d:DefResolver) :
   ;Resolver and Withiner Names
   defn name-function (keys:Seqable<Symbol>) :
      val table = HashTable<Symbol,Symbol>()
      for k in keys do : table[k] = gensym()
      fn (x:Symbol) :
         fatal("No name defined for %_" % [x]) when not key?(table, x)            
         table[x]
   val resolver = name-function(seq(name, prods(d)))
   val withiner = name-function(seq(name, prods(d)))

   ;Getting the node argument structure
   val structure = stz/ast-lang/nodes(stz/ast-lang/AST-TABLE[type(d)])
   defn get-node-args (n) :
      match(unwrap-token(n)) :
         (n:Symbol) : lookup(structure, n)
         (n) : fatal("Cannot retrieve node arguments for %_." % [n])

   ;Is the given production a definer?
   defn definer? (n:Symbol) :
      for p in prods(d) any? :
         (name(p) == n) and
         p is Definer

   ;     Resolvers
   ;     ---------
   defn compile-argaction (node, a:ArgAction, build?) :
      val stmts = Vector<?>()
      val field-table = HashTable<Symbol,Symbol>()
      defn loop (a:Arg) :
         match(a) :
            (a:DefineArg) :
               val template = `(#do(#new-definitions, name(e)))
               add{stmts, _} $ fill-template(template, [
                  `name => name(a)
                  `e => exp(d)])
            (a:SimpleArg) :
               if definer?(prod(a)) :
                  val template = `(#do(f, name(e)))
                  add{stmts, _} $ fill-template(template, [
                     `f => resolver(prod(a))
                     `name => name(a)
                     `e => exp(d)])
               else :
                  val ret = gensym()
                  val template = `(val ret = #map(f, name(e)))
                  add{stmts, _} $ fill-template(template, [
                     `ret => ret
                     `f => resolver(prod(a))
                     `name => name(a)
                     `e => exp(d)])
                  field-table[name(a)] = ret
            (a:ScopeArg) :
               add(stmts, qquote(push-scope(~ (eng(d)))))
               loop(arg(a))
               add(stmts, qquote(pop-scope(~ (eng(d)))))
            (a:BeginArg) :
               do(loop, args(a))
      loop(arg(a))

      ;Build Node
      if build? :
         defn get-node (node) :
            val x = unwrap-token(node)
            fatal("Not a node: %_" % [node]) when x is-not Symbol
            x
         defn get-field (name:Symbol) :
            if key?(field-table, name) : field-table[name]
            else : qquote((~ name)(~ (exp(d))))
         add{stmts, _} $ fill-template(`(Node(args)), [
            `Node => get-node(node),
            `args => splice(to-list(seq(get-field, get-node-args(get-node(node)))))])
      else :
         add(stmts, false)
         
      ;Return statements
      to-list(stmts)

   ;Resolver action
   defn compile-resolver-action (node, a:Action, build?) :
      match(a) :
         (a:ArgAction) :
            compile-argaction(node, a, build?)
         (a:MapAction) :   
            fill-template(`(map(f, e)), [
               `f => resolver(prod(a))
               `e => exp(d)])
         (a:ResolveAction) :      
            fill-template(`(resolve(e, eng, `type)), [
               `e => exp(d)
               `eng => eng(d)
               `type => type(a)])

   defn type? (p:Prod) :
      if type(p) is False : type(d)
      else : type(p)

   ;Compiling a Production
   defn compile-production (p:Prod) :
      defn c-clause (c:Clause) :         
         val template = `((e:Node) : body)
         fill-template(template, [
            `e => exp(d)
            `Node => type(c)
            `body => compile-resolver-action(type(c), action(c), p is Resolver)])
      defn c-plus (cs:List<Symbol>) :
         if empty?(cs) :
            fill-template(`(fatal("Inappropriate %_ expression: %~" % [name, e])), [
               `name => to-string(name(p))
               `e => exp(d)])
         else :
            val c = head(cs)
            val template = `(if within(e) : resolver(e) else : alt)
            fill-template(template, [
               `within => withiner(c)
               `e => exp(d)
               `resolver => resolver(c)
               `alt => c-plus(tail(cs))])
      defn c-body (cs:List<Clause>, pcs:List<Symbol>) :
         if empty?(pcs) :
            val template = `(match(e) :
                                cs
                                (e) : fatal("Inappropriate %_ expression: %~" % [name, e]))
            fill-template(template, [
               `e => exp(d)
               `cs => splice(seq-append(c-clause, cs))
               `name => to-string(name(p))])
         else :
            val template = `(match(e) :
                                cs
                                (e) : alt)
            fill-template(template, [
               `e => exp(d)
               `cs => splice(seq-append(c-clause, cs))
               `alt => c-plus(pcs)])

      val template = `(defn name (e:type) : body)
      fill-template(template, [
         `name => resolver(name(p))
         `e => exp(d)
         `type => type?(p)
         `body => c-body(clauses(p), plus-clauses(p))])  

   ;Compiling a within specification
   defn compile-within (p:Prod) :
      var body = false
      for name in plus-clauses(p) do :
         body = fill-template(`(within(e) or body), [
            `within => withiner(name)
            `e => exp(d)
            `body => body])
      if not empty?(clauses(p)) :
         body = fill-template(`(e is (type) or body), [
            `e => exp(d)
            `type => splice(to-list(join(seq(type, clauses(p)), `|)))
            `body => body])
      val template = `(
         defn name (e:type) : body)
      fill-template(`(defn name (e:type) : body), [
         `name => withiner(name(p))
         `e => exp(d)
         `type => type?(p),
         `body => body])      

   ;Overall Template
   val template = `(
      defn name (e:type, eng:engtype) :
         defn #new-definitions (e:type) : new-definitions(eng, e)
         defn #do<?T> (f:T -> ? , x: ?T) : f(x)
         defn #do<?T> (f:T -> ?, x: List<?T>) : core/do(f, x)      
         defn #map<?S,?T> (f:T -> ?S , x: ?T) : f(x)
         defn #map<?S,?T> (f:T -> ?S, x: List<?T>) : core/map(f, x)
         resolvers
         withiners
         resolver0(e))
   fill-template(template, [
      `name => name(d)
      `e => exp(d)
      `type => type(d)
      `eng => eng(d)
      `engtype => engtype(d)
      `resolvers => map(compile-production, prods(d))
      `withiners => map(compile-within, prods(d))
      `resolver0 => resolver(name(head(prods(d))))])

