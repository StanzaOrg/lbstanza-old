defpackage stz/cycles :
  import core
  import collections
  import stz/utils

;============================================================
;=============== Cycle Detection Utility ====================
;============================================================

public defstruct Edge :
  id
  src:Int
  dst:Int
with:
  printer => true

defenum CycleState :
  OnStack
  Visited
  NotVisited

public defn detect-cycles (vertices:Tuple<Int>,
                           get-edges:Int -> Seqable<Edge>) -> Vector<Tuple<Edge>> :
  val state = IntTable<CycleState>(NotVisited)
  val stack = Vector<Edge>()
  val cycles = Vector<Tuple<Edge>>()
  defn* loop (v:Int) :
    switch(state[v]) :
      NotVisited :
        state[v] = OnStack
        do(loop, get-edges(v))
        state[v] = Visited
      OnStack :
        add(cycles, cycle-on-stack())
      Visited :
        false
  defn* loop (e:Edge) :
    add(stack, e)
    loop(dst(e))
    pop(stack)    
  defn cycle-on-stack () -> Tuple<Edge> :
    val v = dst(peek(stack))
    val start-index = for i in reverse(0 to length(stack)) find! :
      src(stack[i]) == v
    to-tuple(stack[start-index to false])
  do(loop, vertices)
  cycles

;Simple API for convenience.
public defn detect-cycles (vertices:Tuple<Int>, edges:Tuple<Edge>) -> Vector<Tuple<Edge>> :
  val edge-table = group-by(src, edges)
  detect-cycles(vertices, {edge-table[_]})