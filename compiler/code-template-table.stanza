defpackage stz/code-template-table :
  import core
  import collections

;============================================================
;=================== Code Template Table ====================
;============================================================

;Holds the instantiated code templates.
public lostanza deftype CodeTemplateTable :
  memlist:ref<Vector<Long>>
  var mem:ptr<?>
  var head:ptr<?>
  var end:ptr<?>

;Extern for allocating executable memory.
extern allocate_exec_memory: long -> ptr<?>
lostanza defn allocate-exec-memory (size:long) -> ptr<?> :
  return call-c allocate_exec_memory(size)

;Create a fresh code template table.
public lostanza defn CodeTemplateTable () -> ref<CodeTemplateTable> :
  val size = 10 * 1024
  val mem = allocate-exec-memory(size)
  return new CodeTemplateTable{
    Vector<Long>()
    mem,
    mem,
    mem + size}

;Allocate another chunk of executable memory.
lostanza defn make-chunk (t:ref<CodeTemplateTable>) -> ref<False> :

  ;Record the old chunk.
  add(t.memlist, new Long{t.mem as long})
  
  ;Allocate the new chunk.
  val size = 10 * 1024
  val mem = allocate-exec-memory(size)
  t.mem = mem
  t.head = mem
  t.end = mem + size

  ;No return value.
  return false

;Ensure that the given number of bytes can be stored contiguously in the table.
lostanza defn reserve (t:ref<CodeTemplateTable>, size:long) -> ref<False> :
  ;Create a new chunk if it doesn't fit.
  if t.head + size > t.end :
    make-chunk(t)
    if t.head + size > t.end :
      fatal("Attempt to store memory larger than one chunk.")
  return false

;Advance the head by 'size' bytes. Returns the old head of the table.
lostanza defn advance (t:ref<CodeTemplateTable>, size:long) -> ptr<?> :
  ;Sanity check.
  if t.head + size > t.end :
    fatal("Mem does not fit.")
  ;Advance the head.
  val loc = t.head
  t.head = t.head + size
  return loc

;Store a piece of memory in the code template table followed by a tail.
lostanza defn store-mem (t:ref<CodeTemplateTable>, mem:ptr<?>, size:long) -> ptr<?> :
  ;Sanity check.
  if t.head + size > t.end :
    fatal("Mem does not fit.")
  ;Advance the head.
  val loc = advance(t, size)
  ;Copy the data
  call-c clib/memcpy(loc, mem, size)
  ;Return location it was copied to.
  return loc

;============================================================
;================= Copying the Code Template ================
;============================================================

#if-defined(BOOTSTRAP) :

  ;Bootstrap mode allows for this to be elided so that it's
  ;okay for the extern labels to be missing.
  public lostanza defn make-callback (table:ref<CodeTemplateTable>,
                                      num-int-args:int,
                                      num-float-args:int,
                                      num-mem-args:int,
                                      return-type:int,
                                      func-index:int,
                                      input-indices:ref<IntArray>) -> ptr<?> :
    fatal("Not supported during bootstrapping.")
    return null

#else :

  ;Holds the trampoline stubs.
  extern c_extern_trampoline_stub_start:byte
  extern c_extern_trampoline_stub_end:byte
  extern c_extern_trampoline:byte

  ;Look for the next hole (containing 0xcafebabecafebabeL) and write
  ;the 'replacement' long to that position. Returns the pointer just
  ;past the hole.
  lostanza defn fill-hole (mem:ptr<?>, end:ptr<?>, replacement:long) -> ptr<?> :
    var head:ptr<long> = mem
    while head < end - 8 :
      if [head] == 0xcafebabecafebabeL :
        [head] = replacement
        return head + 8
      else :
        head = head + 1
    fatal("No hole found!")
    return null

  ;Create a new code template with the given parameters.
  ;Returns the address of the newly created callback.
  public lostanza defn make-callback (table:ref<CodeTemplateTable>,
                                      num-int-args:int,
                                      num-float-args:int,
                                      num-mem-args:int,
                                      return-type:int,
                                      func-index:int,
                                      input-indices:ref<IntArray>) -> ptr<?> :
    ;Compute sizes.
    val num-args = num-int-args + num-float-args + num-mem-args
    val code-size = addr(c_extern_trampoline_stub_end) - addr(c_extern_trampoline_stub_start)
    val indices-size = num-args * 8

    ;Copy template.
    reserve(table, code-size + indices-size)
    val code = store-mem(table, addr(c_extern_trampoline_stub_start), code-size)
    val indices:ptr<long> = advance(table, indices-size)

    ;Copy indices.
    for (var i:long = 0, i < num-args, i = i + 1) :
      indices[i] = input-indices.data[i]

    ;Fill the holes in the code template.
    var head:ptr<?> = code
    head = fill-hole(head, indices, addr(c_extern_trampoline_params) as long)
    head = fill-hole(head, indices, num-int-args)  
    head = fill-hole(head, indices, num-float-args)  
    head = fill-hole(head, indices, num-mem-args)  
    head = fill-hole(head, indices, func-index)
    head = fill-hole(head, indices, return-type)
    head = fill-hole(head, indices, addr(c_extern_trampoline) as long)

    ;Return the address of the new code.
    return code

;============================================================
;================= Trampoline Parameters ====================
;============================================================

;Represents the parameters for configuring the c_extern_trampoline.
lostanza deftype TrampolineParams :
  var num-int-args:long
  var num-float-args:long
  var num-mem-args:long
  var extern-index:long
  var entry-point:ptr<?>
  var index-list:ptr<long>
  var arg-list:ptr<long>
  var return-type:long

#if-defined(BOOTSTRAP) :

  ;Bootstrap mode allows for this to be elided so that it's
  ;okay for the extern labels to be missing.
  public lostanza defn initialize-extern-trampoline (entry-point:ptr<?>, arg-list:ptr<long>) -> ref<False> :
    return fatal("Not supported during bootstrapping.")

#else :

  ;Statically declared parameters for the trampoline.
  extern c_extern_trampoline_params: TrampolineParams

  ;Initialize the trampoline.
  ;- entry-point: Pointer to a function (long) -> long that is called with the function index.
  ;- arg-list: Pointer to array for storing arguments.
  public lostanza defn initialize-extern-trampoline (entry-point:ptr<?>, arg-list:ptr<long>) -> ref<False> :
    c_extern_trampoline_params.entry-point = entry-point
    c_extern_trampoline_params.arg-list = arg-list
    return false