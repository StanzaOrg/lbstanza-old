;See License.txt for details about licensing.

defpackage stz/compiler :
  import core
  import collections
  import stz/params
  import stz/proj-manager
  import stz/build-manager
  import stz/proj
  import stz/proj-utils
  import stz/compiler-main
  import stz/config
  import stz/backend
  import stz/utils
  import stz/aux-file
  import stz/front-end

;============================================================
;==================== System Callbacks ======================
;============================================================

public deftype System
public defmulti call-cc (s:System, platform:Symbol, file:String, ccfiles:Tuple<String>, ccflags:Tuple<String>, output:String) -> False
public defmulti call-shell (s:System, platform:Symbol, command:String) -> False
public defmulti make-temporary-file (s:System) -> String
public defmulti delete-temporary-file (s:System, file:String) -> False

;============================================================
;===================== Build Settings =======================
;============================================================

public deftype BuildInputs
public defstruct BuildPackages <: BuildInputs :
  names: Tuple<String|Symbol>
public defstruct BuildTarget <: BuildInputs :
  target: Symbol

public defstruct BuildSettings :
  inputs: BuildInputs with: (updater => sub-inputs)
  vm-packages: Tuple<String|Symbol> with: (updater => sub-vm-packages)
  platform: Symbol|False with: (updater => sub-platform)
  assembly: String|False
  output: String|False
  pkg-dir: String|False
  optimize?: True|False
  ccfiles: Tuple<String>
  ccflags: Tuple<String>
  flags: Tuple<Symbol>

;============================================================
;================== Compute Build Settings ==================
;============================================================

defn compute-build-settings (settings:BuildSettings, platform:Symbol) -> [ProjFile, BuildSettings] :
  match(inputs(settings)) :
    (inputs:BuildTarget) :
      val proj-files = default-proj-files()
      val proj = read-proj-files(proj-files, platform)
      ;Retrieve build target statement
      val s = build-target!(proj, target(inputs))
      ;Compute build flags
      val build-flags = unique-join(flags(s), flags(settings))
      ;Compute build optimization level
      val build-optimization = optimize?(settings) or optimize(s)
      ;Compute assembly
      val build-asm = string-or?(assembly(settings), value?(assembly(s)))        
      ;Compute output
      val build-out = string-or?(output(settings), value?(output(s)))
      ;Compute build pkg directory
      val build-pkg-dir = string-or?(pkg-dir(settings), value?(pkg(s)))
      ;Compute new settings
      val inputs* = BuildPackages $ /inputs(s)
      val settings* = BuildSettings(
        inputs*,
        supported-vm-packages(s),
        platform,
        build-asm,
        build-out,
        build-pkg-dir,
        build-optimization,
        ccfiles(settings),
        ccflags(settings),
        build-flags)
      ;Return
      [proj, settings*]
    (inputs:BuildPackages) :
      val proj-files = default-proj-files()
      add-all(proj-files, /proj-files(names(inputs)))
      val proj = read-proj-files(proj-files, platform)
      val inputs* = BuildPackages $ to-tuple $ non-files-to-symbols $ non-proj-files $ names $ inputs
      val vm-packages* = to-tuple $ non-files-to-symbols $ vm-packages $ settings
      val settings* = sub-inputs{_, inputs*} $
                      sub-vm-packages{_, vm-packages*} $
                      sub-platform{_, platform} $
                      settings
      [proj, settings*]

;============================================================
;================ Compute Dependencies ======================
;============================================================
public defn dependencies (settings:BuildSettings) -> DependencyResult :
  defn main () :
    read-config-file()
    val build-platform = compute-build-platform()
    val [proj, settings*] = compute-build-settings(settings, build-platform)
    setup-system-flags(settings*)
    compute-dependencies(proj, settings*)

  defn compute-build-platform () :
    match(platform(settings)) :
      (p:Symbol) : p
      (f:False) : OUTPUT-PLATFORM

  defn compute-dependencies (proj:ProjFile, settings:BuildSettings) :
    val params = ProjParams(compiler-flags(), optimize?(settings))
    val proj-manager = ProjManager(proj, params, AuxFile())
    dependencies $ new FrontEndInputs :
      defmethod inputs (this) : names!(inputs(settings))
      defmethod find-package (this, name:Symbol) : find-package(proj-manager, name)
      defmethod conditional-dependencies (this, pkgs:Seqable<Symbol>) : conditional-imports(proj-manager, pkgs)
      defmethod supported-vm-packages (this) : vm-packages(settings)

  ;Launch!
  main()

;============================================================
;============= Compile Given Files EntryPoint ===============
;============================================================

public defn compile (settings:BuildSettings, system:System, verbose?:True|False) :
  defn main () :
    read-config-file()
    val build-platform = compute-build-platform()
    val [proj, settings*] = compute-build-settings(settings, build-platform)
    val auxfile = AuxFile()
    if empty?(names!(inputs(settings*))) :
      println("No inputs given to compiler.")
    else if already-built?(auxfile, settings*, proj) :
      println("Build target %~ is already up-to-date." % [target?(inputs(settings))])
    else :
      setup-system-flags(settings*)
      val proj-manager = ProjManager(proj, ProjParams(compiler-flags(), optimize?(settings*)), auxfile)      
      val [build-asm, temporary-asm?] = make-asm-file?(settings*)      
      val comp-result = compile(proj-manager, names!(inputs(settings*)), vm-packages(settings*), build-asm, pkg-dir(settings*),
                                backend(platform(settings*) as Symbol), optimize?(settings*), verbose?)
      save(auxfile)                          
      link-output-file(settings*, build-asm, temporary-asm?, comp-result, target?(inputs(settings)), proj, auxfile)
      save(auxfile)

  defn compute-build-platform () :
    match(platform(settings)) :
      (p:Symbol) : p
      (f:False) : OUTPUT-PLATFORM

  defn already-built? (auxfile:AuxFile, settings*:BuildSettings, proj:ProjFile) :
    val target = target?(inputs(settings))
    match(target:Symbol) :
      target-up-to-date?(auxfile, target, BuildRecordSettings(settings*), proj)

  defn make-asm-file? (settings:BuildSettings) -> [String|False, True|False] :
    match(assembly(settings), output(settings)) :
      (asm:String, out) : [asm, false]
      (asm:False, out:String) : [make-temporary-file(system), true]
      (asm:False, out:False) : [false, false]

  defn backend (platform:Symbol) :
    switch(platform) :
      `os-x : X64Backend()
      `linux : L64Backend()
      `windows : W64Backend()

  defn link-output-file (settings:BuildSettings, build-asm:String|False, temporary-asm?:True|False,
                         comp-result:CompilationResult, target:Symbol|False, proj:ProjFile, auxfile:AuxFile) :
    ;Accumulate filestamps
    val filestamps = Vector<FileStamp>()    

    ;Main algorithm
    defn driver () :
      ;Add package stamps from front end compilation result
      add-all(filestamps, output-pkgs(comp-result))
      ;Categorize cases
      match(output(settings), build-asm) :
        (build-out:String, build-asm) : compile-exe(build-asm as String, build-out)
        (build-out:False, build-asm:String) : compile-asm(build-asm)
        (build-out:False, build-asm:False) : compile-pkgs()

    ;Case: Build an executable
    defn compile-exe (build-asm:String, build-out:String) :
      try :
        ;Compute dependencies
        val build-manager = BuildManager(proj, auxfile)
        val ds = calc-dependencies(build-manager)
        ;Compute compilation commands
        for bc in build-commands(build-manager, ds) do :
          ;Add its filestamps
          add-filestamp(bc)
          ;Execute it's compilation statement
          val cstmt = compile(bc)
          match(cstmt:CompileStmt) :
            execute(build-manager, cstmt)
        ;Create the output file
        val platform = platform(settings) as Symbol
        val ccflags* = to-tuple $ seq-cat(tokenize-shell-command, ccflags(ds))
        call-cc(system, platform, build-asm, ccfiles(ds), ccflags*, build-out)
        ;Update the auxiliary file
        add-filestamp(build-asm) when not temporary-asm?
        add-filestamp(build-out)
        update-aux-file()
      finally :
        ;Delete the temporary asm file if necessary
        delete-temporary-file(system, build-asm) when temporary-asm?

    ;Case: Compile to assembly without linking final executable
    defn compile-asm (build-asm:String) :
      add-filestamp(build-asm)
      update-aux-file()

    ;Case: Compile to pkgs
    defn compile-pkgs () :
      update-aux-file()

    ;Utilities
    defn calc-dependencies (build-manager:BuildManager) :
      ;Compute original dependencies
      val ds = dependencies(build-manager,
                            unique-join(compiled-packages(comp-result),
                                        binding-packages(comp-result)))
      ;Compute the project external dependencies
      ProjDependencies(unique-join(ccfiles(settings), ccfiles(ds)),
                       unique-join(ccflags(settings), ccflags(ds)))

    ;Execute an external compilation command
    defn execute (build-manager:BuildManager, stmt:CompileStmt) :
      ;Create external file record
      defn ext-rec () :
        val filetype = ExternalFile(filestamp(name(stmt))) when file?(stmt)
                  else ExternalFlag(name(stmt))
        val ds = map(filestamp,dependencies(stmt))
        ExternalFileRecord(filetype, ds, commands(stmt))

      ;Determine whether already compiled
      val already-compiled? =
        try : key?(auxfile,ext-rec())
        catch (e:PathResolutionError) : false

      ;If there isn't already a record cached?
      if already-compiled? :
        if verbose? :
          println("External dependency %~ is up-to-date." % [name(stmt)])
      else :
        if verbose? :
          println("Compiling external dependency %~." % [name(stmt)])
        ;Execute compilation statements
        val platform = platform(settings) as Symbol
        for command in commands(stmt) do :
          call-shell(system, platform, command)
        ;And record external file record
        add(auxfile, ext-rec())

    defn add-filestamp (file:String) :
      add(filestamps, filestamp(file))

    defn add-filestamp? (file:String) :
      add-filestamp(file) when file-exists?(file)

    defn add-filestamp (c:BuildCommand) :
      ;Cases: Either the build command
      ;  (1) requires an external build command, or
      ;  (2) is included directly in the link arguments.
      ;Case (1): The dependencies of the build command needs to be tracked.
      ;Case (2): The file itself needs to be tracked (if it is a file)
      match(compile(c)) :
        (comp:CompileStmt) :
          do(add-filestamp, dependencies(comp))
        (f:False) :
          add-filestamp(name(c)) when file?(c)
          
    defn update-aux-file () :
      match(target:Symbol) :
        val packages = to-tuple $ cat(compiled-packages(comp-result),
                                      binding-packages(comp-result))
        val proj-isolate = isolate-stmts(proj, packages)
        val rec = BuildRecord(target, package-stamps(comp-result),
                              to-tuple(filestamps), BuildRecordSettings(settings), proj-isolate)
        add(auxfile, rec)                      
        
    ;Launch!
    driver()

  ;Launch!
  main()

;============================================================
;===================== System Flags =========================
;============================================================

defn setup-system-flags (settings:BuildSettings) :
  ;Platform setting
  OUTPUT-PLATFORM = platform(settings) as Symbol

  ;Platform flag
  add-flag $ platform-flag(platform(settings) as Symbol)

  ;Optimization flag
  add-flag(`OPTIMIZE) when optimize?(settings)

  ;Add custom build flags
  do(add-flag, flags(settings))

  ;Update pkg path
  val pkg-dir = pkg-dir(settings)
  match(pkg-dir:String) :
    STANZA-PKG-DIRS = cons(pkg-dir, STANZA-PKG-DIRS)

;============================================================
;====================== Utilities ===========================
;============================================================
    
defn unique-join<?T> (xs:Seqable<?T&Equalable>, ys:Seqable<?T&Equalable>) :
  to-tuple $ unique $ cat(xs, ys)

defn has-extension? (s:String) :
  index-of-char(s, '.') is Int

defn string-or? (a:String|False, b:String|False) :
  match(a:False) : b
  else : a

defn target? (inputs:BuildInputs) :
  match(inputs:BuildTarget) : target(inputs)

defn names! (inputs:BuildInputs) :
  names(inputs as BuildPackages)

defn proj-file? (s:String|Symbol) : 
  match(s:String) : suffix?(s, ".proj")
  
defn proj-files (ss:Tuple<String|Symbol>) :
  filter(proj-file?, ss) as Seq<String>
  
defn non-proj-files (ss:Tuple<String|Symbol>) :
  filter({not proj-file?(_)}, ss)
  
defn non-files-to-symbols (ss:Seqable<String|Symbol>) :
  for s in ss seq :
    match(s) :
      (s:String) : s when has-extension?(s) else to-symbol(s)
      (s:Symbol) : s

defn BuildRecordSettings (settings:BuildSettings) :
  BuildRecordSettings(
    names!(inputs(settings))
    vm-packages(settings)
    platform(settings)
    assembly(settings)
    output(settings)
    pkg-dir(settings)
    optimize?(settings)
    ccfiles(settings)
    ccflags(settings)
    flags(settings))