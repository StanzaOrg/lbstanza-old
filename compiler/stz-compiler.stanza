;See License.txt for details about licensing.

defpackage stz/compiler :
   import core
   import reader
   import macro-utils
   import stz/params
   import stz/utils
   import stz/algorithms
   import stz/parser
   import stz/input
   import stz/renamer
   import stz/resolver
   import stz/type
   import stz/kform
   import stz/tgt

defn macroexpand (forms:List) -> List :
   with-syntax(core) :
      match-syntax(forms) :
         (?es:#exp ...) :
            es

defn vprintln (x) :
   if flag-defined?(`VERBOSE) :
      println(x)

public defn compile (filenames:List<String>, output:False|String, save-pkgs:True|False) :
   var timer
   defn start-timer (name:String) :
      timer = MicrosecondTimer(name)
      start(timer)
   defn stop-timer () :
      println(timer)
      
   if flag-defined?(`VERBOSE) :
      stz/ids/print-all-ids()

   vheader("Form")
   start-timer("Read Form")
   val forms = map(read-file, filenames)
   stop-timer()
   vprintln(forms)

   vheader("Expanded")
   start-timer("Expanded")
   val expanded = cons(`$begin, seq-append(macroexpand, forms))
   stop-timer()
   vprintln(expanded)

   vheader("Input")
   start-timer("Input")
   val input = read-prog(expanded)
   stop-timer()
   vprintln(input)

   vheader("Check")
   start-timer("Check")
   check(input)
   stop-timer()

   vheader("Renamer")
   start-timer("Rename")
   val [namemap, renamed] = rename(input)
   stop-timer()
   vprintln(renamed)

   vheader("Resolver")
   start-timer("Resolve")
   val resolved = resolve(namemap, renamed)
   stop-timer()
   vprintln(resolved)

   vheader("Type System")
   start-timer("Type System")
   val [typed, pkgs] = type-program(namemap, resolved)
   stop-timer()
   vprintln(typed)

   if output is String :
      vheader("Compiled")
      start-timer("Compile")
      val compiled = compile(typed, pkgs, namemap, save-pkgs)
      stop-timer()
      vprintln(compiled)

      vheader("Assemble and Emit")
      start-timer("Assemble")
      compile(compiled, output as String)
      stop-timer()
   else if save-pkgs :
      vheader("Compiled")
      compile-pkgs(typed, pkgs, namemap)