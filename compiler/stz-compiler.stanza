defpackage stz/compiler :
   import core
   import reader
   import macro-utils
   import stz/params
   import stz/utils
   import stz/algorithms
   import stz/parser
   import stz/input
   import stz/renamer
   import stz/resolver
   import stz/type
   import stz/kform
   import stz/tgt

defn macroexpand (forms:List) -> List :
   with-syntax(core) :
      match-syntax(forms) :
         (?es:#exp ...) :
            es

defn vprintln (x) :
   if flag-defined?(`VERBOSE) :
      println(x)

public defn compile (filenames:List<String>, output:String) -> True|False :
   try :
      if flag-defined?(`VERBOSE) :
         stz/ids/print-all-ids()
         
      vheader("Form")
      val forms = map(read-file, filenames)
      ;println(forms)

      vheader("Expanded")
      val expanded = cons(`$begin, seq-append(macroexpand, forms))
      ;println(expanded)      

      vheader("Input")
      val input = read-prog(expanded)
      ;println(input)

      vheader("Check")
      check(input)

      vheader("Renamer")
      val [namemap, renamed] = rename(input)
      ;println(renamed)

      vheader("Resolver")
      val resolved = resolve(namemap, renamed)
      ;println(resolved)

      vheader("Type System")
      val typed = type-program(namemap, resolved)
      ;println(typed)

      vheader("Compiled")
      val compiled = compile(typed, namemap)
      vprintln(compiled)

      vheader("Assemble and Emit")      
      compile(compiled, output)
         
      true   
   catch (e:Exception) :
      println(e)
      false