;See License.txt for details about licensing.

defpackage stz/compiler :
   import core
   import reader
   import macro-utils
   import stz/params
   import stz/utils
   import stz/algorithms
   import stz/parser
   import stz/input
   import stz/renamer
   import stz/resolver
   import stz/type
   import stz/kform
   import stz/tgt
   import stz/il-ir
   import stz/pkg

defn macroexpand (forms:List) -> List :
   with-syntax(core) :
      match-syntax(forms) :
         (?es:#exp ...) :
            cons(`$begin, es)

defn vprintln (x) :
   if flag-defined?(`VERBOSE) :
      println(x)

public defn compile (filenames:List<String>, output:False|String, pkg-dir:False|String) :
   var timer
   defn start-timer (name:String) :
      if flag-defined?(`PRINT-TIMING) :
         timer = MicrosecondTimer(name)
         start(timer)
   defn stop-timer () :
      if flag-defined?(`PRINT-TIMING) :
         println(timer)
      
   if flag-defined?(`VERBOSE) :
      stz/ids/print-all-ids()

   defn read-input-file (filename:String) :
      switch suffix?{filename, _} :
         ".stanza" :
            val forms = read-file(filename)
            val expanded = macroexpand(forms)
            read-prog(expanded)
         ".pkg" :
            LoadPackage(filename, deserialize-pkg(filename), false)
         else : throw(InvalidExtensionError(filename))

   vheader("Input")
   val input = Begin(map(read-input-file, filenames), false)
   vprintln(input)

   vheader("Check")
   start-timer("Check")
   check(input)
   stop-timer()

   vheader("Renamer")
   start-timer("Rename")
   val [namemap, renamed] = rename(input)
   stop-timer()
   vprintln(renamed)

   val idmap = IdMap()

   vheader("Resolver")
   start-timer("Resolve")
   val resolved = resolve(namemap, idmap, renamed)
   stop-timer()
   vprintln(resolved)

   vheader("Type System")
   start-timer("Type System")
   val typed = type-program(namemap, resolved)
   stop-timer()
   vprintln(typed)

   vheader("Convert to KForm")
   start-timer("KForm Conversion")
   val kprog = to-kform(typed, namemap)
   stop-timer()
   vprintln(kprog)

   if pkg-dir is String :
      vheader("Save Pkgs")
      start-timer("Save Pkgs")
      save-all-pkgs(idmap, pkg-dir as String, kprog)
      stop-timer()

   if output is String :
      vheader("Compile")
      start-timer("Compile")
      val compiled = compile(kprog)
      stop-timer()

      vheader("Assemble and Emit")
      start-timer("Assemble")
      compile(compiled, output as String)
      stop-timer()

defn InvalidExtensionError (filename:String) :
   new Exception :
      defmethod print (o:OutputStream, this) :
         print(o, "File %_ does not have a valid Stanza file extension." % [filename])