defpackage stz/compiler :
   import core
   import verse
   import stz/il-ir
   import stz/input
   import stz/lexer
   import stz/renamer
   import stz/resolver
   import stz/type
   import stz/primitives
   import stz/kform

public defn compile (filenames:List<String>, output:String) -> True|False :
   defn macroexpand (form) :
      with-syntax(core) :
         match-syntax(form) :
            (?es:#exp ...) :
               es

   defn read-files (names:List<String>) :
      val forms = for name in names map-append :
         macroexpand(lex-file(name))
      List(`$begin, forms)

   try :
      val parse-ir = read-files(filenames)
      val input-ir = read(parse-ir)
      println("===== INPUT IR =====")
      ;println(input-ir)      
      check(input-ir)
      val [namemap, renamed-ir] = rename(input-ir)
      println("===== RENAMED IR =====")
      ;println(renamed-ir)
      val resolved-ir = resolve(namemap, renamed-ir)
      println("===== RESOLVED IR =====")
      ;println(resolved-ir)
      val typed-ir = type-program(namemap, resolved-ir)
      compile(typed-ir, namemap, output)
      true
   catch (e) :
      println(e)
      false            
