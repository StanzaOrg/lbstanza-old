defpackage stz/reg-alloc-errors :
  import core
  import collections
  import stz/printing-utils

public deftype RegAllocError <: Exception

;Generic register allocation error.
public defn RegAllocError (msg) :
  new RegAllocError :
    defmethod print (o:OutputStream, this) :
      print(o, msg)

;Occurs when there is an error when reading syntax for
;RegAllocIR.
public defstruct RegAllocSyntaxError <: RegAllocError :
  info:FileInfo|False
  msg
defmethod print (o:OutputStream, e:RegAllocSyntaxError) :
  print(o, "%_%_" % [info-str(info(e)), msg(e)])

;Helper: Create the information string.
defn info-str (info:FileInfo|False) :
  "" when info is False else "%_: " % [info]

;============================================================
;================== Operation Model Errors ==================
;============================================================

;Report all errors within an OperationModel.
public defstruct OperationModelError <: RegAllocError :
  id:Int
  errors:Tuple<Exception>
defmethod print (o:OutputStream, e:OperationModelError) :
  print(o, "Invalid operation model op%_%_" % [
    id(e), colon-field-list(errors(e))])

public defn BadlyIndexedVar () :
  RegAllocError("BadlyIndexedVar")
public defn BadPreferenceForRequiredRegister () :
  RegAllocError("BadPreferenceForRequiredRegister")
public defn PreferSameNotAllowed () :
  RegAllocError("PreferSameNotAllowed")
public defn BadPreferSame () :
  RegAllocError("BadPreferSame")
public defn PreferSameOfRequiredRegister () :
  RegAllocError("PreferSameOfRequiredRegister")
public defn PreferSameDifferentType () :
  RegAllocError("PreferSameDifferentType")
public defn DuplicateRequiredReg () :
  RegAllocError("DuplicateRequiredReg")
public defn ReleaseBadVar () :
  RegAllocError("ReleaseBadVar")
public defn AlreadyReleased () :
  RegAllocError("AlreadyReleased")
public defn BadReleaseAfterClearRegisters () :
  RegAllocError("BadReleaseAfterClearRegisters")
public defn AssignToBadVar () :
  RegAllocError("AssignToBadVar")
public defn AlreadyAssigned () :
  RegAllocError("AlreadyAssigned")
public defn BadAssignAfterClearRegisters () :
  RegAllocError("BadAssignAfterClearRegisters")
public defn BadAssignBeforeClearRegisters () :
  RegAllocError("BadAssignBeforeClearRegisters")
public defn ReturnNotLastStmt () :
  RegAllocError("ReturnNotLastStmt")
public defn ReturnWithResults () :
  RegAllocError("ReturnWithResults")
public defn ReturnWithClearRegisters () :
  RegAllocError("ReturnWithClearRegisters")
public defn RedundantClearRegisters () :
  RegAllocError("RedundantClearRegisters")
public defn UnassignedVar () :
  RegAllocError("UnassignedVar")
public defn UnreleasedVar () :
  RegAllocError("UnreleasedVar")
public defn AlreadyAssignedReg () :
  RegAllocError("AlreadyAssignedReg")
public defn BadlyFormedLocation () :
  RegAllocError("BadlyFormedLocation")

;============================================================
;================== Program Errors ==========================
;============================================================

;Report all errors within a Program
public defstruct ProgramErrors <: RegAllocError :
  errors: Tuple<Exception>
defmethod print (o:OutputStream, e:ProgramErrors) :
  print(o, "Program is invalid%_" % [colon-field-list(errors(e))])

public defn BadIndexedProgramVar () :
  RegAllocError("BadIndexedProgramVar")
public defn BadlyIndexedLabel () :
  RegAllocError("BadlyIndexedLabel")
public defn DuplicateLabel () :
  RegAllocError("DuplicateLabel")
public defn BadTarget () :
  RegAllocError("BadTarget")
public defn BadOp () :
  RegAllocError("BadOp")
public defn BadProgramVar () :
  RegAllocError("BadProgramVar")
  
public defn BadArgArity (op-id:Int,
                         expected-arguments:Int,
                         given-arguments:Int) :
  val msg = "Incorrect call to op%_ with %_ arguments. %_ arguments were expected."
  RegAllocError(msg % [op-id, given-arguments, expected-arguments])
  
public defn BadResultArity (op-id:Int,
                            expected-results:Int,
                            given-results:Int) :
  val msg = "Incorrect call to op%_ with %_ results. %_ results were expected."
  RegAllocError(msg % [op-id, given-results, expected-results])
  
public defn BadArgType () :
  RegAllocError("BadArgType")
public defn BadResultType () :
  RegAllocError("BadResultType")

public defn RepeatedVarInOp (op-id:Int, v:Int) :
  val msg = "Repeated usage of V%_ in call to op%_."
  RegAllocError(msg % [v, op-id])

public defn RepeatedVarInResult () :
  RegAllocError("RepeatedVarInResult")

public defn EmptySetStmt () :
  RegAllocError("EmptySetStmt")
public defn MismatchedSetStmt () :
  RegAllocError("MismatchedSetStmt")
public defn BadSetType () :
  RegAllocError("BadSetType")
public defn RepeatedVarInSet (v:Int) :
  val msg = "Repeated usage of V%_ in set stateemnt."
  RegAllocError(msg % [v])  