defpackage stz/tl-struct-table :
  import core
  import collections
  import stz/tl-ir2
  import stz/dl-ir
  import stz/tl-to-dl2
  import stz/types

;============================================================
;========================= API ==============================
;============================================================

public deftype StructTable
public defmulti field-index (st:StructTable, n:Int, name:Symbol) -> Int
public defmulti field-types (st:StructTable, n:Int) -> Seqable<LSType>
public defmulti array? (st:StructTable, n:Int) -> True|False

;============================================================
;==================== Implementation ========================
;============================================================

public defn StructTable (pkgs:Seqable<TPackage>, environment:Tuple<Export>) :
  ;Table for holding struct and field information
  val struct-table = IntTable<StructEntry>()
  val field-table = HashTable<[Int,Symbol],Int>()

  ;Find all TLDefType expressions, and add to table
  val env-deftypes = for e in environment seq? :
      match(rec(e)) :
        (r:StructRec) : One(to-deftype(r))
        (r) : None()
  val tldeftypes = filter-by<TLDefType>(cat(
                     seq-cat(comms, pkgs)
                     env-deftypes))
  for c in tldeftypes do :
    categorize-type() where :
      defn* categorize-type () :
        if empty?(fields(c)) :
          object-struct(fields(c))
        else :
          fatal("TODO")
          ;val lf = last(fields(c))
          ;match(type(lf)) :
          ;  (t:RestT) : array-struct(but-last(fields(c)), lf)
          ;  (t:LSType) : object-struct(fields(c))

      defn* object-struct (fields:Tuple<Field>) :
        val base-types = to-tuple(seq(type, fields))
        struct-table[n(c)] = StructEntry(base-types, false)
        for (f in fields, i in 0 to false) do :
          field-table[field-key(f)] = i

      defn* array-struct (fields:Tuple<Field>, rfield:Field) :
        val base-types = to-tuple(seq(type, fields))
        val item-type = type(rfield)
        struct-table[n(c)] = StructEntry(base-types, item-type)
        for (f in fields, i in 0 to false) do :
          field-table[field-key(f)] = i
        field-table[field-key(rfield)] = length(base-types)

      defn field-key (f:Field) :
        [n(c), name(f)]

  new StructTable :
    defmethod field-index (this, n:Int, name:Symbol) :
      field-table[[n, name]]
    defmethod field-types (this, n:Int) :
      val e = struct-table[n]
      match(item-type(e)) :
        (t:LSType) : cat(base-types(e), repeat(t))
        (t:False) : base-types(e)
    defmethod array? (this, n:Int) :
      item-type(struct-table[n]) is LSType

;============================================================
;==================== Utilities =============================
;============================================================

defstruct StructEntry :
  base-types: Tuple<LSType>
  item-type: LSType|False