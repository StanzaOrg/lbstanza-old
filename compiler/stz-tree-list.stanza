defpackage stz/tree-list :
  import core
  import collections

public deftype TreeList
public defmulti cons (x:Int, l:TreeList) -> TreeList
public defmulti list (l:TreeList) -> List<Int>
defmulti head (t:TreeList) -> Int
defmulti children (t:TreeList) -> List<TreeList>

public defn TreeList () :
  TreeList(List())

defn TreeList (xs:List<Int>) :
  var children:List<TreeList> = List()  
  new TreeList :
    defmethod head (this) :
      head(xs)
    defmethod children (this) :
      children
    defmethod cons (x:Int, this) :
      val child = for c in children find :
        head(c) == x
      match(child:TreeList) :
        child
      else :
        val child* = TreeList(cons(x,xs))
        children = cons(child*, children)
        child*
    defmethod list (this) :
      xs
    defmethod print (o:OutputStream, this) :
      ;Is TreeList comfortably printed on a single line?
      defn single-line? (l:TreeList) :
        val cs = /children(l)
        switch(length(cs)) :
          0 : true
          1 : single-line?(head(cs))
          else : false

      ;Print the items in the TreeList
      defn print-items (o:OutputStream, l:TreeList) :
        ;Print the next item on the list.
        if not empty?(list(l)) :
          print(o, head(l))          
          print(o, ", ") when not empty?(/children(l))

        ;Print the children.
        val cs = /children(l)
        if length(cs) == 1 :
          print-items(o, head(cs))
        else if length(cs) > 1 :
          if empty?(list(l)) :
            for (c in cs, i in 0 to false) do :
              print(o, '\n') when i > 0
              print-items(o, c)
          else :
            val o2 = IndentedStream(o)
            for c in cs do :
              print(o2, '\n')
              print-items(o2, c)

      ;Print either on a single line or not.
      if single-line?(this) :
        print(o, "TreeList(")
        print-items(o, this)
        print(o, ")")
      else :
        val o2 = IndentedStream(o)
        println(o, "TreeList(")
        print-items(o2, this)
        print(o2, ")")
