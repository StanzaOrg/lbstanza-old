defpackage stz/tree-list :
  import core
  import collections

public deftype TreeList
public defmulti cons (l:TreeList, x:Int) -> TreeList
public defmulti list (l:TreeList) -> List<Int>
defmulti head (t:TreeList) -> Int

public defn TreeList () :
  TreeList(List())

defn TreeList (xs:List<Int>) :
  val id = genid()
  var children:List<TreeList> = List()  
  new TreeList :
    defmethod head (this) :
      head(xs)
    defmethod cons (this, x:Int) :
      val child = for c in children find :
        head(c) == x
      match(child:TreeList) :
        child
      else :
        val child* = TreeList(cons(x,xs))
        children = cons(child*, children)
        child*
    defmethod list (this) :
      xs
    defmethod print (o:OutputStream, this) :
      print(o, "L%_[%,]" % [id, xs])