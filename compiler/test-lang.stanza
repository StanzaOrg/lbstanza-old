defpackage stz/test-lang :
  import core
  import collections
  import macro-utils
  import stz/core-macros
  import stz/params

;<doc>=======================================================
;=================== Test Syntax ============================
;============================================================

Surface Syntax:

  deftest(tag1 tag2) name :
    ... body ...

;============================================================
;=======================================================<doc>

public defstruct DefTestStruct :
  name: DefTestName
  tags: List
  body

public deftype DefTestName
public defstruct LiteralName <: DefTestName : (name)
public defstruct ComputedName <: DefTestName : (exp)

;<doc>=======================================================
;=================== Assertion Syntax =======================
;============================================================

Surface Syntax:

  #ASSERT(x == y)
  #EXPECT(x == y)

;============================================================
;=======================================================<doc>

defsyntax tests :
  import (exp4, id!, exp$, :!, exp!) from core

  ;----------------------------------------------------------
  ;---------------- DefTest Macro ---------------------------
  ;----------------------------------------------------------

  defrule exp4 = (deftest ?tags:#tags? ?name:#name #:! ?body:#exp!) :
    if flag-defined?(`TESTING) :
      val compiled = compile(DefTestStruct(name, tags, body))
      parse-syntax[core + current-overlays / #exp!](compiled)
    else :
      `($do core/identity false)

  defproduction tags? : List
  defrule tags? = ((@do ?tags:#id! ...)) : tags
  defrule tags? = () : List()

  defproduction name : DefTestName
  defrule name = ((?exp:#exp$)) : ComputedName(exp)
  defrule name = (?name:#id!) : LiteralName(name)

  ;----------------------------------------------------------
  ;---------------- Assertion Macro -------------------------
  ;----------------------------------------------------------

  defrule exp4 = (~ #ASSERT(?exp:#exp$)) :
    val compiled = compile-assert(closest-info(), exp, true)
    parse-syntax[core + current-overlays / #exp!](compiled)

  defrule exp4 = (~ #EXPECT(?exp:#exp$)) :
    val compiled = compile-assert(closest-info(), exp, false)
    parse-syntax[core + current-overlays / #exp!](compiled)

;============================================================
;==================== DefTest Compilation ===================
;============================================================

defn compile (s:DefTestStruct) :
  defn compile-name (name:DefTestName) :
    match(name) :
      (name:LiteralName) : to-string(/name(name))
      (name:ComputedName) : exp(name)
  defn compile-main () :
    val template = `(
      run-test $ new DefTest :
        defmethod name (this) :
          test-name
        defmethod tags (this) :
          `test-tags
        defmethod run (this) :
          test-body)
    fill-template(template, [
      `test-name => compile-name(name(s))
      `test-tags => tags(s)
      `test-body => body(s)
      qualified(`stz/test-framework/run-test)
      qualified(`stz/test-framework/DefTest)
      qualified(`stz/test-framework/name)
      qualified(`stz/test-framework/run)
      qualified(`stz/test-framework/tags)])
  compile-main()

;============================================================
;================= Assertion Compilation ====================
;============================================================

;------------------------------------------------------------
;-------------------- AssertionExp --------------------------
;------------------------------------------------------------

deftype AssertionExp
defstruct AssertionAnd <: AssertionExp :
  arg1: AssertionExp
  arg2: AssertionExp
with: (printer => true)
defstruct AssertionOr <: AssertionExp :
  arg1: AssertionExp
  arg2: AssertionExp
with: (printer => true)
defstruct AssertionCall <: AssertionExp :
  func: AssertionExp
  targs: List
  args: List<AssertionExp>
with: (printer => true)
defstruct AssertionInfix <: AssertionExp :
  op: Symbol
  func: AssertionExp
  arg1: AssertionExp
  arg2: AssertionExp
with: (printer => true)
defstruct AssertionVar <: AssertionExp :
  name
with: (printer => true)
defstruct AssertionLiteral <: AssertionExp :
  value
with: (printer => true)
defstruct AssertionUnknown <: AssertionExp :
  exp
with: (printer => true)
defstruct DescribedExp <: AssertionExp :
  exp: AssertionExp
  description: String
  index: Int
with: (printer => true)

;------------------------------------------------------------
;--------------------- Parsing ------------------------------
;------------------------------------------------------------

defn parse-assertion-exp (form) -> AssertionExp :
  match-syntax[core](List(form)) :
    (($match (($as? ?arg1 ($or core/True core/False)))
       ($branch (_) (core/True) ($as? ?arg2 ($or core/True core/False)))
       ($branch (_) (core/False) false))) :
      AssertionAnd(parse-assertion-exp(arg1), parse-assertion-exp(arg2))
    (($match (($as? ?arg1 ($or core/True core/False)))
       ($branch (_) (core/True) true)
       ($branch (_) (core/False) ($as? ?arg2 ($or core/True core/False))))) :
      AssertionOr(parse-assertion-exp(arg1), parse-assertion-exp(arg2))
    (($do ($of ?func ?targs ...) ?args ...)) :
      val func* = parse-assertion-exp(func)
      val args* = map(parse-assertion-exp, args)
      AssertionCall(func*, targs, args*)
    (($do ?func ?args ...)) :
      val func* = parse-assertion-exp(func)
      val args* = map(parse-assertion-exp, args)
      if length(args*) == 2 :
        switch(unwrap-token(func)) :
          `equal? : AssertionInfix(`==, func*, args*[0], args*[1])
          `not-equal? : AssertionInfix(`!=, func*, args*[0], args*[1])
          `less? : AssertionInfix(`<, func*, args*[0], args*[1])
          `less-eq? : AssertionInfix(`<=, func*, args*[0], args*[1])
          `greater? : AssertionInfix(`>, func*, args*[0], args*[1])
          `greater-eq? : AssertionInfix(`>=, func*, args*[0], args*[1])
          else : AssertionCall(func*, List(), args*)
      else : AssertionCall(func*, List(), args*)
    (($quote ?x)) :
      AssertionLiteral(form)
    (?v:#id) :
      AssertionVar(v)
    (?v) :
      if unwrap-token(v) is Char|Byte|Int|Long|Float|Double|String|True|False : AssertionLiteral(v)
      else : AssertionUnknown(form)

;------------------------------------------------------------
;------------------- Description String ---------------------
;------------------------------------------------------------

defn has-description? (e:AssertionExp) -> True|False :
  match(e) :
    (e:AssertionAnd|AssertionOr) :
      has-description?(arg1(e)) and
      has-description?(arg2(e))
    (e:AssertionCall) :
      has-description?(func(e)) and
      all?(has-description?, args(e))
    (e:AssertionInfix) :
      has-description?(arg1(e)) and
      has-description?(arg2(e))
    (e:AssertionVar):
      true
    (e:AssertionLiteral) :
      true
    (e:AssertionUnknown) :
      false
    (e:DescribedExp) :
      true

defn description-string (e:AssertionExp) -> String :
  defn format (e:AssertionExp) :
    match(e) :
      (e:AssertionAnd) :
        "%_ and %_" % [format(arg1(e)), format(arg2(e))]
      (e:AssertionOr) :
        "%_ or %_" % [format(arg1(e)), format(arg2(e))]
      (e:AssertionCall) :
        val targ-str = "" when empty?(targs(e))
                  else "<%,>" % [targs(e)]
        "%_%_(%,)" % [format(func(e)), targ-str, seq(format,args(e))]
      (e:AssertionInfix) :
        "%_ %_ %_" % [format(arg1(e)), op(e), format(arg2(e))]
      (e:AssertionVar) :
        name(e)
      (e:AssertionLiteral) :
        value(e)
      (e:AssertionUnknown) :
        fatal("Unknown form")
      (e:DescribedExp) :
        description(e)
  to-string(format(e))

defn description-string? (e:AssertionExp) -> String|False :
  description-string(e) when has-description?(e)

;------------------------------------------------------------
;----------------- Extract Descriptions ---------------------
;------------------------------------------------------------

;Recurse through subexpressions in the given expression and replace
;appropriate nodes with DescribedExp. Returns the [e*, es*] where
;e* is the new described AssertionExp, and es* is a tuple containing
;all of the described subexpressions.
defn describe-subexps (e:AssertionExp) -> [AssertionExp, Tuple<DescribedExp>] :
  ;Accumulate all subexpressions here.
  val subexps = Vector<DescribedExp>()

  ;Return a described subexpression for the given expression.
  ;Adds this subexpression to the accumulator.
  defn described-subexp (e:AssertionExp) -> DescribedExp :  
    val str = description-string(e)
    val de = DescribedExp(e, str, length(subexps))
    add(subexps, de)
    de

  ;Return an exp into a DescribedExp if it has a description.
  ;If describe-var? is true, then try to describe variables, otherwise leave them undescribed.
  defn described (e:AssertionExp, describe-var?:True|False) -> AssertionExp :  
    val describe? =
      if has-description?(e) :
        match(e) :
          (e:AssertionLiteral) : false
          (e:AssertionVar) : describe-var?
          (e) : true
    described-subexp(e) when describe? else e

  ;Recursively describe all expressions that need to be displayed.
  defn describe (e:AssertionExp) -> AssertionExp :
    match(e) :
      (e:AssertionAnd) :
        AssertionAnd(describe(arg1(e)),
                     describe(arg2(e)))
      (e:AssertionOr) :
        AssertionOr(describe(arg1(e)),
                    describe(arg2(e)))
      (e:AssertionCall) :
        AssertionCall(
          described(func(e), false),
          targs(e),
          map(described{_, true}, args(e)))
      (e:AssertionInfix) :
        AssertionInfix(
          op(e),
          func(e),
          described(arg1(e), true),
          described(arg2(e), true))
      (e:AssertionVar) :
        described(e, true)
      (e:AssertionLiteral) :
        e
      (e:AssertionUnknown) :
        e

  ;Return described expressions
  val e* = describe(e)
  [e*, to-tuple(subexps)]

;------------------------------------------------------------
;------------------- Compile Assertion ----------------------
;------------------------------------------------------------

;Compile an assertion exp into the code required to execute
;it. Relies upon `assertion-values` to be set using `deep`.
defn compile-exp (e:AssertionExp) -> ? :
  match(e) :
    (e:AssertionAnd) :
      substitute(`(e1 and e2), [
        `e1 => compile-exp(arg1(e))
        `e2 => compile-exp(arg2(e))])
    (e:AssertionOr) :
      substitute(`(e1 or e2), [
        `e1 => compile-exp(arg1(e))
        `e2 => compile-exp(arg2(e))])
    (e:AssertionCall) :
      if empty?(targs(e)) :
        substitute(`(func(args)), [
          `func => compile-exp(func(e))
          `args => splice(map(compile-exp,args(e)))])
      else :
        substitute(`(func<targs>(args)), [
          `func => compile-exp(func(e))
          `targs => splice(targs(e))
          `args => splice(map(compile-exp,args(e)))])
    (e:AssertionInfix) :
      substitute(`(func(arg1, arg2)), [
        `func => compile-exp(func(e))
        `arg1 => compile-exp(arg1(e))
        `arg2 => compile-exp(arg2(e))])
    (e:AssertionVar) :
      name(e)
    (e:AssertionLiteral) :
      value(e)
    (e:AssertionUnknown) :
      /exp(e)
    (e:DescribedExp) :
      substitute(`(stz/test-framework/set(assertion-values, index, exp)), [
        `index => index(e)
        `exp => compile-exp(exp(e))])

;Compile info into Stanza expression.
defn compile-info (info:FileInfo|False) :
  match(info:FileInfo) :
    substitute(`(core/FileInfo(file, line, col)), [
      `file => filename(info)
      `line => line(info)
      `col => column(info)])

;Qualifier
defn qualified (s:Symbol) -> KeyValue<Symbol,Symbol> :
  val [package, name] = qualifier(s)
  name => s

;Compile an assertion
defn compile-assert (info:FileInfo|False, form, halt-on-failure:True|False) :
  val [exp, subexps] = describe-subexps $
                       parse-assertion-exp $
                       form
  val template = `(
    assert $ new Assertion :
      defmethod run (this, assertion-values:AssertionValues) :
        assertion-body upcast-as core/True|core/False
      defmethod description (this) :
        assertion-description
      defmethod info (this) :
        assertion-info
      defmethod halt-on-failure? (this) :
        halt-on-failure
      defmethod num-subexps (this) :
        length-subexps
      defmethod subexp-descriptions (this) :
        [subexps{description}])
  fill-template(template, [
    `assertion-values => deep(gensym(`assertion-values))
    `assertion-description => description-string?(exp)
    `assertion-info => compile-info(info)
    `halt-on-failure => halt-on-failure
    `assertion-body => compile-exp(exp)
    `length-subexps => length(subexps)
    `subexps => repeated $ [
      `description => map(description, subexps)]
    qualified(`stz/test-framework/assert)
    qualified(`stz/test-framework/Assertion)
    qualified(`stz/test-framework/AssertionValues)
    qualified(`stz/test-framework/run)
    qualified(`stz/test-framework/description)
    qualified(`stz/test-framework/info)
    qualified(`stz/test-framework/halt-on-failure?)
    qualified(`stz/test-framework/subexp-descriptions)
    qualified(`stz/test-framework/num-subexps)])

