defpackage stz/type :
   import core
   import verse
   import stz/il-ir
   import stz/tl-ir

public defn to-tcomm (e:IExp) -> TComm :
   match(e) :
      (e:IPublic) : to-tcomm(exp(e))
      (e:IProtected) : to-tcomm(exp(e))
      (e:IDefType) : add to hierarchy
      (e:IDef) : TDef(n!(name(e)), to-type(type(e)), to-exp(value(e)))      ;<--- tuple destructuring
      (e:IDefVar) : TDefVar(n!(name(e)), to-type(type(e)), to-exp(value(e)))
      (e:IDefn) : TDefn(tail?(e), n!(name(e)), targs ..., cargs ...,
                        map(to-type, a1(e)), to-type(a2(e)), args ..., to-exp(body(e)))
      (e:IDefmulti) : TDefmulti(n!(name(e)), targs ..., cargs ..., map(to-type, a1(e)), to-type(a2(e)))
      (e:IDefmethod) : TDefmethod(tail?(e), to-exp(multi(e)), thisn(e), targs ..., cargs ..., map(to-type, a1(e)), to-type(a2(e)), args ..., to-exp(body(e)))
      (e:asdf) : 

