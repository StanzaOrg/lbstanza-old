defpackage stz/type :
   import core
   import verse
   import stz/il-ir
   import stz/tl-ir
   import stz/namemap
   import stz/infer
   import stz/type-calculus
   import stz/algorithms
   import stz/utils
   import stz/ids
   import stz/primitives

#use-overlay(stz/attempt-lang)

;============================================================
;====================== Driver ==============================
;============================================================

public defn type-program (nm:NameMap, e:IExp) :
   val prog = to-tprog(nm, e)
   println("==== TYPE PROGRAM =====")
   println(prog)
   set-current-hierarchy(hier(prog))
   println("Infer types")
   val [prog*, env, ls-env] = infer-types(prog)
   println(prog*)
   println("Report errors")
   report-errors(nm, prog*, env, ls-env)
   prog*

;============================================================
;=============== Conversion to Type IR ======================
;============================================================

definterface Assert
defstruct CorrectTArity <: Assert: (info:FileInfo, n:Int, targs:List<Type>)

defn to-tprog (nm:NameMap, e:IExp) :
   ;     State
   ;     =====
   val accum = Vector<TComm>()
   val asserts = Vector<Assert>()
   val errors = Vector<?>()
   val hier = THierarchy()

   ;     Utilities
   ;     =========
   val #TN = TNone()
   val #LTN = NoneT()
   val #CN = CNone()
   val #SN = SNone()
   val #IN = INone(FileInfo())
   defn #name (n:Int) : name(nm[n])
   defn #info (n:Int) : info(nm[n])
   defn #pr (t:Type) : printable(nm, t)
   defn #pr (ts:Streamable<Type>) : stream(#pr, ts)
   defn cms (xs:Streamable) : join(xs, ", ")
   defn add-comm (c:TComm) : add(accum, c)
   defn add-comm (cs:List<TComm>) : do(add-comm, cs)
   defn name! (e:IExp) : name(e as IVar)
   defn n! (e:IExp) : n(e as VarN)
   defn n! (es:List<IExp>) : map(n!, es)
   defn #comm (es:List<IExp>) : do(#comm, es)
   defn #type (es:List<IExp>) : map(#type, es)
   defn #lstype (es:List<IExp>) : map(#lstype, es)
   defn #exp (es:List<IExp>) : map(#exp, es)
   defn #lsexp (es:List<IExp>) : map(#lsexp, es)
   defn #lscomm (es:List<IExp>) : map(#lscomm, es)
   defn #defn (defs:List<IDefn>) : map(#defn, defs)
   defn #defmethod (defs:List<IDefmethod>) : map(#defmethod, defs)

   defn split-targs (es:List<IExp>) :
      val targs = Vector<Int>()
      val cargs = Vector<Int>()
      for e in es do :
         match(e) :
            (e:VarN) : add(targs, n(e))
            (e:ICap) : add(cargs, n!(name(e)))
      [to-list(targs), to-list(cargs)]

   ;     Transformers
   ;     ============
   defn #comm (e:IExp) -> False :
      match(e) :
         (e:IBegin) :
            #comm(exps(e))
         (e:IPublic) :
            #comm(exp(e))
         (e:IProtected) :
            #comm(exp(e))
         (e:IDefType) :
            add(hier, HSHEntry(c, args*, p)) where :
               val c = n!(class(e))
               val args* = n!(args(e))
               val p = #type(parent(e))
         (e:IDef) :
            add-comm(destructure-def(e))
         (e:IDefVar) :
            add-comm(TDefVar(n, t, v)) where :
               val n = n!(name(e))
               val t = #type(type(e))
               val v = #exp(value(e)) when value(e) not-typeof INone
         (e:IDefn) :
            add-comm(#defn(e))
         (e:IDefmulti) :
            add-comm(TDefmulti(n, targs, cargs, a1*, a2*)) where :
               val n = n!(name(e))
               val [targs, cargs] = split-targs(targs(e))
               val a1* = #type(a1(e))
               val a2* = #type(a2(e))
         (e:IDefmethod) :
            add-comm(#defmethod(e))
         (e:IFn|IMulti|IBegin|IMatch|IBranch|INew|
            VarN|ICast|ISet|IDo|IPrim|ILiteral|ITuple)  :
            add-comm(TInit(#exp(e)))
         (e:ILSDef) :
            add-comm(TLDef(n!(name(e)), #lstype(type(e)), #lsexp(exp(e))))
         (e:ILSDefVar) :
            val v = #lsexp(exp(e)) when exp(e) not-typeof INone
            add-comm(TLDefVar(n!(name(e)), #lstype(type(e)), v))
         (e:ILSDefType) :
            add(hier, LSHEntry(c, args*, p, fs, rf)) where :
               val c = n!(name(e))
               val args* = n!(args(e))
               val p = #type(parent(e))
               val fs = map(#field, fields(e), types(e))
               val rf = #field?(rfield(e), rtype(e))
         (e:ILSExtern) :
            add-comm(TExtern(n!(name(e)), #lstype(type(e))))
         (e:ILSDefn) :
            val [targs, cargs] = split-targs(targs(e))
            val a1* = #lstype(a1(e))
            val a2* = #lstype(a2(e))
            val body* = #lscomm(body(e))
            add-comm(TLDefn(tail?(e), n!(name(e)), targs, cargs, a1*, a2*, n!(args(e)), body*))
         (e:ILSSet|ILSLabels|ILSLabel|ILSGoto|ILSReturn|ILSLet|
            ILSIf|ILSMatch|ILSBranch|ILSDef|ILSDefVar|
            ILSDo|ILSDoInStack|ILSDoStack|ILSPrim|ILSCallC) :
            add-comm(TLInit(#lscomm(e)))
         (e) :
            error("Unsupported form: ~" % [e])

   defn #field (name:IExp, type:IExp) :
      val n = n!(name)
      Field(n!(name), #name(n), #lstype(type))
   defn #field? (name:IExp, type:IExp) :
      #field(name, type) when name not-typeof INone

   defn #type (e:IExp) -> Type :
      match(e) :
         (e:ITuple) : TTuple(#type(exps(e)))
         (e:IOf) :
            val n = n!(class(e))
            val targs = #type(args(e))
            add(asserts, CorrectTArity(info(e), n, targs))
            TOf(n, TTuple(targs))
         (e:IAnd) : TAnd(#type(a(e)), #type(b(e)))
         (e:IOr) : TOr(#type(a(e)), #type(b(e)))
         (e:IArrow) : TArrow(TTuple(#type(a1(e))), #type(a2(e)))
         (e:ICap) : TCap(n!(name(e)))
         (e:IGradual) : TGradual()
         (e:IVoid) : TBot()
         (e:INone) : TNone()
         (e:VarN) : TVar(n(e))
         (e:Raw) : TOf(n!(class(e)), TGradual())

   defn #exp (e:IExp) -> TExp :
      match(e) :
         (e:IFn) :
            TFn(tail?(e), a1*, a2*, ns, body, #TN, #TN, #CN) where :
               val a1* = #type(a1(e))
               val a2* = #type(a2(e))
               val [ns, body] = destructure-args(args(e), body(e))
         (e:IMulti) :
            TMulti(fs, #TN, #TN, #CN) where :
               val fs = #exp(funcs(e)) as List<TFn>
         (e:IBegin) :
            if empty?(tail(exps(e))) :
               #exp(head(exps(e)))
            else :
               TSeq(a*, b*, #TN, #TN, #CN) where :
                  val a* = #exp(head(exps(e)))
                  val binfo = info(exps(e)[1])
                  val b* = #exp(IBegin(tail(exps(e)), binfo))
         (e:IMatch) :
            TMatch(args*, brs*, #TN, #TN, #CN) where :
               val args* = #exp(args(e))
               val brs* = #exp(branches(e)) as List<TBranch>
         (e:IBranch) :
            TBranch(ns, ts, body, #TN, #TN, #CN) where :
               val ts = #type(types(e))
               val [ns, body] = destructure-args(args(e), body(e))
         (e:INew) :
            TNew(c, ms, #TN, #TN, #CN) where :
               val c = #type(class(e))
               val ms = #defmethod(methods(e) as List<IDefmethod>)
         (e:ICast) :
            TCast(e*, t*, #TN, #TN, #CN) where :
               val e* = #exp(exp(e))
               val t* = #type(type(e))
         (e:ISet) :
            TSet(r, v, #TN, #TN, #CN) where :
               val r = #exp(name(e)) as TRef
               val v = #exp(value(e))
         (e:IDo) :
            TDo(f*, args*, #TN, #TN, #CN) where :
               val f* = #farg(func(e))
               val args* = #exp(args(e))
         (e:IPrim) :
            TPrim(n, args*, #TN, #TN, #CN) where :
               val n = name!(function(e))
               val args* = #exp(args(e))
         (e:ILiteral) :
            TLiteral(value(e), #TN, #TN, #CN)
         (e:ITuple) :
            TTupleExp(#exp(exps(e)), #TN, #TN, #CN)
         (e:VarN) :
            TRef(n(e), #TN, #TN, #CN)
         (e:Mix) :
            TMix(#SN, #exp(exps(e)), #TN, #TN, #CN)
         (e:Let) :
            destructure-let(e)
         (e:LetRec) :
            TLetRec(defns*, body*, #TN, #TN, #CN) where :
               val defns* = #defn(defns(e) as List<IDefn>)
               val body* = #exp(body(e))
         (e:ISet) :
            TSet(#exp(name(e)) as TRef, #exp(value(e)), #TN, #TN, #CN)
         (e) :
            error("Unsupported expression: ~" % [e])

   defn #farg (e:IExp) -> TExp :
      match(e) :
         (e:IOf) :
            if empty?(args(e)) :
               #exp(class(e))
            else :
               val ts = #type(args(e))
               defn #mix (e:IExp) :
                  match(e) :
                     (e:VarN) :
                        val ref = TRef(n(e), #TN, #TN, #CN)
                        TCurry(ref, ts, List(), #TN, #TN, #CN)
                     (e:Mix) :
                        TMix(#SN, map(#mix, exps(e)), #TN, #TN, #CN)
               #mix(class(e))
         (e) :
            #exp(e)

   defn #defn (def:IDefn) :
      TDefn(tail?(def), n, targs, cargs, a1*, a2*, args*, body*) where :
         val n = n!(name(def))
         val [targs, cargs] = split-targs(targs(def))
         val a1* = #type(a1(def))
         val a2* = #type(a2(def))
         val [args*, body*] = destructure-args(args(def), body(def))

   defn #defmethod (def:IDefmethod) :
      TDefmethod(tail?(def), fresh-id(), m, thisn(def), targs, cargs, a1*, a2*, args*, body*) where :
         val m = #exp(multi(def))
         val a1* = #type(a1(def))
         val a2* = #type(a2(def))
         val [targs, cargs] = split-targs(targs(def))
         val [args*, body*] = destructure-args(args(def), body(def))

   defn #lsexp (e:IExp) -> LSExp :
      match(e) :
         (e:ILSNew) :
            val [n, targ] = #lsclass(type(e))
            LSNew(n, targ, #lsexp(args(e)), #LTN, #LTN, #CN)
         (e:ILSArray) :
            val [n, targ] = #lsclass(type(e))
            LSArray(n, targ, #lsexp(args(e)), #lsexp(length(e)), #LTN, #LTN, #CN)
         (e:ILSStruct) :
            val [n, targ] = #lsclass(type(e))
            LSStruct(n, targ, #lsexp(args(e)), #LTN, #LTN, #CN)
         (e:ILSAddr) :
            LSAddr(#lsexp(exp(e)), #LTN, #LTN, #CN)
         (e:ILSDeref) :
            LSDeref(#lsexp(exp(e)), #LTN, #LTN, #CN)
         (e:ILSSlot) :
            LSSlot(#lsexp(exp(e)), #lsexp(index(e)), #LTN, #LTN, #CN)
         (e:ILSField) :
            LSField(#lsexp(exp(e)), name!(name(e)), #LTN, #LTN, #CN)
         (e:ILSDo|ILSDoInStack) :
            LSDo(f*, args*, ns*, #LTN, #LTN, #CN) where :
               val f* = #lsfarg(func(e))
               val args* = #lsexp(args(e))
               val ns* = e typeof ILSDoInStack
         (e:ILSDoStack) :
            LSDoStack(f*, targ*, arg*, #LTN, #LTN, #CN) where :
               val f = func(e) as ILSOfT
               val f* = #lsexp(class(f))
               val targ* = #lstype(head(args(f)))
               val arg* = #lsexp(arg(e))
         (e:ILSCallC) :
            LSCallC(#lsexp(func(e)), #lsexp(args(e)), #LTN, #LTN, #CN)
         (e:ILSPrim) :
            val op = ls-primitive!(name!(op(e)))
            LSPrim(op, #lsexp(args(e)), #LTN, #LTN, #CN)
         (e:ILSSizeof) :
            LSSizeof(#lstype(type(e)), #LTN, #LTN, #CN)
         (e:ILSTagof) :
            LSTagof(n!(name(e)), #LTN, #LTN, #CN)
         (e:ILSAs) :
            LSCast(#lsexp(exp(e)), #lstype(type(e)), #LTN, #LTN, #CN)
         (e:ILSAnd) :
            LSAnd(#lsexp(a(e)), #lsexp(b(e)), #LTN, #LTN, #CN)
         (e:ILSOr) :
            LSOr(#lsexp(a(e)), #lsexp(b(e)), #LTN, #LTN, #CN)
         (e:ILSLetExp) :
            LSLetExp(#lscomm(comm(e)), #lsexp(exp(e)), #LTN, #LTN, #CN)
         (e:ILSFn) :
            LSFn(#exp(ref(e)), #LTN, #LTN, #CN)
         (e:VarN) :
            LSVar(n!(e), #LTN, #LTN, #CN)
         (e:ILiteral) :
            LSLiteral(value(e), #LTN, #LTN, #CN)
         (e:Mix) :
            LSMix(#SN, map(#lsexp, exps(e)), #LTN, #LTN, #CN)
         (e) :
            error("Not a LoStanza expression: ~" % [e])

   defn #lscomm (e:IExp) -> LSComm :
      match(e) :
         (e:IBegin) :
            if empty?(exps(e)) :
               LSSkip()
            else if empty?(tail(exps(e))) :
               #lscomm(head(exps(e)))
            else :
               LSSeq(
                  #lscomm(head(exps(e)))
                  #lscomm(IBegin(tail(exps(e)), FileInfo())))
         (e:ILSSet) :
            LSSet(#lsexp(exp(e)), #lsexp(value(e)))
         (e:ILSLabels) :
            LSLabels(n!(names(e)), #lscomm(body(e)))
         (e:ILSLabel) :
            LSLabel(n!(name(e)))
         (e:ILSGoto) :
            LSGoto(n!(name(e)))
         (e:ILSReturn) :
            LSReturn(#lsexp(exp(e)))
         (e:ILSLet) :
            #lscomm(comm(e))
         (e:ILSIf) :
            LSIf(#lsexp(pred(e)), #lscomm(conseq(e)), #lscomm(alt(e)))
         (e:ILSMatch) :
            val args* = #lsexp(args(e))
            val bs = #lscomm(branches(e)) as List<LSBranch>
            LSMatch(args*, bs)
         (e:ILSBranch) :
            LSBranch(n!(args(e)), #lstype(types(e)), #lscomm(body(e)))
         (e:ILSDef) :
            LSDef(n!(name(e)), #lstype(type(e)), #lsexp(exp(e)))
         (e:ILSDefVar) :
            val v = #lsexp(exp(e)) when exp(e) not-typeof INone
            LSDefVar(n!(name(e)), #lstype(type(e)), v)
         (e:ILSDo|ILSDoInStack|ILSDoStack|ILSPrim|ILSCallC) :
            LSCall(#lsexp(e))

   defn #lsclass (e:IExp) :
      match(e) :
         (e:ILSOfT) : [n!(class(e)), TTuple(#type(args(e)))]
         (e:Raw) : [n!(class(e)), TGradual()]

   defn #lprim (e:IExp) :
      match(e) :
         (e:ILSOfT) : [ls-primitive!(name!(class(e))), #lstype(args(e))]
         (e:IVar) : [ls-primitive!(name!(e)), List()]

   defn #lsfarg (e:IExp) :
      match(e) :
         (e:ILSOfT) :
            if empty?(args(e)) :
               #lsexp(class(e))
            else :
               val ts = #type(args(e))
               defn #mix (e:IExp) :
                  match(e) :
                     (e:VarN) :
                        val ref = LSVar(n(e), #LTN, #LTN, #CN)
                        LSCurry(ref, ts, List(), #LTN, #LTN, #CN)
                     (e:Mix) :
                        LSMix(#SN, map(#mix, exps(e)), #LTN, #LTN, #CN)
               #mix(class(e))
         (e) :
            #lsexp(e)

   defn #lstype (e:IExp) :
      match(e) :
         (e:ILSByteT) : ByteT()
         (e:ILSIntT) : IntT()
         (e:ILSLongT) : LongT()
         (e:ILSFloatT) : FloatT()
         (e:ILSDoubleT) : DoubleT()
         (e:ILSUnknownT) : UnknownT()
         (e:ILSOfT) :
            val n = n!(class(e))
            val targs = #type(args(e))
            add(asserts, CorrectTArity(info(e), n, targs))
            StructT(n, TTuple(targs))
         (e:ILSPtrT) : PtrT(#lstype(type(e)))
         (e:ILSRefT) : RefT(#type(type(e)))
         (e:ILSFnT) : FnT(#lstype(a1(e)), #lstype(ar(e)), #lstype(a2(e)))
         (e:Raw) : StructT(n!(class(e)), TGradual())
         (e:INone) : NoneT()
         (e) : error("Not a LoStanza type: ~" % [e])

   ;     Nested Tuple Destructuring
   ;     ==========================
   defn destructure (args:List<IExp>, value:TExp) -> List<KeyValue<List<Int>, TExp>> :
      val [ns, bs] = destructure(args)
      List(ns => value, bs)

   defn destructure (args:List<IExp>) -> [List<Int>, List<KeyValue<List<Int>, TExp>>] :
      var bindings = List()
      defn #n (x:IExp) -> Int :
         match(x) :
            (x:ITuple) :
               val n = fresh-id()
               bindings = List(entry, bindings) where :
                  val exps* = map(#n, exps(x))
                  val entry = exps* => TRef(n, #TN, #TN, #CN)
               n
            (x) :
               n!(x)
      val ns = map(#n, args)
      [ns, bindings]

   defn destructure-args (args:List<IExp>, fbody:IExp) -> [List<Int>, TExp] :
      val [ns, bs] = destructure(args)
      var body = #exp(fbody)
      for b in bs do :
         body = TLetTuple(ns, ts, v, body, #TN, #TN, #CN) where :
            val [ns, v] = [key(b), value(b)]
            val ts = map({#TN}, ns)
      [ns, body]

   defn destructure-def (def:IDef) -> List<TDef|TDefTuple> :
      match(name(def), type(def), value(def)) :
         (name:ITuple, type:INone, v) :
            val bs = destructure(exps(name), #exp(v))
            for b in bs map :
               TDefTuple(ns, ts, v) where :
                  val [ns, v] = [key(b), value(b)]
                  val ts = map({#TN}, ns)
         (name:ITuple, type, v) :
            val tmp = VarN(fresh-id(), info(name))
            append(
               destructure-def(IDef(tmp, type, v, info(name)))
               destructure-def(IDef(name, #IN, tmp, info(name))))
         (name, type, v) :
            list(TDef(n, t*, v*)) where :
               val n = n!(name)
               val t* = #type(type)
               val v* = #exp(v)

   defn destructure-let (lete:Let) -> TExp :
      match(def(lete)) :
         (def:IDefVar) :
            val n = n!(name(def))
            val t = #type(type(def))
            val e = #exp(value(def))
            val b = #exp(body(lete))
            TLetVar(n, t, e, b, #TN, #TN, #CN)
         (def:IDef) :
            defn loop (defs:List<TDef|TDefTuple>) :
               if empty?(defs) :
                  #exp(body(lete))
               else :
                  val body = loop(tail(defs))
                  match(head(defs)) :
                     (e:TDef) : TLet(n(e), type(e), value(e), body, #TN, #TN, #CN)
                     (e:TDefTuple) : TLetTuple(ns(e), types(e), value(e), body, #TN, #TN, #CN)
            loop(destructure-def(def))

   ;     Error Reporting
   ;     ===============
   ;Check hierarchical cycles
   defn check-cycles () :
      defn classes (t:Type) -> List<Int> :
         match(t) :
            (t:TOf) : list(n(t))
            (t:TAnd) : append(classes(a(t)), classes(b(t)))
            (t:TNone) : list()
      val components = strong-components $
         for entry in hier stream :
            n(entry) => classes(parent(entry))
      val cycles =
         {_ as Stream<List<Int>>} $
         filter({_ typeof List}, components)
      for c in cycles do :
         defn msg (ns:List<Int>) :
            join{_, "\n"} $
            for n in ns stream :
               "   ~ at ~" << [#name(n), #info(n)]
         add(errors, "Illegal cycle in type hierarchy. The following types are parents of each other.\n~@" << [
            msg(c)])

   ;Check type arities
   defn check-arities () :
      for assert in asserts do :
         match(assert) :
            (a:CorrectTArity) :
               val arity = length(args(hier[n(a)]))
               if length(targs(a)) != arity :
                  add(errors, "~: Incorrect number of type parameters for type ~. Expecting ~ but given ~@." << [
                     info(a), #name(n(a)), arity, cms(#pr(targs(a)))])

   ;Report errors
   defn report-errors () :
      check-cycles()
      check-arities()
      if not empty?(errors) :
         do(println, errors)
         throw(TypeError())

   ;     Driver
   ;     ======
   #comm(e)
   report-errors()
   TProg(hier, to-list(accum))

;============================================================
;================= Primitives Types  ========================
;============================================================

defn callable? (p:LSPrimitive, args:List<LSType>) -> True|False :
   defn matching-nums? () :
      match(args[0], args[1]) :
         (x:ByteT|IntT|LongT|FloatT|DoubleT, y:ByteT|IntT|LongT|FloatT|DoubleT) :
            (assignable?(x, y) == true) or (assignable?(y, x) == true)
         (x, y) : false      
   defn matching-ints? () :
      match(args[0], args[1]) :
         (x:ByteT|IntT|LongT, y:ByteT|IntT|LongT) :
            (assignable?(x, y) == true) or (assignable?(y, x) == true)
         (x, y) : false 
   defn binop-nums? () :
      (length(args) == 2) and
      matching-nums?()
   defn binop-ints? () :
      (length(args) == 2) and
      matching-ints?()
   defn binop-cmp? () :
      if length(args) == 2 :
         match(args[0], args[1]) :
            (x:PtrT, y:PtrT) : true
            (x, y) : matching-nums?()

   match(p) :
      (p:GetterPrimitive) :
         empty?(args)
      (p:SetterPrimitive) :
         (length(args) == 1) and
         assignable?(head(args), type(p)) == true
      (p) :
         switch {p == _} :
            ADD-OP :
               if length(args) == 2 :
                  match(args[0], args[1]) :
                     (x:PtrT, y) : assignable?(y, LongT()) == true
                     (x, y) : matching-nums?()
            SUB-OP :
               if length(args) == 2 :
                  match(args[0], args[1]) :
                     (x:PtrT, y:PtrT) : true
                     (x:PtrT, y) : assignable?(y, LongT()) == true
                     (x, y) : matching-nums?()
            MUL-OP : binop-nums?()
            DIV-OP : binop-nums?()
            MOD-OP : binop-ints?()
            AND-OP : binop-ints?()
            OR-OP : binop-ints?()
            XOR-OP : binop-ints?()
            SHL-OP : binop-ints?()
            SHR-OP : binop-ints?()
            ASHR-OP : binop-ints?()
            EQ-OP :
               if length(args) == 2 :
                  match(args[0], args[1]) :
                     (x:PtrT, y:PtrT) : true
                     (x:RefT, y:RefT) : true
                     (x, y) : matching-nums?()
            NE-OP :
               if length(args) == 2 :
                  match(args[0], args[1]) :
                     (x:PtrT, y:PtrT) : true
                     (x:RefT, y:RefT) : true
                     (x, y) : matching-nums?()
            LT-OP : binop-cmp?()
            GT-OP : binop-cmp?()
            LE-OP : binop-cmp?()
            GE-OP : binop-cmp?()
            ULT-OP : binop-ints?()
            UGT-OP : binop-ints?()
            ULE-OP : binop-ints?()
            UGE-OP : binop-ints?()


;============================================================
;============== Generate Type Variables =====================
;============================================================
defstruct TupleF : ()
defstruct SubF : (ti:Type, t:Type)
defstruct ArgsF : ()
defstruct RetF : (n:Int)

defstruct Filler :
   fill-ctxt: Context -> Context
   fill-s: Selection -> Selection
   fill-t: Type -> Type
   fill-lt: LSType -> LSType
   fill-lc: LSComm -> LSComm
   fill-le: LSExp -> LSExp
   fill-e: TExp -> TExp
   fill-c: TComm -> TComm
   fill-prog: TProg -> TProg   


defn infer-types (prog:TProg) :
   ;======== Environment ========
   val env = HashTable<Int,Type>({_})
   val ls-env = HashTable<Int, LSType>({_})
   val req-env = HashTable<Int, TUVar>({_})
   val constraints = Vector<Constraint>()


   ;          ==================================
   ;          ==   Type Variable Generation   ==
   ;          ==================================

   val #? = TGradual()
   val #ls? = UnknownT()
   val #fresh = Fresh()
   defn addc (c:Constraint) : add(constraints, c)
   defn #freshv () : TUVar(fresh-id())
   defn #freshv (n:Int) : map(#freshv{}, 0 to n)
   defn #ls-freshv () : UVarT(fresh-id())
   defn #ls-freshv (n:Int) : map(#ls-freshv{}, 0 to n)
   defn #or (x:Type, y:Type) : y when x typeof TUVar|TNone else x
   defn #or (x:Type, f:Fresh) : #freshv() when x typeof TUVar|TNone else x
   defn #or (xs:List<Type>, y:Type|Fresh) : map(#or{_, y}, xs)
   defn #or (xs:List<Type>, ys:List<Type>) : map(#or, xs, ys)
   defn #or (x:LSType, y:LSType) : y when x typeof UVarT|NoneT else x
   defn #or (xs:List<LSType>, ys:List<LSType>) : map(#or, xs, ys)
   defn set-req-env (n:Int, t:TUVar) : req-env[n] = t
   defn set-env (n:Int, t:Type) : env[n] = t
   defn set-env (ns:List<Int>, y:Type) : do(set-env{_, y}, ns)
   defn set-env (ns:List<Int>, ts:List<Type>) : do(set-env, ns, ts)
   defn set-ls-env (n:Int, t:LSType) : ls-env[n] = t
   defn set-ls-env (ns:List<Int>, ts:List<LSType>) : do(set-ls-env, ns, ts)
   defn bexp (es:List<TExp>, c:Context) : map(bexp{_, c}, es)
   defn bcomm<?T> (cs:List<?T&TComm>) : map(bcomm, cs)
   defn bmulti (es:List<TExp>, targs:List<TVar>, c:Context) : map(bmulti{_, targs, c}, es)
   defn #types (es:List<TExp>) : map(type, es)
   defn #types (es:List<LSExp>) : map(type, es)
   defn #exp-types (es:List<TExp>) : map(exp-type, es)
   defn #exp-types (es:List<LSExp>) : map(exp-type, es)

   defn env-a1 (n:Int) :
      defn* loop (t:Type) :
         match(t) :
            (t:TPoly) : loop(func(t))
            (t:TArrow) : types(a(t) as TTuple)
      loop(env[n])

   defn env-a2 (n:Int) :
      defn* loop (t:Type) :
         match(t) :
            (t:TPoly) : loop(func(t))
            (t:TArrow) : b(t)
      loop(env[n])

   defn wrap-poly (t:TArrow, targs:List<Int>, cargs:List<Int>) :
      if empty?(targs) and empty?(cargs) : t
      else : TPoly(targs, cargs, t)

   defn fn-type (c:TDefmethod, thist:Type) :
      val a1* = for (t in a1(c), x in args(c)) map :
         if x == thisn(c) : thist
         else : #or(t, #?)
      val a2* = #or(a2(c), #fresh)
      val t = TArrow(TTuple(a1*), a2*)
      wrap-poly(t, targs(c), cargs(c))

   defn fn-type (c:TDefn|TDefmethod) :
      val t = TArrow(TTuple(a1*), a2*) where :
         val a1* = #or(a1(c), #?)
         val a2* = #or(a2(c), #fresh)
      wrap-poly(t, targs(c), cargs(c))

   defn fn-type (c:TDefmulti) :
      val t = TArrow(TTuple(a1*), a2*) where :
         val a1* = #or(a1(c), #?)
         val a2* = #or(a2(c), #?)
      wrap-poly(t, targs(c), cargs(c))

   defn fn-type (c:TLDefn) :
      val t = FnT(a1(c), NoneT(), a2(c))
      if empty?(targs(c)) and empty?(cargs(c)) : t
      else : PolyT(targs(c), cargs(c), t)

   defn to-hs-type (t:LSType) :
      match(t) :
         (t:RefT) : type(t)
         (t) : TNone()      

   ;======== Specialized Type Constructors ========
   defn lit-type (v) :
      defn base (n:Int) : TOf(n, TTuple(List()))
      defn raw (n:Int) : TOf(n, TGradual())
      match(v) :
         (v:False) : base(FALSE-TYPE-ID)
         (v:True) : base(TRUE-TYPE-ID)
         (v:Int) : base(INT-TYPE-ID)
         (v:String) : base(STRING-TYPE-ID)
         (v:Symbol) : base(SYMBOL-TYPE-ID)
         (v:List) : raw(LIST-TYPE-ID)
         (v) : error("Literal type ~ not yet implemented." % [v])

   defn ls-lit-type (v) :
      defn base (n:Int) : StructT(n, TTuple(List()))
      defn raw (n:Int) : TOf(n, TGradual())
      match(v) :
         (v:False) : base(FALSE-TYPE-ID)
         (v:True) : base(TRUE-TYPE-ID)
         (v:Int) : IntT()
         (v:String) : PtrT(ByteT())
         (v) : error("LoStanza literal type ~ not yet implemented." % [v])

   defn prim-type (f:Symbol) :
      error("Primitive type not yet implemented.")

   ;====== Environment Queries ======
   ;Return all possible types in e
   defn all-types (e:TExp) -> List<Type> :
      match(e) :         
         (e:TLet) : all-types(body(e))
         (e:TLetVar) : all-types(body(e))
         (e:TLetTuple) : all-types(body(e))
         (e:TLetRec) : all-types(body(e))
         (e:TSeq) : all-types(b(e))
         (e:TBranch) : all-types(body(e))
         (e:TMatch) : map-append(all-types, branches(e))
         (e:TMix) : map-append(all-types, exps(e))
         (e) : list(exp-type(e))

   defn all-types (e:LSExp) -> List<LSType> :
      match(e) :
         (e:LSLetExp) : all-types(exp(e))
         (e:LSMix) : map-append(all-types, exps(e))
         (e:LSFn) : map(RefT, all-types(ref(e)))
         (e) : list(exp-type(e))

   ;======== Build top level environment ========
   defn build-environment () :
      for c in comms(prog) do :
         match(c) :
            (c:TDef) :
               val t = #or(type(c), #fresh)
               set-env(n(c), t)
               set-ls-env(n(c), RefT(t))
            (c:TDefTuple) :
               val ts = map(#freshv{}, ns(c))
               set-env(ns(c), ts)
               set-ls-env(ns(c), map(RefT, ts))
            (c:TDefVar) :
               val t = #or(type(c), #fresh)
               set-env(n(c), t)
               set-ls-env(n(c), RefT(t))
            (c:TDefn) :
               val t = fn-type(c)
               set-env(n(c), t)
               set-ls-env(n(c), to-ls-fn(t))
            (c:TDefmulti) :
               val t = fn-type(c)
               set-env(n(c), t)
               set-ls-env(n(c), to-ls-fn(t))
            (c:TDefmethod) :
               set-env(n(c), fn-type(c))
            (c:TInit) :
               false
            (c:TLDef) :
               set-ls-env(n(c), type(c))
               set-env(n(c), to-hs-type(type(c)))
            (c:TLDefVar) :
               set-ls-env(n(c), type(c))
               set-env(n(c), to-hs-type(type(c)))
            (c:TLDefn) :
               val t = fn-type(c)
               set-ls-env(n(c), t)
               set-env(n(c), to-hs-fn(t))
            (c:TExtern) :
               set-ls-env(n(c), type(c))
            (c:TLInit) :
               false

   ;======== Productions ========
   defn bcomm<?T> (c:?T&TComm) -> T :
      {_ as T&TComm} $ match(c) :
         (c:TDef) :
            val v* = bexp(value(c), CExp(#or(type(c), #?)))
            val t* = env[n(c)]
            #equal(t*, type(v*))
            TDef(n(c), t*, v*)
         (c:TDefTuple) :
            val v* = bexp(value(c), CExp(#?))
            val ts* = map({env[_] as TUVar}, ns(c))
            #downto(ts*, type(v*), TupleF())
            TDefTuple(ns(c), ts*, v*)
         (c:TDefVar) :
            val t* = env[n(c)]
            match(value(c)) :
               (v:False) :
                  TDefVar(n(c), t*, false)
               (v:TExp) :               
                  val v* = bexp(v, CExp(#or(type(c), #?)))
                  #super(t*, type(v*))
                  TDefVar(n(c), t*, v*)
         (c:TDefn) :
            val a1* = env-a1(n(c))
            val a2* = env-a2(n(c))
            set-env(args(c), map(uncap, a1*))
            val body* = bexp(body(c), CExp(#or(a2(c), #?)))
            #equal(a2*, type(body*))
            TDefn(tail?(c), n(c), targs(c), cargs(c), a1*, a2*, args(c), body*)
         (c:TDefmulti) :
            val a1* = env-a1(n(c))
            val a2* = env-a2(n(c))
            TDefmulti(n(c), targs(c), cargs(c), a1*, a2*)
         (c:TDefmethod) :
            val a1* = env-a1(n(c))
            val a2* = env-a2(n(c))
            val t* = TArrow(uncap(TTuple(a1*)), a2*)
            val m* = bmulti(multi(c), map(TVar, targs(c)), CMulti(t*))
            set-env(args(c), map(uncap, a1*))
            val body* = bexp(body(c), CExp(#or(a2(c), #?)))
            #equal(a2*, type(body*))               
            TDefmethod(tail?(c), n(c), m*, thisn(c), targs(c), cargs(c), a1*, a2*, args(c), body*)
         (c:TInit) :
            TInit(bexp(exp(c), CExp(#?)))
         (c:TLDef) :
            val e* = blsexp(value(c), CLSExp(type(c)), NoneT())
            TLDef(n(c), type(c), e*)
         (c:TLDefVar) :
            val e* = blsexp(value(c) as LSExp, CLSExp(type(c)), NoneT()) when value(c) != false
            TLDefVar(n(c), type(c), e*)
         (c:TLDefn) :
            set-ls-env(args(c), map(uncap, a1(c)))
            val body* = blscomm(body(c), a2(c))
            TLDefn(tail?(c), n(c), targs(c), cargs(c), a1(c), a2(c), args(c), body*)
         (c:TExtern) :
            c
         (c:TLInit) :
            TLInit(blscomm(comm(c), NoneT()))

   defn bmulti (e:TExp, targs*:List<TVar>, c:Context) -> TExp :
      defn curry (e:TExp) :
         match(e) :
            (e:TRef) : TCurry(e, targs*, List(), TNone(), TNone(), CNone())
            (e:TMix) : map(curry, e)
      bexp(curry(e), c)      

   defn bfn (e:TFn, c:Context) -> TFn :
      ;Type variables for arguments
      val a1* = #or(a1(e), #fresh)
      val req-a1* = #or(a1(e), #fresh)
      set-env(args(e), a1*)
      for (x in args(e), t* in req-a1*) do :
         set-req-env(x, t* as TUVar) when t* typeof TUVar
      ;Type variables for return
      val a2* = #or(a2(e), #freshv())
      val t* = TArrow(TTuple(a1*), a2*)
      val exp-t* = TArrow(TTuple(req-a1*), a2*)
      val body* = bexp(body(e), CExp(#or(a2(e), #freshv())))
      ;Constraints
      #equal(a2*, type(body*))
      ;Return new struct
      TFn(tail?(e), a1*, a2*, args(e), body*, t*, exp-t*, c)
      
   defn capfn (f:TFn, c:Context, ft:Type) :
      match(c) :
         (c:CExp) :
            ;Expected return type
            val exp-a2 = type(ctxt(body(f)) as CExp)
            #upto(exp-a2, type(c), SubF(a2(f), ft))
            ;Infer argument types
            for t in a1(f) do :
               #upto(t, type(c), SubF(t, ft))
         (c:CDo) :
            ;Expected return type
            val exp-a2 = type(ctxt(body(f)) as CExp)
            #equal(exp-a2, ret(c))
            ;Infer argument types
            if length(args(f)) == length(args(c)) :
               #equal(a1(f), args(c))      

   defn bexp (e:TExp, ctxt:Context) -> TExp :
      val c = ctxt as CMulti|CDo|CExp
      match(e) :
         (e:TLet) :
            val v* = bexp(value(e), CExp(#or(ntype(e), #?)))
            val t* = #or(ntype(e), type(v*))
            set-env(n(e), t*)
            val body* = bexp(body(e), c)
            TLet(n(e), t*, v*, body*, type(body*), exp-type(body*), c)
         (e:TLetVar) :
            val t* = #or(ntype(e), #fresh)
            set-env(n(e), t*)
            val body* = bexp(body(e), c)            
            match(value(e)) :
               (v:False) :
                  TLetVar(n(e), t*, false, body*, type(body*), exp-type(body*), c)
               (v:TExp) :
                  val v* = bexp(v, CExp(t*))
                  #super(t*, type(v*))
                  TLetVar(n(e), t*, v*, body*, type(body*), exp-type(body*), c)
         (e:TLetTuple) :
            val ts* = #freshv(length(ns(e)))
            val v* = bexp(value(e), CExp(#?))
            set-env(ns(e), ts*)
            val body* = bexp(body(e), c)
            #downto(ts*, type(v*), TupleF())
            TLetTuple(ns(e), ts*, v*, body*, type(body*), exp-type(body*), c)
         (e:TLetRec) :
            ;Define types for functions
            for def in defns(e) do :
               set-env(n(def), fn-type(def))
            val defns* = map(bcomm, defns(e))
            val body* = bexp(body(e), c)
            TLetRec(defns*, body*, type(body*), exp-type(body*), c)
         (e:TFn) :
            val f = bfn(e, c)
            capfn(f, c, type(f))
            f
         (e:TMulti) :
            val fs = map(bfn{_, c}, funcs(e))
            val mt = reduce(TAnd, #types(fs))
            val exp-mt = reduce(TAnd, #exp-types(fs))
            for f in fs do : capfn(f, c, mt)
            TMulti(fs, mt, exp-mt, c)
         (e:TSeq) :
            val a* = bexp(a(e), CExp(#?))
            val b* = bexp(b(e), c)
            TSeq(a*, b*, type(b*), exp-type(b*), c)
         (e:TMatch) :
            val args* = bexp(args(e), CExp(#?))
            val branches* = for b in branches(e) map :
               TBranch(args(b), atypes*, body*, type(body*), exp-type(body*), c) where :
                  val atypes* = #or(atypes(b), #types(args*))
                  set-env(args(b), atypes*)
                  val body* = bexp(body(b), c)
            val t* = reduce(TOr, #types(branches*))               
            val exp-t* = reduce(TOr, #exp-types(branches*))               
            TMatch(args*, branches*, t*, exp-t*, c)
         (e:TNew) :
            ;Define types for methods
            for m in methods(e) do :
               set-env(n(m), fn-type(m, class(e)))               
            val ms* = bcomm(methods(e))
            TNew(class(e), ms*, class(e), class(e), c)
         (e:TCurry) :
            val t = env[n(ref(e))]
            val e* = TRef(n(ref(e)), t, t, c)
            attempt :
               val [cargs*, t*, rt*] = #instantiate(t, targs(e), type(c))
               TCurry(e*, targs(e), cargs*, t*, rt*, c)
            else :
               TCurry(e*, targs(e), List(), TNone(), TNone(), c)
         (e:TRef) :         
            val t = env[n(e)]
            val e* = TRef(n(e), t, t, c)
            val rt = get?(req-env, n(e), TNone())
            #super(rt, type(c))
            attempt :
               val [cargs*, t*, rt*] = #instantiate(t, List(), type(c))
               TCurry(e*, List(), cargs*, t*, rt*, c)
            else : e*
         (e:TCast) :
            val exp* = bexp(exp(e), CExp(#?))
            TCast(exp*, targ(e), targ(e), targ(e), c)
         (e:TSet) :
            val ref* = bexp(ref(e), CExp(#?)) as TRef
            val v* = bexp(value(e), CExp(type(ref*)))
            #super(type(ref*), type(v*))
            TSet(ref*, v*, lit-type(false), lit-type(false), c)
         (e:TDo) :
            ;Variables
            val exp-a1* = #freshv(length(args(e)))
            val args* = map(bexp{_, CExp(_)}, args(e), exp-a1*)
            val fc = CDo(#types(args*), type(c), map(all-types, args*))
            val f* = bexp(func(e), fc)
            ;Expected argument types
            #downto(exp-a1*, exp-type(f*), ArgsF())
            ;Infer return type
            val a2* = #freshv()
            #downto(a2*, type(f*), RetF(length(args(e))))
            TDo(f*, args*, a2*, a2*, c)
         (e:TPrim) :
            val args* = bexp(args(e), CExp(#?))
            val t* = prim-type(function(e))
            TPrim(function(e), args*, t*, t*, c)
         (e:TLiteral) :
            val vt = lit-type(value(e))
            TLiteral(value(e), vt, vt, c)
         (e:TTupleExp) :
            val exp-ts* = #freshv(length(exps(e)))
            val exps* = map(bexp{_, CExp(_)}, exps(e), exp-ts*)
            val t* = TTuple(#types(exps*))
            val exp-t* = TTuple(#exp-types(exps*))
            #upto(exp-ts*, type(c), TupleF())            
            TTupleExp(exps*, t*, exp-t*, c)
         (e:TMix) :
            val sv = SVar(fresh-id())
            val exps* = map(bexp{_, c}, exps(e))
            val t* = #freshv()
            val ct* = #freshv()
            match(c) :
               (c:CExp) :
                  #partof(sv, #exp-types(exps*), type(c))
                  #mix(t*, sv, #types(exps*))
                  #mix(ct*, sv, #exp-types(exps*))
               (c:CDo) :
                  #callable(sv, #exp-types(exps*), all-args(c))
                  #mix(t*, sv, #types(exps*))
                  #mix(ct*, sv, #exp-types(exps*))
               (c:CMulti) :
                  #select-multi(sv, type(c), #types(exps*))
                  #pick(t*, sv, #types(exps*))
            TMix(sv, exps*, t*, ct*, c)

   defn blscomm (c:LSComm, rett:LSType) -> LSComm :
      match(c) :
         (c:LSCall) :
            LSCall(blsexp(exp(c), CLSExp(#ls?), rett))
         (c:LSSet) :
            LSSet(exp*, v*) where :
               val exp* = blsexp(exp(c), CLSExp(#ls?), rett)
               val v* = blsexp(value(c), CLSExp(type(exp*)), rett)
         (c:LSLabels) :
            LSLabels(ns(c), blscomm(body(c), rett))
         (c:LSLabel) :
            c
         (c:LSGoto) :
            c
         (c:LSReturn) :
            LSReturn(blsexp(exp(c), CLSExp(rett), rett))
         (c:LSDef) :
            LSDef(n(c), t*, v*) where :
               val v* = blsexp(value(c), CLSExp(#or(type(c), #ls?)), rett)
               val t* = #or(type(c), type(v*))
               set-ls-env(n(c), t*)
         (c:LSDefVar) :
            LSDefVar(n(c), type(c), v*) where :
               val v* = blsexp(value(c) as LSExp, CLSExp(type(c)), rett) when value(c) != false
               set-ls-env(n(c), type(c))
         (c:LSSeq) :
            LSSeq(blscomm(a(c), rett), blscomm(b(c), rett))
         (c:LSIf) :
            LSIf(pred*, conseq*, alt*) where :
               val pred* = blsexp(pred(c), CLSExp(LongT()), rett)
               val conseq* = blscomm(conseq(c), rett)
               val alt* = blscomm(alt(c), rett)
         (c:LSMatch) :
            val args* = map(blsexp{_, CLSExp(#ls?), rett}, args(c))
            val bs* = for b in branches(c) map :
               LSBranch(args(b), atypes*, body*) where :
                  val atypes* = #or(atypes(b), #types(args*))
                  set-ls-env(args(b), atypes*)
                  val body* = blscomm(body(b), rett)
            LSMatch(args*, bs*)
         (c:LSSkip) :
            c

   defn blsfields (n:Int, targ:Type, es:List<LSExp>, rett:LSType) :
      match(field-types(n, targ)) :
         (fts:List<LSType>) :
            if length(fts) == length(es) :
               map(blsexp{_, CLSExp(_), rett}, es, fts)
            else :
               map(blsexp{_, CLSExp(NoneT()), rett}, es)
         (fts:False) : map(blsexp{_, CLSExp(NoneT()), rett}, es)

   defn blsexp (e:LSExp, ctxt:Context, rett:LSType) -> LSExp :
      val c = ctxt as CLSDo|CLSExp
      match(e) :
         (e:LSVar) :
            val t = ls-env[n(e)]
            val e* = LSVar(n(e), t, t, c)
            attempt :
               val [cargs*, t*, rt*] = #instantiate(t, List(), type(c))
               LSCurry(e*, List(), cargs*, t*, rt*, c)
            else : e*
         (e:LSNew) :
            val t = RefT(TOf(n(e), targ(e)))
            val args* = blsfields(n(e), targ(e), args(e), rett)
            LSNew(n(e), targ(e), args*, t, t, c)
         (e:LSArray) :
            val t = RefT(TOf(n(e), targ(e)))
            val args* = blsfields(n(e), targ(e), args(e), rett)
            val len* = blsexp(length(e), CLSExp(LongT()), rett)
            LSArray(n(e), targ(e), args*, len*, t, t, c)
         (e:LSStruct) :
            val t = StructT(n(e), targ(e))
            val args* = blsfields(n(e), targ(e), args(e), rett)
            LSStruct(n(e), targ(e), args*, t, t, c)
         (e:LSAddr) :
            val c = CLSExp(#deptr(type(c)))
            val exp* = blsexp(exp(e), c, rett)
            LSAddr(exp*, PtrT(type(exp*)), PtrT(exp-type(exp*)), c)
         (e:LSDeref) :
            val c = CLSExp(#ls?)
            val exp* = blsexp(exp(e), c, rett)
            LSDeref(exp*, #deref(type(exp*)), #deref(exp-type(exp*)), c)
         (e:LSSlot) :
            val exp* = blsexp(exp(e), CLSExp(PtrT(type(c))), rett)
            val ind* = blsexp(index(e), CLSExp(LongT()), rett)
            LSSlot(exp*, ind*, #deref(type(exp*)), #deref(exp-type(exp*)), c)
         (e:LSField) :
            val exp* = blsexp(exp(e), CLSExp(#ls?), rett)
            val t* = #field(type(exp*), name(e))
            LSField(exp*, name(e), t*, t*, c)
         (e:LSDo) :
            ;Variables
            val exp-a1* = #ls-freshv(length(args(e)))
            val args* = map(blsexp{_, CLSExp(_), rett}, args(e), exp-a1*)
            val fc = CLSDo(#types(args*), type(c), map(all-types, args*))
            val f* = blsexp(func(e), fc, rett)
            ;Expected argument types
            #args(exp-a1*, exp-type(f*))
            ;Infer return type
            val t* = #ret(type(f*))
            LSDo(f*, args*, new-stack?(e), t*, t*, c)
         (e:LSDoStack) :
            val stack-type = RefT(TOf(STACK-TYPE-ID, TTuple(List())))
            val f* = blsexp(func(e), CLSExp(stack-type), rett)
            val arg* = blsexp(arg(e), CLSExp(#ls?), rett)
            LSDoStack(f*, targ(e), arg*, targ(e), targ(e), c)            
         (e:LSCallC) :
            ;Variables
            val exp-a1* = #ls-freshv(length(args(e)))
            val args* = map(blsexp{_, CLSExp(_), rett}, args(e), exp-a1*)
            val fc = CLSDo(#types(args*), type(c), map(all-types, args*))
            val f* = blsexp(func(e), fc, rett)
            ;Expected argument types
            #args(exp-a1*, exp-type(f*))
            ;Infer return type
            val t* = #ret(type(f*))
            LSCallC(f*, args*, t*, t*, c)            
         (e:LSPrim) :
            val args* = map(blsexp{_, CLSExp(NoneT()), rett}, args(e))
            val ret = #prim(op(e), #types(args*))
            LSPrim(op(e), args*, ret, ret, c)
         (e:LSSizeof) :
            LSSizeof(targ(e), LongT(), LongT(), c)
         (e:LSTagof) :
            LSTagof(n(e), LongT(), LongT(), c)
         (e:LSCast) :
            val exp* = blsexp(exp(e), CLSExp(#ls?), rett)
            LSCast(exp*, targ(e), targ(e), targ(e), c)
         (e:LSLiteral) :
            val t = ls-lit-type(value(e))
            LSLiteral(value(e), t, t, c)
         (e:LSAnd) :
            defn blong (e:LSExp) : blsexp(e, CLSExp(LongT()), rett)
            LSAnd(blong(a(e)), blong(b(e)), LongT(), LongT(), c)
         (e:LSOr) : 
            defn blong (e:LSExp) : blsexp(e, CLSExp(LongT()), rett)
            LSOr(blong(a(e)), blong(b(e)), LongT(), LongT(), c)
         (e:LSLetExp) :
            val comm* = blscomm(comm(e), rett)
            val exp* = blsexp(exp(e), c, rett)
            LSLetExp(comm*, exp*, type(exp*), exp-type(exp*), c)
         (e:LSMix) :
            val sv = SVar(fresh-id())
            val exps* = map(blsexp{_, c, rett}, exps(e))
            val t* = #ls-freshv()
            val ct* = #ls-freshv()
            match(c) :
               (c:CLSExp) :
                  #select(sv, #exp-types(exps*), type(c))
                  #pick(t*, sv, #types(exps*))
                  #pick(ct*, sv, #exp-types(exps*))
               (c:CLSDo) :
                  #callable(sv, #exp-types(exps*), all-args(c))
                  #mix(t*, sv, #types(exps*))
                  #mix(ct*, sv, #exp-types(exps*))
            LSMix(sv, exps*, t*, ct*, c)
         (e:LSCurry) :
            val t = ls-env[n(ref(e))]
            val e* = LSVar(n(ref(e)), t, t, c)
            attempt :
               val [cargs*, t*, exp-t*] = #instantiate(t, targs(e), type(c))
               LSCurry(e*, targs(e), cargs*, t*, exp-t*, c)
            else :
               LSCurry(e*, targs(e), List(), NoneT(), NoneT(), c)
         (e:LSFn) :
            val ref* = bexp(ref(e), CExp(#ref-type(type(c))))
            LSFn(ref*, RefT(type(ref*)), RefT(exp-type(ref*)), c)


   ;             ===============================
   ;             ==   Constraint Generation   ==
   ;             ===============================

   ;===== Constraint Upward and Downward Propagators =====
   ;Propagate type upwards towards a subform
   defn #upto (r:Type, w:Type, f:SubF) :
      ;Substitute TUVar(n*) with t*, and all other TUVar with ?
      defn sub (t:Type, n*:Int, t*:Type) :
         match(t) :
            (t:TUVar) :
               if n(t) == n* : t*
               else : #?
            (t) : map(sub{_, n*, t*}, t)
      match(r, ti(f)) :
         (r:TUVar, ti:TUVar) :
            val t* = sub(t(f), n(ti), TCap(n(r)))
            #cap(r, t*, w)
         (r, ti) :
            false

   ;Propagate type upwards towards elements of tuple form
   defn #upto (rs:List<TUVar>, w:Type, f:TupleF) :
      val n = length(rs)
      for (r in rs, i in 0 to n) do :
         #cap(r, #tuple-cap(r, i, n), w)

   ;Propagate type downwards towards elements of tuple form
   defn #downto (rs:List<TUVar>, w:Type, f:TupleF) :
      val n = length(rs)
      for (r in rs, i in 0 to n) do :
         #cap(r, w, #tuple-cap(r, i, n))

   ;Propagate type downwards towards arguments of function
   defn #downto (rs:List<TUVar>, w:Type, f:ArgsF) :
      val n = length(rs)
      for (r in rs, i in 0 to n) do :
         val a1 = #tuple-cap(r, i, n)
         #cap(r, w, TArrow(a1, #?))

   ;Propagate type downwards towards return of function
   defn #downto (r:TUVar, w:Type, f:RetF) :
      val a = TTuple(map({#?}, 0 to n(f)))
      val b = TCap(n(r))
      #cap(r, w, TArrow(a, b))

   ;===== Constraint Generation Utilities =====
   ;Create a new constraint variables
   defn make-ls-constraint-var (Constraint: Int -> Constraint) :
      val r = #ls-freshv()
      addc(Constraint(n(r)))
      r
   defn make-constraint-var (Constraint: Int -> Constraint) :
      val r = #freshv()
      addc(Constraint(n(r)))
      r
      
   ;Capture i'th element in m element tuple
   defn #tuple-cap (t:TUVar, i:Int, m:Int) :
      TTuple $ for j in 0 to m map :
         if j == i : TCap(n(t))
         else : #?
         
   ;Create supertype constraint
   defn #super (a:Type, b:Type) :
      match(a, b) :
         (a:TUVar, b) : addc(SuperConstraint(n(a), b))
         (a, b) : false

   ;Create equality constraint
   defn #equal (ats:List<Type>, bts:List<Type>) :
      do(#equal, ats, bts)

   defn #equal (a:Type, b:Type) :
      match(a) :
         (a:TUVar) : addc(EqualConstraint(n(a), b))
         (a) : false
         
   defn #equal (a:LSType, b:LSType) :
      match(a) :
         (a:UVarT) : addc(LSEqualConstraint(n(a), b))
         (a) : false

   ;Create capture constraint
   defn #cap (r:TUVar, x:Type, y:Type) :
      addc(FlowConstraint(n(r), x, y))

   defn #cap (r:TUVar, x:LSType, y:LSType) :
      addc(LSFlowConstraint(n(r), x, y))

   ;Create a partof constraint
   defn #partof (s:SVar, ats:List<Type>, bt:Type) :
      addc(PartofConstraint(n(s), ats, bt))

   defn #partof (s:SVar, ats:List<LSType>, args:List<LSType>) :
      addc(LSPartofConstraint(n(s), ats, args))

   ;Create a callable constraint
   defn #callable (s:SVar, ats:List<Type>, args:List<List<Type>>) :
      addc(CallableConstraint(n(s), ats, args))
      
   defn #callable (s:SVar, ats:List<LSType>, args:List<List<LSType>>) :
      addc(LSCallableConstraint(n(s), ats, args))

   ;Create a selection constraint
   defn #select (s:SVar, ats:List<LSType>, bt:LSType) :
      addc(LSSelConstraint(n(s), ats, bt))

   ;Create a multi selection constraint
   defn #select-multi (s:SVar, at:TArrow, bts:List<Type>) :
      addc(SelMultiConstraint(n(s), at, bts))

   ;Create a method pick constraint
   defn #pick (t:TUVar, s:SVar, ys:List<Type>) :
      addc(PickConstraint(n(t), n(s), ys))

   defn #pick (t:UVarT, s:SVar, ys:List<LSType>) :
      addc(LSPickConstraint(n(t), n(s), ys))

   ;Create a substitution constraint
   defn #sub (t:Type, env:List<KeyValue<Int,Type>>) :
      make-constraint-var(SubConstraint{_, t, env})

   ;Create a mixture constraint
   defn #mix (t:TUVar, s:SVar, ats:List<Type>) :
      addc(MixConstraint(n(t), n(s), ats))

   defn #mix (t:UVarT, s:SVar, ats:List<LSType>) :
      addc(LSMixConstraint(n(t), n(s), ats))

   ;Isolate a single capture variable
   defn isolate-cap (n*:Int, t:Type) :
      match(t) :
         (t:TCap) :
            if n(t) == n* : t
            else : TUVar(n(t))
         (t) : map(isolate-cap{n*, _}, t)         
   defn isolate-cap (n*:Int, t:LSType) :
      mapr(isolate-cap{n*, _}, t)

   ;Relax captures in a type
   defn relax-cap (t:Type) :
      match(t) :
         (t:TCap) : TGradual()
         (t) : map(relax-cap, t)         
   defn relax-cap (t:LSType) :
      mapr(relax-cap, t)

   ;Instantiate a polymorphic type with the given type arguments
   defn #instantiate (t:Type, targs*:List<Type>, w:Type) :
      match(t) :
         (t:TPoly) :
            fail() when length(targs(t)) != length(targs*)
            val cargs* = #freshv(length(cargs(t)))
            val env = map(KeyValue,
                          append(targs(t), cargs(t))
                          append(targs*, cargs*))
            val a1* = sub(uncap(a(func(t))), env)
            val a2* = #sub(b(func(t)), env)
            val t* = TArrow(a1*, a2*)
            val cap-a1* = sub(a(func(t)), env)
            val cap-t* = TArrow(cap-a1*, a2*)
            for v in cargs* do :
               #cap(v, isolate-cap(n(v), cap-t*), w)
            [cargs*, t*, relax-cap(cap-t*)]
         (t) : fail()

   defn #instantiate (t:LSType, targs*:List<Type>, w:LSType) :
      match(t) :
         (t:PolyT) :
            fail() when length(targs(t)) != length(targs*)
            val cargs* = #freshv(length(cargs(t)))
            val env = map(KeyValue,
                          append(targs(t), cargs(t))
                          append(targs*, cargs*))
            val a* = map(sub{uncap(_), env}, a(func(t)))
            val r* = sub(uncap(r(func(t))), env)
            val b* = sub(b(func(t)), env)
            val t* = FnT(a*, r*, b*)            
            val cap-a* = map(sub{_, env}, a(func(t)))
            val cap-r* = sub(r(func(t)), env)
            val cap-t* = FnT(cap-a*, cap-r*, b*)
            for v in cargs* do :
               #cap(v, isolate-cap(n(v), cap-t*), w)
            [cargs*, t*, relax-cap(cap-t*)]
         (t) : fail()

   ;Create an arguments constraint
   defn #arg (r:UVarT, t:LSType, i:Int, arity:Int) :
      addc(ArgConstraint(n(r), t, i, arity))
   defn #args (rs:List<UVarT>, t:LSType) :
      val n = length(rs)
      for (r in rs, i in 0 to false) do :
         #arg(r, t, i, n)
      
   ;LS Constraints
   defn #deptr (t:LSType) :
      make-ls-constraint-var(DeptrConstraint{_, t})
   defn #deref (t:LSType) :
      make-ls-constraint-var(DerefConstraint{_, t})
   defn #field (t:LSType, name:Symbol) :
      make-ls-constraint-var(FieldConstraint{_, t, name})
   defn #ret (t:LSType) :
      make-ls-constraint-var(RetConstraint{_, t})
   defn #prim (op:LSPrimitive, args:List<LSType>) :
      make-ls-constraint-var(LSPrimConstraint{_, op, args})
   defn #ref-type (t:LSType) :
      make-constraint-var(RefTypeConstraint{_, t})
      

   ;             ======================
   ;             ==   Fill Results   ==
   ;             ======================            
   defn filler (results:SolveResults) :
      defn fill-ctxt (c:Context) -> Context :
         map(fill-lt, map(fill-t, c))
      defn fill-s (s:Selection) -> Selection :
         match(s) :
            (s:SVar) : sels(results)[n(s)]
            (s) : s
      defn fill-t (t:Type) -> Type :
         defn fill (t:Type) :
            match(t) :
               (t:TUVar) : get?(types(results), n(t), t)
               (t) : map(fill, t)
         simplify(fill(t))         
      defn fill-lt (t:LSType) -> LSType :
         match(t) :
            (t:UVarT) : get?(lstypes(results), n(t), t)
            (t) : map(fill-lt, map(fill-t, t))
      defn fill-lc (c:LSComm) :
         map{fill-lt, _} $
         map{fill-lc, _} $
         map{fill-le, _} $
         c
      defn fill-le (e:LSExp) :
         map{fill-t, _} $
         map{fill-lc, _} $
         map{fill-le, _} $
         map{fill-lt, _} $
         map{fill-e, _} $
         map{fill-s, _} $
         map{fill-ctxt, _} $
         e
      defn fill-e (e:TExp) -> TExp :      
         map{fill-t, _} $
         map{fill-e, _} $
         map{fill-c, _} $
         map{fill-ctxt, _} $
         map{fill-s, _} $
         e
      defn fill-c (c:TComm) -> TComm :
         map{fill-le, _} $
         map{fill-lc, _} $
         map{fill-e, _} $
         map{fill-t, _} $
         c
      defn fill-prog (p:TProg) :
         TProg(hier(p),
               map(fill-c, comms(p)))
      Filler(fill-ctxt, fill-s, fill-t, fill-lt,
             fill-lc, fill-le, fill-e, fill-c, fill-prog)

   ;             ================
   ;             ==   Driver   ==
   ;             ================

   build-environment()
   val prog* = TProg(hier(prog), bcomm(comms(prog)))
   println("Generated type variables")
   println(prog*)
   
   val f = filler(solve(constraints))
   val fprog = fill-prog(f)(prog*)
   for entry in env do :
      env[key(entry)] = fill-t(f)(value(entry))
   for entry in ls-env do :
      ls-env[key(entry)] = fill-lt(f)(value(entry))
   [fprog, env, ls-env]

;============================================================
;=================== Print a Type ===========================
;============================================================
defn cms (xs:Streamable) : join(xs, ", ")

defn printable (nm:NameMap, t:Type) :
   defn #name (n:Int) : name(nm[n])
   defn #carg (n:Int) : "?~" << [#name(n)]
   defn lvl (t:Type) :
      match(t) :
         (t:TArrow|TPoly) : 0
         (t:TOr) : 1
         (t) : 2

   defn p0 (t:Type) : pt(t, 0)
   defn p0 (ts:List<Type>) : stream(p0, ts)
   defn pt (t:Type, l:Int) :
      defn pn (t2:Type) : pt(t2, lvl(t))
      defn p+ (t2:Type) : pt(t2, lvl(t) + 1)

      val r = match(t) :
         (t:TArrow) :
            match(a(t)) :
               (a:TTuple) :
                  if length(types(a)) == 1 : "~ -> ~" << [p+(head(types(a))), pn(b(t))]
                  else : "(~@) -> ~" << [cms(p0(types(a))), pn(b(t))]
               (a:TGradual) : "(? ...) -> ~" << [pn(b(t))]
         (t:TPoly) :
            val ts = concat(stream(#name, targs(t)), stream(#carg, cargs(t)))
            val f = pn(func(t))
            "<~@> . ~" << [cms(ts), f]
         (t:TOr) :
            "~|~" << [pn(a(t)), pn(b(t))]
         (t:TAnd) :
            "~&~" << [pn(a(t)), pn(b(t))]
         (t:TOf) :
            match(type(t)) :
               (ta:TTuple) :
                  if empty?(types(ta)) : #name(n(t))
                  else : "~<~@>" << [#name(n(t)), cms(p0(types(ta)))]
               (ta:TGradual) :
                  #name(n(t))
         (t:TGradual) :
            "?"
         (t:TBot) :
            "Void"
         (t:TVar) :
            #name(n(t))
         (t:TUVar) :
            "UK"
         (t:TCap) :
            #carg(n(t))
         (t:TNone) :
            "none"
         (t:TTuple) :
            "[~@]" << [cms(p0(types(t)))]
      if lvl(t) < l : "(~)" << [r]
      else : r
   p0(t)

defn printable (nm:NameMap, t:LSType) :
   defn #pr (t:LSType) : printable(nm, t)
   defn #pr (t:Type) : printable(nm, t)
   defn #pr (ts:Streamable<LSType>) : stream(#pr, ts)
   defn #pr (ts:Streamable<Type>) : stream(#pr, ts)
   defn #ap (ts:Streamable<LSType>, t:LSType) : concat(ts, [t])
   defn #name (n:Int) : name(nm[n])
   defn #carg (n:Int) : "?~" << [#name(n)]
   match(t) :
      (t:ByteT) : "byte"
      (t:IntT) : "int"
      (t:LongT) : "long"
      (t:FloatT) : "float"
      (t:DoubleT) : "double"
      (t:UnknownT) : "?"
      (t:UVarT) : "UK"
      (t:NoneT) : "none"
      (t:PtrT) : "ptr<~>" << [#pr(type(t))]
      (t:RefT) : "ref<~>" << [#pr(type(t))]
      (t:FnT) :
         match(r(t)) :
            (r:NoneT) : "(~@) -> ~" << [cms(#pr(a(t))), #pr(b(t))]
            (r:LSType) : "(~@ ...) -> ~" << [cms(#pr(#ap(a(t), r))), #pr(b(t))]
      (t:PolyT) :
         val ts = concat(stream(#name, targs(t)), stream(#carg, cargs(t)))
         "<~@> . ~" << [cms(ts), #pr(func(t))]
      (t:StructT) :
         match(type(t)) :
            (ta:TTuple) :
               if empty?(types(ta)) : #name(n(t))
               else : "~<~@>" << [#name(n(t)), cms(#pr(types(ta)))]
            (ta:TGradual) :
               #name(n(t))     


;============================================================
;=================== Report Errors ==========================
;============================================================

defn report-errors (nm:NameMap,
                    prog:TProg,
                    env:HashTable<Int,Type>,
                    ls-env:HashTable<Int, LSType>) :
   ;======== State ========
   val errors = Vector<Vector<?>>()

   ;======== Utilities ========
   val #? = TGradual()
   defn unknown? (x:True|False|Maybe|Unknown) : x typeof Unknown
   defn not-st? (x:Type, y:Type) : subtype?(x, y) == false
   defn not-st? (x:LSType, y:LSType) : subtype?(x, y) == false
   defn not-assign? (x:LSType, y:LSType) : assignable?(x, y) == false
   defn not-callable? (x:FnT, ys:List<LSType>) : callable?(x, ys) == false
   defn cms (xs:Streamable) : join(xs, ", ")
   defn #pr (t:Type) : printable(nm, t)
   defn #pr (t:LSType) : printable(nm, t)
   defn #pr (ts:Streamable<Type|LSType>) : stream(#pr, ts)
   defn #types (es:List<TExp>) : map(type, es)
   defn #V (t:Type) : t when valid?(t) else fail()
   defn #V (t:LSType) : t when valid?(t) else fail()
   defn #R (t:Type) : fail() when unresolved?(t) else t
   defn #R (t:LSType) : fail() when unresolved?(t) else t

   defn add-error (p:Int, msg) :
      while length(errors) < p + 1 :
         add(errors, Vector<?>())
      add(errors[p], msg)

   defn unresolved? (t:Type) :
      match(t) :
         (t:TUVar|TNone) : true
         (t) : any?(unresolved?, children(t))

   defn unresolved? (t:LSType) :
      match(t) :
         (t:UVarT|NoneT) : true
         (t:RefT) : unresolved?(type(t))
         (t:StructT) : unresolved?(type(t))
         (t) : any?(unresolved?, children(t))

   defn resolved-pr (x) :
      match(x) :
         (xs:Streamable) : reduce(max{_, resolved-pr(_)}, 0, x)
         (x:Type|LSType) : 1 when unresolved?(x) else 0
         (x:TExp|LSExp) : resolved-pr(type(x))

   defn all-pairs<?T> (xs:Streamable<?T>) :
      val xs* = to-array(xs)
      generate<[T, T]> :
         for i in 0 to length(xs*) do :
            for j in (i + 1) to length(xs*) do :
               yield([xs*[i], xs*[j]])

   defn has-name? (n:Int) :
      key?(nm,n)

   defn #name (n:Int) :
      name(nm[n])

   defn ls-def? (n:Int) :
      type(nm[n]) typeof LFnE|LVarE|LValE

   defn not-sm? (x:Type, y:Type) :
      match(x, y) :
         (x:TArrow, y:TArrow) : submethod?(x, y) == false
         (x, y) : false

   defn #select<?T> (xs:List<?T>, ss:List) :
      to-list $ for (x in xs, s in ss) filter :
         s != false

   defn tarity (t:Type) :
      match(t) :
         (t:TArrow) : 0
         (t:TPoly) : length(targs(t))

   defn tarity (t:LSType) :
      match(t) :
         (t:FnT) : 0
         (t:PolyT) : length(targs(t))

   defn mutable? (n:Int) :
      type(nm[n]) typeof VarE|LVarE

   defn lvalue? (e:LSExp) :
      match(e) :
         (e:LSVar) :
            mutable?(n(e))
         (e:LSDeref|LSSlot) :
            true
         (e:LSField) :
            defn base (t:LSType) :
               match(t) :
                  (t:StructT) : n(t)
                  (t:PtrT) : base(type(t))
                  (t:RefT) : n(type(t) as TOf)
            val n = base(type(exp(e)))
            not rest-field?(n, name(e))
         (e) : false

   ;======== Phase 1: Error Detection ========
   defn check (c:TComm) :
      ;Check constraints
      attempt :
         match(c) :
            (c:TDef) :
               val vt = #V(type(value(c)))
               no-inferred-type(c) when unresolved?(type(c))
               bad-assign(c) when not-st?(vt, type(c))
            (c:TDefTuple) :
               val vt = #V(type(value(c)))
               val t? = TTuple(map({#?}, types(c)))
               val t = TTuple(types(c))
               not-tuple(c) when not-st?(vt, t?)
               no-inferred-type(c) when unresolved?(t)
               bad-assign(c) when not-st?(vt, t)
            (c:TDefVar) :
               no-inferred-type(c) when unresolved?(type(c))
               if value(c) != false :
                  val vt = type(value(c) as TExp)
                  bad-assign(c) when not-st?(#V(vt), type(c))
            (c:TDefn) :
               val bt = #V(type(body(c)))
               no-inferred-ret(c) when unresolved?(a2(c))
               bad-ret(c) when not-st?(bt, a2(c))
            (c:TDefmethod) :
               ;Check method overriding
               val method-t = #V(type(ctxt(multi(c)) as CMulti))
               val multi-t = #V(type(multi(c)))
               check-multi(multi(c))
               bad-method(c) when not-sm?(method-t, multi-t)
               ;Check body
               val bt = #V(type(body(c)))
               no-inferred-ret(c) when unresolved?(a2(c))               
               bad-ret(c) when not-st?(bt, a2(c))
            (c:TLDef) :
               val vt = #V(type(value(c)))
               no-inferred-type(c) when unresolved?(type(c))
               bad-assign(c) when not-assign?(vt, type(c))
               if not unresolved?(type(c)) :
                  unbound-def(c) when not bounded?(type(c))
            (c:TLDefVar) :
               if value(c) != false :
                  val vt = #V(type(value(c) as LSExp))
                  bad-assign(c) when not-assign?(vt, type(c))
               unbound-def(c) when not bounded?(type(c))
            (c) :
               false
      ;Check subexpressions
      match(c) :
         (c:TDefmethod) :
            check(body(c))
         (c:TLDefn) :
            check(body(c), a2(c))
         (c) :
            do(check{_:TExp}, c)
            do(check{_:LSExp, NoneT()}, c)
            do(check{_:LSComm, NoneT()}, c)

   defn check-multi (e:TExp) :
      match(e) :
         (e:TRef) :
            false
         (e:TMix) :
            val exps* = #select(exps(e), sels(sel(e) as SSel))
            val n = length(exps*)
            do(check-multi, exps*)
            no-method(e) when n == 0
            amb-method(e) when n > 1
         (e:TCurry) :
            check(e)

   defn check (e:TExp) :
      ;Check constraints
      attempt :
         match(e) :
            (e:TLet) :
               val vt = #V(type(value(e)))
               no-inferred-type(e) when unresolved?(ntype(e))
               bad-assign(e) when not-st?(vt, ntype(e))
            (e:TLetVar) :
               no-inferred-type(e) when unresolved?(ntype(e))
               if value(e) != false :
                  val vt = #V(type(value(e) as TExp))
                  bad-assign(e) when not-st?(vt, ntype(e))
            (e:TLetTuple) :
               val vt = #V(type(value(e)))
               val t? = TTuple(map({#?}, ntypes(e)))
               val t = TTuple(ntypes(e))
               not-tuple(e) when not-st?(vt, t?)
               no-inferred-type(e) when any?(unresolved?, ntypes(e))
               bad-assign(e) when not-st?(vt, t)
            (e:TFn) :
               no-inferred-args(e) when any?(unresolved?, a1(e))
               val bt = #V(type(body(e)))
               no-inferred-ret(e) when unresolved?(a2(e))
               bad-ret(e) when not-st?(bt, a2(e))
            (e:TMatch) :
               val arg-ts = map(#R{type(_)}, args(e))
               for b in branches(e) do :
                  if not all?(overlap?, arg-ts, atypes(b)) :
                     bad-branch(e, b)
            (e:TCast) :
               val et = #R(type(exp(e)))
               bad-cast(e) when not overlap?(et, targ(e))                  
            (e:TSet) :
               val vt = #V(type(value(e)))
               val rt = #V(type(ref(e)))               
               bad-set(e) when not-st?(vt, rt)
            (e:TDo) :
               val ft = #V(type(func(e)))
               val t? = TArrow(#?, #?)
               val t = #V(TArrow(TTuple(#types(args(e))), #?))
               not-function(e) when not-st?(ft, t?) else
               bad-call(e) when not-st?(ft, t)
            (e:TMix) :
               val ss = sels(sel(e) as SSel)
               if all?({_ typeof False}, ss) :
                  no-mix(e)
               else if any?(unknown?, ss) :
                  amb-mix(e)
               else :            
                  val es = #select(exps(e), ss)
                  val ts = map(#R, #types(es))
                  val disjoint = let :
                     for [x, y] in all-pairs(ts) all? :
                        disjoint-fns?(x as TArrow, y as TArrow, type(ctxt(e) as CExp|CDo))
                  amb-mix(e) when not disjoint
            (e:TCurry) :
               val n = tarity(type(ref(e)))
               bad-tarity(e) when n != length(targs(e))
               no-capture(e) when any?(unresolved?, cargs(e))
            (e:TRef) :
               if ls-def?(n(e)) :
                  bad-ls-ref(e) when not valid?(type(e))
            (e) :
               false

      ;Check subexpressions
      match(e) :
         (e:TMix) :
            for (e in exps(e), s in sels(sel(e) as SSel)) do :
               check(e) when s typeof True|Maybe
         (e:TCurry) :
            false
         (e) :
            do(check{_:TExp}, e)
            do(check{_:TComm}, e)

   defn check (c:LSComm, rett:LSType) :
      attempt :
         match(c) :
            (c:LSSet) :
               val vt = #V(type(value(c)))
               val et = #R(type(exp(c)))
               bad-set(c) when not-assign?(vt, et)
               bad-lvalue-set(c) when not lvalue?(exp(c))
            (c:LSReturn) :
               val et = #V(type(exp(c)))
               bad-ret(c, rett) when not-assign?(et, rett)
            (c:LSDef) :
               val vt = #V(type(value(c)))
               no-inferred-type(c) when unresolved?(type(c))
               bad-assign(c) when not-assign?(vt, type(c))
               if not unresolved?(type(c)) :
                  unbound-def(c) when not bounded?(type(c))
            (c:LSDefVar) :
               if value(c) != false :
                  val vt = #V(type(value(c) as LSExp))
                  bad-assign(c) when not-assign?(vt, type(c))
               unbound-def(c) when not bounded?(type(c))
            (c:LSIf) :
               val pt = #V(type(pred(c)))
               bad-pred(c) when not-assign?(pt, LongT())
            (c:LSMatch) :
               val arg-ts = map(#R{type(_)}, args(c))
               if all?({_ typeof RefT}, arg-ts) :
                  for b in branches(c) do :
                     if not all?(overlap?, arg-ts as List<RefT>, atypes(b) as List<RefT>) :
                        bad-branch(c, b)
               else :
                  bad-match(c)               
            (c) :
               false
   
      ;Check subcommands and subexpressions
      do(check{_:LSExp, rett}, c)
      do(check-bounded, c)
      do(check{_:LSComm, rett}, c)

   defn check (e:LSExp, rett:LSType) -> False :
      defn has-tarity (targ:Type, n:Int) :
         match(targ) :
            (targ:TGradual) : true
            (targ:TTuple) : length(types(targ)) == n
            
      attempt :
         match(e) :
            (e:LSNew) :
               unbounded-new(e) when not bounded-type?(n(e))
               bad-type-tarity(e) when not has-tarity(targ(e), type-tarity(n(e)))
               val fts = field-types!(n(e), targ(e))               
               bad-type-arity(e) when length(args(e)) != length(fts)
               val ats = map(#V{type(_)}, args(e))               
               bad-new-construct(e) when any?(not-assign?, ats, fts)
            (e:LSArray) :
               bounded-array(e) when bounded-type?(n(e))
               bad-type-tarity(e) when not has-tarity(targ(e), type-tarity(n(e)))
               val fts = field-types!(n(e), targ(e))
               bad-type-arity(e) when length(args(e)) != length(fts)
               val ats = map(#V{type(_)}, args(e))
               bad-new-construct(e) when any?(not-assign?, ats, fts)
               val lt = #V(type(length(e)))
               bad-length(e) when not-assign?(lt, LongT())
            (e:LSStruct) :
               unbounded-struct(e) when not bounded-type?(n(e))
               bad-type-tarity(e) when not has-tarity(targ(e), type-tarity(n(e)))
               val fts = field-types!(n(e), targ(e))
               bad-type-arity(e) when length(args(e)) != length(fts)
               val ats = map(#V{type(_)}, args(e))               
               bad-new-construct(e) when any?(not-assign?, ats, fts)
            (e:LSDeref) :
               val et = #V(type(exp(e)))
               bad-deref(e) when not valid?(type(e))
            (e:LSSlot) :
               val it = #V(type(index(e)))
               val et = #V(type(exp(e)))
               bad-index(e) when not-assign?(it, LongT())
               bad-slot when not valid?(type(e))
            (e:LSField) :
               val et = #V(type(exp(e)))
               bad-field(e) when not valid?(type(e))
            (e:LSDo) :
               val arg-ts = map(#V{type(_)}, args(e))
               val ft = #V(type(func(e)))
               match(ft) :
                  (ft:FnT) : bad-call(e) when not-callable?(ft, arg-ts)
                  (ft) : not-function(e)
            (e:LSDoStack) :
               val stack-type = RefT(TOf(STACK-TYPE-ID, TTuple(List())))
               val st = #V(type(func(e)))
               bad-stack(e) when not-assign?(st, stack-type)
            (e:LSAddr) :
               #R(type(exp(e)))
               bad-lvalue-addr(e) when not lvalue?(exp(e))
            (e:LSCallC) :
               val arg-ts = map(#V{type(_)}, args(e))  
               val ft = #V(type(func(e)))
               match(ft) :
                  (ft:FnT) :
                     bad-call(e) when not-callable?(ft, arg-ts)
                     match(func(e)) :
                        (f:LSDeref) : bad-callc(e) when type(exp(f)) typeof RefT
                        (f) : false
                  (ft) :
                     not-function(e)
            (e:LSPrim) :
               val ats = map(#R{type(_)}, args(e))
               bad-prim(e) when not callable?(op(e), ats)
            (e:LSSizeof) :
               match(targ(e)) :
                  (t:UnknownT|FnT) : bad-sizeof(e)
                  (t) : false
            (e:LSCast) :
               val et = #R(type(exp(e)))
               bad-cast(e) when not castable?(et, targ(e))
            (e:LSAnd) :
               val at = #V(type(a(e)))
               val bt = #V(type(b(e)))
               bad-and(e) when not-assign?(at, LongT()) or not-assign?(bt, LongT())
            (e:LSOr) :
               val at = #V(type(a(e)))
               val bt = #V(type(b(e)))
               bad-or(e) when not-assign?(at, LongT()) or not-assign?(bt, LongT())
            (e:LSMix) :
               val ss = sels(sel(e) as SSel)
               if all?({_ typeof False}, ss) :
                  no-mix(e)
               else if any?(unknown?, ss) :
                  amb-mix(e)
               else :
                  val es = #select(exps(e), ss)
                  val ts = map(#R{type(_)}, es)
                  val disjoint = let :
                     for [x, y] in all-pairs(ts) all? :
                        disjoint-fns?(x as FnT, y as FnT, type(ctxt(e) as CLSExp|CLSDo))
                  amb-mix(e) when not disjoint
            (e:LSCurry) :
               val n = tarity(type(ref(e)))
               bad-tarity(e) when n != length(targs(e))
               no-capture(e) when any?(unresolved?, cargs(e))
            (e) :
               false
               
      ;Check subexpressions
      do(check{_:LSExp, rett}, e)
      do(check{_:LSComm, rett}, e)
      do(check{_:TExp}, e)

   defn check-bounded (e:LSExp) :
      defn check-loc (e:LSExp) :
         match(e) :
            (e:LSField) : check-loc(exp(e))
            (e) : do(check-bounded, e)
      defn check-func (e:LSExp) :
         match(e) :
            (e:LSMix|LSCurry|LSVar) : false
            (e:LSLetExp) : do(check-func, e)
            (e) : do(check-bounded, e)
      attempt: unbounded(e) when not bounded?(#V(type(e)))
      match(e) :
         (e:LSField) : check-loc(e)
         (e:LSAddr) : check-loc(exp(e))
         (e:LSDo|LSCallC) : (check-func(func(e)), do(check-bounded, args(e)))
         (e) : do(check-bounded, e)
         
   ;======== Phase 2: Report Creation ========
   defn env-type (n:Int) :
      val t = env[n]
      val lst = ls-env[n]
      match(valid?(t), valid?(lst)) :
         (a:True, b) : t
         (a, b:True) : lst
         (a, b) : t

   defn name? (x:Int|List<Int>, str:String, default:String) :
      match(x) :
         (xs:List<Int>) :
            if all?(has-name?, xs) : str << [cms(stream(#name, xs))]
            else : default
         (x:Int) :
            if has-name?(x) : str << [#name(x)]
            else : default
   defn def-name (c:TLetTuple|TLetVar|TLet|TDefTuple|TDefVar|TDef|TLDef|TLDefVar|LSDef|LSDefVar) :
      match(c) :
         (c:TDef|TLDef) : name?(n(c), "global value ~", "global value")
         (c:TDefVar|TLDefVar) : name?(n(c), "global variable ~", "global variable")
         (c:TDefTuple) : name?(ns(c), "global values ~@", "tuple elements")
         (c:TLet|LSDef) : name?(n(c), "value ~", "value")
         (c:TLetVar|LSDefVar) : name?(n(c), "variable ~", "variable")
         (c:TLetTuple) : name?(ns(c), "values ~@", "tuple elements")
   defn no-inferred-type (c:TLetTuple|TLetVar|TLet|TDefTuple|TDefVar|TDef|TLDef|TLDefVar|LSDef|LSDefVar) :
      val p = match(value(c)) :
         (v:TExp|LSExp) : resolved-pr(type(v))
         (v:False) : 0
      add-error(p, "Could not infer type of ~." << [def-name(c)])

   defn def-type (c:TLetTuple|TLetVar|TLet|TDefTuple|TDefVar|TDef|TLDef|TLDefVar|LSDef|LSDefVar) :
      match(c) :
         (c:TLetVar|TLet) : ntype(c)
         (c:LSDef|LSDefVar) : type(c)
         (c:TDef|TDefVar) : type(c)
         (c:TLetTuple) : TTuple(ntypes(c))
         (c:TDefTuple) : TTuple(types(c))
         (c:TLDef|TLDefVar) : type(c)
   defn bad-assign (c:TDef|TDefVar|TLet|TLetVar|TLetTuple|TDefTuple|TLDef|TLDefVar|LSDef|LSDefVar) :
      val name = def-name(c)
      val t = def-type(c)
      val v = value(c) as TExp|LSExp
      val p = resolved-pr([t, v])
      add-error(p, "Cannot assign expression of type ~ to ~ with declared type ~." <<
         [#pr(type(v)), name, #pr(t)])

   defn unbound-def (c:TLDef|TLDefVar|LSDef|LSDefVar) :
      val name = def-name(c)
      val t = def-type(c)
      add-error(0, "Cannot define ~ with unbounded type ~." << [name, #pr(t)])

   defn unbounded (e:LSExp) :
      val t = type(e)
      val p = resolved-pr(t)
      add-error(p, "Expression has unbounded type ~." << [#pr(t)])

   defn unbounded-new (e:LSNew) :
      val t = StructT(n(e), targ(e))
      add-error(0, "Cannot create object of type ~ with rest field." << [#pr(t)])
      
   defn unbounded-struct (e:LSStruct) :
      val t = StructT(n(e), targ(e))
      add-error(0, "Cannot create struct of type ~ with rest field." << [#pr(t)])

   defn bounded-array (e:LSArray) :
      val t = StructT(n(e), targ(e))
      add-error(0, "Cannot create array of type ~ without rest field." << [#pr(t)])

   defn bad-type-tarity (e:LSNew|LSArray|LSStruct) :
      val name = name?(n(e), "Type ~", "Type")
      val given = length(types(targ(e) as TTuple))
      val n = type-tarity(n(e))
      add-error(0, "~ requires ~ type arguments, but given ~." << [name, n, given])

   defn bad-type-arity (e:LSNew|LSArray|LSStruct) :
      val name = name?(n(e), "Type ~", "Type")
      val n = length(field-types!(n(e), targ(e)))
      add-error(0, "~ requires ~ fields, but given ~." << [name, n, length(args(e))])

   defn bad-new-construct (e:LSNew|LSArray|LSStruct) :
      val construct = match(e) :
         (e:LSNew) : "object"
         (e:LSArray) : "array"
         (e:LSStruct) : "struct"
      val t = StructT(n(e), targ(e))
      val p = resolved-pr(args(e))
      val ts = map(type, args(e))
      add-error(p, "Cannot create ~ of type ~ with fields of type (~@)." << [construct, #pr(t), cms(#pr(ts))])

   defn not-tuple (c:TDefTuple|TLetTuple) :
      val n = length(ns(c))
      val p = resolved-pr(value(c))
      add-error(p, "Cannot deconstruct expression of type ~ into tuple of length ~." <<
         [#pr(type(value(c))), n])

   defn no-inferred-args (e:TFn) :
      val w = type(ctxt(e) as CExp|CDo)
      for (a in args(e), t in a1(e), i in 0 to false) do :
         if unresolved?(t) :
            val name = name?(a, "argument ~", "argument ~" % [i])
            add-error{0, _} $
               if unresolved?(w) : "Could not infer type for ~." << [name]
               else : "Could not infer type for ~. Function used in context expecting type ~." << [name, #pr(w)]

   defn no-inferred-ret (e:TFn|TDefn|TDefmethod) :
      val p = resolved-pr([a1(e), body(e)])
      val name = match(e) :
         (e:TFn) : "anonymous function"
         (e:TDefn) : name?(n(e), "function ~", "function")
         (e:TDefmethod) : "method"
      add-error(p, "Could not infer return type for ~." << [name])

   defn bad-ret (f:TDefn|TDefmethod|TFn) :
      val name = match(f) :
         (f:TDefn) : name?(n(f), "function ~", "function")
         (f:TDefmethod) : "method"
         (f:TFn) : "anonymous function"
      defn loop (e:TExp) :
         match(e) :
            (e:TLet|TLetVar|TLetTuple|TLetRec|TBranch) : loop(body(e))
            (e:TMatch) : do(loop, branches(e))
            (e:TSeq) : loop(b(e))
            (e) :
               val p = resolved-pr([a2(f), e])
               if not-st?(type(e), a2(f)) :
                  add-error(p, "Cannot return an expression of type ~ for ~ with declared return type ~." << [
                     #pr(type(e)), name, #pr(a2(f))])
      loop(body(f))

   defn bad-ret (c:LSReturn, t:LSType) :
      val et = type(exp(c))
      val p = resolved-pr(et)
      add-error(p, "Cannot return expression of type ~ from function with declared return type ~." << [
         #pr(et), #pr(t)])

   defn bad-branch (e:TMatch, b:TBranch) :
      val bargs = stream({[_, _]}, args(b), atypes(b))
      for (a in args(e), [ba, bt] in bargs, i in 0 to false) do :
         if not overlap?(type(a), bt) :
            val name = name?(ba, "argument ~", "argument ~" % [i])
            add-error(0, "Branch type ~ for ~ cannot match against match argument of type ~." << [
               #pr(bt), name, #pr(type(a))])

   defn bad-branch (e:LSMatch, b:LSBranch) :
      val bargs = stream({[_, _ as RefT]}, args(b), atypes(b))
      for (a in args(e), [ba, bt] in bargs, i in 0 to false) do :
         if not overlap?(type(a) as RefT, bt) :
            val name = name?(ba, "argument ~", "argument ~" % [i])
            add-error(0, "Branch type ~ for ~ cannot match against match argument of type ~." << [
               #pr(bt), name, #pr(type(a))])

   defn bad-cast (e:TCast) :
      add-error(0, "Cannot cast expression of type ~ to type ~." << [
         #pr(type(exp(e))), #pr(targ(e))])

   defn bad-cast (e:LSCast) :
      val et = type(exp(e))
      add-error(0, "Cannot cast expression of type ~ to type ~." << [#pr(et), #pr(targ(e))])

   defn bad-set (e:TSet) :
      val p = resolved-pr([ref(e), value(e)])
      val name = name?(n(ref(e)), "variable ~", "variable")
      add-error(p, "Cannot assign expression of type ~ to ~ with declared type ~." << [
         #pr(type(value(e))), name, #pr(type(ref(e)))])

   defn bad-set (e:LSSet) :
      val et = type(exp(e))
      val vt = type(value(e))
      val name = match(exp(e)) :
         (e:LSVar) : name?(n(e), "variable ~", "variable")
         (e) : "variable"
      val p = resolved-pr([et, vt])
      add-error(p, "Cannot assign expression of type ~ to ~ with declared type ~." << [
         #pr(vt), name, #pr(et)])      

   defn bad-lvalue-set (e:LSSet) :
      val name = match(exp(e)) :
         (e:LSVar) : name?(n(e), "variable ~", "variable")
         (e) : "location"
      add-error(0, "Cannot assign to non-assignable ~." << [name])

   defn bad-lvalue-addr (e:LSAddr) :
      val name = match(exp(e)) :
         (e:LSVar) : name?(n(e), "variable ~", "variable")
         (e) : "location"
      add-error(0, "Cannot get address of non-assignable ~." << [name])

   defn not-function (e:TDo) :
      val p = resolved-pr(func(e))
      val name = match(func(e)) :
         (f:TRef) : name?(n(f), "Value ~", "Value")
         (f) : "Expression"
      add-error(p, "~ of type ~ cannot be called as a function." << [
         name, #pr(type(func(e)))])

   defn not-function (e:LSDo|LSCallC) :
      val ft = type(func(e))
      val p = resolved-pr(ft)
      val name = match(func(e)) :
         (f:LSVar) : name?(n(f), "Value ~", "Value")
         (f) : "Expression"
      add-error(p, "~ of type ~ cannot be called as a function." << [name, #pr(ft)])

   defn bad-call (e:TDo) :
      val p = resolved-pr([func(e), args(e)])
      val name = get-name(func(e)) where :
         defn get-name (e:TExp) :
            match(e) :
               (e:TRef) : name?(n(e), "function ~", "function")
               (e:TMix) : get-name(head(exps(e)))
               (e:TCurry) : get-name(ref(e))
               (e) : "expression"
      add-error(p, "Cannot call ~ of type ~ with arguments of type (~@)." << [
         name, #pr(type(func(e))), cms(map(#pr{type(_)}, args(e)))])

   defn get-function-name (e:LSExp) :
      match(e) :
         (e:LSVar) : name?(n(e), "function ~", "function")
         (e:LSMix) : get-function-name(head(exps(e)))
         (e:LSCurry) : get-function-name(ref(e))
         (e) : "expression"               

   defn bad-call (e:LSDo|LSCallC) :
      val p = resolved-pr([func(e), args(e)])
      val name = get-function-name(func(e))
      val ft = type(func(e))
      val ats = map(type, args(e))
      add-error(p, "Cannot call ~ of type ~ with arguments of type (~@)." << [
         name, #pr(ft), cms(#pr(ats))])

   defn bad-stack (e:LSDoStack) :
      val p = resolved-pr(func(e))
      val ft = type(func(e))
      add-error(p, "Cannot call switch stack with value of type ~." << [
         #pr(ft)])

   defn bad-callc (e:LSCallC) :
      val p = resolved-pr(func(e))
      add-error(p, "Cannot call closure of type ~ using C calling convention." << [
         #pr(type(func(e)))])

   defn bad-ls-ref (e:TRef) :
      val name =
         match(type(nm[n(e)])) :
            (t:LVarE) : name?(n(e), "variable ~", "variable")
            (t:LValE) : name?(n(e), "value ~", "value")
            (t:LFnE) : name?(n(e), "function ~", "function")
      add-error(0, "LoStanza ~ of type ~ can only be referred to from LoStanza." << [
         name, #pr(ls-env[n(e)])])

   defn get-ref (e:TExp) :
      match(e) :
         (e:TRef) : e
         (e:TCurry) : ref(e)
   defn get-ref (e:LSExp) :
      match(e) :
         (e:LSVar) : e
         (e:LSCurry) : ref(e)
   defn possibilities (exps:Streamable<TExp|LSExp>) :
      join{_, "\n"} $ for e in exps stream :
         val r = get-ref(e)
         "   ~: ~" << [#name(n(r)), #pr(env-type(n(r)))]
   defn no-mix (e:TMix|LSMix) :
      val name = #name(n(r)) where :
         val r = get-ref(head(exps(e)))
      match(ctxt(e)) :
         (c:CDo|CLSDo) :
            val p = resolved-pr([exps(e), args(c)])
            add-error(p, "No appropriate function ~ for arguments of type (~@). Possibilities are:\n~@" << [
               name, cms(#pr(args(c))), possibilities(exps(e))])
         (c:CExp|CLSExp) :
            val p = resolved-pr([exps(e), type(c)])
            add-error(p, "No appropriate function ~ for expected type ~. Possibilities are:\n~@" << [
               name, #pr(type(c)), possibilities(exps(e))])
   defn amb-mix (e:TMix|LSMix) :
      val exps* = to-list $
         for (e in exps(e), s in sels(sel(e) as SSel)) filter :
            s != false
      val name = #name(n(r)) where :
         val r = get-ref(head(exps*))
      match(ctxt(e)) :
         (c:CDo|CLSDo) :
            val p = resolved-pr([map(get-ref, exps*), args(c)])
            add-error(p, "Ambiguous call to overloaded function ~ with arguments of type (~@). Possibilities are:\n~@" << [
               name, cms(#pr(args(c))), possibilities(exps*)])
         (c:CExp|CLSExp) :
            val p = resolved-pr([map(get-ref, exps*), type(c)])
            add-error(p, "Ambiguous reference to overloaded function ~ for expected type ~. Possibilities are:\n~@" << [
               name, #pr(type(c)), possibilities(exps*)])

   defn no-method (e:TMix) :
      val name = #name(n(r)) where :
         val r = get-ref(head(exps(e)))
      val t = type(ctxt(e) as CMulti)
      val p = resolved-pr([exps(e), t])
      add-error(p, "No appropriate multi ~ for method of type ~@. Possibilities are:\n~@" << [
         name, #pr(t), possibilities(exps(e))])

   defn amb-method (e:TMix) :
      val ss = sels(sel(e) as SSel)
      val exps* = #select(exps(e), ss)
      val name = #name(n(r)) where :
         val r = get-ref(head(exps(e)))
      val t = type(ctxt(e) as CMulti)
      val p = resolved-pr([exps*, t])
      add-error(p, "Multiple appropriate multis ~ for method of type ~@. Possibilities are:\n~@" << [
         name, #pr(t), possibilities(exps*)])

   defn bad-method (c:TDefmethod) :
      val name = get-name(multi(c)) where :
         defn get-name (e:TExp) :
            match(e) :
               (e:TMix) : get-name(head(exps(e)))
               (e:TCurry) : get-name(ref(e))
               (e:TRef) : #name(n(e))
      val t = type(ctxt(multi(c)) as CMulti)
      val p = resolved-pr([t, type(multi(c))])
      add-error(p, "Cannot attach method of type ~ to multi ~ of type ~." << [
         #pr(t), name, #pr(type(multi(c)))])

   defn bad-tarity (e:TCurry|LSCurry) :
      match(type(ref(e))) :
         (t:TPoly|PolyT) :
            add-error(0, "Function ~ of type ~ requires ~ type arguments, but received (~@)." << [
               #name(n(ref(e))), #pr(type(ref(e))), length(targs(t)), cms(#pr(targs(e)))])
         (t:TArrow|FnT) :
            add-error(0, "Function ~ of type ~ does not accept type arguments, but received (~@)." << [
               #name(n(ref(e))), #pr(type(ref(e))), cms(#pr(targs(e)))])

   defn bad-prim (e:LSPrim) :
      val ats = map(type, args(e))
      add-error(0, "Cannot call LoStanza primitive ~ with arguments of type (~@)." << [
         op(e), cms(#pr(ats))])
            
   defn no-capture (e:TCurry|LSCurry) :
      val rt = type(ref(e)) as TPoly|PolyT
      for (a in cargs(rt), t in cargs(e)) do :
         if unresolved?(t) :
            val a-name = name?(a, "argument ~", "argument")
            val r-name = #name(n(ref(e)))
            match(ctxt(e)) :
               (c:CExp|CLSExp|CMulti) :
                  val p = resolved-pr(type(c))
                  add-error(p, "Could not capture ~ for function ~ of type ~. Expected type is ~." << [
                     a-name, r-name, #pr(rt), #pr(type(c))])
               (c:CDo|CLSDo) :
                  val p = resolved-pr(args(c))
                  add-error(p, "Could not capture ~ for function ~ of type ~. Called with arguments of type (~@)." << [
                     a-name, r-name, #pr(rt), cms(#pr(args(c)))])

   defn bad-pred (c:LSIf) :
      val t = type(pred(c))
      val p = resolved-pr(t)
      add-error(p, "Expression of type ~ cannot be used as predicate in if statement. Must be a long." << [#pr(t)])

   defn bad-match (c:LSMatch) :
      val ts = map(type, args(c))
      add-error(0, "Match statement cannot be used on values of types (~@). Must be ref types." << [cms(#pr(ts))])

   defn bad-length (e:LSArray) :
      val t = type(length(e))
      val p = resolved-pr(t)
      add-error(p, "Expression of type ~ cannot be used as length for array. Must be a long." << [#pr(t)])

   defn bad-deref (e:LSDeref) :
      val t = type(exp(e))
      val p = resolved-pr(t)
      add-error(p, "Expression of type ~ cannot be dereferenced." << [#pr(t)])

   defn bad-index (e:LSSlot) :
      val t = type(index(e))
      val p = resolved-pr(t)
      add-error(p, "Expression of type ~ cannot be used as index. Must be a long." << [#pr(t)])

   defn bad-slot (e:LSSlot) :
      val t = type(index(e))
      val p = resolved-pr(t)
      add-error(p, "Cannot access indexed slot in expression of type ~." << [#pr(t)])

   defn bad-field (e:LSField) :
      val t = type(exp(e))
      val p = resolved-pr(t)
      add-error(p, "Cannot access field ~ in expression of type ~." << [name(e), #pr(t)])

   defn bad-sizeof (e:LSSizeof) :
      add-error(0, "Cannot compute the size of type ~." << [#pr(targ(e))])

   defn bad-and (e:LSAnd) :
      val at = type(a(e))
      val bt = type(b(e))
      val p = resolved-pr(t)
      add-error(p, "And operator cannot be applied to arguments of type ~ and ~. Must be longs." << [#pr(at), #pr(bt)])

   defn bad-or (e:LSOr) :
      val at = type(a(e))
      val bt = type(b(e))
      val p = resolved-pr(t)
      add-error(p, "Or operator cannot be applied to arguments of type ~ and ~. Must be longs." << [#pr(at), #pr(bt)])

   ;======== Driver ========
   do(check, comms(prog))
   for i in 0 to length(errors) do :
      if not empty?(errors[i]) :
         do(println, errors[i])
         throw(TypeError())

;;============================================================
;;=============== General Utilities ==========================
;;============================================================
defstruct Fresh
defstruct TypeError <: Exception
