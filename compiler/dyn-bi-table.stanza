defpackage stz/dyn-bi-table :
  import core
  import collections

public deftype DynBiTable
public defmulti key? (t:DynBiTable, a:Int) -> True|False
public defmulti set (t:DynBiTable, x:Int, ys:Tuple<Int>) -> False
public defmulti forward (t:DynBiTable, a:Int) -> Tuple<Int>
public defmulti backward (t:DynBiTable, b:Int) -> List<Int>

public defn DynBiTable () :
  val forward-table = IntTable<Tuple<Int>>()
  val backward-table = IntTable<List<Int>>(List())

  ;Add back edge pointing from y to x
  defn add-back-edge (x:Int, y:Int) :
    update(backward-table, add-to-list{_, x}, y)
  ;Remove back edge pointing from y to x
  defn remove-back-edge (x:Int, y:Int) :
    update(backward-table, remove-from-list{_, x}, y)

  ;Set state
  val exists-buffer = Vector<True|False>()
  defn set-forward (x:Int, ys:Tuple<Int>) :
    if key?(forward-table, x) :
      lengthen(exists-buffer, length(ys), false)
      for y in forward-table[x] do :
        match(bsearch(ys, y)) :
          (i:Int) : exists-buffer[i] = true
          (_:False) : remove-back-edge(x, y)
      for (y in ys, old? in exists-buffer) do :
        add-back-edge(x, y) when not old?
      clear(exists-buffer)
    else :
      do(add-back-edge{x, _}, ys)
    forward-table[x] = ys

  ;Preconditions
  defn ensure-sorted! (ys:Tuple<Int>) :
    #if-not-defined(OPTIMIZE) :
      for i in 0 to length(ys) - 1 do :
        if ys[i] >= ys[i + 1] :
          fatal("Tuple is not sorted!")
    false
  
  new DynBiTable :
    defmethod set (this, x:Int, ys:Tuple<Int>) :
      ensure-sorted!(ys)
      set-forward(x, ys)
    defmethod key? (this, x:Int) :
      key?(forward-table, x)
    defmethod forward (this, x:Int) :
      forward-table[x]
    defmethod backward (this, y:Int) :
      backward-table[y]  

defn bsearch (xs:Tuple<Int>, x:Int) -> Int|False :
  let loop (start:Int = 0, end:Int = length(xs)) :
    if end > start :
      val center = start + (end - start) / 2
      val y = xs[center]
      if x == y : center
      else if x < y : loop(start, center)
      else : loop(center + 1, end)

defn add-to-list (xs:List<Int>, y:Int) :
  if empty?(xs) :
    List(y)
  else :
    val x = head(xs)
    if y < x : cons(y, xs)
    else : cons(x, add-to-list(tail(xs), y))

defn remove-from-list (xs:List<Int>, y:Int) :
  if empty?(xs) :
    fatal("Element %_ does not exist in list." % [y])
  else :
    val x = head(xs)
    if x == y : tail(xs)
    else : cons(x, remove-from-list(tail(xs), y))