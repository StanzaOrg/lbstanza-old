defpackage stz/reg-alloc-engine :
  import core
  import collections
  import stz/reg-alloc-ir
  import stz/printing-utils

;============================================================
;=================== State Definition =======================
;============================================================

;Holds the complete state of the register allocation engine.
public defstruct RegAllocEngine :
  program:Program
  blocks:Vector<Block> with:
    init => Vector<Block>()
  model-properties:Vector<ModelProperties>

public defstruct Block :
  index:Int
  start:Int
  length:Int
  succs:Tuple<Int>
  preds:Tuple<Int>
  ends-with-goto?:True|False
  inputs:Vector<Port> with:
    init => Vector<Port>()
  outputs:Vector<Port> with:
    init => Vector<Port>()
  defs:Vector<Int> with:
    init => Vector<Int>()

;- usage-position: The first position at which this
;  variable is used. 0 indicates the first instruction
;  of the current block.
public defstruct Port :
  id:Int
  usage-position:Int
  prefs:PortPref|False with:
    default => false
    updater => sub-prefs    

;- returns?: Returns true if execution is guaranteed
;  not to continue past this operation. Occurs when
;  the model contains a Return statement.
;- clears-registers?: Returns true if this operation clears all the
;  registers, and thus requires all live variables to be saved. Occurs
;  when the model contains a ClearRegisters statement.
public defstruct ModelProperties :
  id:Int
  returns?:True|False
  clears-registers?:True|False

;Indicates the save and load preferences of a port.
public defstruct PortPref <: Hashable&Equalable :
  save-pref: SavePref
  load-pref: LoadPref
with:
  hashable => true
  equalable => true

public defenum SavePref :
  ;The variable is preferred to be saved. The
  ;variable is live across a clear-registers operation.
  PreferSave

  ;The variable is preferred to be not saved.
  ;The variable is killed so there's no point
  ;in saving it.
  PreferNoSave

  ;The variable is preferred to be saved, if the
  ;block successors prefer for it to be saved.
  ;(Used only during port preference algorithm.)
  PreferSaveIfSuccessor

public defenum LoadPref :
  ;The variable is preferred to be loaded in a register.
  ;The variable is used as an argument to an operation.
  PreferLoad

  ;The variable is preferred to be not loaded.
  ;The variable crosses a clear-registers operation,
  ;before it is ever used.
  PreferNoLoad

  ;The variable is preferred to be loaded, if the
  ;block successors prefer for it to be loaded.
  ;(Used only during port preference algorithm.)
  PreferLoadIfSuccessor

;============================================================
;======================== Printers ==========================
;============================================================

defmethod print (o:OutputStream, e:RegAllocEngine) :
  val items = [
    program(e)
    named-list-fields("blocks", blocks(e))]
  print(o, "RegAllocEngine%_" % [colon-field-list(items)])

defmethod print (o:OutputStream, block:Block) :
  val items = [
    simple-field("start", start(block))
    simple-field("length", length(block))
    simple-field("succs", succs(block))
    simple-field("preds", preds(block))
    simple-field("ends-with-goto?", ends-with-goto?(block))
    named-list-fields("inputs", inputs(block))
    named-list-fields("outputs", outputs(block))
    simple-list-field("defs", defs(block))]
  println(o, "block B%_ %_" % [index(block), colon-field-list(items)])

defmethod print (o:OutputStream, p:Port) :
  print(o, "port %_ (used at: %_, %_)" % [id(p), usage-position(p), prefs(p)])

defmethod print (o:OutputStream, m:ModelProperties) :
  val items = [
    simple-field("returns?", returns?(m))
    simple-field("clears-registers?", clears-registers?(m))]
  print(o, "model-properties %_%_" % [
    id(m), colon-field-list(items)])

defmethod print (o:OutputStream, p:PortPref) :
  print(o, "PortPref(%_, %_)" % [save-pref(p), load-pref(p)])