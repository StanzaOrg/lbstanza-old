defpackage stz/el-unique-ids :
  import core
  import collections
  import stz/el-ir
  import stz/dl-ir

;============================================================
;====================== Public API ==========================
;============================================================

public defn take-ids (epackage:EPackage) :
  take-ids $ generate<Int> :
    used-ids(yield, epackage)

;Generates a globally unique id.
public defn uniqueid () -> Int :
  for i in ID-COUNTER find! :
    not TAKEN-IDS[i]

;============================================================
;================= Sanity Checks ============================
;============================================================

public defn ensure-unique-identifiers! (epackage:EPackage) :
  ;Check body labels
  defn check-body (e:ELBigItem) :
    do*(check-body, e)
    match(e:EBody) :
      ensure-unique-labels(e)
  check-body(epackage)

  ;Track used and nonused identifiers
  val idset = IntSet()
  val non-unique = IntSet()
  within id = used-ids(epackage) :
    if not add(idset, id) :
      add(non-unique, id)

  ;Issue errors
  if not empty?(non-unique) :
    fatal $ new Printable :
      defmethod print (o:OutputStream, this) :
        print(o, "The following identifiers are declared more than once: %," % [non-unique])
        print(o, "\nThe program is as follows:\n%_" % [epackage])

defn ensure-unique-labels (b:EBody) :
  val idset = IntSet()
  val non-unique = IntSet()
  for l in filter-by<ELabel>(ins(b)) do :
    if not add(idset, n(l)) :
      add(non-unique, n(l))
  ;Issue errors
  if not empty?(non-unique) :
    fatal $ new Printable :
      defmethod print (o:OutputStream, this) :
        print(o, "The following labels are declared more than once: %," % [non-unique])
        print(o, "\nThe body is as follows:\n%_" % [b])

;============================================================
;================== Scanning Algorithm ======================
;============================================================

val TAKEN-IDS = IntSet()
var ID-COUNTER:Seq<Int> = to-seq(0 to false)

defn take-ids (ids:Seqable<Int>) :
  clear(TAKEN-IDS)
  add-all(TAKEN-IDS, ids)
  ID-COUNTER = to-seq(0 to false)

defn used-ids (return:Int -> ?, epackage:EPackage) :
  ;Overloading
  defn def (n:Int) : return(n)
  defn def (ns:Tuple<Int>) : do(return, ns)

  ;Look at imports
  for import in imports(packageio(epackage)) do :
    def(n(import))

  ;Look at definitions
  defn scan (e:ELItem) :
    do(scan, e)
    match(e) :
      ;Top Level
      (e:EDefGlobal) : def(n(e))
      (e:EDefn) : def(n(e))
      (e:EDefClosure) : (def(n(e)), def(closure(e)))
      (e:EDefmulti) : (def(n(e)), def(targs(e)))
      (e:EDefmethod) : def(n(e))
      (e:EDefStruct) : def(n(e))
      (e:EExternFn) : def(n(e))
      (e:EDefType) : def(n(e))
      (e:EDefObject) : def(n(e))
      (e:EDefTypeObject) : def(n(e))
      ;Locals
      (e:EFn) : (def(targs(e)), def(args(e)))
      (e:ELocal) : def(n(e))
      (e:ELocalType) : def(n(e))
      (e:ELocalFn) : def(n(e))
      (e:ELocalObj) : def(n(e))
      (e:EMethod) : def(n(e))
      ;Labels
      (e:ELabel) : def(n(e))
      ;Remaining
      (e) : false
  do(scan, exps(epackage))

