#use-added-syntax(tests)
defpackage stz/earley-shuntyard-test :
  import core
  import collections
  import stz/earley-shuntyard

;============================================================
;===================== Testing ==============================
;============================================================

defstruct Number <: Item :
  value: Int with: (as-method => true)
defstruct BinaryOp <: Operator :
  name: Symbol
  priority: Int with: (as-method => true)
  associativity: Associativity with: (as-method => true)
defstruct UnaryOp <: Operator :
  name: Symbol
  priority: Int with: (as-method => true)
  type: OperatorType with: (as-method => true)

defmethod type (op:BinaryOp) :
  Binary
  
defmethod associativity (op:UnaryOp) :
  match(type(op)) :
    (t:Prefix) : RightAssociative
    (t:Postfix) : LeftAssociative

defmethod value (op:UnaryOp, x) :
  match(type(op)) :
    (t:Prefix) : qquote(~(name(op)), ~ x)
    (t:Postfix) : qquote(~ x, ~(name(op)))
    
defmethod value (op:BinaryOp, x, y) :
  qquote(~ x ~(name(op)) ~ y)

defn test-shuntyard (input:List) :
  defn make-token (x) :
    switch(x) :
      `. : UnaryOp(`., 6, Postfix)
      `: : UnaryOp(`:, 5, Prefix)
      `+ : BinaryOp(`+, 4, LeftAssociative)
      `- : BinaryOp(`-, 4, LeftAssociative)
      `x : BinaryOp(`x, 3, LeftAssociative)
      `/ : BinaryOp(`/, 3, LeftAssociative)
      `^ : BinaryOp(`^, 2, RightAssociative)
      `~ : UnaryOp(`~, 1, Prefix)
      `! : UnaryOp(`!, 0, Postfix)
      else : Number(x)
  println("Parse: %s" % [input])
  val result = process(Shuntyard(), seq(make-token, input))
  println("Parsed: %_" % [result])

;============================================================
;========================= Testing ==========================
;============================================================

deftest test-earley-shuntyard :
  test-shuntyard $ `(3 + 3 x 4 / 3 x 4 ^ 3 ^ 2 + 5 + 6 ^ 3 ^ 2 x 3)
  test-shuntyard $ `(1 ^ 2 ^ : ~ 3 ! ^ 4 ! ^ : ~ 5 .)

