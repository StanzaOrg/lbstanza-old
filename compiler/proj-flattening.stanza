defpackage stz/proj-flattening :
  import core
  import collections
  import stz/proj-ir
  import stz/proj-stage0
  import stz/proj-errors
  import core/parsed-path
  import stz/proj-env
  import stz/proj-field-types
  import stz/proj-value-types
  import stz/utils

;Flatten all relative paths in the file.
public defn flatten-relative-paths (file:ProjFileS0,
                                    env:ProjEnv) -> ProjFileS0 :

  ;Accumulate all flattened statements here.
  val stmt-buffer = Vector<ProjStmt>()

  ;Create the table of foreign package managers.
  val manager-table = to-hashtable(name, foreign-package-managers(env))

  ;Create the mapper for prefixing paths.
  defn parent-path-prefixer (parent-path:ParsedPath) -> Mapper :
    new Mapper :
      defmethod field-types (this, manager:Symbol) -> Tuple<TableEntry> :
        params(manager-table[manager])
      defmethod map-field (this, v:ProjValue, t:ValueType) -> ProjValue :
        prefix-filepaths(v, t, parent-path)

  ;Add the parent-path prefix to all paths appearing in s, and
  ;push them to the stmt-buffer.
  defn prefix-parent-path (s:ProjStmt, parent-path:ParsedPath) -> False :
    match(s) :
      (s:IncludedStmtsS0) :
        val new-parent-path = parse-path(path(s))
        for stmt in stmts(s) do :
          prefix-parent-path(stmt, new-parent-path)
      (s:EmptyStmtS0) :
        false
      (s) :
        val stmt* = map-fields(s, parent-path-prefixer(parent-path))
        add(stmt-buffer, stmt*)

  ;Flatten paths in all included proj files.
  val file-path = parse-path(path(file))
  for stmt in stmts(file) do :
    prefix-parent-path(stmt, file-path)

  ;Return file with new statements.
  sub-stmts(file, to-tuple(stmt-buffer))

;============================================================
;============ Prefix Filepath According to Type =============
;============================================================

;Return a new ProjValue where every single FilepathType, StanzaInputType, NameOrPathType
;has been prefixed with the given parent path.
defn prefix-filepaths (v:ProjValue, t:ValueType, parent-path:ParsedPath) -> ProjValue :
  defn recur (v:ProjValue, t:ValueType) -> ProjValue :
    match(v, t) :
      ;Cases: Atom types.
      (v:AtomValue, t:FilepathType|StanzaInputType) :
        match(value(v)) :
          (s:String) : AtomValue(info(v), to-string(relative-to-file(parent-path, s)))
          (s:Symbol) : v
      (v:AtomValue, t:NameOrPathType) :
        val str = value(v) as String
        if contains-slash?(str) :
          val new-path = add-slash $ to-string $
                         relative-to-file(parent-path, str)
          AtomValue(info(v), new-path)
        else : v
      (v, t:AtomType) :
        v
      ;Cases: Tuple type.
      (v:ProjTuple, t:TupleType) :
        ProjTuple(info(v), recur(value(v), MultipleType(type(t))))
      ;Cases: Table type.
      (v:ProjTableS0, t:TableType) :
        val field-entries = to-hashtable(name, entries(t))
        val new-entries = for entry in values(v) map :
          val field-type = type(field-entries[key(entry)])
          key(entry) => recur(value(entry), field-type)      
        ProjTableS0(info(v), new-entries)
      ;Cases: Multiple type.
      (v:ProjValues, t:MultipleType) :
        ProjValues(info(v), map(recur{_, type(t)}, values(v)))
      (v, t:MultipleType) :
        recur(v, type(t))
  recur(v, t)

;Return true if the string contains a slash.
defn contains-slash? (str:String) -> True|False :
  contains?(str, '/')
  
;Ensure that the given string contains a slash.
defn add-slash (str:String) -> String :
  if not contains-slash?(str) :
    to-string("./%_" % [str])
  else :
    str