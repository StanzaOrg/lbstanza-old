defpackage stz/test-code-template-table :
  import core
  import collections
  import stz/code-template-table

;# How to compile #
;
;stanza stz/test-code-template-table -o test-code-template-table -ccfiles c-extern-code.s -pkg pkgs -s test-code-template-table.s

;Hold the arguments here.
lostanza val NUM-ARGS:long = 12
lostanza val ARGS:ptr<long> = call-c clib/malloc(NUM-ARGS * 8)

;Print out the entry point.
extern defn myentrypoint (f:long) -> int :
  call-c clib/printf("myentrypoint(%ld)\n", f)
  for (var i:long = 0, i < NUM-ARGS, i = i + 1) :
    val x = ARGS[i]
    val fx = ($ls-prim fnum x)
    call-c clib/printf("  ARGS[%ld] = %lld (%g)\n", i, x, fx)
    ARGS[i] = 0
  if f < 5 :
    ARGS[0] = f * 100 + 1
  else :
    val v = f as double * 100.0 + 0.1
    ARGS[0] = ($ls-prim bits v)
  ;Dummy return
  return 0

;Main testing function.
lostanza defn main () -> ref<False> :

  ;Initialize the trampoline to call myentrypoint.
  initialize-extern-trampoline(addr(myentrypoint), ARGS)

  ;Create the table.
  val table = CodeTemplateTable()
  
  ;Create the function pointers.
  var indices:ref<IntArray> = new IntArray{0}
  val f-0i0f = make-callback(table, 0, 0, 0, 0, 0, indices)
            as ptr<(() -> long)>

  indices = new IntArray{6, 4, 3, 1, 0, 5, 2}
  val f-4i2f = make-callback(table, 4, 2, 0, 0, 3, indices)
            as ptr<( (long, long, double, long, long, double) -> long )>

  indices = new IntArray{10, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6}
  val f-6i4m = make-callback(table, 6, 0, 4, 1, 41, indices)
            as ptr<( (long, long, long, long, long, long, long, long, long, long) -> double )>

  ;Call the function pointers.
  call-c [f-0i0f]()
  call-c [f-4i2f](41 42 8.3 51 52 5.4)
  val result-d = call-c [f-6i4m](41 42 43 44 45 46 47 48 49 50)
  call-c clib/printf("f-6i4m result = %g\n", result-d)  

  ;No return value.
  return false

;Launch!
println("Test code template table")
main()