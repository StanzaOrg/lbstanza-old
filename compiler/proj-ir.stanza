defpackage stz/proj-ir :
  import core
  import collections
  import stz/printing-utils
  import stz/foreign-package-files

public defstruct ProjFile :
  stmts: Tuple<ProjStmt>

public deftype ProjStmt

public defstruct DefinedInStmt <: ProjStmt & Equalable :
  package: Symbol
  filename: String
with:
  printer => true
  equalable => true

public defstruct PackagesDefinedInStmt <: ProjStmt & Equalable :
  packages: Symbol|False
  filename: String
with:
  printer => true
  equalable => true

public defstruct SyntaxPackagesDefinedInStmt <: ProjStmt & Equalable :
  packages: Tuple<Symbol>
  filename: String
with:
  printer => true
  equalable => true

public defstruct DylibDirectoryStmt <: ProjStmt & Equalable :
  directories: Tuple<String>
with:
  printer => true
  equalable => true

public defstruct RequiresStmt <: ProjStmt & Equalable :
  package: Symbol
  dylibs: Tuple<String>
  ccfiles: Tuple<String>
  ccflags: Tuple<String|Tuple<String>>
  foreign-packages: Tuple<ForeignPackageFiles>
with:
  equalable => true

public defstruct ImportWhenStmt <: ProjStmt & Equalable :
  package: Symbol
  dependencies: Tuple<Symbol>
with:
  printer => true
  equalable => true

;- dependencies: The names of any files that the compilation commands
;  depend upon. The hashstamp of these files are tracked so that if
;  they are changed, the system knows that the compiled output is stale.
;  The files are listed explicitly, because we do not attempt to
;  automatically analyze the compilation commands to determine them.
public defstruct CompileStmt <: ProjStmt & Equalable :
  file?: True|False
  name: String|Tuple<String>
  dependencies: Tuple<String>
  foreign-packages: Tuple<ForeignPackageFiles>
  commands: Tuple<String>
with:
  equalable => true

public defstruct BuildStmt <: ProjStmt :
  name: Symbol
  type: BuildTargetType
  inputs: Tuple<String|Symbol>
  supported-vm-packages: Tuple<String|Symbol>
  pkg: Maybe<String>
  output: Maybe<String>
  assembly: Maybe<String>
  external-dependencies: Maybe<String>
  ccfiles: Tuple<String>
  ccflags: Tuple<String|Tuple<String>>
  flags: Tuple<Symbol>
  optimize: True|False
with:
  printer => true

public defenum BuildTargetType :
  StandardTarget
  TestTarget
  MacroTarget

public defstruct ForeignPackageParamsStmt <: ProjStmt & Equalable :
  package-manager:Symbol
  projdir: String
  entries: Tuple<KeyValue<Symbol, ?>>
with:
  equalable => true

;============================================================
;======================= Values =============================
;============================================================

;Represents a table in the .proj file.
;Example:
;  {
;    email: "p.li@jitx.com"
;    path: "build/dir"
;  }
public defstruct ProjTable <: Equalable :
  entries:Tuple<KeyValue<Symbol,?>>
with:
  equalable => true

defmethod print (o:OutputStream, v:ProjTable) :
  defn str (e:KeyValue<Symbol,?>) : "%~: %~" % [key(e), value(e)]
  if length(entries(v)) <= 1 :
    print(o, "{%,}" % [seq(str, entries(v))])
  else :    
    print(o, "{%_\n}" % [indented-field-list(seq(str, entries(v)))])

;============================================================
;=================== Wellformed Value =======================
;============================================================

;Returns true if x is a wellformed value that can be
;used in a .proj file. Any value that satisfies this
;predicate can be translated into a Proj stage0 value.
public defn wellformed-proj-value? (x) -> True|False :
  match(x) :
    (x:Symbol|String) : true
    (x:List|Tuple) : all?(wellformed-proj-value?, x)
    (x:ProjTable) : all?(wellformed-proj-value?{value(_)}, entries(x))
    (x) : false

;============================================================
;====================== Printer =============================
;============================================================

defmethod print (o:OutputStream, f:ProjFile) :
  print(o, "ProjFile%_" % [colon-field-list(stmts(f))])

defmethod print (o:OutputStream, s:RequiresStmt) :
  val dylib-strs = seq(written, dylibs(s)) when not empty?(dylibs(s))
  val items = [
    falseable-field("dynamic-libraries", dylib-strs)
    named-emptyable-list-fields("ccfiles", seq(written,ccfiles(s)))
    named-emptyable-list-fields("ccflags", seq(written,ccflags(s)))
    inline-fields(foreign-packages(s))]
  print(o, "package %~ requires%_" % [package(s), colon-field-list(items)])

defmethod print (o:OutputStream, s:DylibDirectoryStmt) :
  val items = seq(written, directories(s))
  print(o, "dynamic-library-dirs%_" % [colon-field-list(items)])

defmethod print (o:OutputStream, fp:ForeignPackageFiles) :
  val items = seq(written, files(fp))
  print(o, "foreign-packages(%_)%_" % [package-manager(fp), colon-field-list(items)])

defmethod print (o:OutputStream, s:CompileStmt) :
  val type-str = "file" when file?(s) else "flag"
  val dep-str = "" when empty?(dependencies(s))
           else " from (%,)" % [seq(written, dependencies(s))]
  val items = [
    named-emptyable-list-fields("requires", foreign-packages(s))
    inline-fields(map(written, commands(s)))]
  print(o, "compile %_ %~%_%_" % [type-str, name(s), dep-str, colon-field-list(items)])

defmethod print (o:OutputStream, s:ForeignPackageParamsStmt) :
  val items = [
    simple-field("projdir", projdir(s))
    inline-fields $ for e in entries(s) map :
      if value(e) is Tuple :
        named-list-fields(to-string(key(e)), seq(written,value(e)))
      else :
        simple-field(to-string(key(e)), value(e))]
  print(o, "foreign-package-params(%_)%_" % [package-manager(s), colon-field-list(items)])