;See License.txt for details about licensing.

defpackage stz/imms :
   import core

;============================================================
;=================== Definitions ============================
;============================================================

public deftype Imm <: Equalable
public deftype Val <: Imm
public defstruct ByteImm <: Val : (value:Byte)
public defstruct IntImm <: Val : (value:Int)
public defstruct LongImm <: Val : (value:Long)
public defstruct Mem <: Val : (n:Int, offset:Int)
public defstruct ExMem <: Val : (name:Symbol, offset:Int)
public defn Mem (n:Int) : Mem(n, 0)
public defn ExMem (name:Symbol) : ExMem(name, 0)

public deftype Loc <: Imm
public defstruct RegSP <: Loc
public defstruct Reg <: Loc : (n:Int)
public defstruct FReg <: Loc : (n:Int)
public defstruct Var <: Loc : (n:Int, reg:False|Reg|FReg)
public defn Var (n:Int) : Var(n, false)

public deftype Type <: Equalable
public deftype IntegerType <: Type
public deftype RealType <: Type
public defstruct ByteType <: IntegerType
public defstruct IntType <: IntegerType
public defstruct LongType <: IntegerType
public defstruct FloatType <: RealType
public defstruct DoubleType <: RealType
public defstruct RefType <: IntegerType

public deftype Op
public defstruct AddOp <: Op
public defstruct SubOp <: Op
public defstruct MulOp <: Op
public defstruct DivOp <: Op
public defstruct ModOp <: Op
public defstruct AndOp <: Op
public defstruct OrOp <: Op
public defstruct XorOp <: Op
public defstruct ShlOp <: Op
public defstruct ShrOp <: Op
public defstruct AshrOp <: Op
public defstruct EqOp <: Op
public defstruct NeOp <: Op
public defstruct LtOp <: Op
public defstruct GtOp <: Op
public defstruct LeOp <: Op
public defstruct GeOp <: Op
public defstruct UleOp <: Op
public defstruct UltOp <: Op
public defstruct UgtOp <: Op
public defstruct UgeOp <: Op
public defstruct NotOp <: Op
public defstruct NegOp <: Op

;Abstract Ops
public defstruct SwitchStackOp <: Op
public defstruct CmpStackLimitOp <: Op : (op:Op)
public defstruct SaveCContextOp <: Op
public defstruct CmpArityOp <: Op : (arity:Int, op:Op)

;Backend Ops
public defstruct DivModOp <: Op
public defstruct NoOp <: Op
public defstruct ConvOp <: Op
public defstruct InterpretOp <: Op
public defstruct LoadOp <: Op : (offset:Int)
public defstruct StoreOp <: Op : (offset:Int)
public defstruct AddrOp <: Op : (n:Int)

;============================================================
;==================== Printers ==============================
;============================================================

defmethod print (o:OutputStream, i:Imm) :
   print{o, _} $ match(i) :
      (i:ByteImm) : "%~" % [value(i)]
      (i:IntImm) : "%~" % [value(i)]
      (i:LongImm) : "%~" % [value(i)]
      (i:Mem) :
         if offset(i) == 0 : "M%_" % [n(i)]
         else : "(M%_ + %_)" % [n(i), offset(i)]
      (i:ExMem) :
         if offset(i) == 0 : name(i)
         else : "(%_ + %_)" % [name(i), offset(i)]
      (i:RegSP) : "RSP"         
      (i:Reg) : "R%_" % [n(i)]
      (i:FReg) : "F%_" % [n(i)]
      (i:Var) :
         match(reg(i)) :
            (r:False) : "V%_" % [n(i)]
            (r) : "V%_:%_" % [n(i), r]

defmethod print (o:OutputStream, t:Type) :
   print{o, _} $ match(t) :
      (t:ByteType) : "byte"
      (t:IntType) : "int"
      (t:LongType) : "long"
      (t:FloatType) : "float"
      (t:DoubleType) : "double"
      (t:RefType) : "ref"

defmethod print (os:OutputStream, o:Op) :
   print{os, _} $ match(o) :
      (o:AddOp) : "add"
      (o:SubOp) : "sub"
      (o:MulOp) : "mul"
      (o:DivOp) : "div"
      (o:ModOp) : "mod"
      (o:AndOp) : "and"
      (o:OrOp) : "or"
      (o:XorOp) : "xor"
      (o:ShlOp) : "shl"
      (o:ShrOp) : "shr"
      (o:AshrOp) : "ashr"
      (o:EqOp) : "eq"
      (o:NeOp) : "ne"
      (o:LtOp) : "lt"
      (o:GtOp) : "gt"
      (o:LeOp) : "le "
      (o:GeOp) : "ge"
      (o:UleOp) : "ule"
      (o:UltOp) : "ult"
      (o:UgtOp) : "ugt"
      (o:UgeOp) : "uge"
      (o:NotOp) : "not"
      (o:NegOp) : "neg"
   ;Abstract Ops
      (o:SwitchStackOp) : "switch-stack"
      (o:CmpStackLimitOp) : "cmp-stack-limit(%_)" % [op(o)]
      (o:SaveCContextOp) : "save-c-context"
      (o:CmpArityOp) : "cmp-arity(%_, %_)" % [arity(o), op(o)]
   ;Backend Ops
      (o:DivModOp) : "divmod"
      (o:NoOp) : "nop"
      (o:ConvOp) : "conv"
      (o:InterpretOp) : "interpret"
      (o:LoadOp) : "load(%_)" % [offset(o)]
      (o:StoreOp) : "store(%_)" % [offset(o)]
      (o:AddrOp) : "addr(%_)" % [n(o)]

;============================================================
;================ Immediate Utilities =======================
;============================================================

defmethod equal? (a:Imm, b:Imm) :
   match(a, b) :
      (a:ByteImm, b:ByteImm) : value(a) == value(b)
      (a:IntImm, b:IntImm) : value(a) == value(b)
      (a:LongImm, b:LongImm) : value(a) == value(b)
      (a:Mem, b:Mem) : (n(a) == n(b)) and (offset(a) == offset(b))
      (a:ExMem, b:ExMem) : (name(a) == name(b)) and (offset(a) == offset(b))
      (a:RegSP, b:RegSP) : true
      (a:Reg, b:Reg) : n(a) == n(b)
      (a:FReg, b:FReg) : n(a) == n(b)
      (a:Var, b:Var) : (n(a) == n(b)) and (reg(a) == reg(b))
      (a, b) : false

;============================================================
;================ Operation Utilities =======================
;============================================================

public defn flip (o:Op) :
   match(o) :
      (o:EqOp) : NeOp()
      (o:NeOp) : EqOp()
      (o:LtOp) : GeOp()
      (o:GtOp) : LeOp()
      (o:LeOp) : GtOp()
      (o:GeOp) : LtOp()
      (o:UleOp) : UgtOp()
      (o:UltOp) : UgeOp()
      (o:UgtOp) : UleOp()
      (o:UgeOp) : UltOp()
      (o:CmpStackLimitOp) : CmpStackLimitOp(flip(op(o)))
      (o:CmpArityOp) : CmpArityOp(arity(o), flip(op(o)))
      (o) : fatal("%_ cannot be flipped." % [o])

;============================================================
;================ Type Utilities ============================
;============================================================

public defn size (t:Type) :
   match(t) :
      (t:ByteType) : 1
      (t:IntType) : 4
      (t:LongType) : 8
      (t:FloatType) : 4
      (t:DoubleType) : 8
      (t:RefType) : 8

public defn IntegerType (size:Int) :
   switch {size == _} :
      1 : ByteType()
      4 : IntType()
      8 : LongType()

public defn IntegerType (t:Type) :
   match(t) :
      (t:RealType) : IntegerType(size(t))
      (t:IntegerType) : t

defmethod equal? (a:Type, b:Type) :
   ($prim identical? a b)