defpackage stz/test-lang :
  import core
  import collections
  import parser
  import macro-utils
  import stz/core-macros
  import stz/params

;<doc>=======================================================
;=================== Test Syntax ============================
;============================================================

Surface Syntax:

  deftest(tag1 tag2) name :
    ... body ...

;============================================================
;=======================================================<doc>

public defstruct DefTestStruct :
  name: DefTestName
  tags: List
  body
  
public deftype DefTestName
public defstruct LiteralName <: DefTestName : (name)
public defstruct ComputedName <: DefTestName : (exp)

;<doc>=======================================================
;=================== Assertion Syntax =======================
;============================================================

Surface Syntax:

  #ASSERT(x == y)

;============================================================
;=======================================================<doc>

defsyntax tests :
  import (exp4, id!, exp$, :!, exp!) from core

  ;----------------------------------------------------------
  ;---------------- DefTest Macro ---------------------------
  ;----------------------------------------------------------
  
  defrule exp4 = (deftest ?tags:#tags? ?name:#name #:! ?body:#exp!) :
    if flag-defined?(`TESTING) :
      val compiled = compile(DefTestStruct(name, tags, body))
      parse-syntax[core + current-overlays / #exp!](compiled)
    else :
      `($do stz/test-framework/empty-body)

  defproduction tags? : List
  defrule tags? = ((@do ?tags:#id! ...)) : tags
  defrule tags? = () : List()

  defproduction name : DefTestName
  defrule name = ((?exp:#exp$)) : ComputedName(exp)
  defrule name = (?name:#id!) : LiteralName(name)

  ;----------------------------------------------------------
  ;---------------- Assertion Macro -------------------------
  ;----------------------------------------------------------

  defrule exp4 = (~ #ASSERT(?exp:#exp$)) :
    val compiled = compile-assert(closest-info(), exp)
    parse-syntax[core + current-overlays / #exp!](compiled)

;============================================================
;==================== DefTest Compilation ===================
;============================================================

defn compile (s:DefTestStruct) :
  defn compile-name (name:DefTestName) :
    match(name) :
      (name:LiteralName) : to-string(/name(name))
      (name:ComputedName) : exp(name)
  defn compile-main () :
    val template = `(
      run-test $ new DefTest :
        defmethod name (this) :
          test-name
        defmethod tags (this) :
          `test-tags
        defmethod run (this) :
          test-body)
    fill-template(template, [
      `run-test => `stz/test-framework/run-test
      `DefTest => `stz/test-framework/DefTest
      `name => `stz/test-framework/name
      `run => `stz/test-framework/run
      `tags => `stz/test-framework/tags
      `test-name => compile-name(name(s))
      `test-tags => tags(s)
      `test-body => body(s)])
  compile-main()

;============================================================
;================= Assertion Compilation ====================
;============================================================

deftype AssertionExp
defstruct AssertionCall <: AssertionExp :
  func: AssertionExp
  targs: List
  args: List<AssertionExp>
defstruct AssertionInfix <: AssertionExp :
  op: Symbol
  func: AssertionExp
  arg1: AssertionExp
  arg2: AssertionExp
defstruct AssertionVar <: AssertionExp :
  name
defstruct AssertionLiteral <: AssertionExp :
  value
defstruct AssertionUnknown <: AssertionExp :
  exp
defstruct AssertionArg <: AssertionExp :
  index: Int

defn compile-assert (info:FileInfo|False, exp) :
  ;Parse the expression
  val aexp = parse-assertion-exp(exp)
  
  ;Extract the values
  val letexp = extract-values(aexp)

  ;Return a Stanza expression for evaluating
  ;the given AssertionExp.
  defn compile-exp (e:AssertionExp, values:Tuple|False) :
    let loop (e:AssertionExp = e) :
      match(e) :
        (e:AssertionCall) :
          if empty?(targs(e)) :
            substitute(`(func(args)), [
              `func => loop(func(e))
              `args => splice(map(loop,args(e)))])
          else :
            substitute(`(func<targs>(args)), [
              `func => loop(func(e))
              `targs => splice(targs(e))
              `args => splice(map(loop,args(e)))])
        (e:AssertionInfix) :
          substitute(`(func(arg1, arg2)), [
            `func => loop(func(e))
            `arg1 => loop(arg1(e))
            `arg2 => loop(arg2(e))])
        (e:AssertionVar) :
          name(e)
        (e:AssertionLiteral) :
          value(e)
        (e:AssertionUnknown) :
          /exp(e)
        (e:AssertionArg) :
          (values as Tuple)[index(e)]

  ;Compile pulled out values
  defn compile-values (tmps:Tuple<Symbol>, exps:Tuple<AssertionExp>) :
    nested $ to-tuple $
      for (tmp in tmps, exp in exps) seq :
        val def = substitute(`(val tmp = exp), [
          `tmp => tmp
          `exp => compile-exp(exp,false)])
        val value = tmp
        val description = description-string(exp)
        [`def => def
         `value => value
         `value-description => description]

  ;Compile info
  defn compile-info (info:FileInfo|False) :
    match(info:FileInfo) :
      substitute(`(core/FileInfo(file, line, col)), [
        `file => filename(info)
        `line => line(info)
        `col => column(info)])

  ;Compile main assertion
  defn compile-main () :
    ;Form temporaries for each value
    val value-tmps = map(gensym{`tmp}, values(letexp))
    val template = `(
      let :
        let-values{def}
        assert $ new Assertion :
          defmethod run (this) :
            assertion-body upcast-as core/True|core/False
          defmethod description (this) :
            assertion-description
          defmethod info (this) :
            assertion-info
          defmethod values (this) :
            [let-values{AssertionValue(value-description, value)}])
    fill-template(template, [
      `let-values => compile-values(value-tmps, values(letexp))
      `assertion-body => compile-exp(/exp(letexp), value-tmps)
      `assertion-description => description-string?(aexp)
      `assertion-info => compile-info(info)
      `assert => `stz/test-framework/assert
      `Assertion => `stz/test-framework/Assertion
      `run => `stz/test-framework/run
      `description => `stz/test-framework/description
      `info => `stz/test-framework/info
      `values => `stz/test-framework/values
      `AssertionValue => `stz/test-framework/AssertionValue])

  ;Launch!
  compile-main()

defn parse-assertion-exp (form) :
  match-syntax[core](List(form)) :
    (($do ($of ?func ?targs ...) ?args ...)) :
      val func* = parse-assertion-exp(func)
      val args* = map(parse-assertion-exp, args)
      AssertionCall(func*, targs, args*)
    (($do ?func ?args ...)) :
      val func* = parse-assertion-exp(func)
      val args* = map(parse-assertion-exp, args)
      if length(args*) == 2 :
        switch(unwrap-token(func)) :
          `equal? : AssertionInfix(`==, func*, args*[0], args*[1])
          `not-equal? : AssertionInfix(`!=, func*, args*[0], args*[1])
          `less? : AssertionInfix(`<, func*, args*[0], args*[1])
          `less-eq? : AssertionInfix(`<=, func*, args*[0], args*[1])
          `greater? : AssertionInfix(`>, func*, args*[0], args*[1])
          `greater-eq? : AssertionInfix(`>=, func*, args*[0], args*[1])
          else : AssertionCall(func*, List(), args*)
      else : AssertionCall(func*, List(), args*)
    (($quote ?x)) :
      AssertionLiteral(form)
    (?v:#id) :
      AssertionVar(v)
    (?v) :
      if unwrap-token(v) is Char|Byte|Int|Long|Float|Double|String|True|False : AssertionLiteral(v)
      else : AssertionUnknown(form)
      
defn any-unknown? (e:AssertionExp) :
  match(e) :
    (e:AssertionCall) :
      any-unknown?(func(e)) or
      any?(any-unknown?, args(e))
    (e:AssertionInfix) :
      any-unknown?(func(e)) or
      any-unknown?(arg1(e)) or
      any-unknown?(arg2(e))
    (e:AssertionVar):
      false
    (e:AssertionLiteral) :
      false
    (e:AssertionUnknown) :
      true

defn description-string? (e:AssertionExp) :
  description-string(e) when not any-unknown?(e)

defn description-string (e:AssertionExp) :
  defn format (e:AssertionExp) :
    match(e) :
      (e:AssertionCall) :
        val targ-str = "" when empty?(targs(e))
                  else "<%,>" % [targs(e)]
        "%_%_(%,)" % [format(func(e)), targ-str, seq(format,args(e))]
      (e:AssertionInfix) :
        "%_ %_ %_" % [format(arg1(e)), op(e), format(arg2(e))]
      (e:AssertionVar) :
        name(e)
      (e:AssertionLiteral) :
        value(e)
      (e:AssertionUnknown) :
        fatal("Unknown form")
  to-string(format(e))

defstruct LetValues :
  values: Tuple<AssertionExp>
  exp: AssertionExp

defn extract-values (e:AssertionExp) :
  ;Accumulate all extracted expressions
  val values = Vector<AssertionExp>()

  ;Extract expression only if it is appropriate to be
  ;displayed separately.
  defn extract? (e:AssertionExp) :
    ;Do not extract if we cannot extract a string description.
    if any-unknown?(e) :
      e
    else :
      ;Do not extract if it is a trivial literal.
      match(e:AssertionLiteral) :
        e
      else :
        ;Otherwise extract.
        add(values, e)
        AssertionArg(length(values) - 1)
    
  ;Recursively extract all subexpressions.
  val exp* = match(e) :
    (e:AssertionCall) : AssertionCall(func(e), targs(e), map(extract?,args(e)))
    (e:AssertionInfix) : AssertionInfix(op(e), func(e), extract?(arg1(e)), extract?(arg2(e)))
    (e) : e

  ;Form extracted structure
  LetValues(to-tuple(values), exp*)