defpackage stz/packed-debug-table :
  import core
  import collections

;<doc>=======================================================
;====================== Documentation =======================
;============================================================

This utility takes in an easy HiStanza datastructure representing
the debug table, and packs it into the binary form expected
by core/debug-table.

;============================================================
;=======================================================<doc>

;============================================================
;=========== Input Datastructure Representation =============
;============================================================

;Represents all the debug entries for the program.
public defstruct DebugTable :
  packages: Tuple<PackageDebugInfo>

;Represents all the entries for a Stanza package.
public defstruct PackageDebugInfo :
  name:String
  entries:Tuple<DebugEntry>

;Represents the entry for a single variable.
public defstruct DebugEntry :
  name:String
  location:VarLocation

;Represents the location of a variable.
public deftype VarLocation

;Used for statically compiled code. Refers to the id of the label.
public defstruct VarLabel <: VarLocation :
  id:Int

;Used for dynamically compiled code. Refers to the address of the
;variable.
public defstruct VarAddress <: VarLocation :
  address:Long

;============================================================
;====================== Static Packer =======================
;============================================================

;This callback API is provided by the assembly stitcher,
;to pack the debug table into the proper binary format.

public deftype StaticPacker
public defmulti make-label (p:StaticPacker) -> Int
public defmulti emit-comment (p:StaticPacker, str:String) -> False
public defmulti emit-label (p:StaticPacker, id:Int) -> False
public defmulti emit-pointer-to-label (p:StaticPacker, id:Int) -> False
public defmulti emit (p:StaticPacker, x:Long) -> False
public defmulti emit (p:StaticPacker, x:String) -> False

;============================================================
;================= Static Packing Algorithm =================
;============================================================

;The main static packing algorithm.
;Packs a DebugTable into the format required by core/debug-table.

public defn pack (p:StaticPacker, t:DebugTable) -> False :

  ;Accumulate strings into a table, to be emitted at
  ;the end of generation.
  val string-table = within s = HashTable-init<String,Int>() :
    make-label(p)

  ;Emit all the strings in the string table.
  defn emit-string-table () -> False :
    emit-comment(p, "Strings for Debug Table")
    for e in string-table do :
      emit-label(p, value(e))
      emit(p, key(e))

  ;Emit a pointer to a string.
  defn emit-pointer-to-string (s:String) -> False :
    emit-pointer-to-label(p, string-table[s])

  ;Emit a single debug entry record.
  defn emit-entry (e:DebugEntry) :
    emit-pointer-to-string(name(e))
    val vlabel = location(e) as VarLabel
    emit-pointer-to-label(p, id(vlabel))

  ;Emit a single package debug table.
  defn emit-package-table (pkg:PackageDebugInfo) :
    emit(p, to-long(length(entries(pkg))))
    emit-pointer-to-string(name(pkg))
    do(emit-entry, entries(pkg))

  ;Emit the overall debug table,
  ;followed by the individual package tables.
  defn emit-overall-table (t:DebugTable) :
    emit-comment(p, "Overall debug table")
    emit(p, to-long(length(packages(t))))
    val package-table-labels = map(make-label{p}, packages(t))
    do(emit-pointer-to-label{p, _}, package-table-labels)
    for (pkg in packages(t), plabel in package-table-labels) do :
      emit-comment(p, to-string("Debug table for package %_" % [name(pkg)]))
      emit-label(p, plabel)
      emit-package-table(pkg)
    emit-string-table()

  ;Launch!
  emit-overall-table(t)