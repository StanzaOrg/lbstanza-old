;See License.txt for details about licensing.

defpackage stz/asm-ir :
   import core
   import collections
   import stz/imms

;======== Assembly Instructions ========
public deftype Ins
public defstruct XchgIns <: Ins :
   x: Loc
   y: Loc
public defstruct SetIns <: Ins :
   type: Type
   x: Loc
   y: Imm
public defstruct ConvertIns <: Ins :
   xtype: Type
   x: Loc
   ytype: Type
   y: Imm
public defstruct ReinterpretIns <: Ins :
   xtype: Type
   x: Loc
   ytype: Type
   y: Imm
public defstruct UnaOp <: Ins :
   type: Type
   x: Loc
   op: Op
   y: Imm
public defstruct BinOp <: Ins :
   type: Type
   x: Loc
   op: Op
   y: Imm
   z: Imm
public defstruct DualOp <: Ins :
   type: Type
   x1: Loc
   x2: Loc
   op: Op
   y: Imm
   z: Imm
public defstruct Load <: Ins :
   type: Type
   x: Loc
   y: Imm
   offset: Int
public defstruct Store <: Ins :
   type: Type
   x: Imm
   y: Imm
   offset: Int
public defstruct Call <: Ins :
   x: Imm
public defstruct Return <: Ins
public defstruct Goto <: Ins :
   x: Imm
public defstruct Branch <: Ins :
   type: Type
   x: Imm
   op: Op
   y: Imm
   z: Imm   
public defstruct Label <: Ins :
   n: Int
public defstruct ExLabel <: Ins :
   name: Symbol

;======== Data Instructions ========
public defstruct DefData <: Ins
public defstruct DefText <: Ins
public defstruct DefByte <: Ins :
   value: Byte
public defstruct DefInt <: Ins :
   value: Int
public defstruct DefLong <: Ins :
   value: Long
public defstruct DefFloat <: Ins :
   value: Float
public defstruct DefDouble <: Ins :
   value: Double
public defstruct DefString <: Ins :
   value: String
public defstruct DefSpace <: Ins :
   size: Int
public defstruct DefLabel <: Ins :
   n: Int

;======== Printer =========
defmethod print (o:OutputStream, i:Ins) :
   print{o, _} $ match(i) :
      (i:XchgIns) : "   %~ <=> %~" % [x(i), y(i)]
      (i:SetIns) : "   %~: %~ = %~" % [type(i), x(i), y(i)]
      (i:ConvertIns) : "   %~:%~ = %~:%~" % [xtype(i), x(i), ytype(i), y(i)]
      (i:ReinterpretIns) : "   %~:%~ = reinterpret %~:%~" % [xtype(i), x(i), ytype(i), y(i)]
      (i:UnaOp) : "   %~: %~ = %~ %~" % [type(i), x(i), op(i), y(i)]
      (i:BinOp) : "   %~: %~ = %~ %~ %~" % [type(i), x(i), y(i), op(i), z(i)]
      (i:DualOp) : "   %~: %~, %~ = %~ %~ %~" % [type(i), x1(i), x2(i), y(i), op(i), z(i)]
      (i:Load) : "   %~: %~ = [%~ + %~]" % [type(i), x(i), y(i), offset(i)]
      (i:Store) : "   %~: [%~ + %~] = %~" % [type(i), x(i), offset(i), y(i)]
      (i:Call) : "   call %~" % [x(i)]
      (i:Return) : "   return"
      (i:Goto) : "   goto %~" % [x(i)]
      (i:Branch) : "   %~: branch %~ when %~ %~ %~" % [type(i), x(i), y(i), op(i), z(i)]
      (i:Label) : "L<%~>" % [n(i)]
      (i:ExLabel) : "L<%~>" % [name(i)]
      (i:DefData) : "   .data"
      (i:DefText) : "   .text"
      (i:DefByte) : "   .byte %~" % [value(i)]
      (i:DefInt) : "   .int %~" % [value(i)]
      (i:DefLong) : "   .long %~" % [value(i)]
      (i:DefFloat) : "   .float %~" % [value(i)]
      (i:DefDouble) : "   .double %~" % [value(i)]
      (i:DefString) : "   .string %~" % [value(i)]
      (i:DefSpace) : "   .space %~" % [size(i)]
      (i:DefLabel) : "   .label L<%~>" % [n(i)]      