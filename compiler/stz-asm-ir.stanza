defpackage stz/asm-ir :
   import core
   import verse

;======== Utilities ========
val id-counter = to-stream(0 to false)

;======== Assembly Operations ========
public defstruct AsmOp :
   id:Int
   
defmethod equal? (a:AsmOp, b:AsmOp) :
   id(a) == id(b)

defn AsmOp () : AsmOp(next(id-counter))
public val ADD-OP = AsmOp()
public val MINUS-OP = AsmOp()
public val TIMES-OP = AsmOp()
public val DIVIDE-OP = AsmOp()
public val MODULO-OP = AsmOp()
public val AND-OP = AsmOp()
public val OR-OP = AsmOp()
public val XOR-OP = AsmOp()
public val SHL-OP = AsmOp()
public val SHR-OP = AsmOp()
public val ASHR-OP = AsmOp()
public val EQ-OP = AsmOp()
public val NE-OP = AsmOp()
public val LT-OP = AsmOp()
public val GT-OP = AsmOp()
public val LE-OP = AsmOp()
public val GE-OP = AsmOp()
public val ULE-OP = AsmOp()
public val ULT-OP = AsmOp()
public val UGT-OP = AsmOp()
public val UGE-OP = AsmOp()

;======== Assembly Types ========
public defstruct AsmType :
   id: Int
   
defmethod equal? (a:AsmType, b:AsmType) :
   id(a) == id(b)

defn AsmType () : AsmType(next(id-counter))   
public val BYTE-TYPE = AsmType()
public val INT-TYPE = AsmType()
public val LONG-TYPE = AsmType()
public val FLOAT-TYPE = AsmType()
public val DOUBLE-TYPE = AsmType()

;======== Assembly Instructions ========
public definterface Ins
public defstruct SetIns <: Ins :
   type: AsmType
   x: Loc
   y: Imm
public defstruct BinOp <: Ins :
   type: AsmType
   x: Loc
   op: AsmOp
   y: Imm
   z: Imm
public defstruct Load <: Ins :
   type: AsmType
   x: Loc
   y: Imm
   offset: Int
public defstruct Store <: Ins :
   type: AsmType
   x: Loc
   y: Imm
   offset: Int
public defstruct Label <: Ins :
   n: Int
public defstruct ExLabel <: Ins :
   name: Symbol
public defstruct Goto <: Ins :
   n: Int
public defstruct Branch <: Ins :
   type: AsmType
   n: Int
   op: AsmOp
   x: Imm
   y: Imm
public defstruct Call <: Ins :
   n: Int
public defstruct CallI <: Ins :
   x: Imm
public defstruct Jump <: Ins :
   x: Imm
public defstruct Addr <: Ins :
   x: Loc

;======== Data Instructions ========
public defstruct DefLong <: Ins :
   value: Int
public defstruct DefString <: Ins :
   value: String
public defstruct DefSpace <: Ins :
   size: Int
   value: Int
public defstruct DefLabel <: Ins :
   n: Int

;======== Assembly Immediates ========
public definterface Imm
public defstruct IntImm <: Imm :
   value: Int
;public defstruct FloatImm <: Imm :
;   value: Float

public definterface Loc <: Imm
public defstruct Reg <: Loc :
   n: Int
public defstruct Mem <: Loc :
   n: Int
   offset: Int
public defstruct ExMem <: Loc :
   name: Symbol
   offset: Int
public defstruct Stack <: Loc :
   offset: Int
public defstruct RegSP <: Loc
   
