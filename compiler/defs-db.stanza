defpackage stz/defs-db :
  import core
  import collections
  import stz/namemap
  import stz/compiler
  import stz/front-end
  import stz/visibility
  import stz/il-ir
  import stz/pkg
  import stz/dl-ir
  import stz/vm-ir
  import stz/algorithms
  import stz/proj-manager
  import stz/defs-db-ir
  import stz/defs-db-serializer
  import stz/proj
  import stz/params
  import stz/config
  import stz/utils
  import stz/package-stamps
  import stz/resolver
  import stz/absolute-info

;============================================================
;===================== Main Driver ==========================
;============================================================

;Represents the input arguments to creating the definitions database.
;- merge-db?: If given, this is the filename of a previously
;  existing database, that we want to merge our current entries
;  with.
public defstruct DefsDbInput :
  proj-files: Tuple<String>
  platform: Symbol
  flags: Tuple<Symbol>
  optimize?: True|False
  merge-db?: String|False
with : 
  printer => true

; Main entry point, given the input data and an output filename, 
; compile to IL-IR, create the definitions database, and serialize it 
; to the output file.
public defn defs-db (input:DefsDbInput, filename:String) :
  ;First analyze the input.
  val deps = analyze-input(input)

  ;Generate the definitions database.
  val db = gen-defs-db(deps)

  ;Attempt to read in the previous merging database, if given.
  val merge-db = match(merge-db?(input):String) :
    try :
      val stream = FileInputStream(merge-db?(input) as String)
      try : read-definitions-database(stream)
      finally : close(stream)
    catch (e) : false

  ;If a previous database exists, then merge the
  ;previous database against the new database.
  val new-db =
    match(merge-db:DefinitionsDatabase) : merge(merge-db, db)
    else : db

  ;Serialize the new database back out to disk.
  val ostream = FileOutputStream(filename)
  try : serialize(ostream, new-db)
  finally : close(ostream)

;============================================================
;============== Compiler Analyis Stage ======================
;============================================================
;This stage calls the first stage of the compiler until
;it passes the resolver and returns the DependencyResult
;object summarizing the results.

protected-when(TESTING) defn analyze-input (input:DefsDbInput) -> DependencyResult :
  ;Read all listed packages from given project files
  val proj-file = read-proj-files(proj-files(input), platform(input))
  val stanza-files = all-package-files(proj-file)
  val proj-and-stanza-files = to-tuple $
    cat(proj-files(input), stanza-files)

  ; Compute the build settings (input to the compiler)
  val build-settings = BuildSettings(
    BuildPackages(proj-and-stanza-files),   ;inputs
    [],                                     ;vm-packages
    platform(input),                        ;platform
    false,                                  ;assembly
    false,                                  ;output
    false,                                  ;external dependencies
    false,                                  ;pkg-dir
    optimize?(input),                       ;optimize?
    [],                                     ;ccfiles
    [],                                     ;ccflags
    flags(input))                           ;flags
    
  ;Compute dependencies (compiles to IL-IR)
  dependencies(build-settings, true)
  
;============================================================
;============= Building the Database ========================
;============================================================
;This stage builds the DefinitionsDatabase object
;from the DependencyResult analysis.

protected-when(TESTING) defn gen-defs-db (deps:DependencyResult) -> DefinitionsDatabase :
  ;Build the package stamp table.
  val package-stamp-table = to-hashtable<Symbol,PackageStamp> $
    for stamp in pkgstamps(deps) seq :
      package(location(stamp)) => stamp

  ;Build the PackageDefinitions corresponding to each package.
  val package-defs = for pkg in packages(deps) map :
    val stamp = package-stamp-table[name(pkg)]
    build-package-defs(pkg, stamp, namemap(deps))

  val unresolved-symbols = to-tuple $ 
    for e in filter-by<NoResolve>(errors(deps)) seq :
      UnresolvedSymbol(name(e), /info?(info(e)))

  ;Build the database.
  DefinitionsDatabase(STANZA-RESERVED-WORDS, package-defs, unresolved-symbols)

;------------------------------------------------------------
;---------- PackageDefinitions for Pkg ----------------------
;------------------------------------------------------------
; Collect the deifnitions from DL-IR pulled out of .pkg and .fpkg files.
defn build-package-defs (pkg:Pkg, stamp:PackageStamp, nm:NameMap) -> PackageDefinitions :
  ;Retrieve the PackageIO in the .pkg file.
  val packageio = match(pkg) :
    (pkg:FastPkg) : packageio(pkg)
    (pkg:StdPkg) : packageio(vmp(pkg))

  ;Inspect the exports that have FileInfo information.
  val exports-with-infos = filter({info(_) is-not False}, exports(packageio))

  ;Convert each of the exports into the database Definition objects.
  val definitions = to-tuple $     
    for e in exports-with-infos seq :
      Definition(name, info, kind, visibility, annotation?, documentation?) where :
        val name = name(id(rec(e)))
        val info = /info(info(e) as AbsoluteFileInfo)
        val visibility = visibility(e)
        val kind = kindof(rec(e))
        val annotation? = annotate?(e, nm)
        val documentation? = documentation?(e)

  ;Bundle the results in the PackageDefinitions datastructure.
  PackageDefinitions(name(pkg),
                     stamp,
                     PkgDefinition,
                     [],
                     definitions)

;------------------------------------------------------------
;---------- PackageDefinitions for IPackage -----------------
;------------------------------------------------------------
; Index a package from source code. First index the expressions, then convert to a `Definition`
; object that can be serialized.
protected-when(TESTING) defn build-package-defs (ipackage:IPackage, 
                                                 stamp:PackageStamp, 
                                                 nm:NameMap) -> PackageDefinitions :
  ;Convert the IImport expression into a PackageImport.
  defn to-package-import (iimport:IImport) -> PackageImport :
    val prefixes = for iprefix in prefix(iimport) map : 
      PackageImportPrefix(names(iprefix), prefix(iprefix))
    PackageImport(package(iimport), prefixes)

  ;Index the expressions in the package to assemble the definitions.
  val indexed-exps = index-expressions(exps(ipackage), nm)
  val definitions = to-tuple $
    for indexed in indexed-exps seq :  
      Definition(name, info, kind, visibility, annotation?, documentation?) where : 
        val name = name(indexed)
        val info = info(indexed)
        val kind = kind(indexed)
        val visibility = visibility(indexed)
        val annotation? = annotation?(indexed)
        val documentation? = documentation?(indexed)


  ;Bundle results in PackageDefinitions structure.
  PackageDefinitions(name(ipackage),
                     stamp,
                     SrcDefinition,
                     map(to-package-import, imports(ipackage)),
                     definitions)

; Depth first walk of the IL-IR to flatten into a sequence of `Indexed`, or 
; IExp nodes that have a meaningful name and FileInfo
;
; Input: The top level IExp nodes from IL-IR, and a NameMap to lookup associated
;        names of the nodes we will index.
;
; Output: A sequence of indexed expressions.
;
; Expected Behavior : 
; - When encountering an `IVisibility` node, traverse its child using that node's visibility
; - When encountering an `IBegin`, traverse its children with the current visibility.
; - The initial visibility is `Private`
; - If an expression is not `Indexable`, it is skipped
; - If an `Indexable` does not have an `info`, it is skipped
; - If an `Indexable`'s name cannot be found, it is skipped 
protected-when(TESTING) defn index-expressions (exps:List<IExp>, nm:NameMap) -> Seq<Indexed> :
  generate<Indexed> :
    ;Returns the documentation that should be used for the next expression
    ;after 'e' has been processed.
    defn loop (e:IExp,
               current-visibility:Visibility,
               documentation?:False|String) -> String|False :
      match(e) : 
        ; Case 0: We encounter a doc string. Attribute it with
        ;         the next expression.
        (d:IDoc) :
          value(string(d) as ILiteral) as String

        ; Case 1: We encounter a visibility node. Walk its
        ;         child with the new visibility.
        (v:IVisibility) : 
          loop(exp(v), visibility(v), documentation?)
          
        ; Case 2: We encounter a `Begin` node. Walk its children
        ;         reusing the current visibility
        (b:IBegin) :
          loop(/exps(b), current-visibility, documentation?)

        ; Case 3: We find an Indexable. Attempt to index it.
        (i:Indexable&IExp) :
          ; Extract metadata from the IExp. 
          val name = name?(i, nm)
          val info = info(i as IExp)
          val kind = kindof(i)
          val annotation? = annotate?(i, nm)
          val doc? = documentation?

          ; Case 4a.: Successfully found info and name, yield
          ; Case 4b.: (implicit) If name or info is not found, skip.
          match(info:AbsoluteFileInfo, name:Symbol) : 
            yield(Indexed(kind, current-visibility, name, /info(info), annotation?, documentation?))

          ; Return false to indicate that the documentation has been attributed.
          false

        ; Case 5: We encounter an IExp we can't index. Skip.
        (e:?) :
          ;Return false to indicate that the documentation should not be
          ;carried over this expression.
          false

    ;Returns the documentation that should be used for the next expression
    ;after 'e' has been processed.
    defn loop (es:List<IExp>,
               current-visibility:Visibility,
               documentation?:False|String) -> String|False :
      if empty?(es) :
        documentation?
      else :
        val new-doc? = loop(head(es), current-visibility, documentation?)
        loop(tail(es), current-visibility, new-doc?)
          
    ; launch!
    loop(exps, Private, false)

;------------------------------------------------------------
;------------- Computing Definition Annotations -------------
;------------------------------------------------------------

;Create an annotation for a top-level expression.
defn annotate? (iexp:IExp, nm:NameMap) -> False|DefinitionAnnotation :
  match(iexp) :
    (idefn:IDefn|IDefmethod|ILSDefn|ILSDefmethod) :
      DefnAnnotation(targs, args, return-type?) where :  
        val return-type? = stringify?(a2(idefn), nm)
        val targs = to-tuple $ 
          for arg in targs(idefn) seq : 
            stringify?(arg, nm) as Symbol
        val args = to-tuple $ 
          for (arg in args(idefn), type in a1(idefn)) seq : 
            val arg-name = stringify?(arg, nm)
            val type-name = stringify?(type, nm)
            FnArgAnnotation(arg-name, type-name)
    (iexp) :
      false
    
;Create an annotation for a PackageIO Export expression.
defn annotate? (export:Export, nm:NameMap) -> False|DefinitionAnnotation : 
  match(rec(export)) :
    (rec:FnRec|MultiRec) : 
      DefnAnnotation(targs, args, return-type?) where : 
        val fnid = id(rec) as FnId
        val return-type? = stringify?(a2(rec), nm)
        val targs = to-tuple $ 
          for n in 0 to (ntargs(fnid) + ncargs(fnid)) seq : 
            if n < ntargs(fnid) : 
              to-symbol("TV%_" % [n])
            else : 
              to-symbol("?TV%_" % [n])
        val args = to-tuple $ 
          for (arg-type in a1(id(rec) as FnId), n in 0 to false) seq : 
            FnArgAnnotation(to-symbol("_%_" % [n]), stringify?(arg-type, nm))
    (r:?) :
      false

;------------------------------------------------------------
;------------------- Reserved Words -------------------------
;------------------------------------------------------------

; A list of keywords in stanza.
val STANZA-RESERVED-WORDS = [
  "package" "import" "prefix-of" "prefix" "public" "protected" "private" "doc" "deftype" "defchild" "def"
  "defpackage" "defvar" "defn" "defn*" "defmulti" "defmethod" "defmethod*" "fn" "fn*"
  "multi" "begin" "let" "match" "branch" "new" "as" "as?" "set" "do"
  "prim" "tuple" "quote" "none" "of" "and" "or" "->" 
  "cap" "void" "new" "struct" "addr" "addr!" "deref"
  "slot" "field" "do" "call-c" "prim" "sizeof" "tagof" 
  "letexp" "and" "or" "set" "label" "labels" "block" "goto" "return"
  "let" "if" "match" "branch" "func" "def" "defvar" "deftype" "deffield"
  "extern" "extern-fn" "byte" "int" "long" "float" "double"
  "?" "of" "ptr" "ref"]

;------------------------------------------------------------
;------------------- Definition Kinds -----------------------
;------------------------------------------------------------

; Report the "kind" of an IExp.
public defn kindof (e:IExp) -> SrcDefinitionKind : 
  match(e) : 
    (e:IDefmulti) : SrcDefMulti
    (e:IDefmethod|ILSDefmethod) : SrcDefMethod
    (e:IDefn|ILSDefn) : SrcDefFunction
    (e:IDefType|ILSDefType) : SrcDefType
    (e:IDefVar|ILSDefVar|IDef|ILSDef) : SrcDefVariable
    (e) : SrcDefUnknown

; Returns the "kind" of an Rec.
public defn kindof (r:Rec) -> SrcDefinitionKind : 
  match(r) : 
    (v:ValRec|ExternRec) : SrcDefVariable
    (f:FnRec|ExternFnRec) : SrcDefFunction
    (m:MultiRec) : SrcDefMulti
    (t:TypeRec|TypeDecl|StructRec) : SrcDefType
    (r) : SrcDefUnknown

;------------------------------------------------------------
;------------------ Indexable Type --------------------------
;------------------------------------------------------------

; An Indexable is an IExp that can be meaningfully indexed in the DefinitionsDatabase 
; structure. Currently supported are functions, multis, methods, types, and children
; in both Hi and Lo stanza.
deftype Indexable :  
  VarN         <: Indexable
  IDef         <: Indexable
  IDefn        <: Indexable
  IDefmulti    <: Indexable
  IDefmethod   <: Indexable
  IDefType     <: Indexable
  IDefChild    <: Indexable
  ILSDef       <: Indexable
  ILSDefn      <: Indexable
  ILSDefmethod <: Indexable
  ILSDefType   <: Indexable

;------------------------------------------------------------
;----------------- Indexed Type -----------------------------
;------------------------------------------------------------

; The `Indexed` struct is a helper that contains extracted metadata from IL-IR.
; before being associated with a package. 
;
;- kind:       The kind of originating expression (see SrcDefinitionKind)
;- visibility: The visibility of the expression (public|private|protected)
;- name:       The extracted name of the indexed expression
;- info:       The associated file info of the expression.
protected defstruct Indexed <: Equalable : 
  kind:SrcDefinitionKind
  visibility:Visibility
  name:Symbol
  info:FileInfo
  annotation?:False|DefinitionAnnotation
  documentation?:False|String
with : 
  printer => true

; Index entries are `Equalable` for testing.
defmethod equal? (l:Indexed, r:Indexed) :
  kind(l) == kind(r) and 
  visibility(l) == visibility(r) and 
  name(l) == name(r) and 
  info(l) == info(r)

;============================================================
;================= Human-Readable Names =====================
;============================================================

; A helper multi that converts some IR that represents a named
; "thing" (type, identifier, etc) into human readable text.
defmulti stringify? (i:DType|IExp, nm:NameMap) -> False|Symbol : 
  false

; Stringify types from lostanza types in pkg/fpkg files
defmethod stringify? (dtype:DByte, nm:NameMap)     : `byte
defmethod stringify? (dtype:DInt, nm:NameMap)      : `int
defmethod stringify? (dtype:DLong, nm:NameMap)     : `long
defmethod stringify? (dtype:DFloat, nm:NameMap)    : `float
defmethod stringify? (dtype:DDouble, nm:NameMap)   : `double
defmethod stringify? (dtype:DUnknown, nm:NameMap)  : `?

defmethod stringify? (dptr:DPtrT, nm:NameMap) : 
  to-symbol $ "ptr<%_>" % [stringify?(type(dptr), nm)]

defmethod stringify? (dfn:DFnT, nm:NameMap) :
  val a = map(stringify?{_, nm}, a(dfn))
  val b = stringify?(b(dfn), nm)
  if all?({_ is Symbol}, a) and b is Symbol :
    match(r(dfn)) :
      (f:False) :
        to-symbol("fn (%,) -> %_" % [a, b])
      (r:DType) :
        val rstr = stringify?(r, nm)
        if rstr is Symbol :
          to-symbol("fn (%, ...) -> %_" % [cat(a,[rstr]), b])

defmethod stringify? (dtype:DOf, nm:NameMap) : 
  if empty?(targs(dtype)) : 
    name(id(dtype))
  else : 
    to-symbol $ "%_<%,>" % [name(id(dtype)), seq(stringify?{_, nm}, targs(dtype))]     
  
defmethod stringify? (dtype:DTVar, nm:NameMap) : 
  to-symbol $ "TV%_" % [index(dtype)]

defmethod stringify? (dtype:DCap, nm:NameMap) : 
  to-symbol $ "?%_" % [tvar(dtype)]

defmethod stringify? (dtype:DAnd, nm:NameMap) : 
  to-symbol $ string-join(seq(stringify?{_, nm}, types(dtype)), "&")

defmethod stringify? (dtype:DOr, nm:NameMap) : 
  to-symbol $ string-join(seq(stringify?{_, nm}, types(dtype)), "|")

defmethod stringify? (dtype:DTop, nm:NameMap) : 
  `?

defmethod stringify? (dtype:DBot, nm:NameMap) : 
  `Void

defmethod stringify? (dtype:DTuple, nm:NameMap) : 
  to-symbol $ "[%,]" % [seq(stringify?{_, nm}, types(dtype))]

defmethod stringify? (dtype:DArrow, nm:NameMap) : 
  to-symbol $ "(%,) -> %_" % [
    seq(stringify?{_, nm}, a1(dtype)), 
    stringify?(a2(dtype), nm)]

defmethod stringify? (e:VarN, nm:NameMap) : 
  if key?(nm, n(e)) : 
    name(nm[n(e)])

defmethod stringify? (r:Raw, nm:NameMap) : 
  stringify?(class(r), nm)

defmethod stringify? (iof:IOf, nm:NameMap) : 
  to-symbol("%_<%,>" % [stringify?(class(iof), nm),  seq(stringify?{_, nm}, args(iof))])

defmethod stringify? (ior:IOr, nm:NameMap) : 
  val l = stringify?(a(ior), nm)
  val r = stringify?(b(ior), nm)
  match(l:Symbol, r:Symbol) :
    to-symbol("%_|%_" % [l, r])

defmethod stringify? (iand:IAnd, nm:NameMap) :
  val l = stringify?(a(iand), nm)
  val r = stringify?(b(iand), nm)
  match(l:Symbol, r:Symbol) :
    to-symbol("%_&%_" % [l, r])

defmethod stringify? (igrad:IGradual, nm:NameMap) :
  `? 

defmethod stringify? (inone:INone, nm:NameMap) :
  false

defmethod stringify? (iarrow:IArrow, nm:NameMap) : 
  val l = map(stringify?{_, nm}, a1(iarrow))
  val r = stringify?(a2(iarrow), nm)
  if all?({_ is Symbol}, l) and r is Symbol :
    to-symbol("(%,) -> %_" % [l, r])

defmethod stringify? (ivoid:IVoid, nm:NameMap) :
  `Void

defmethod stringify? (icap:ICap, nm:NameMap) : 
  val type = stringify?(name(icap), nm)
  match(type:Symbol) :
    to-symbol("?%_" % [type])

defmethod stringify? (ituple:ITuple, nm:NameMap) : 
  to-symbol("[%,]" % [seq(stringify?{_, nm}, exps(ituple))])

; Lookup the name of an Indexable from the name map.
defn name? (i:Indexable&IExp, nm:NameMap) -> False|Symbol :
  val exp-name =
    match(i) :
      (e:VarN) : e
      (e:IDef|ILSDef|ILSDefType|IDef|IDefVar|ILSDefn|IDefn|IDefmulti|IDefChild) : 
        name(e)
      (e:IDefType) : 
        class(e)
      (e:IDefmethod|ILSDefmethod) : 
        val name = multi(e)
        match(name:Mix) :
          head(exps(name))
        else : 
          name
  stringify?(exp-name, nm)

;============================================================
;================= Merging Algorithm ========================
;============================================================

;Given an old definitions database, and a new definitions database.
;Merge the two into a new definitions database which keeps entries
;from the old database if the contents used to create them has not
;changed.
defn merge (old-db:DefinitionsDatabase, new-db:DefinitionsDatabase) -> DefinitionsDatabase :
  ;Convert a tuple of package definitions into a table.
  defn to-table (defs:Tuple<PackageDefinitions>) :
    to-hashtable<Symbol,PackageDefinitions> $
      for def in defs seq : name(def) => def  
  val old-package-table = to-table(packages(old-db))    
  val new-package-table = to-table(packages(new-db))

  ;Compute the set of packages that appear on either table.
  val all-package-names = unique(cat(keys(old-package-table), keys(new-package-table)))

  ;Scan through the packages and create merged entries.
  val merged-packages = to-tuple $
    for package-name in all-package-names seq? :
      match(get?(old-package-table, package-name), get?(new-package-table, package-name)) :
        ;If there is an updated version of the package, then
        ;use the new package.
        (old-defs, new-defs:PackageDefinitions) :
          One(new-defs)
        ;If unable to calculate an updated version, then
        ;keep the old package if its source contents have not changed.
        (old-defs:PackageDefinitions, new-defs:False) :
          if up-to-date?(stamp(old-defs)) : One(old-defs)
          else : None()

  ;Create the merged database.
  DefinitionsDatabase(
    reserved-words(new-db),
    merged-packages
    unresolved-symbols(new-db))

;============================================================
;================= Small Utilities ==========================
;============================================================

;Retrieve all existing files in project. 
defn all-package-files (proj-file:ProjFile) -> Tuple<String> :
  ;Collect all paths.
  val paths = HashSet<String>()

  ;Add paths from DefinedInStmt statements.
  for stmt in filter-by<DefinedInStmt>(stmts(proj-file)) do :
    match(resolve-path(filename(stmt))) :
      (fullpath:String) : add(paths, fullpath)
      (f:False) : false

  ;Add paths from PackagesDefinedInStmt statements.
  for stmt in filter-by<PackagesDefinedInStmt>(stmts(proj-file)) do :
    for fullpath in filename(stmt) get-all-stanza-files :
      add(paths, fullpath)

  ;Return all paths
  to-tuple(paths)
  
;Retrieve all stanza files listed (directly or indirectly) within
;a directory.
defn get-all-stanza-files (return:String -> ?, path:String) -> False :
  let scan-path (path:String = path) :
    val type = try : file-type(path)
               catch (e) : false
    match(type) :
      (t:RegularFileType) :
        if suffix?(path, ".stanza") :
          match(resolve-path(path)) :
            (fullpath:String) : return(fullpath)
            (f:False) : false
      (t:DirectoryType) :
        for file in try-dir-files(path) do :
          scan-path(string-join([path, "/", file]))
      (t) :
        false
  false

;Attempt to retrieve files from directory.
;Return [] on failure.
defn try-dir-files (path:String) -> Tuple<String> :
  try : dir-files(path)
  catch (e) : []