defpackage stz/reg-alloc-simple-stmt-processor :
  import core
  import collections
  import stz/reg-alloc-ir
  import stz/reg-alloc-block-stmt-processor
  import stz/reg-alloc-test-syntax

;A simple statement processor for testing purposes.
public deftype SimpleStmtProcessor <: BlockStmtProcessor

;Return the finished processed block.
public defmulti processed-block (p:SimpleStmtProcessor) -> NameAndBlock

;Create a statement processor from a named block.
public defn SimpleStmtProcessor (block:NameAndBlock) -> BlockStmtProcessor :
  ;Create ports in vectors.
  val input-ports = to-vector<Port>(inputs(block))
  val output-ports = to-vector<Port>(outputs(block))

  ;Create buffer for statements.
  val buffer = Vector<ProgramStmt>()

  ;Store direction of traversal
  var direction:StmtDirection|False = false
  defn set-direction (d:StmtDirection) -> False :
    if direction is False :
      fatal("Cannot iterate through statements repeatedly.")
    direction = d

  ;Create the actual processor.
  new SimpleStmtProcessor :

    ;Emit a new program statement.
    defmethod emit (this, s:ProgramStmt) -> False :
      add(buffer, s)

    ;Retrieve the block input ports.
    defmethod inputs (this) -> Vector<Port> :
      input-ports

    ;Retrieve the block output ports.
    defmethod outputs (this) -> Vector<Port> :
      output-ports

    ;Retrieve the statements in forward
    defmethod stmts (return:(Int, ProgramStmt) -> ?, this) -> False :
      set-direction(Forward)
      val stmts = stmts(block)
      for i in 0 to length(stmts) do :
        return(i, stmts[i])

    ;Retrieve the statements in reverse order.
    defmethod stmts-in-reverse (return:(Int, ProgramStmt) -> ?, this) -> False :
      set-direction(Reverse)
      val stmts = stmts(block)
      for i in reverse(0 to length(stmts)) do :
        return(i, stmts[i])

    ;Retrieve the variable definitions for the program.
    defmethod vars (this) -> Tuple<VarDef> :
      vars(block)

    defmethod processed-block (this) :
      

;The direction of iteration through the statements (and
;therefore of the emitted instructions.)
defenum StmtDirection : (Forward, Reverse)