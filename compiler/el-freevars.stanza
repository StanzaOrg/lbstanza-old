defpackage stz/el-freevars :
  import core
  import collections
  import stz/el-ir
  import stz/el-var-table

;============================================================
;=================== Freevar Analysis =======================
;============================================================

public defn analyze-freevars<?T> (el:ELBigItem&?T, vt:VarTable) -> T :
  defn analyze-usages (e:EFn) -> EFn :
    ;Gather all uses in the function
    val var-uses = IntSet()
    val tvar-uses = IntSet()

    defn loop (e:ELItem) :
      match(e) :
        (e:EVar|EVarLoc) :
          add(var-uses, n(e))
        (e:ETVar|ETVarLoc) :
          add(tvar-uses, n(e))
        (e:EFn) :
          val free = free(e)
          add-all(var-uses, vars(free))
          add-all(tvar-uses, tvars(free))
        (e) :
          do(loop, e)
    do(loop,e)

    ;Remove all locally defined quantities
    defn remove-all (xs:IntSet, ys:Seqable<Int>) : do(remove{xs, _}, ys)
    remove-all(tvar-uses, seq(n,targs(e)))
    remove-all(tvar-uses, seq(n, localtypes(body(e))))
    remove-all(var-uses, seq(n, args(e)))
    remove-all(var-uses, seq(n, locals(body(e))))
    remove-all(var-uses, seq(n, localfns(body(e))))

    ;Record free
    defn local? (x:Int) : not global?(vt,x)
    defn local? (xs:Seqable<Int>) : to-tuple(filter(local?,xs))
    sub-free(e, Free(local?(var-uses), to-tuple(tvar-uses)))

  ;Recursively analyze usages
  defn analyze (e:ELBigItem) :
    match(map(analyze, e)) :
      (e:EFn) : analyze-usages(e)
      (e) : e
  analyze(el) as ELBigItem&T