defpackage stz/ast-lang :
   import core
   import collections
   import macro-utils
   import stz/core-macros

;======== AST TABLE ========
public val AST-TABLE = HashTable<Symbol, ASTStructure>()
public defstruct ASTStructure :
   nodes: List<KeyValue<Symbol, List<Symbol>>>

;======== PARSING STRUCTURES ========
defstruct DefAst :
   defs: List<Def>
deftype Def
defstruct DefType <: Def :
   name: Symbol
   parent
   fields: List<Field>
defstruct DefNodes <: Def :
   type: Symbol
   nodes: List<Node>
defstruct Node :
   name: Symbol
   fields: List<Field>
   options: List
defstruct Field :
   name: Symbol
   type
   options: List
defstruct DefMapper <: Def :
   f: Symbol
   type
   clauses: List<Clause>
defstruct DefDoer <: Def :
   f: Symbol
   type
   clauses: List<Clause>
defstruct Ignore <: Def :
   types: List
defstruct MakeMapper <: Def :
   f: Symbol
   ftype
   x: Symbol
   xtype: Symbol
defstruct MakeDoer <: Def :
   f: Symbol
   ftype
   x: Symbol
   xtype: Symbol
   
defstruct Clause :
   x:Symbol
   type
   body

;======== PARSING ========
defsyntax stz-ast-lang :
   ;=== Symbols ===
   defn sym? (x) : unwrap-token(x) is Symbol
   defproduction sym: Symbol
   defrule sym = (?x) when sym?(x) : unwrap-token(x)

   ;=== Imported ===
   import (type, exp) from core

   ;=== DefType ===
   defproduction def: Def

   defproduction parent   
   defrule parent = (<: ?t:#type) : t
   defrule parent = () : false
   defrule def = (deftype ?name:#sym ?parent:#parent : (?fields:#field ...)) :
      DefType(name, parent, fields)
   defrule def = (deftype ?name:#sym ?parent:#parent) :
      DefType(name, parent, List())

   defproduction node: Node
   defrule node = (?name:#sym : (?fields:#field ...) with : (?options ...)) :
      Node(name, fields, options)
   defrule node = (?name:#sym : (?fields:#field ...)) :
      Node(name, fields, List())
   defrule node = (?name:#sym) :
      Node(name, List(), List())
   defproduction field: Field   
   defrule field = (?name:#sym : ?t:#type with : (?options ...)) :
      Field(name, t, options)
   defrule field = (?name:#sym : ?t:#type) :
      Field(name, t, List())
   defrule def = (defnodes ?name:#sym : (?nodes:#node ...)) :
      DefNodes(name, nodes)

   defproduction clause: Clause
   defrule clause = ((?x:#sym : ?xt:#type) : ?body:#exp) :
      Clause(x, xt, body)
   defrule def = (defmapper (?f:#sym : ?ft:#type) :
                     ?cs:#clause ...) :
      DefMapper(f, ft, cs)
   defrule def = (defdoer (?f:#sym : ?ft:#type) :
                     ?cs:#clause ...) :
      DefDoer(f, ft, cs)
      
   defrule def = (ignore : (?ts:#type ...)) :
      Ignore(ts)
   defrule def = (make-mapper(?f:#sym : ?ft:#type, ?x:#sym : ?xt:#sym)) :
      MakeMapper(f, ft, x, xt)
   defrule def = (make-doer(?f:#sym : ?ft:#type, ?x:#sym : ?xt:#sym)) :
      MakeDoer(f, ft, x, xt)

   import exp4 from core
   defrule exp4 = (defast : (?defs:#def ... ?rest ...)) :
      if not empty?(rest) :
         fatal("Invalid syntax: The following forms are not defs: %*" % [join(rest, " ")])
      parse-syntax[core / #exp](compile(DefAst(defs)))

;======== COMPILATION ========
defn fill-each<?T> (f: T -> Collection<KeyValue<Symbol,?>>, xs:Seqable<?T>) :
   nested(to-list(seq(f, xs)))

defn compile (d:DefAst) :
   ;Type Tables
   val type-table = to-list $
      for e in filter({_ is DefType}, defs(d)) seq :
         val e* = e as DefType
         name(e*) => e*
   defn typefields (n:Symbol) :
      fields(lookup(type-table, n))

   ;Save AST Structure
   for def in filter({_ is DefNodes}, defs(d)) as Seqable<DefNodes> do :
      val tfs = typefields(type(def))
      val nodes = for n in nodes(def) map :
         val fs = append(fields(n), tfs)
         name(n) => map(name, fs)
      AST-TABLE[type(def)] = ASTStructure(nodes)   

   ;Node Table
   val node-table = to-list $
      for e in filter({_ is DefNodes}, defs(d)) seq :
         val e* = e as DefNodes
         type(e*) => nodes(e*)
   defn nodes-of (n:Symbol) :
      lookup(node-table, n)

   ;Mapper Table
   val mapper-table = Vector<KeyValue<[?, ?], Symbol>>()
   val doer-table = Vector<KeyValue<[?, ?], Symbol>>()
   val all-mappers = Vector<?>()
   val all-doers = Vector<?>()

   defn fn-name (type:Symbol, ftype, xtype) :
      val ftype* = unwrap-all(ftype)
      val xtype* = unwrap-all(xtype)
      val [table, all-table] = switch {type == _} :
         `mapper : [mapper-table, all-mappers]
         `doer : [doer-table, all-doers]
      val e = for e in table find :
         key(e) == [ftype*, xtype*]
      match(e) :
         (e:KeyValue<[?, ?], Symbol>) :
            value(e)
         (e:False) :
            if contains?(all-table, xtype*) : false
            else : fatal("No %_ for function %_ for type %_." % [type, ftype, xtype])      
   defn mapper-name (ftype, xtype) :
      fn-name(`mapper, ftype, xtype)
   defn doer-name (ftype, xtype) :
      fn-name(`doer, ftype, xtype)
         
   for d in defs(d) do :      
      match(d) :
         (d:DefMapper|DefDoer) :
            val ftype = unwrap-all(type(d))
            val [table, all-table] = match(d) :
               (d:DefMapper) : [mapper-table, all-mappers]
               (d:DefDoer) : [doer-table, all-doers]
            for c in clauses(d) do :
               val xtype = unwrap-all(type(c))
               add(table, [ftype, xtype] => gensym())
               add(all-table, xtype)
         (d:Ignore) :
            do(add{all-mappers, unwrap-all(_)}, types(d))
            do(add{all-doers, unwrap-all(_)}, types(d))
         (d) : false

   ;Compile DefType
   defn compile (d:DefType) :
      val template = `(deftype name parent?{<: parent}{})
      fill-template(template, [
         `name => name(d)
         `parent? => choice(parent(d) is-not False)
         `parent => parent(d)])

   ;Compile DefNodes
   defn compile (d:DefNodes) :
      val tfs = typefields(type(d))
      defn comp (n:Node) :
         val template = `(defstruct name <: type : (fs tfs) with : options)
         fill-template(template, [
            `name => name(n),
            `type => type(d),
            `fs => splice(to-list(seq-cat(comp, fields(n)))),
            `tfs => splice(to-list(seq-cat(comp, tfs)))
            `options => options(n)])
      defn comp (f:Field) :
         qquote(~ (name(f)) : ~ (type(f)) with : ~ (options(f)))
      seq-append(comp, nodes(d))

   ;Compile DefMapper
   defn compile (dm:DefMapper|DefDoer) :
      val forms = Vector<?>()
      for c in clauses(dm) do :
         val template = `(defn #name (f:ftype, x:xtype) : body)
         val #name = match(dm) :
            (dm:DefMapper) : mapper-name(type(dm), type(c))
            (dm:DefDoer) : doer-name(type(dm), type(c))
         val filled = fill-template(template, [
            `#name => #name
            `f => f(dm)
            `ftype => type(dm)
            `x => x(c)
            `xtype => type(c)
            `body => body(c)])
         add(forms, filled)
      to-list(forms)

   ;Compile Ignore
   defn compile (ig:Ignore) :
      `()

   ;Compile MakeMapper
   defn compile (m:MakeMapper) :
      ;Compiling a field
      defn compile (x:Symbol, f:Symbol, fd:Field) :
         val template = `(ignore?{name(x)}{#f(f, name(x))})
         val #f = mapper-name(ftype(m), type(fd))
         fill-template(template, [
            `name => name(fd)
            `x => x
            `f => f
            `#f => #f
            `ignore? => choice(#f is False)])
            
      ;Compiling main map function
      val template = `(
         defn map<?T> (f:ft, x:?T&xt) -> T :
            {_ as T&xt} $ match(x) :
               nodes{(x:Node) : Node(fs)})
      fill-template(template, [
         `T => gensym()
         `f => f(m)
         `ft => ftype(m)
         `x => x(m)
         `xt => xtype(m)
         `nodes => for n in nodes-of(xtype(m)) fill-each :
            val fs = append(fields(n), typefields(xtype(m)))
            [`Node => name(n)
             `fs => splice $ map(compile{x(m), f(m), _}, fs)]])

   ;Compile MakeDoer
   defn compile (m:MakeDoer) :
      ;Compiling a field
      defn compile (x:Symbol, f:Symbol, fd:Field) :
         val template = `(ignore?{}{#f(f, name(x))})
         val #f = doer-name(ftype(m), type(fd))
         fill-template(template, [
            `name => name(fd)
            `x => x
            `f => f
            `#f => #f
            `ignore? => choice(#f is False)])
            
      ;Compiling main map function
      val template = `(
         defn do (f:ft, x:xt) -> False :
            match(x) :
               nodes{(x:Node) :
                  fs
                  false})
      fill-template(template, [
         `f => f(m)
         `ft => ftype(m)
         `x => x(m)
         `xt => xtype(m)
         `nodes => for n in nodes-of(xtype(m)) fill-each :
            val fs = append(fields(n), typefields(xtype(m)))
            [`Node => name(n)
             `fs => splice $ seq-append(compile{x(m), f(m), _}, fs)]])

   ;Driver
   List $ for d in defs(d) map :
      compile(d as DefType|DefNodes|DefMapper|MakeMapper|DefDoer|MakeDoer|Ignore)