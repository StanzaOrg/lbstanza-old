defpackage stz/el-basic-blocks :
  import core
  import collections
  import stz/el-ir
  import stz/basic-blocks
  import stz/el-unique-ids
  import stz/el-trace-info

;============================================================
;================== Basic Block Analysis ====================
;============================================================

;A basic block table represents a collection of basic blocks.
;The blocks are meant to be laid out in order when we
;generate the final instructions.
public deftype BasicBlockTable <: Collection<BBlock>

;Retrieve the block with the given label.
public defmulti get (t:BasicBlockTable, lbl:Int) -> BBlock

;Representation of a basic block.
;- lbl: the label of the block.
;- successors: the labels of all successor blocks.
;- predecessors: the labels of all predecessor blocks.
;- instructions: the instructions in the block. Includes any
;  necessary gotos/ifs/matches to advance to the successor blocks
;  if necessary.
public defstruct BBlock :
  lbl: Int
  successors: Tuple<Int>
  predecessors: Tuple<Int>
  instructions: Tuple<EIns>

;============================================================
;====================== Algorithm ===========================
;============================================================

;Create the basic block table from the given instructions.
public defn analyze-basic-blocks (ins:Tuple<EIns>) -> BasicBlockTable :
  ;Map upon f on all label identifiers in the given instruction.
  ;Note that we do not handle goto or label instructions because
  ;they are generated explicitly from the output of the analyze-basic-blocks
  ;algorithm.
  defn map-label (f:Int -> Int, e:EIns) -> EIns :
    defn B (b:EBranch) : EBranch(types(b), f(n(b)), info(b))
    match(e) :
      (e:EIf) : EIf(f(n1(e)), f(n2(e)), op(e), ys(e))
      (e:EMatch|EDispatch) : sub-branches(e, map(B,branches(e)))
      (e:EGoto|ELabel) : fatal("Unreachable")
      (e) : e

  ;Create input to basic block algorithm
  defn basic-block-algorithm-input () :
    new Instructions :
      defmethod length (this) : length(ins)
      defmethod unique-label (this) : uniqueid()
      defmethod classify (this, i:Int) :
        match(ins[i]) :
          (ins:EIf) : JumpInstruction([n1(ins), n2(ins)])
          (ins:EMatch) : JumpInstruction(map(n,branches(ins)))
          (ins:EDispatch) : JumpInstruction(map(n,branches(ins)))
          (ins:EReturn) : JumpInstruction([])
          (ins:EEnd) : JumpInstruction([])
          (ins:ETCall) : JumpInstruction([])
          (ins:EGoto) : GotoInstruction(n(ins))
          (ins:ELabel) : LabelInstruction(n(ins))
          (ins) : StandardInstruction()

  ;Construct BBlock output from output of basic block algorithm.
  defn to-bblock (bt:BlockTable, b:Block) :
    val instructions* = to-tuple $ for i in instructions(b) seq :
      match(i) :
        (i:Int) : map-label(renamed-label{bt, _}, ins[i])
        (ins:LabelInstruction) : ELabel(n(ins))
        (ins:GotoInstruction) : EGoto(n(ins))
    BBlock(n(b), succs(b), preds(b), instructions*)

  ;Launch!
  val bt = analyze-basic-blocks $ basic-block-algorithm-input()
  val blocks = to-tuple $ seq(to-bblock{bt, _}, blocks(bt))
  val block-table = to-inttable<BBlock> $ for b in blocks seq : lbl(b) => b

  ;Construct output structure.
  new BasicBlockTable :
    defmethod to-seq (this) : to-seq(blocks)
    defmethod get (this, lbl:Int) : block-table[lbl]