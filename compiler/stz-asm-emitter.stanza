;See License.txt for details about licensing.

defpackage stz/asm-emitter :
   import core
   import collections
   import stz/asm-ir
   import stz/utils
   import stz/ids
   import stz/imms

;============================================================
;================== Restrictions ============================
;============================================================

defn check-restriction (ins:Ins) :
   ;     Error
   ;     -----
   defn RE () : fatal("Instruction %_ does not satisfy restrictions." % [ins])
      
   ;     Types of Types
   ;     --------------
   defn #L (t:Type) : t is LongType
   defn #I (t:Type) : t is IntType
   defn #B (t:Type) : t is ByteType
   defn #F (t:Type) : t is FloatType
   defn #D (t:Type) : t is DoubleType
   defn #BI (t:Type) : t is ByteType|IntType
   defn #IL (t:Type) : t is IntType|LongType
   defn #i (t:Type) : t is IntegerType
   defn #f (t:Type) : t is RealType

   ;     Assumptions about Immediates
   ;     ----------------------------
   defn #SR! (x:Imm) : RE() when x is-not RegSP|Reg
   defn #SRI! (x:Imm) : RE() when x is-not RegSP|Reg|IntImm|ByteImm|LongImm
   defn #SRIM! (x:Imm) : RE() when x is-not RegSP|Reg|IntImm|ByteImm|LongImm|Mem|ExMem
   defn #R! (x:Imm) : RE() when x is-not Reg
   defn #RI! (x:Imm) : RE() when x is-not Reg|IntImm|ByteImm|LongImm
   defn #F! (x:Imm) : RE() when x is-not FReg
   defn #SRM! (x:Imm) : RE() when x is-not RegSP|Reg|Mem|ExMem
   defn #RM! (x:Imm) : RE() when x is-not Reg|Mem|ExMem
   defn #M! (x:Imm) : RE() when x is-not Mem|ExMem
   defn #R! (x:Imm, num:Int) :
      #R!(x)
      RE() when n(x as Reg) != num
   defn #R0! (x:Imm) : #R!(x, 0)
   defn #R3! (x:Imm) : #R!(x, 3)
   defn #IR2! (x:Imm) :
      match(x) :
         (x:Reg) : RE() when n(x) != 2
         (x:IntImm|ByteImm|LongImm) : false
         (x) : RE()

   ;     Assumptions about Operators
   ;     ---------------------------
   defn #DIVMOD! (op:Op) : RE() when op is-not DivModOp

   ;     Compound Assumptions
   ;     --------------------
   defn #nII! (x:Imm, y:Imm) :
      match(x, y) :
         (x:IntImm|ByteImm|LongImm, y:IntImm|ByteImm|LongImm) : RE()
         (x, y) : false
   defn #neq! (x:Imm, y:Imm) :
      RE() when x == y
   defn #neq! (x:Type, y:Type) :
      RE() when x == y

   ;     Dispatch on type of instruction
   ;     -------------------------------
   match(ins) :
      (ins:SetIns) :
         val [t, x, y] = [type(ins), x(ins), y(ins)]
         switch _{t} :
            #L : (#SR!(x), #SRIM!(y))
            #i : (#R!(x), #RI!(y))
            #f : (#F!(x), #F!(y))
      (ins:XchgIns) :
         val [x, y] = [x(ins), y(ins)]
         #R!(x), #R!(y)
      (ins:ConvertIns) :
         val [xt, yt, x, y] = [xtype(ins), ytype(ins), x(ins), y(ins)]
         if #i(xt) and #i(yt) : (#R!(x), #R!(y))
         else if #f(xt) and #f(yt) : (#F!(x), #F!(y))
         else if #IL(xt) and #f(yt) : (#R!(x), #F!(y))
         else if #f(xt) and #IL(yt) : (#F!(x), #R!(y))
         else : RE()
      (ins:ReinterpretIns) :
         val [xt, yt, x, y] = [xtype(ins), ytype(ins), x(ins), y(ins)]
         #SR!(x) when #i(xt)
         #F!(x) when #f(xt)
         #SR!(y) when #i(yt)
         #F!(y) when #f(yt)
         if #I(xt) : (RE() when not (#I(yt) or #F(yt)))
         else if #L(xt) : (RE() when not (#L(yt) or #D(yt)))
         else if #F(xt) : (RE() when not (#I(yt) or #F(yt)))
         else if #D(xt) : (RE() when not (#L(yt) or #D(yt)))
         else : RE()
      (ins:UnaOp) :
         val [t, x, y, op] = [type(ins), x(ins), y(ins), op(ins)]
         if #L(t) : (#SR!(x), #SR!(y))
         else if #I(t) : (#R!(x), #R!(y))
         else : RE()
      (ins:BinOp) :
         val [t, x, y, z, op] = [type(ins), x(ins), y(ins), z(ins), op(ins)]
         if #L(t) :
            defn com-op () : (#SR!(x), #SRI!(y), #SRI!(z))
            defn ncom-op () : (#SR!(x), #SRI!(y), #SRI!(z), #neq!(x, z))
            defn shf-op () : (#SR!(x), #SRI!(y), #IR2!(z), #neq!(x, z))
            defn cmp-op () : (#R!(x), #SRI!(y), #SRI!(z), #nII!(y,z))
            match(op) :
               (op:AddOp) : com-op()
               (op:SubOp) : ncom-op()
               (op:MulOp) : com-op()
               (op:AndOp) : com-op()
               (op:OrOp) : com-op()
               (op:XorOp) : com-op()
               (op:ShlOp) : shf-op()
               (op:ShrOp) : shf-op()
               (op:AshrOp) : shf-op()
               (op:EqOp) : cmp-op() 
               (op:NeOp) : cmp-op()
               (op:LtOp) : cmp-op()
               (op:GtOp) : cmp-op()
               (op:LeOp) : cmp-op()
               (op:GeOp) : cmp-op()
               (op:UleOp) : cmp-op()
               (op:UltOp) : cmp-op()
               (op:UgtOp) : cmp-op()
               (op:UgeOp) : cmp-op()
               (op) : RE()
         else if #I(t) :
            defn com-op () : (#R!(x), #RI!(y), #RI!(z))
            defn ncom-op () : (#R!(x), #RI!(y), #RI!(z), #neq!(x, z))
            defn shf-op () : (#R!(x), #RI!(y), #IR2!(z), #neq!(x, z))
            defn cmp-op () : (#R!(x), #RI!(y), #RI!(z), #nII!(y,z))
            match(op) :
               (op:AddOp) : com-op()
               (op:SubOp) : ncom-op()
               (op:MulOp) : com-op()
               (op:AndOp) : com-op()
               (op:OrOp) : com-op()
               (op:XorOp) : com-op()
               (op:ShlOp) : shf-op()
               (op:ShrOp) : shf-op()
               (op:AshrOp) : shf-op()
               (op:EqOp) : cmp-op() 
               (op:NeOp) : cmp-op()
               (op:LtOp) : cmp-op()
               (op:GtOp) : cmp-op()
               (op:LeOp) : cmp-op()
               (op:GeOp) : cmp-op()
               (op:UleOp) : cmp-op()
               (op:UltOp) : cmp-op()
               (op:UgtOp) : cmp-op()
               (op:UgeOp) : cmp-op()
               (op) : RE()
         else if #B(t) :
            defn com-op () : (#R!(x), #RI!(y), #RI!(z))
            defn ncom-op () : (#R!(x), #RI!(y), #RI!(z), #neq!(x, z))
            defn shf-op () : (#R!(x), #RI!(y), #IR2!(z), #neq!(x, z))
            defn cmp-op () : (#R!(x), #RI!(y), #RI!(z), #nII!(y,z))
            match(op) :
               (op:AddOp) : com-op()
               (op:SubOp) : ncom-op()
               (op:AndOp) : com-op()
               (op:OrOp) : com-op()
               (op:XorOp) : com-op()
               (op:ShlOp) : shf-op()
               (op:ShrOp) : shf-op()
               (op:AshrOp) : shf-op()
               (op:EqOp) : cmp-op() 
               (op:NeOp) : cmp-op()
               (op:LtOp) : cmp-op()
               (op:GtOp) : cmp-op()
               (op:LeOp) : cmp-op()
               (op:GeOp) : cmp-op()
               (op:UleOp) : cmp-op()
               (op:UltOp) : cmp-op()
               (op:UgtOp) : cmp-op()
               (op:UgeOp) : cmp-op()
               (op) : RE()
         else if #f(t) :
            defn reg-op () : (#F!(x), #F!(y), #F!(z))
            defn ncom-op () : (#F!(x), #F!(y), #F!(z), #neq!(x, z))
            defn cmp-op () : (#R!(x), #F!(y), #F!(z))
            match(op) :
               (op:AddOp) : reg-op()
               (op:SubOp) : ncom-op()
               (op:MulOp) : reg-op()
               (op:DivOp) : ncom-op()
               (op:EqOp) : cmp-op() 
               (op:NeOp) : cmp-op()
               (op:LtOp) : cmp-op()
               (op:GtOp) : cmp-op()
               (op:LeOp) : cmp-op()
               (op:GeOp) : cmp-op()
               (op:UleOp) : cmp-op()
               (op:UltOp) : cmp-op()
               (op:UgtOp) : cmp-op()
               (op:UgeOp) : cmp-op()
               (op) : RE()
         else : RE()
      (ins:DualOp) :
         val [t, x1, x2, op, y, z] = [type(ins), x1(ins), x2(ins), op(ins), y(ins), z(ins)]
         if #IL(t) : (#R0!(x1), #R3!(x2), #R!(y), #R!(z), #DIVMOD!(op), #neq!(x1, z), #neq!(x2, z))
         else : RE()
      (ins:Load) :
         val [t, x, y] = [type(ins), x(ins), y(ins)]
         if #L(t) : (#SR!(x), #SRIM!(y))
         else if #i(t) : (#R!(x), #SRIM!(y))
         else if #f(t) : (#F!(x), #SRIM!(y))
         else : RE()
      (ins:Store) :
         val [t, x, y] = [type(ins), x(ins), y(ins)]
         if #L(t) : (#SRIM!(x), #SRI!(y))
         else if #i(t) : (#SRIM!(x), #RI!(y))
         else if #f(t) : (#SRIM!(x), #F!(y))
         else : RE()
      (ins:Call) :
         #RM!(x(ins))
      (ins:Return) :
         false
      (ins:Goto) :
         #RM!(x(ins))
      (ins:Branch) :
         val [t, x, op, y, z] = [type(ins), x(ins), op(ins), y(ins), z(ins)]
         if #L(t) : (#M!(x), #SRI!(y), #SRI!(z), #nII!(y,z))
         else if #i(t) : (#M!(x), #RI!(y), #RI!(z), #nII!(y,z))
         else if #f(t) : (#M!(x), #F!(y), #F!(z))
         else : RE()
      (ins:Label|ExLabel) :
         false
      (ins:DefData|DefText|DefByte|DefInt|DefLong|
           DefFloat|DefDouble|DefString|DefSpace|DefLabel) :
         false      




;============================================================
;====================== Emitter =============================
;============================================================

;         Names of Registers for Different Types
;         ======================================

val REG-LONG-NAMES = [
   "%rax", "%rbx", "%rcx", "%rdx", "%rsi", "%rdi", "%rbp", "%r8",
   "%r9", "%r10", "%r11", "%r12", "%r13", "%r14", "%r15"]

val REG-INT-NAMES = [
   "%eax", "%ebx", "%ecx", "%edx", "%esi", "%edi", "%ebp", "%r8d",
   "%r9d", "%r10d", "%r11d", "%r12d", "%r13d", "%r14d", "%r15d"]

val REG-BYTE-NAMES = [
   "%al", "%bl", "%cl", "%dl", "%sil", "%dil", "%bpl", "%r8b",
   "%r9b", "%r10b", "%r11b", "%r12b", "%r13b", "%r14b", "%r15b"]

val REG-FLOAT-NAMES = [
   "%xmm0", "%xmm1", "%xmm2", "%xmm3",
   "%xmm4", "%xmm5", "%xmm6", "%xmm7",
   "%xmm8", "%xmm9", "%xmm10", "%xmm11",
   "%xmm12", "%xmm13", "%xmm14", "%xmm15"]


;               Generation of Instructions
;               ==========================

defn gen (ins:Ins) :
   ;     Utilities
   ;     ---------
   defn pr (x) : println(x)
   defn cms (xs:Seqable) : join(xs, ", ")   
   defn chars (s:String) :
      val n = length(s) + 1
      val rem = ((n + 3) & -4) - n
      cat(seq(to-int, s), repeat(0, 1 + rem))
   defn #lbl (n:Int) : "__L%_" % [n]
   defn #lbl (i:Mem) : #lbl(n(i))
   defn #lbl (i:ExMem) : name(i)

   ;     Predicates for Types
   ;     --------------------
   defn #B (t:Type) : t is ByteType
   defn #I (t:Type) : t is IntType
   defn #L (t:Type) : t is LongType
   defn #IL (t:Type) : t is IntType|LongType
   defn #i (t:Type) : t is IntegerType
   defn #f (t:Type) : t is RealType

   ;     Size Suffix
   ;     -----------
   defn size-suffix (t:Type) :
      match(t) :
         (t:ByteType) : "b"
         (t:IntType) : "l"
         (t:LongType) : "q"
         (t:FloatType) : "s"
         (t:DoubleType) : "d"

   ;     Immediate Names
   ;     ---------------
   defn #imm (t:Type, x:Imm) :
      match(x) :
         (x:IntImm|ByteImm|LongImm) :
            "$%_" % [value(x)]
         (x:Reg) :
            match(t) :
               (t:ByteType) : REG-BYTE-NAMES[n(x)]
               (t:IntType) : REG-INT-NAMES[n(x)]
               (t:LongType) : REG-LONG-NAMES[n(x)]
         (x:FReg) :
            REG-FLOAT-NAMES[n(x)]
         (x:RegSP) :
            "%rsp"

   ;     Set Instruction
   ;     ---------------
   defn #set (t:Type, x:Loc, y:Imm) :
      match(y) :
         (y:Mem|ExMem) :
            pr("   leaq (%_ + %_)(%%rip), %_" % [#lbl(y), offset(y), #imm(t,x)])
         (y) :
            if #i(t) : pr("   mov%_ %_, %_" % [size-suffix(t), #imm(t,y), #imm(t,x)])
            else if #f(t) : pr("   movs%_ %_, %_" % [size-suffix(t), #imm(t,y), #imm(t,x)])
            else : fatal("Unreachable")      

   ;     Convert Instruction
   ;     -------------------
   defn #conv (x:Loc, y:Imm, xtype:Type, ytype:Type) :
      val xsz = size-suffix(xtype)
      val ysz = size-suffix(ytype)

      ;Integer to Integer Conversions
      if #i(xtype) and #i(ytype) :
         defn int-less-eq? (a:Type, b:Type) :
            if #L(a) : #L(b)
            else if #I(a) : #IL(b)
            else : true
         ;Truncation Conversion   
         if int-less-eq?(xtype, ytype) :
            #set(xtype, x, y)
         ;Extension Conversion   
         else :
            val mov = "movz" when #B(ytype) else "movs"
            pr("   %_%_%_ %_, %_" % [mov, ysz, xsz, #imm(ytype, y), #imm(xtype, x)])
            
      ;Float to Float Conversions
      else if #f(xtype) and #f(ytype) :
         ;If Equal
         if xtype == ytype :
            #set(xtype, x, y)
         else :
            pr("   cvts%_2s%_ %_, %_" % [ysz, xsz, #imm(ytype, y), #imm(xtype, x)])
         
      ;Float to Integer Conversions
      else if #i(xtype) and #f(ytype) :
         pr("   cvtts%_2si%_ %_, %_" % [ysz, xsz, #imm(ytype, y), #imm(xtype, x)])
            
      ;Integer to Float Conversions      
      else if #f(xtype) and #i(ytype) :
         pr("   cvtsi2s%_%_ %_, %_" % [xsz, ysz, #imm(ytype, y), #imm(xtype, x)])
            
      ;Error      
      else :
         fatal("Unreachable")

   ;     Reinterpret Instruction
   ;     -----------------------
   defn #inter (x:Loc, y:Imm, xtype:Type, ytype:Type) :
      val xsz = size-suffix(xtype)
      val ysz = size-suffix(ytype)

      ;Noop Conversions
      if xtype == ytype :
         #set(xtype, x, y)
      ;Float to Integer Conversions
      if #i(xtype) and #f(ytype) :
         pr("   movq %_, %_" % [#imm(DoubleType(),y), #imm(LongType(),x)])
      ;Integer to Float Conversions
      else if #f(xtype) and #i(ytype) :
         pr("   movq %_, %_" % [#imm(LongType(),y), #imm(DoubleType(),x)])
      else :
         fatal("Unreachable")

   ;     Save/Load Instructions
   ;     ----------------------
   defn #load (t:Type, x:Loc, y:Imm, o:Int) :
      val sz = size-suffix(t)
      val mov = if #i(t) : "mov"
                else if #f(t) : "movs"
                else : fatal("Unreachable")
      match(y) :
         (y:Reg|RegSP) : pr("   %_%_ %_(%_), %_" % [mov, sz, o, #imm(LongType(), y), #imm(t, x)])
         (y:Mem|ExMem) : pr("   %_%_ (%_ + %_)(%%rip), %_" % [mov, sz, #lbl(y), o + offset(y), #imm(t, x)])
         (y:IntImm|ByteImm|LongImm) : pr("   %_%_ (%_ + %_), %_" % [mov, sz, value(y), o, #imm(t, x)])

   defn #store (t:Type, x:Imm, y:Imm, o:Int) :
      val sz = size-suffix(t)
      val mov = if #i(t) : "mov"
                else if #f(t) : "movs"
                else : fatal("Unreachable")
      match(x) :
         (x:Reg|RegSP) : pr("   %_%_ %_, %_(%_)" % [mov, sz, #imm(t, y), o, #imm(LongType(), x)])
         (x:Mem|ExMem) : pr("   %_%_ %_, (%_ + %_)(%%rip)" % [mov, sz, #imm(t, y), #lbl(x), o + offset(x)])
         (x:IntImm|ByteImm|LongImm) : pr("   %_%_ %_, (%_ + %_)" % [mov, sz, #imm(t, y), value(x), o])

   defn #una (t:Type, x:Loc, op:Op, y:Imm) :
      val sz = size-suffix(t)
      val comm = match(op) :
         (op:NotOp) : "not"
         (op:NegOp) : "neg"
      if x == y :
         pr("   %_%_ %_" % [comm, sz, #imm(t,x)])
      else :
         #set(t, x, y)
         #una(t, x, op, x)

   defn #com (t:Type, x:Loc, y:Imm, op:Op, z:Imm) :
      val sz = size-suffix(t)
      val comm = match(op) :
         (op:AddOp) : "add"
         (op:MulOp) : "imul"
         (op:AndOp) : "and"
         (op:OrOp) : "or"
         (op:XorOp) : "xor"
      if x == y :
         pr("   %_%_ %_, %_" % [comm, sz, #imm(t,z), #imm(t,x)])
      else if x == z :
         pr("   %_%_ %_, %_" % [comm, sz, #imm(t,y), #imm(t,x)])
      else :
         #set(t, x, y)
         #com(t, x, x, op, z)

   defn #ncom (t:Type, x:Loc, y:Imm, op:Op, z:Imm) :
      val sz = size-suffix(t)
      val comm = match(op) :
         (op:SubOp) : "sub"
      if x == y :
         pr("   %_%_ %_, %_" % [comm, sz, #imm(t,z), #imm(t,x)])
      else :
         #set(t, x, y)
         #ncom(t, x, x, op, z)

   defn #shf (t:Type, x:Loc, y:Imm, op:Op, z:Imm) :
      val sz = size-suffix(t)
      val comm = match(op) :
         (op:ShlOp) : "shl"
         (op:ShrOp) : "shr"
         (op:AshrOp) : "sar"
      if x == y :
         pr("   %_%_ %_, %_" % [comm, sz, #imm(ByteType(), z), #imm(t,x)])
      else :
         #set(t, x, y)
         #shf(t, x, x, op, z)

   defn #div (t:Type, x:Loc, y:Imm, op:Op, z:Imm) :
      pr("   movzbw %_, %%ax" % [#imm(t, y)])
      pr("   idivb %_" % [#imm(t, z)])
      pr("   shrw $8, %%ax") when op is ModOp

   defn #cmp (t:Type, x:Loc, y:Imm, op:Op, z:Imm) :
      val comm = cmp-suffix(op)
      val sz = size-suffix(t)
      match(y, z) :
         (y:Reg, z) :
            pr("   cmp%_ %_, %_" % [sz, #imm(t,z), #imm(t,y)])
            pr("   movq $0, %_" % [#imm(LongType(), x)])
            pr("   set%_ %_" % [comm, #imm(ByteType(), x)])
         (y, z:Reg) :
            #cmp(t, x, z, flip(op), y)

   defn cmp-suffix (op:Op) :
      match(op) :
         (op:EqOp) : "e"
         (op:NeOp) : "ne"
         (op:LtOp) : "l"
         (op:GtOp) : "g"
         (op:LeOp) : "le"
         (op:GeOp) : "ge"
         (op:UleOp) : "be"
         (op:UltOp) : "b"
         (op:UgtOp) : "a"
         (op:UgeOp) : "ae"

   defn #fcom (t:Type, x:Loc, y:Imm, op:Op, z:Imm) :
      val sz = size-suffix(t)
      val comm = match(op) :
         (op:AddOp) : "adds"
         (op:MulOp) : "muls"
      if x == y :
         pr("   %_%_ %_, %_" % [comm, sz, #imm(t,z), #imm(t,x)])
      else if x == z :
         pr("   %_%_ %_, %_" % [comm, sz, #imm(t,y), #imm(t,x)])
      else :
         #set(t, x, y)
         #fcom(t, x, x, op, z)

   defn #fncom (t:Type, x:Loc, y:Imm, op:Op, z:Imm) :
      val sz = size-suffix(t)
      val comm = match(op) :
         (op:SubOp) : "subs"
         (op:DivOp) : "divs"
      if x == y :
         pr("   %_%_ %_, %_" % [comm, sz, #imm(t,z), #imm(t,x)])
      else :
         #set(t, x, y)
         #fncom(t, x, x, op, z)

   defn fcmp-suffix (op:Op) :
      match(op) :
         (op:EqOp) : "e"
         (op:NeOp) : "ne"
         (op:LeOp) : "be"
         (op:LtOp) : "b"
         (op:GtOp) : "a"
         (op:GeOp) : "ae"

   defn #fcmp (t:Type, x:Loc, y:Imm, op:Op, z:Imm) :
      val comm = fcmp-suffix(op)
      val sz = size-suffix(t)
      match(y, z) :
         (y:FReg, z:FReg) :
            pr("   ucomis%_ %_, %_" % [sz, #imm(t,z), #imm(t,y)])
            pr("   movq $0, %_" % [#imm(LongType(), x)])
            pr("   set%_ %_" % [comm, #imm(ByteType(), x)])

   defn #br (t:Type, x:Imm, y:Imm, op:Op, z:Imm) :
      val sz = size-suffix(t)
      val comm = cmp-suffix(op)
      match(y, z) :
         (y:Reg, z) :
            val x = x as Mem|ExMem
            pr("   cmp%_ %_, %_" % [sz, #imm(t,z), #imm(t,y)])
            pr("   j%_ %_ + %_" % [comm, #lbl(x), offset(x)])
         (y, z:Reg) :
            #br(t, x, z, flip(op), y)

   defn #fbr (t:Type, x:Imm, y:Imm, op:Op, z:Imm) :
      val sz = size-suffix(t)
      val comm = fcmp-suffix(op)
      match(y, z) :
         (y:FReg, z:FReg) :
            val x = x as Mem|ExMem
            pr("   ucomis%_ %_, %_" % [sz, #imm(t,z), #imm(t,y)])
            pr("   j%_ %_ + %_" % [comm, #lbl(x), offset(x)])

   ;     Dual Divide Operator
   ;     --------------------
   defn #divmod (t:Type, x1:Loc, x2:Loc, y:Imm, op:Op, z:Imm) :
      val sz = size-suffix(t)
      if x1 == y :
         match(t) :
            (t:LongType) : pr("   cqo")
            (t:IntType) : pr("   cdq")
         pr("   idiv%_ %_" % [sz, #imm(t,z)])
      else :
         #set(t, x1, y)
         #divmod(t, x1, x2, x1, op z)

   ;====== Driver ======
   match(ins) :
      (ins:XchgIns) :
         val t = LongType()
         val [x, y] = [x(ins), y(ins)]
         pr("   xchgq %_, %_" % [#imm(t,x), #imm(t,y)])
      (ins:SetIns) :
         val [t, x, y] = [type(ins), x(ins), y(ins)]
         #set(t, x, y)
      (ins:UnaOp) :
         val [t, x, op, y] = [type(ins), x(ins), op(ins), y(ins)]
         #una(t, x, op, y)
      (ins:BinOp) :
         val [t, x, op, y, z] = [type(ins), x(ins), op(ins), y(ins), z(ins)]
         if #i(t) :
            match(op) :
               (op:AddOp) : #com(t, x, y, op, z)
               (op:SubOp) : #ncom(t, x, y, op, z)
               (op:MulOp) : #com(t, x, y, op, z)
               (op:AndOp) : #com(t, x, y, op, z)
               (op:OrOp) : #com(t, x, y, op, z)
               (op:XorOp) : #com(t, x, y, op, z)
               (op:ShlOp) : #shf(t, x, y, op, z)
               (op:ShrOp) : #shf(t, x, y, op, z)
               (op:AshrOp) : #shf(t, x, y, op, z)
               (op:EqOp) : #cmp(t, x, y, op, z)
               (op:NeOp) : #cmp(t, x, y, op, z)
               (op:LtOp) : #cmp(t, x, y, op, z)
               (op:GtOp) : #cmp(t, x, y, op, z)
               (op:LeOp) : #cmp(t, x, y, op, z)
               (op:GeOp) : #cmp(t, x, y, op, z)
               (op:UleOp) : #cmp(t, x, y, op, z)
               (op:UltOp) : #cmp(t, x, y, op, z)
               (op:UgtOp) : #cmp(t, x, y, op, z)
               (op:UgeOp) : #cmp(t, x, y, op, z)
         else if #f(t) :
            match(op) :
               (op:AddOp) : #fcom(t, x, y, op, z)
               (op:SubOp) : #fncom(t, x, y, op, z)
               (op:MulOp) : #fcom(t, x, y, op, z)
               (op:DivOp) : #fncom(t, x, y, op, z)
               (op:EqOp) : #fcmp(t, x, y, op, z)
               (op:NeOp) : #fcmp(t, x, y, op, z)
               (op:LtOp) : #fcmp(t, x, y, op, z)
               (op:GtOp) : #fcmp(t, x, y, op, z)
               (op:LeOp) : #fcmp(t, x, y, op, z)
               (op:GeOp) : #fcmp(t, x, y, op, z)
               (op:UleOp) : #fcmp(t, x, y, op, z)
               (op:UltOp) : #fcmp(t, x, y, op, z)
               (op:UgtOp) : #fcmp(t, x, y, op, z)
               (op:UgeOp) : #fcmp(t, x, y, op, z)
      (ins:DualOp) :
         val [t, x1, x2, op, y, z] = [type(ins), x1(ins), x2(ins), op(ins), y(ins), z(ins)]
         #divmod(t, x1, x2, y, op, z)
      (ins:Load) :
         #load(type(ins), x(ins), y(ins), offset(ins))
      (ins:Store) :
         #store(type(ins), x(ins), y(ins), offset(ins))
      (ins:Label) :
         pr("%_:" % [#lbl(n(ins))])
      (ins:ExLabel) :
         pr("   .globl %_" % [name(ins)])
         pr("%_:" % [name(ins)])
      (ins:Goto) :
         match(x(ins)) :
            (x:Reg) : pr("   jmp *%_" % [#imm(LongType(), x)])
            (x:Mem|ExMem) : pr("   jmp %_ + %_" % [#lbl(x), offset(x)])
      (ins:Branch) :
         val [t, x, op, y, z] = [type(ins), x(ins), op(ins), y(ins), z(ins)]
         if #i(t) : #br(t, x, y, op, z)
         else if #f(t) : #fbr(t, x, y, op, z)
         else : fatal("Unreachable")
      (ins:Call) :
         match(x(ins)) :
            (x:Reg) : pr("   call *%_" % [#imm(LongType(), x)])
            (x:Mem|ExMem) : pr("   call %_ + %_" % [#lbl(x), offset(x)])
      (ins:ConvertIns) :
         #conv(x(ins), y(ins), xtype(ins), ytype(ins))
      (ins:ReinterpretIns) :
         #inter(x(ins), y(ins), xtype(ins), ytype(ins))
      (ins:Return) : pr("   ret")
      (ins:DefByte) : pr("   .byte %_" % [value(ins)])
      (ins:DefInt) : pr("   .long %_" % [value(ins)])
      (ins:DefLong) : pr("   .quad %_" % [value(ins)])
      (ins:DefFloat) : pr("   .long %_" % [bits(value(ins))])
      (ins:DefDouble) : pr("   .quad %_" % [bits(value(ins))])
      (ins:DefString) : pr("   .byte %*" % [cms(chars(value(ins)))])
      (ins:DefSpace) : pr("   .space %_" % [size(ins)]) when size(ins) > 0
      (ins:DefLabel) : pr("   .quad %_" % [#lbl(n(ins))])
      (ins:DefData) : pr("   .data")
      (ins:DefText) : pr("   .text")

;============================================================
;===================== Driver ===============================
;============================================================

public defn emit (ins:Collection<Ins>) :
   #if-not-defined(OPTIMIZE) :
      do(check-restriction, ins)
   do(gen, ins)


