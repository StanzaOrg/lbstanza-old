
;======== Single Bucket in ScopeBucket ========
defstruct Bucket :
   markers: Array<Int> with: (setter => set-markers)
   entries: Array<List<Int>> with: (setter => set-entries)
with :
   constructor => #Bucket
   
defn Bucket (n:Int) :
   #Bucket(Array<Int>(n, 0),
           Array<List<Int>>(n, List()))

defn ensure-length (b:Bucket, n:Int) :
   if n > length(markers(b)) :
      val n2 = max(n, length(markers(b)) * 2)
      val m = Array<Int>(n2, 0)
      val e = Array<List<Int>>(n2, List())
      for i in 0 to length(markers(b)) do :
         m[i] = markers(b)[i]
         e[i] = entries(b)[i]

defn marker? (b:Bucket, i:Int, m:Int) :
   val ms = markers(b)
   (length(ms) >= i) and (ms[i] == m)

defn add-entry (b:Bucket, i:Int, m:Int, v:Int) :
   ensure-length(b, i + 1)
   if markers(b)[i] == m :
      entries(b)[i] = List(v, entries(b)[i])
   else :
      markers(b)[i] = m
      entries(b)[i] = list(v)

;======== ScopeBucket ========
definterface ScopeBucket <: Streamable<KeyValue<Symbol, List<Int>>>
defmulti set (s:ScopeBucket, x:Symbol, i:Int) -> False
defmulti begin-scope (s:ScopeBucket) -> False
defmulti end-scope (s:ScopeBucket) -> False
defmulti get-local (s:ScopeBucket, x:Symbol, filter:Int -> True|False) -> List<Int>
defmulti get (s:ScopeBucket, x:Symbol, filter:Int -> True|False) -> List<Int>
defmulti get-top (s:ScopeBucket, x:Symbol, filter:Int -> True|False) -> List<Int>

defn ScopeBucket () :
   val table = HashTable<Symbol, Bucket>(symbol-hash)
   val scopes = Vector<Int>()
   val scope-counter = to-stream(1 to false)
   add(scopes, next(scope-counter))

   new ScopeBucket :
      defmethod set (this, x:Symbol, i:Int) :
         if not key?(table, x) :
            table[x] = Bucket(i + 8)
         val s = peek(scopes)
         val l = length(scopes) - 1
         add-entry(table[x], l, s, i)
      defmethod begin-scope (this) :
         add(scopes, next(scope-counter))
      defmethod end-scope (this) :
         pop(scopes)
         false
      defmethod get (this, x:Symbol, f:Int -> True|False) :
         if key?(table, x) :
            val b = table[x]
            val xs = for i in (length(scopes) - 1) through 0 by -1 search :
               if marker?(b, i, scopes[i]) :
                  val es = filter(f, entries(b)[i])
                  to-list(es) when more?(es)
            match(xs) :
               (xs:List<Int>) : xs
               (xs:False) : List()
         else :
            List()
      defmethod get-local (this, x:Symbol, f:Int -> True|False) :
         if key?(table, x) :
            val b = table[x]
            val i = length(scopes) - 1
            if marker?(b, i, scopes[i]) :
               to-list(filter(f, entries(b)[i]))
            else :
               List()   
         else :
            List()
      defmethod get-top (this, x:Symbol, f:Int -> True|False) :
         if key?(table, x) :
            val b = table[x]
            to-list(filter(f, entries(b)[0]))
         else :
            List()
      defmethod to-stream (this) :
         val s = peek(scopes)
         val i = length(scopes) - 1
         generate<KeyValue<Symbol,List<Int>>> :
            for entry in table do :
               val b = value(entry)
               if marker?(b, i, s) :
                  yield(key(entry) => entries(b)[i])
         

defn main () :
   defn pass (i:Int) : true
   
   val b = ScopeBucket()
   b[`x] = 1
   println(b[`x, pass])
   println(b[`y, pass])
   println(to-list(b))
   b[`x] = 2
   println(b[`x, pass])
   println(b[`y, pass])
   println(to-list(b))
   b[`y] = 3
   b[`y] = 5
   println(b[`x, pass])
   println(b[`y, pass])
   println(to-list(b))
   
   begin-scope(b)
      b[`x] = 0
      b[`y] = 5
      println(b[`x, pass])
      println(b[`y, pass])
      println(to-list(b))
   end-scope(b)

   println(b[`x, pass])
   println(b[`y, pass])
   println(to-list(b))

   begin-scope(b)
      b[`x] = 1
      begin-scope(b)
         b[`y] = 2
         println(b[`x, pass])
         println(b[`y, pass])
         println(get-top(b, `x, pass))
         println(get-local(b, `x, pass))
         println(to-list(b))
      end-scope(b)
      println(b[`x, pass])
      println(b[`y, pass])
      println(to-list(b))
   end-scope(b)

main()