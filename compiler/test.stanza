defstruct Bucket :
   markers: Array<Int> with: (setter => set-markers)
   entries: Array<List<Int>> with: (setter => set-entries)
defn Bucket (n:Int) :
   Bucket(Array<Int>(n, 0),
          Array<List<Int>>(n, List()))

defn ensure-length (b:Bucket, n:Int) :
   if n > length(markers(b)) :
      val n2 = max(n, length(markers(b)) * 2)
      val m = Array<Int>(n2, 0)
      val e = Array<List<Int>>(n2, List())
      for i in 0 to length(markers(b)) do :
         m[i] = markers(b)[i]
         e[i] = entries(b)[i]

definterface ScopeBucket
defmulti set (s:ScopeBucket, x:Symbol, i:Int) -> False
defmulti begin-scope (s:ScopeBucket) -> False
defmulti end-scope (s:ScopeBucket) -> False
defmulti get (s:ScopeBucket, x:Symbol, filter:Int -> True|False) -> List<Int>

defn ScopeBucket () :
   val table = HashTable<Symbol, Bucket>(symbol-hash)
   val scopes = Vector<Int>()
   val scope-counter = to-stream(1 to false)
   add(scopes, next(scope-counter))

   new ScopeBucket :
      defmethod set (this, x:Symbol, i:Int) :
         if not key?(table, x) :
            table[x] = Bucket(i + 8)
         val s = peek(scopes)
         val l = length(scopes) - 1
         val b = table[x]
         ensure-length(b, l + 1)
         if markers(b)[l] == s :
            entries(b)[l] = List(i, entries(b)[l])
         else :
            markers(b)[l] = s
            entries(b)[l] = list(i)
      defmethod begin-scope (this) :
         add(scopes, next(scope-counter))
      defmethod end-scope (this) :
         pop(scopes)
         false
      defmethod get (this, x:Symbol, filter:Int -> True|False) :
         if key?(table, x) :
            val b = table[x]
            label<List<Int>> return :
               for i in (length(scopes) - 1) through 0 by -1 do :
                  if scopes[i] == markers(b)[i] :
                     if not empty?(entries(b)[i]) :
                        return(entries(b)[i])
               List()
         else :
            List()

defn main () :
   defn pass (i:Int) : true
   
   val b = ScopeBucket()
   b[`x] = 1
   println(b[`x, pass])
   println(b[`y, pass])
   b[`x] = 2
   println(b[`x, pass])
   println(b[`y, pass])
   b[`y] = 3
   b[`y] = 5
   println(b[`x, pass])
   println(b[`y, pass])
   
   begin-scope(b)
      b[`x] = 0
      b[`y] = 5
      println(b[`x, pass])
      println(b[`y, pass])   
   end-scope(b)

   println(b[`x, pass])
   println(b[`y, pass])

   begin-scope(b)
      b[`x] = 1
      begin-scope(b)
         b[`y] = 2
         println(b[`x, pass])
         println(b[`y, pass])
      end-scope(b)
      println(b[`x, pass])
      println(b[`y, pass])
   end-scope(b)

main()