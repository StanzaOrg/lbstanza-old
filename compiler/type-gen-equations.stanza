defpackage stz/type-gen-equations :
  import core
  import collections
  import stz/types
  import stz/tl-ir2
  import stz/il-to-tl
  import stz/dl-ir
  import stz/tl-to-dl2
  import stz/type-equations
  import stz/namemap
  import stz/ids
  import stz/tl-formatter
  import stz/type-locs
  import stz/type-hierarchy

;============================================================
;================== Main Entry Point ========================
;============================================================

;Generate the type equations for the program.
public defn generate-type-equations (prog:TProg) -> False :

  within with-type-env() :
    ;Add top level definitions to typing environment.
    val packages-with-top-vars = map(add-top-level-variables, packages(prog))

    ;Add environment definitions to typing environment.
    within set-id-env(TypeIDEnv(namemap(prog))) :
      add-environment-types(environment(prog))

    val formatter = TLFormatter(prog)
    for p in packages-with-top-vars do :
      println(format(formatter, p))

    ;Set the active type hierarchy.
    let-var ACTIVE-TYPE-HIERARCHY = hierarchy(prog) :

      ;Collect type equations.
      val type-eqns = Vector<TypeEqn>()
      within collect-type-equations(type-eqns) :

        ;Generate equations for all packages.
        val packages-with-eqns = map(gen-equations, packages-with-top-vars)

        println("GENERATED TYPE EQUATIONS!")
        for p in packages-with-eqns do :
          println(format(formatter, p))

        for e in type-eqns do :
          println(format(formatter, e))

  fatal("Not yet implemented")

;============================================================
;=================== Type Environment =======================
;============================================================

;Each entry, V => T, means that the variable V has type
;type T. 
var TYPE-ENV:IntTable<Type|LSType>|False = false

;Execute the body with an active type environment.
defn with-type-env<?T> (body:() -> ?T) -> T :
  let-var TYPE-ENV = IntTable<Type|LSType>() :
    body()

;Retrieve the active type environment.
defn type-env! () -> IntTable<Type|LSType> :
  if TYPE-ENV is False :
    fatal("No active type environment.")
  TYPE-ENV as IntTable<Type|LSType>

;Set the type of a variable.
defn set-type (n:Int, t:Type|LSType) -> False :
  val env = type-env!()
  if key?(env,n) :
    fatal("Type already set in environment for variable %_." % [n])
  env[n] = t

;Retrieve the HiStanza type of a variable.
defn get-type (n:Int) -> Type|LSType :
  type-env!()[n]

;============================================================
;=================== Type Hierarchy =========================
;============================================================

;The currently active type hierarchy.
var ACTIVE-TYPE-HIERARCHY:TypeHierarchy|False = false

;Retrieve the currently active type hierarchy.
defn type-hierarchy () -> TypeHierarchy :
  match(ACTIVE-TYPE-HIERARCHY) :
    (h:TypeHierarchy) : h
    (f:False) : fatal("No active type hierarchy set.")

;============================================================
;================ Collect Type Equations ====================
;============================================================

;Hold all the generated type equations.
var TYPE-EQNS:Vector<TypeEqn>|False = false

;Execute a body with an active type equation list.
defn collect-type-equations<?T> (body:() -> ?T, eqns:Vector<TypeEqn>) -> T :
  let-var TYPE-EQNS = eqns :
    body()

;Add a new type equation to solve.
defn add-equation (eqn:TypeEqn) -> False :
  match(TYPE-EQNS) :
    (eqns:Vector<TypeEqn>) : add(eqns, eqn)
    (f:False) : fatal("No active type equation list.")

;Helper: Generate equality constraint a = b if a is a
;TUVar.
defn add-equal? (a:Type, b:Type) -> False :
  match(a:TUVar) :
    add-equation(EqualEqn(n(a), b))

;Helper: Generate super constraint a :> b if a is a
;TUVar.
defn add-super? (a:Type, b:Type) -> False :
  match(a:TUVar) :
    add-equation(SuperEqn(n(a), b))

;============================================================
;================= Top Level Variables ======================
;============================================================

;Simultaneously adds type variables to top-level commands,
;and also adds types to the type environment.
defn add-top-level-variables (p:TPackage) -> TPackage :
  val new-comms = for comm in comms(p) map :
    match(comm) :
      (c:TDef) :
        sub-type(c, gen-var(n(c), type(c)))        
      (c:TDefTuple) :
        val new-types = seq(gen-var, ns(c), types(c))
        sub-types(c, to-tuple(new-types))
      (c:TDefVar) :
        sub-type(c, gen-var(n(c), type(c)))                
      (c:TDefn) :
        val new-a1 = map(or-gradual, a1(c))
        val new-a2 = or-var(a2(c))
        val new-a1-args = map(PositionalArg{false, _}, new-a1)
        val new-type = TFunction(targs(c), cargs(c), new-a1-args, new-a2)
        set-type(n(c), new-type)
        c $> sub-a1{_, new-a1}
          $> sub-a2{_, new-a2}
      (c:TDefmulti) :
        val new-a1 = map(or-gradual, a1(c))
        val new-a2 = or-gradual(a2(c))
        val new-a1-args = map(PositionalArg{false, _}, new-a1)
        val new-type = TFunction(targs(c), cargs(c), new-a1-args, new-a2)
        set-type(n(c), new-type)
        c $> sub-a1{_, new-a1}
          $> sub-a2{_, new-a2}        
      (c:TLDef) :
        set-type(n(c), type(c))
        c
      (c:TLDefVar) :
        set-type(n(c), type(c))
        c
      (c:TLDefn) :
        val a1-args = map(LSPositionalArg{false, _}, a1(c))
        val type = TLSFunction(targs(c), cargs(c), a1-args, a2(c))
        set-type(n(c), type)
        c
      (c:TLExternFn) :
        val a1-args = map(LSPositionalArg{false, _}, a1(c))
        val type = TLSFunction([], [], a1-args, a2(c))
        set-type(n(c), type)
        c        
      (c:TExtern) :
        set-type(n(c), type(c))
        c
      (c) :
        c
  sub-comms(p, new-comms)

;============================================================
;==== Add Environment Definitions to Type Environment =======
;============================================================

;Add the types of the environment definitions to the type
;environment.
defn add-environment-types (env:Tuple<Export>) -> False :

  ;Helper: Create a TFunction from a FnId.
  defn to-fn-type (id:FnId, a2:DType) -> TFunction :
    val tvars = to-tuple(0 to ntargs(id))
    val cvars = to-tuple(ntargs(id) to ntargs(id) + ncargs(id))
    val targs = to-tuple(seq(TVar{_, false}, cat(tvars,cvars)))
    val new-a1 = map(to-type{_, targs}, a1(id))
    val new-a2 = to-type(a2, targs)
    val a1-args = map(PositionalArg{false, _}, new-a1)
    TFunction(tvars, cvars, a1-args, new-a2)

  ;Helper: Create a TLSFunction from a FnId.
  defn to-lsfn-type (id:FnId, a2:DType) -> TLSFunction :
    val tvars = to-tuple(0 to ntargs(id))
    val cvars = to-tuple(ntargs(id) to ntargs(id) + ncargs(id))
    val targs = to-tuple(seq(TVar{_, false}, cat(tvars,cvars)))
    val new-a1 = map(to-lstype{_, targs}, a1(id))
    val new-a2 = to-lstype(a2, targs)
    val a1-args = map(LSPositionalArg{false, _}, new-a1)
    TLSFunction(tvars, cvars, a1-args, new-a2)
    
  ;Loop through each environment entry and add them
  ;to the typing environment.
  for e in env do :
    val type = match(rec(e)) :
      (r:ValRec) :
        if lostanza?(r) : to-lstype(type(r), [])
        else : to-type(type(r), [])
      (r:FnRec) :
        if lostanza?(r) : to-lsfn-type(id(r) as FnId, a2(r))
        else : to-fn-type(id(r) as FnId, a2(r))
      (r:MultiRec) :
        to-fn-type(id(r) as FnId, a2(r))
      (r:ExternFnRec) :
        to-lsfn-type(id(r) as FnId, a2(r))
      (r:ExternRec) :
        to-lstype(type(r), [])
      (r:StructRec) : false
      (r:TypeRec) : false
      (r:TypeDecl) : false
      (r) : false
    match(type:Type|LSType) :
      set-type(n(e), type)

;Extract DL identifier environment from NameMap.
;Used for to-deftype function.
defn TypeIDEnv (namemap:NameMap) -> IDEnv :
  val table = to-hashtable<TypeId,Int> $
    for e in toplevel(namemap) seq? :
      if type(e) is TypeE|LTypeE :
        One(TypeId(package(e), name(e)) => n(e))
      else :
        None()
  new IDEnv :
    defmethod get (this, id:TypeId) : table[id]

;============================================================
;================ Generate Type Equations ===================
;============================================================

;Generate equations for the given package.
defn gen-equations (p:TPackage) -> TPackage :
  val new-comms = map(gen-equations, comms(p))
  sub-comms(p, new-comms)

;Generate equations for the given command.
defn gen-equations (c:TComm) -> TComm :
  match(c) :
    (c:TDef) :
      fatal("gen-equations for TDef")
    (c:TDefTuple) :
      fatal("gen-equations for TDefTuple")
    (c:TDefVar) :
      fatal("gen-equations for TDefVar")
    (c:TDefn) :
      ;Add type variables to the environment.
      for v in cat(targs(c), cargs(c)) do :
        set-type(v, TVar(v))
      ;Add arguments to the environment.
      do(set-type, args(c), a1!(c))
      ;Generate equations for body.
      val body-ctxt = ExpCtxt(or-top(a2!(c)))
      val new-body = gen-equations(body(c), body-ctxt)
      add-equal?(a2!(c), type!(new-body))
      sub-body(c, new-body)
    (c:TDefmethod) :
      fatal("gen-equations for TDefmethod")
    (c:TInit) :
      val new-exp = gen-equations(exp(c), ExpCtxt(TTop()))
      TInit(info(c), new-exp)      
    (c:TLDefType) :
      fatal("gen-equations for TLDefType")
    (c:TLDef) :
      fatal("gen-equations for TLDef")
    (c:TLDefVar) :
      fatal("gen-equations for TLDefVar")
    (c:TLDefn) :
      fatal("gen-equations for TLDefn")
    (c:TLExternFn) :
      fatal("gen-equations for TLExternFn")
    (c:TLDefmethod) :
      fatal("gen-equations for TLDefmethod")
    (c:TLInit) :
      fatal("gen-equations for TLInit")
    (c) :
      c

;Generate equations for the given expression.
defn gen-equations (e:TExp, ctxt:Context) -> TExp :
  match(e) :
    (e:TLet) :
      val new-type = gen-var(n(e), ntype(e))
      val value-ctxt = ExpCtxt(or-top(ntype(e)))
      val new-value = gen-equations(value(e), value-ctxt)
      add-equal?(new-type, type!(new-value))
      val new-body = gen-equations(body(e), ctxt)
      TLet(info(e), type!(new-body), ctxt,
           n(e), new-type, new-value, new-body)
    (e:TLetVar) :
      val new-type = gen-var(n(e), ntype(e))
      val new-value = match(value(e)) :
        (v:TExp) :
          val value-ctxt = ExpCtxt(or-top(ntype(e)))
          val new-v = gen-equations(v, value-ctxt)
          add-super?(new-type, type!(v))
          new-v
        (f:False) :
          false
      val new-body = gen-equations(body(e), ctxt)
      TLetVar(info(e), type!(new-body), ctxt,
              n(e), new-type, new-value, new-body)
    (e:TLetTuple) :
      fatal("gen-equations TLetTuple")
    (e:TLetRec) :
      fatal("gen-equations TLetRec")
    (e:TFn) :
      fatal("gen-equations TFn")
    (e:TMulti) :
      fatal("gen-equations TMulti")
    (e:TSeq) :
      fatal("gen-equations TSeq")
    (e:TMatch) :
      fatal("gen-equations TMatch")
    (e:TBranch) :
      fatal("gen-equations TBranch")
    (e:TNew) :
      fatal("gen-equations TNew")
    (e:TRef) :
      match(gen-func-equations?(e, ctxt)) :
        (e:TCurry|TRef) : e
        ;Represent type using an unsatisfiable uvar.
        (f:False) : TRef(info(e), unsatisfiable-tuvar(), ctxt, n(e))
    (e:TCast) :
      val new-exp = gen-equations(exp(e), ExpCtxt(TTop()))
      TCast(info(e), targ(e), ctxt, new-exp, targ(e))
    (e:TUpCast) :
      val new-exp = gen-equations(exp(e), ExpCtxt(targ(e)))
      TUpCast(info(e), targ(e), ctxt, new-exp, targ(e))
    (e:TSet) :
      fatal("gen-equations TSet")
    (e:TDo) :
      ;Gen equations for arguments using tuvar for expected types.
      val expected-arg-types = fresh-tuvars(length(args(e)))
      val new-args = to-tuple $
        for (arg in args(e), et in expected-arg-types) seq :
          gen-equations(arg, ExpCtxt(et))
      ;Gen equations for func now that we have argument types.
      val fargs = map(PositionalArg{false, type!(_)}, new-args)
      val func-ctxt = CallCtxt([], fargs)
      val new-func = gen-equations(func(e), func-ctxt)
      ;Infer return type from function type.
      val ret-type = fresh-tuvar()
      add-equation $ InferEqn(n(ret-type), type!(new-func), ReturnLoc(length(new-args)))
      ;Infer expected argument types from function type.
      for (et in expected-arg-types, i in 0 to false) do :
        add-equation $ InferEqn(n(et), type!(new-func), ArgLoc(length(new-args), i))
      ;Return new data.
      TDo(info(e), ret-type, ctxt, new-func, new-args)
    (e:TPrim) :
      fatal("gen-equations TPrim")
    (e:TLiteral) :
      ;Retrieve the SpecialType that the value corresponds to.
      val special = match(value(e)) :
        (v:Byte) : CoreByte
        (v:Char) : CoreChar
        (v:Int) : CoreInt
        (v:Long) : CoreLong
        (v:Float) : CoreFloat
        (v:Double) : CoreDouble
        (v:String) : CoreString
        (v:Symbol) : CoreSymbol
        (v:List) : CoreList
        (v:True) : CoreTrue
        (v:False) : CoreFalse
        (v) : fatal("%_ is an unsupported literal type." % [object-type(v)])
      ;Create the type.
      val hier = type-hierarchy()
      val n = special-type(hier, special)
      val arity = type-arity(hier, n)
      val value-type = TOf(n, to-tuple(repeat(TGradual(), arity)))
      ;Return bundled data.
      TLiteral(info(e), value-type, ctxt, value(e))
    (e:TTupleExp) :
      fatal("gen-equations TTupleExp")
    (e:TMix) :
      fatal("gen-equations TMix")
    (e:TCurry) :
      match(gen-func-equations?(e, ctxt)) :
        (e:TCurry) : e
        ;Represent type using an unsatisfiable uvar.
        (f:False) : TCurry(info(e), unsatisfiable-tuvar(), ctxt, ref(e), targs(e), [])

;Generate equations for the given expression.
defn gen-equations (e:LSExp, ctxt:LSContext) -> LSExp :
  match(e) :
    (e) :
      e

;============================================================
;================= Function Equations =======================
;============================================================

;Generate equations for the given functions. Returns false
;if it cannot be instantiated with the given context.
defn gen-func-equations? (func:TCurry|TRef, ctxt:Context) -> TCurry|TRef|False :
  attempt :
    ;Consider the different cases.
    match(func, ctxt) :

      ;Calling a function with explicit type arguments.
      (func:TCurry, ctxt:CallCtxt) :

        ;Sanity check: IL-to-TL translator only uses TCurry to represent calls with
        ;explicit type arguments.
        if empty?(targs(func)) :
          fatal("Unexpected absence of type arguments in TCurry.")
          
        ;Sanity check: Capture variables have not been generated yet.
        if not empty?(cargs(func)) :
          fatal("Unexpected capture arguments in TCurry.")

        ;Get the type of the ref, and instantiate it.
        val new-ref = typed-ref(ref(func), ctxt) as? TRef
        val ref-type = type!(new-ref) as? TFunction
        val ifn = instantiate(ref-type, targs(func), fargs(ctxt)) as? InstantiatedFn

        ;Return the instantiated TCurry.
        TCurry(info(func), type(ifn), ctxt, new-ref, targs(func), cargs(ifn))            

      ;Calling a function with no type arguments.
      (func:TRef, ctxt:CallCtxt) :

        ;Get the type of the ref.
        val new-ref = typed-ref(func, ctxt) as? TRef
        match(type!(new-ref)) :
        
          ;Polymorphic functions need to be instantiated.
          (t:TFunction) :              
            val ifn = instantiate(t, [], fargs(ctxt)) as? InstantiatedFn

            ;Return either a TCurry or TRef depending on whether there are
            ;captured arguments.
            if empty?(cargs(ifn)) :
              TRef(info(func), type(ifn), ctxt, n(func))
            else :
              TCurry(info(func), type(ifn), ctxt, new-ref, [], cargs(ifn))                

          ;For every other type, just return it.
          (t) :
            new-ref
     
      ;Explicit type arguments cannot be provided in expression contexts.
      (func:TCurry, ctxt:ExpCtxt) :
      
        ;Due to IL-to-TL tranlator, TCurry can only appear in function call position.
        fatal("Unexpected context %_ for TCurry." % [object-type(ctxt)])

      ;Reference in an expression context.
      (func:TRef, ctxt:ExpCtxt) :

        ;Get the type of the ref.
        val new-ref = typed-ref(func, ctxt) as? TRef
        match(type!(new-ref)) :

          ;Polymorphic functions need to be instantiated.
          (t:TFunction) :
            fatal("Not yet implemented")
            
          ;Every other type, just return ir.
          (t) :
            new-ref

;Retrieve the HiStanza type of a curried ref.
;Type is allowed to be a TFunction.
;Returns false if ref cannot be referenced from a HiStanza context.
defn typed-ref (e:TRef, ctxt:Context) -> TRef|False :
  match(get-type(n(e))) :
    (t:Type) :
      TRef(info(e), t, ctxt, n(e))
    (t:LSType) :
      fatal("Not yet implemented")

;============================================================
;================ Function Instantiation ====================
;============================================================

;Instantiate a TFunction type with the given type arguments,
;and calling arguments. If successful, returns a TArrow.
;All required type equations for capturing and inference are generated.
defn instantiate (ft:TFunction,
                  targs:Tuple<Type>,
                  args:Tuple<FArg>) -> InstantiatedFn|False :
  ;[TODO] Assume that all arguments are positional arguments.
  for arg in a1(ft) do :
    match(arg:PositionalArg) :
      fatal("Unsupported") when optional?(arg)
    else :
      fatal("Unsupported")

  ;Check targ and arg arity.
  if same-length?(/targs(ft), targs) and
     same-length?(a1(ft), args) :
     
    ;Create the variables for the captures.
    val capvars = fresh-tuvars(length(cargs(ft)))
    
    ;Substitute the given types to get the actual argument types.
    val env = to-tuple $ cat(seq(KeyValue, /targs(ft), targs)
                             seq({_ => n(_)}, /cargs(ft), capvars))

    ;Fast track: non-polymorphic function. No substitutions or
    ;capturing necessary.
    if empty?(env) :
      InstantiatedFn([], TArrow(map(type,a1(ft)), a2(ft)))

    ;Perform substitutions and capturing.
    else :

      ;Substitute env to compute new a1.
      val new-a1 = sub-caps(map(type,a1(ft)), env)

      ;Perform any necessary capturing.
      if not empty?(capvars) :
        add-equation $ CaptureAllEqn(
          map(n,capvars),
          TTuple(map(type,args)),
          TTuple(new-a1))

      ;Perform a substitution for the return type, if the
      ;return type is not fully known. During equation generation time
      ;there are only two cases: either the return type was provided explicitly
      ;by the user, or a TUVar has been generated for it.
      val subenv = to-tuple $ cat(seq(KeyValue, /targs(ft), targs)
                                  seq(KeyValue, /cargs(ft), capvars))                                    
      val new-a2 = match(a2(ft)) :
        ;Case: Inferred return type.
        (a2:TUVar) :
          val v = fresh-tuvar()
          add-equation $ SubEqn(n(v), a2, subenv)
          v
        ;Case: Explicit return type.
        (a2:Type) :
          sub(a2, subenv)

      ;Return the instantiated arrow.
      InstantiatedFn(capvars, TArrow(new-a1, new-a2))

;Represents an instantiated function type.
defstruct InstantiatedFn :
  cargs: Tuple<TUVar>
  type: TArrow    

;============================================================
;======== Small Variable Generation Utilities ===============
;============================================================

;Returns true if a and b have the same length.
defn same-length? (a:Tuple, b:Tuple) -> True|False :
  length(a) == length(b)

;Create a fresh tuvar.
defn fresh-tuvar () -> TUVar :
  TUVar(fresh-id())
defn fresh-tuvars (n:Int) -> Tuple<TUVar> :
  to-tuple(seq(fresh-tuvar{}, 0 to n))

;Create a uvar with an unsatisfiable equation.
defn unsatisfiable-tuvar () -> TUVar :
  val v = fresh-tuvar()
  add-equation $ UnsatisfiableEqn(n(v))
  v

;Return a gradual when false.
defn or-gradual (f:False) : TGradual()
defn or-gradual (t:Type) : t

;Return a type variable when false.
defn or-var (f:False) : fresh-tuvar()
defn or-var (t:Type) : t

;Return a Top when false or TUVar.
;Used for generating contexts.
defn or-top (f:False) : TTop()
defn or-top (t:Type) : TTop() when t is TUVar else t

;Generate a type variable for 't', and also
;set it in the type environment.
defn gen-var (n:Int, t:Type|False) -> Type :
  val new-type = or-var(t)
  set-type(n, new-type)
  new-type