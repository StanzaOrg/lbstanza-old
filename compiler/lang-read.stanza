defpackage lang/read :
   import core
   import collections
   import stz/il-ir


;============================================================
;============= Token Information Propagation ================
;============================================================

defn fill-info (form) :
   ;Find the first informative info
   defn first-info (x) :
      label<False|FileInfo> return :
         defn loop (x) :
            match(x) :
               (x:Token) :
                  return(info(x))
                  loop(item(x))
               (x:List) : do(loop, x)
               (x) : false
         loop(x)
         false

   ;Tag the value with an info if possible
   defn tag? (x, i:False|FileInfo) :
      match(i) :
         (i:False) : x
         (i:FileInfo) : Token(x, i)

   ;Fill file information up tree
   defn fill-up (x, i:False|FileInfo) :
      match(x) :
         (x:Token) :
            fill-up(item(x), info(x))
         (x:List) :
            val x* = map(fill-up{_, false}, x)            
            match(i) :
               (i:False) : tag?(x*, first-info(x*))
               (i:FileInfo) : Token(x, i)
         (x) :
            tag?(x, i)

   ;Fill file information down tree
   defn fill-down (x, i:False|FileInfo) :
      match(x) :
         (x:Token) :
            fill-down(item(x), info(x))
         (x:List) :
            val x* = map(fill-down{_, i}, x)
            tag?(x*, i)
         (x) :
            tag?(x, i)

   ;Driver
   fill-down(fill-up(form, false), false)


;============================================================
;=============== FormTable Datastructures ===================
;============================================================

public deftype Form
public defstruct TagForm <: Form :
   tag: Symbol
   fields: Tuple<Field>
   body: (Array, False|FileInfo) -> ?
public defstruct SForm <: Form :
   body: (Symbol, False|FileInfo) -> ?
public defstruct VForm <: Form :
   body: (?, False|FileInfo) -> ?

public deftype Field
public defstruct SField <: Field: (type:Symbol)
public defstruct LField <: Field: (type:Symbol)
public defstruct RField <: Field: (type:Symbol)


;============================================================
;============== Production Table Analysis ===================
;============================================================

defstruct ProdTable :
   tagforms: HashTable<Symbol, TagForm>
   sform: False|SForm
   vform: False|VForm

defn tag? (t:ProdTable, x:Symbol) :
   key?(tagforms(t), x)

defn ProdTable (forms:Tuple<Form>) :
   val tagforms = HashTable<Symbol,TagForm>()
   var sform = false
   var vform = false
   for f in forms do :
      match(f) :
         (f:TagForm) :
            if key?(tagforms, tag(f)) :
               fatal("Duplicate production for form %~." % [tag(f)])
            tagforms[tag(f)] = f
         (f:SForm) :
            fatal("Duplicate symbol form.") when sform is-not False
            sform = f   
         (f:VForm) :
            fatal("Duplicate value form.") when vform is-not False
            vform = f
   ProdTable(tagforms, sform, vform)


;============================================================
;============== Read Form to Input IR =======================
;============================================================

public defn read (form, forms:Tuple<Form>) :

   ;               Analyse productions
   ;               ===================
   val prod-table = ProdTable(forms)
   defn stanza-tag? (tag:Symbol) :
      tag?(prod-table, tag)

   ;                   Error Buffer
   ;                   ============

   val read-errors = Vector<ReadError>()
   defn error! (e:ReadError) :
      add(read-errors, e)
      throw(e)

   defn read-prod (form, prod:Symbol) :   
      if prod == `? : unwrap-all(form)
      else : read-prod(form, prod-table)
      
   defn read-prod (form, table:ProdTable) :
      ;Ensure proper form
      defn ensure-min-arity! (form:List, n:Int) :
         error!(MinArityError(form, n)) when (length(form) - 1) < n
      defn ensure-arity! (form:List, n:Int) :
         error!(ArityError(form, n)) when (length(form) - 1) != n

      ;Read form according to the field descriptors
      defn read-fields (fs:Tuple<Field>, form:List) :
         ;Ensure that x at position i is a list.
         defn list! (x, i:Int) :
            match(unwrap-token(x)) :
               (x:List) : x
               (x) : error!(NotListError(head(form), i, x))

         ;Ensure proper arity of form
         val n = length(fs)
         if any?({_ is RField}, fs) :
            ensure-min-arity!(form, n - 1)
         else :
            ensure-arity!(form, n)

         ;Read production and track whether it passed.
         var pass? = true
         defn read-prod? (form, prod:Symbol) :
            try :
               read-prod(form, prod)
            catch (e) :
               pass? = false
         defn read-prods? (form:List, prod:Symbol) :
            map(read-prod?{_, prod}, form)

         ;Read all values according to their field descriptors.
         val values = Array<?>(n)
         defn* loop (i:Int, form:List) :
            if i < n :
               values[i] = match(fs[i]) :
                  (f:SField) : read-prod?(head(form), type(f))
                  (f:LField) : read-prods?(list!(head(form), i), type(f))                     
                  (f:RField) : read-prods?(form, type(f))
               loop(i + 1, tail(form)) when fs[i] is-not RField
         loop(0, tail(form))

         ;Return read values, unless they did not pass reading
         if pass? : values
         else : throw(ReadError())

      ;Retrieve the tagform for a given form, or fail
      defn tagform-of (form:List, info:False|FileInfo) :
         if not empty?(form) :
            match(unwrap-token(head(form))) :
               (tag:Symbol) :
                  match(get?(tagforms(table), tag, false)) :
                     (t:TagForm) :
                        t
                     (t:False) :
                        if stanza-tag?(tag) : error!(InvalidContext(form, info))
                        else : error!(InvalidForm(form, info))
               (tag) : error!(InvalidForm(form, info))
         else : error!(InvalidForm(form, info))

      ;Dispatch based upon the type of the form
      defn r (form, i:False|FileInfo) :
         match(form) :
            (form:Token) :
               r(item(form), info(form))
            (form:List) :
               val f = tagform-of(form, i)
               val values = read-fields(fields(f), form)
               body(f)(values, i)
            (form:Symbol) :
               match(sform(table)) :
                  (f:SForm) : body(f)(form, i)
                  (f:False) : error!(InvalidContext(form, i))
            (form) :
               match(vform(table)) :
                  (f:VForm) : body(f)(form, i)
                  (f:False) : error!(InvalidContext(form, i))                  
      r(form, false)

   try :
      read-prod(fill-info(form), prod-table)
   catch (e:ReadError) :
      do(println, read-errors)
      throw(ReadError())

;============================================================
;===================== Errors ===============================
;============================================================

deftype ReadError <: Exception

defn ReadError () :
   new ReadError :
      defmethod print (o:OutputStream, this) :
         print(o, "ReadError")

defn ReadError (msg, info:False|FileInfo) :
   new ReadError :
      defmethod print (o:OutputStream, this) :
         match(info) :
            (i:False) : print(o, msg)
            (i:FileInfo) : print(o, "%_: %_" % [i, msg])

defn info? (x) :
   info(x as Token) when x is Token

defn MinArityError (form:List, n:Int) :
   val info = info?(head(form))
   ReadError{_, info} $
      "Stanza form %~ expects at least %_ arguments, but found only %_." % [
         head(form), n, length(form) - 1]

defn ArityError (form:List, n:Int) :
   val info = info?(head(form))
   ReadError{_, info} $
      "Stanza form %~ expects %_ arguments, but found %_." % [
         head(form), n, length(form) - 1]

defn InvalidForm (form:List, info:False|FileInfo) :
   ReadError{_, info} $
      "Form %~ is not a valid Stanza core form." % [form]

defn NotListError (tag, i:Int, x) :
   ReadError{_, info?(tag)} $
      "Stanza form %~ expects a list in argument position %_, but received %~." % [tag, i, x]

defn InvalidContext (form, info:False|FileInfo) :
   ReadError{_, info} $
      "Inappropriate form %~ for in this context." % [form]

