defpackage stz/c-trampoline :
  import core
  import collections
  import stz/code-emitter
  import stz/backend
  import stz/asm-ir
  import stz/asm-ir-utils

;<doc>=======================================================
;==================== C Trampoline ==========================
;============================================================

The C trampoline is a generated function to be called from C that
allows for calling a C function with a dynamically-generated list of
arguments.

Here is its interface :

  c_trampoline (void* fptr, void* args, void* ret) -> void

The arguments are:

  fptr: The function pointer to call.
  args: The buffer holding the arguments to the function.
  ret: The buffer holding the return values from the function. 

Here is the format of the argument buffer. Each slot in the buffer is
8-bytes. Note that we assume that the first integer argument holds the
number of floating point arguments in the call. (Typically %rax for
System-V systems)

  let A = 1 + nstk 
  let B = A + nfarg
  buffer[0] = number of stack arguments (nstk).
  buffer[1] = last stack argument
  ...
  buffer[1 + nstk - 1] = first stack argument
  buffer[A + 0] = number of floating-point register arguments (nfarg)
  buffer[A + 1] = last floating point argument
  ...
  buffer[A + 1 + nfarg - 1] = first floating point argument
  buffer[B + 0] = number of integer register arguments (narg)
  buffer[B + 1] = last integer argument
  ...
  buffer[B + 1 + narg - 1] = first integer argument
  
Here is the format of the return buffer:

  ret[0] = integer return value
  ret[1] = floating point return value

Here is the pseudo-code of the implementation:
  Let ARG0, ARG1, ARG2 be the C integer arguments.
  Let TMP0, TMP1 be integer scratch registers (Neither a C argument
  nor a C preserved register)

  On Entry:
    ARG0 is fptr
    ARG1 is args buffer
    ARG2 is ret buffer

  Save the return buffer (ARG2) to [RSP - 8]
  Preserve the stack in ARG2
  RSP -= 8

  Decrement RSP by shadow space if necessary
  RSP -= shadow space

  Use TMP0 as the counter register in the following code.
  counter (TMP0) = [args buffer (ARG1)]
  args buffer (ARG1) += 8
  while counter (TMP0) != 0
    RSP -= 8
    [RSP] = [args buffer (ARG1)] (Using TMP1 as swap)
    args buffer (ARG1) += 8
    counter (TMP0) -= 1

  Prepare stack frame for call
  RSP -= 8
  RSP &= -16
  [RSP] = preserved stack (ARG2)

  At this point:
    ARG0 is fptr
    ARG1 is current point in args buffer
    
  numfargs (TMP0) = [args buffer (ARG1)]
  args buffer (ARG1) += 8
  jump [FREGTABLE + numfargs << 3] (using TMP1 for swap)
fregs_max_fregs:
  FREG_MAX = [args buffer (ARG1)]
  args buffer (ARG1) += 8
...
fregs_0:

  move fptr from ARG0 to TMP0
  move buffer from ARG1 to TMP1
  numargs (ARG0) = [args buffer (TMP1)]
  args buffer (TMP1) += 8
  jump [REGTABLE + numargs (ARG0) << 3] (using ARG1 for swap)
regs_max_regs:
  REG_MAX = [args buffer (TMP1)]
  args buffer (TMP1) += 8
...  
regs_0:

  Call the function.
  call [fptr (TMP0)]

  Restore frame pointer
  RSP = [RSP]

  Restore buffer and write out return values
  buffer (TMP0) = [RSP - 8]
  [buffer (TMP) + 0] = R0
  [buffer (TMP) + 8] = F0

  Return
  ret

;============================================================
;=======================================================<doc>

public defn compile-c-trampoline-stub (backend:Backend, emitter:CodeEmitter) :
  defn E (i:Ins) : emit(emitter, i)

  ;Discover temp registers.
  ;The algorithm requires two integer registers that are
  ;neither used for passing C arguments nor preserved by the
  ;caller.
  val tmp-regs = to-tuple(rs) where :
    val rs = to-intset(0 to num-regs(backend))
    defn remove-r (r:Int) : remove(rs, r)
    remove-r(0) ;num farg argument
    do(remove-r, callc-regs(backend))
    do(remove-r, c-preserved-regs(backend))

  ;Registers
  val ARG0 = R(callc-regs(backend)[0])
  val ARG1 = R(callc-regs(backend)[1])
  val ARG2 = R(callc-regs(backend)[2])
  val TMP0 = R(tmp-regs[0])
  val TMP1 = R(tmp-regs[1])
  val PRESERVED = R(c-preserved-regs(backend)[0])

  ;Shadow space
  val shadow-space = c-num-spill-slots(backend) * 8

  ;Entry
  E $ ExLabel(`c_trampoline)

  ;Save the return buffer (ARG2) to [RSP - 8]
  ;Preserve the stack in ARG2
  ;Decrement RSP by shadow space if necessary
  E $ StoreL(RSP, ARG2, -8)
  E $ StoreL(RSP, PRESERVED, -16)
  E $ SetL(PRESERVED, RSP)

  ;Shift RSP down
  E $ LoadL(TMP0, ARG1)
  E $ ShlL(TMP0, TMP0, INT(3))
  E $ SubL(RSP, RSP, TMP0)
  E $ SubL(RSP, RSP, INT(frame-size)) where :
    val frame-size = 8 ;saved return buffer
                   + 8 ;saved preserved register
                   + shadow-space ;shadow space
                   + 8 ;alignment operator
  E $ AndL(RSP, RSP, INT(-16))                 

  ;Reset RSP to prepare to put arguments in
  E $ AddL(RSP, RSP, TMP0)
  if shadow-space > 0 :
    E $ AddL(RSP, RSP, INT(shadow-space))

  ;Use TMP0 as the counter register in the following code.
  ;counter (TMP0) = [args buffer (ARG1)]
  ;args buffer (ARG1) += 8
  ;while counter (TMP0) != 0
  ;  RSP -= 8
  ;  [RSP] = [args buffer (ARG1)] (Using TMP1 as swap)
  ;  args buffer (ARG1) += 8
  ;  counter (TMP0) -= 1
  let :
    val loop = unique-label(emitter)
    val loopend = unique-label(emitter)
    E $ LoadL(TMP0, ARG1)
    E $ AddL(ARG1, ARG1, INT(8))
    E $ Label(loop)
    E $ BreakL(M(loopend), EqOp(), TMP0, INT(0))
    E $ SubL(RSP, RSP, INT(8))
    E $ LoadL(TMP1, ARG1)
    E $ StoreL(RSP, TMP1)
    E $ AddL(ARG1, ARG1, INT(8))
    E $ SubL(TMP0, TMP0, INT(1))
    E $ Goto(M(loop))
    E $ Label(loopend)
    if shadow-space > 0 :
      E $ SubL(RSP, RSP, INT(shadow-space))
  
  ;At this point:
  ;  ARG0 is fptr
  ;  ARG1 is current point in args buffer

  ;Jump table utility function
  ;Jump to the address stored in table[option].
  ;Destroys option and tmp registers.
  defn goto-jump-table (table:Int, option:Reg, tmp:Reg) :
    E $ ShlL(option, option, INT(3))
    E $ SetL(tmp, M(table))
    E $ AddL(tmp, tmp, option)
    E $ LoadL(tmp, tmp)
    E $ Goto(tmp)

  ;numfargs (TMP0) = [args buffer (ARG1)]
  ;args buffer (ARG1) += 8
  ;jump [FREGTABLE + numfargs (TMP0) << 3] (using TMP1 for swap)
  ;fregs_max_fregs:
  ;FREG_MAX = [args buffer (ARG1)]
  ;args buffer (ARG1) += 8
  ;...
  ;fregs_0:
  val fregtable = unique-label(emitter)
  val freglabels = to-tuple $ let :
    val fregs = to-tuple(callc-fregs(backend))
    for i in 0 through length(fregs) seq :
      unique-label(emitter) => F(fregs[i - 1]) when i > 0
  E $ LoadL(TMP0, ARG1)
  E $ AddL(ARG1, ARG1, INT(8))
  goto-jump-table(fregtable, TMP0, TMP1)
  for entry in in-reverse(freglabels) do :
    E $ Label(key(entry))
    if value(entry) is-not False :
      val freg = value(entry) as FReg
      E $ LoadD(freg, ARG1)
      E $ AddL(ARG1, ARG1, INT(8))

  ;move fptr from ARG0 to TMP0
  ;move buffer from ARG1 to TMP1
  E $ SetL(TMP0, ARG0)
  E $ SetL(TMP1, ARG1)

  ;numargs (ARG0) = [args buffer (TMP1)]
  ;args buffer (TMP1) += 8
  ;jump [REGTABLE + numargs (ARG0) << 3] (using ARG1 for swap)
  ;regs_max_regs:
  ;REG_MAX = [args buffer (TMP1)]
  ;args buffer (TMP1) += 8
  ;...  
  ;regs_0:
  val regtable = unique-label(emitter)
  val reglabels = to-tuple $ let :
    val regs = to-tuple(cat([0], callc-regs(backend)))
    for i in 0 through length(regs) seq :
      unique-label(emitter) => R(regs[i - 1]) when i > 0
  E $ LoadL(ARG0, TMP1)
  E $ AddL(TMP1, TMP1, INT(8))
  goto-jump-table(regtable, ARG0, ARG1)
  for entry in in-reverse(reglabels) do :
    E $ Label(key(entry))
    if value(entry) is-not False :
      val reg = value(entry) as Reg
      E $ LoadL(reg, TMP1)
      E $ AddL(TMP1, TMP1, INT(8))

  ;Call the function.
  E $ Call(TMP0)

  ;Restore frame pointer
  E $ SetL(RSP, PRESERVED)
  E $ LoadL(PRESERVED, RSP, -16)

  ;Restore buffer and write out return values
  ;buffer (TMP0) = [RSP - 8]
  ;[buffer (TMP0) + 0] = R0
  ;[buffer (TMP0) + 8] = F0
  E $ LoadL(TMP0, RSP, -8)
  E $ StoreL(TMP0, R0, 0)
  E $ StoreD(TMP0, F0, 8)

  ;Return
  E $ Return()

  ;Emit jump tables
  E $ DefData()
  E $ Label(fregtable)
  for entry in freglabels do :
    E $ DefLabel(key(entry))
  E $ Label(regtable)
  for entry in reglabels do :
    E $ DefLabel(key(entry))
  E $ DefText()
