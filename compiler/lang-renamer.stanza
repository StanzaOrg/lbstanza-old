;See License.txt for details about licensing.

;============================================================
;=============== defrenamer lang ============================
;============================================================

defpackage stz/renamer-lang :
   import core
   import collections
   import macro-utils

;======== Parse Structures ========
deftype Arg
defstruct SimpleArg <: Arg :
   ;x:t
   name: Symbol
   type: Symbol
defstruct BeginArg <: Arg :
   ;( ... )
   args: List<Arg>
defstruct ScopeArg <: Arg :
   ;{ ... }
   arg: Arg   
defstruct GroupArg <: Arg :
   ;group{ ... }
   arg: Arg
defstruct PublicArg <: Arg :
   ;public{ ... }
   arg: Arg
defstruct ProtectedArg <: Arg :
   ;protected{ ... }
   arg: Arg

deftype Action
defstruct ArgAction <: Action :
   arg: Arg
defstruct MapAction <: Action :
   type: Symbol
defstruct RegisterAction <: Action :
   type: Symbol
defstruct CustomAction <: Action :
   body

defstruct Clause :
   node: Symbol
   action: Action

defstruct Renamer :
   name: Symbol
   clauses: List<Clause>

defstruct DefRenamer :
   name: Symbol
   exp: Symbol
   type: Symbol
   eng: Symbol
   engtype
   renamers: List<Renamer>

;======== Syntax Definition ========
defsyntax stz/renamer-lang :
   defn sym? (x) :
      match(unwrap-token(x)) :
         (x:Symbol) : x != `...
         (x) : false

   defrule :
      sym = (?x) when sym?(x) : unwrap-token(x)
      prefix-op = (defrenamer ?name:#sym (?exp:#sym : ?exptype:#sym, ?eng:#sym : ?engtype:#type) :
                      ?rs:#renamer ... ?rest ...) :
         if not empty?(rest) :
            fatal("Not a renamer: %_" % [rest])
         val r = compile(DefRenamer(name, exp, exptype, eng, engtype, rs))
         stz/langs/expande(r)

      renamer = (?name:#sym : (?cs:#clause ...)) : Renamer(name, cs)
      clause = (?node:#sym : ?act:#action) : Clause(node, act)
      
      action = ((~ _ : ?type:#sym)) : MapAction(type)
      action = (register ?type:#sym) : RegisterAction(type)
      action = (custom{?e0:#exp ?es:#exp ...}) : CustomAction(cons(e0, es))
      action = (?arg:#arg) : ArgAction(arg)
      
      arg = (group{?args:#arg ...}) : GroupArg(BeginArg(args))
      arg = (public{?args:#arg ...}) : PublicArg(BeginArg(args))
      arg = (protected{?args:#arg ...}) : ProtectedArg(BeginArg(args))
      arg = ({?args:#arg ...}) : ScopeArg(BeginArg(args))
      arg = ((?args:#arg ...)) : BeginArg(args)
      arg = (?name:#sym : ?type:#sym) : SimpleArg(name, type)

;======== Compilation ========
defn compile (d:DefRenamer) :
   ;Getting the node argument structure
   val structure = stz/ast-lang/nodes(stz/ast-lang/AST-TABLE[type(d)])
   defn get-node-args (n:Symbol) : lookup(structure, n)

   ;The name of a renamer
   defn renamer (name:Symbol) :
      symbol-join(["rename-" name])

   ;Compiling an ArgAction
   defn compile (node:Symbol, action:ArgAction) :
      ;Process Fields
      val stmts = Vector<?>()       
      val field-table = HashTable<Symbol,Symbol>()
      defn loop (a:Arg) :
         match(a) :
            (a:SimpleArg) :
               val ret = gensym()
               val template = `(val ret = #map(f, name(e)))
               add{stmts, _} $ fill-template(template, [
                  `ret => ret
                  `f => renamer(type(a))
                  `name => name(a)
                  `e => exp(d)])
               field-table[name(a)] = ret
            (a:BeginArg) :
               do(loop, args(a))
            (a:ScopeArg) :
               add(stmts, qquote(push-scope(~ (eng(d)))))                  
               loop(arg(a))
               add(stmts, qquote(pop-scope(~ (eng(d)))))
            (a:GroupArg) :
               add(stmts, qquote(push-group(~ (eng(d)))))                  
               loop(arg(a))
               add(stmts, qquote(pop-group(~ (eng(d)))))
            (a:PublicArg) :
               add(stmts, qquote(push-visibility(~ (eng(d)), Public())))                  
               loop(arg(a))
               add(stmts, qquote(pop-visibility(~ (eng(d)))))
            (a:ProtectedArg) :
               add(stmts, qquote(push-visibility(~ (eng(d)), Protected())))
               loop(arg(a))
               add(stmts, qquote(pop-visibility(~ (eng(d)))))
      loop(arg(action))

      ;Build Node
      defn get-field (name:Symbol) :
         if key?(field-table, name) : field-table[name]
         else : qquote((~ name)(~ (exp(d))))
      add{stmts, _} $ fill-template(`(Node(args)), [
         `Node => node,
         `args => splice(to-list(seq(get-field, get-node-args(node))))])

      ;Build node
      to-list(stmts)

   ;Compiling a MapAction
   defn compile (node:Symbol, action:MapAction) :
      fill-template(`(map(f, e)), [
         `f => renamer(type(action))
         `e => exp(d)])

   ;Compiling a RegisterAction
   defn compile (node:Symbol, action:RegisterAction) :
      fill-template(`(register(e, eng, `type)), [
         `e => exp(d)
         `eng => eng(d)
         `type => type(action)])

   ;Compiling a CustomAction
   defn compile (node:Symbol, action:CustomAction) :
      body(action)

   ;Compiling a Clause
   defn compile (c:Clause) :
      val template = `((e:Node) : body)
      fill-template(template, [
         `e => exp(d)
         `Node => node(c)
         `body => compile(node(c), action(c) as ArgAction|MapAction|RegisterAction|CustomAction)])

   ;Compiling a Renamer
   defn compile (r:Renamer) :
      val template = `(
         defn name (e:type) :
            match(e) : clauses)
            
      fill-template(template, [
         `name => renamer(name(r))
         `type => type(d)
         `e => exp(d)
         `clauses => seq-append(compile, clauses(r))])

   ;Full Template
   val template = `(
      defn name (e:type, eng:engtype) :
         defn #map<?S,?T> (f:T -> ?S , x: ?T) : f(x)
         defn #map<?S,?T> (f:T -> ?S, x: List<?T>) : core/map(f, x)      
         renamers
         renamer0(e))
   fill-template(template, [
      `name => name(d)
      `e => exp(d)
      `type => type(d)
      `eng => eng(d)
      `engtype => engtype(d)
      `renamers => map(compile, renamers(d))
      `renamer0 => renamer(name(head(renamers(d))))])
      
