#include<"core/stringeater.stanza">
#include<"compiler/stz-algorithms.stanza">
#include<"compiler/stz-lexer.stanza">
#include<"compiler/stz-parser.stanza">
#include("compiler/stz-tgt-ir.stanza")
#include("compiler/stz-bb-ir.stanza")
#include("compiler/stz-bb.stanza")
#include("compiler/stz-asm-ir.stanza")
#include("compiler/stz-asm-emitter.stanza")


defpackage stz/tgt :
   import core
   import verse
   import stz/lexer
   import stz/tgt-ir
   import stz/bb with :
      prefix => bb-
   import stz/asm-ir with :
      prefix => asm-
   import stz/asm-emitter with :
      prefix => asm-


;                            Parser
;                            ======

defsyntax tgt-ir :
   val ut = unwrap-token

   defrule :
      sym = (?x) when ut(x) typeof Symbol : ut(x)
      int = (?x) when ut(x) typeof Int : ut(x)

      imm = (int(?n:#int)) : IntImm(n)
      imm = (mem<?n:#sym>) : Mem(n)
      imm = (?x:#sym) : Var(x)

      op = (add) : ADD-OP
      op = (sub) : SUB-OP
      op = (mul) : MUL-OP
      op = (div) : DIV-OP
      op = (mod) : MOD-OP
      op = (and) : AND-OP
      op = (or) : OR-OP
      op = (xor) : XOR-OP
      op = (shl) : SHL-OP
      op = (shr) : SHR-OP
      op = (ashr) : ASHR-OP
      op = (eq) : EQ-OP
      op = (ne) : NE-OP
      op = (lt) : LT-OP
      op = (gt) : GT-OP
      op = (le) : LE-OP
      op = (ge) : GE-OP
      op = (ule) : ULE-OP
      op = (ult) : ULT-OP
      op = (ugt) : UGT-OP
      op = (uge) : UGE-OP

      ins = (?x:#imm = ?op:#op(?y:#imm, ?z:#imm)) : BinOp(x, op, y, z)
      ins = ((?xs:#imm ...) = ?f:#imm(?ys:#imm ...) / ?n:#int) : Call(n, xs, f, ys)
      ins = ((?xs:#imm ...) = ?f:#imm(?ys:#imm ...)) : Call(length(ys), xs, f, ys)
      ins = (?x:#imm = ?y:#imm) : SetIns(x, y)
      ins = (return (?xs:#imm ...)) : Return(xs)
      ins = (label<?n:#sym>) : Label(n)
      ins = (goto label<?n:#sym>) : Goto(n)
      ins = (branch label<?n:#sym> when ?op:#op(?x:#imm, ?y:#imm)) : Branch(n, op, x, y)

      type = (byte) : BYTE-TYPE
      type = (int) : INT-TYPE
      type = (long) : LONG-TYPE
      type = (float) : FLOAT-TYPE
      type = (double) : DOUBLE-TYPE
      type = (ref) : REF-TYPE

      defvar = (?x:#sym : ?t:#type) : DefVar(x, t)

      defins = (defn ?f:#sym / ?n:#int (?args:#defvar ...) :
                   locals: (?locals:#defvar ...)
                   ?body:#ins ...) :
         DefFn(f, n, args, to-vector(locals), to-vector(body))
      defins = (defn ?f:#sym (?args:#defvar ...) :
                   locals: (?locals:#defvar ...)
                   ?body:#ins ...) :
         DefFn(f, length(args), args, to-vector(locals), to-vector(body))

      program = (program(?e:#sym) :
                    ?ins:#defins ...) :
         Program(to-vector(ins), e)


defn parse-tgt-ir (file:String) :
   val lexed = lex-file(file)
   with-syntax(tgt-ir) :
      match-syntax(lexed) :
         (?p:#program) : p



;                          Compilation
;                          ===========

;%rax 0
;%rbx 1
;%rcx 2
;%rdx 3
;%rsi 4
;%rdi 5
;%rbp 6
;%r8 7
;%r9 8
;%r10 9
;%r11 10
;%r12 11
;%r13 12
;%r14 13
;%r15 14

defn compile (p:Program, filename:String) :
   ;     Output State
   ;     ------------
   val output = Vector<asm-Ins>()
   defn emit (i:asm-Ins) : add(output, i)


   ;     Entry Function
   ;     --------------
   let :
      ;Important labels
      val lbl-counter = to-stream(1000 to false)
      val c-rsp = next(lbl-counter)
      val c-rbx = next(lbl-counter)
      val c-rbp = next(lbl-counter)
      val c-r12 = next(lbl-counter)
      val c-r13 = next(lbl-counter)
      val c-r14 = next(lbl-counter)
      val c-r15 = next(lbl-counter)
      
      ;Stored C Parameters
      defn deflong (lbl:Int) :
         emit(asm-Label(lbl))
         emit(asm-DefLong(0))
      emit(asm-DefData())
      deflong(c-rsp)
      deflong(c-rbx)
      deflong(c-rbp) 
      deflong(c-r12)
      deflong(c-r13)
      deflong(c-r14)
      deflong(c-r15)      
      emit(asm-DefText())

      ;Entry Function
      emit(asm-ExLabel(`_stanza_entry))
      
      ;Save C Parameters
      emit(asm-Store(asm-LONG-TYPE, asm-Mem(c-rsp), asm-RegSP(), 0))
      emit(asm-Store(asm-LONG-TYPE, asm-Mem(c-rbx), asm-Reg(1), 0))
      emit(asm-Store(asm-LONG-TYPE, asm-Mem(c-rbp), asm-Reg(6), 0))
      emit(asm-Store(asm-LONG-TYPE, asm-Mem(c-r12), asm-Reg(11), 0))
      emit(asm-Store(asm-LONG-TYPE, asm-Mem(c-r13), asm-Reg(12), 0))
      emit(asm-Store(asm-LONG-TYPE, asm-Mem(c-r14), asm-Reg(13), 0))
      emit(asm-Store(asm-LONG-TYPE, asm-Mem(c-r15), asm-Reg(14), 0))

      ;Set RSP to passed stack pointer, and call entry
      emit(asm-SetIns(asm-LONG-TYPE, asm-RegSP(), asm-Reg(5)))
      emit(asm-BinOp(asm-LONG-TYPE, asm-RegSP(), asm-ADD-OP, asm-RegSP(), asm-IntImm(8)))
      emit(asm-Call(asm-ExMem(entry(p))))

      ;Transfer return result to C
      emit(asm-SetIns(asm-LONG-TYPE, asm-Reg(0), asm-Reg(2)))

      ;Restore C parameters
      emit(asm-Load(asm-LONG-TYPE, asm-RegSP(), asm-Mem(c-rsp), 0))
      emit(asm-Load(asm-LONG-TYPE, asm-Reg(1), asm-Mem(c-rbx), 0))
      emit(asm-Load(asm-LONG-TYPE, asm-Reg(6), asm-Mem(c-rbp), 0))
      emit(asm-Load(asm-LONG-TYPE, asm-Reg(11), asm-Mem(c-r12), 0))
      emit(asm-Load(asm-LONG-TYPE, asm-Reg(12), asm-Mem(c-r13), 0))
      emit(asm-Load(asm-LONG-TYPE, asm-Reg(13), asm-Mem(c-r14), 0))
      emit(asm-Load(asm-LONG-TYPE, asm-Reg(14), asm-Mem(c-r15), 0))

      ;Return      
      emit(asm-Return())      


   ;     Compile all constructs
   ;     ----------------------
   for i in ins(p) do :
      match(i) :
         (i:DefFn) :
            emit(asm-ExLabel(name(i)))
            bb-compile(i, output)
         (i) :
            error("Not yet implemented.")
            

   ;     ;Emit output to file
   ;     -------------------
   with-output-file(filename, asm-emit{output})

;                          Main Driver
;                          ===========

defn headline (str:String) :
   val n = length(str)
   val m = 30 - n / 2
   println()
   do(print{" "}, 0 to m)
   println(str)
   do(print{" "}, 0 to m)
   do(print{"="}, 0 to n)
   println()
      
defn main () :
   val filename = commandline-arguments()[1]
   val program = parse-tgt-ir(filename)
   
   headline("Program")
   println(program)

   headline("Compilation")
   compile(program, "test.s")   

main()