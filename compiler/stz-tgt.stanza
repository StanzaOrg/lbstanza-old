#include<"core/stringeater.stanza">
#include<"compiler/stz-algorithms.stanza">
#include<"compiler/stz-lexer.stanza">
#include<"compiler/stz-parser.stanza">
#include("compiler/stz-tgt-ir.stanza")


defpackage stz/tgt :
   import core
   import verse
   import stz/lexer
   import stz/tgt-ir

;                            Parser
;                            ======

defsyntax tgt-ir :
   val ut = unwrap-token

   defrule :
      sym = (?x) when ut(x) typeof Symbol : ut(x)
      int = (?x) when ut(x) typeof Int : ut(x)

      imm = (int(?n:#int)) : IntImm(n)
      imm = (mem<?n:#sym>) : Mem(n)
      imm = (?x:#sym) : Var(x)

      op = (add) : ADD-OP
      op = (sub) : SUB-OP
      op = (mul) : MUL-OP
      op = (div) : DIV-OP
      op = (mod) : MOD-OP
      op = (and) : AND-OP
      op = (or) : OR-OP
      op = (xor) : XOR-OP
      op = (shl) : SHL-OP
      op = (shr) : SHR-OP
      op = (ashr) : ASHR-OP
      op = (eq) : EQ-OP
      op = (ne) : NE-OP
      op = (lt) : LT-OP
      op = (gt) : GT-OP
      op = (le) : LE-OP
      op = (ge) : GE-OP
      op = (ule) : ULE-OP
      op = (ult) : ULT-OP
      op = (ugt) : UGT-OP
      op = (uge) : UGE-OP

      ins = (?x:#imm = ?op:#op(?y:#imm, ?z:#imm)) : BinOp(x, op, y, z)
      ins = ((?xs:#imm ...) = ?f:#imm(?ys:#imm ...) (?n:#int)) : Call(n, xs, f, ys)
      ins = ((?xs:#imm ...) = ?f:#imm(?ys:#imm ...)) : Call(length(ys), xs, f, ys)
      ins = (?x:#imm = ?y:#imm) : SetIns(x, y)
      ins = (return (?xs:#imm ...)) : Return(xs)
      ins = (label<?n:#sym>) : Label(n)
      ins = (goto label<?n:#sym>) : Goto(n)
      ins = (branch label<?n:#sym> when ?op:#op(?x:#imm, ?y:#imm)) : Branch(n, op, x, y)

      type = (byte) : BYTE-TYPE
      type = (int) : INT-TYPE
      type = (long) : LONG-TYPE
      type = (float) : FLOAT-TYPE
      type = (double) : DOUBLE-TYPE
      type = (ref) : REF-TYPE

      defvar = (?x:#sym : ?t:#type) : DefVar(x, t)

      defins = (defn ?f:#sym / ?n:#int (?args:#defvar ...) :
                   locals: (?locals:#defvar ...)
                   ?body:#ins ...) :
         DefFn(f, n, args, to-vector(locals), to-vector(body))
      defins = (defn ?f:#sym (?args:#defvar ...) :
                   locals: (?locals:#defvar ...)
                   ?body:#ins ...) :
         DefFn(f, length(args), args, to-vector(locals), to-vector(body))

      program = (program(?e:#sym) :
                    ?ins:#defins ...) :
         Program(to-vector(ins), e)           


defn parse-tgt-ir (file:String) :
   val lexed = lex-file(file)
   with-syntax(tgt-ir) :
      match-syntax(lexed) :
         (?p:#program) : p



;                          Main Driver
;                          ===========

defn main () :
   val filename = commandline-arguments()[1]
   val program = parse-tgt-ir(filename)
   println(program)

main()