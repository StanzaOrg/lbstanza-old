defpackage stz/tgt :
   import core
   import collections
   import stz/ids
   import stz/utils
   import stz/tgt-ir
   import stz/bb with :
      prefix => bb-
   import stz/asm-ir with :
      prefix => asm-
   import stz/asm-emitter with :
      prefix => asm-
   import stz/backend
   import stz/params
   import stz/tgt-writer


;============================================================
;===================== Compilation ==========================
;============================================================

;x86-64 Register Mapping
;%rax: R0
;%rbx: R1
;%rcx: R2
;%rdx: R3
;%rsi: R4
;%rdi: R5
;%rbp: R6
;%r8: R7
;%r9: R8
;%r10: R9
;%r11: R10
;%r12: R11
;%r13: R12
;%r14: R13
;%r15: R14

public defn compile (p:Program, output-filename:String) -> False :
   ;     Timers
   ;     ======
   val asm-timer = MillisecondTimer("Asm")
   val bb-timer = MillisecondTimer("BB")
   
   ;     Parameters
   ;     ==========
   val backend = X86Backend()
   val output-file = FileOutputStream(output-filename)
   
   ;     Output State
   ;     ============
   val output = Vector<asm-Ins>()
   defn emit (i:asm-Ins) :
      add(output, i)

   defn flush-output () :
      if flag-defined?(`VERBOSE) :
         do(println, output)
      start(asm-timer)   
      with-output-stream{output-file, _} $ fn () :
         asm-emit(output)
      stop(asm-timer)   
      clear(output)

   ;     Helper Functions
   ;     ================
   val LT = asm-LONG-TYPE
   val IT = asm-INT-TYPE
   defn mem (n:Int) : asm-Mem(n,0)
   defn int (v:Int) : asm-IntImm(v)
   
   val RSP = asm-RegSP()
   val R0 = asm-Reg(0)
   val R1 = asm-Reg(1)
   val R2 = asm-Reg(2)
   val R3 = asm-Reg(3)
   val R4 = asm-Reg(4)
   val R5 = asm-Reg(5)
   val R6 = asm-Reg(6)
   val R7 = asm-Reg(7)
   val R8 = asm-Reg(8)
   val R9 = asm-Reg(9)
   val R10 = asm-Reg(10)
   val R11 = asm-Reg(11)
   val R12 = asm-Reg(12)
   val R13 = asm-Reg(13)
   val R14 = asm-Reg(14)
   val R15 = asm-Reg(15)
   
   defn store-op (x:asm-Imm, y:asm-Imm, off:Int) :
      emit(asm-Store(LT, x, y, off))
   defn store-op (x:asm-Imm, y:asm-Imm) :
      store-op(x, y, 0)
   defn load-op (x:asm-Loc, y:asm-Imm, off:Int) :
      emit(asm-Load(LT, x, y, off))
   defn load-op (x:asm-Loc, y:asm-Imm) :
      load-op(x, y, 0)
   defn load-int-op (x:asm-Loc, y:asm-Imm, off:Int) :
      emit(asm-Load(IT, x, y, off))
   defn add-op (x:asm-Loc, y:asm-Imm, z:asm-Imm) :
      emit(asm-BinOp(LT, x, asm-ADD-OP, y, z))
   defn sub-op (x:asm-Loc, y:asm-Imm, z:asm-Imm) :
      emit(asm-BinOp(LT, x, asm-SUB-OP, y, z))
   defn set-op (x:asm-Loc, y:asm-Imm) :
      emit(asm-SetIns(LT, x, y))
   defn int-to-long-op (x:asm-Loc, y:asm-Imm) :
      emit(asm-ConvertIns(LT, x, IT, y))
   defn je-op (dest:asm-Imm, x:asm-Imm, y:asm-Imm) :
      emit(asm-Branch(LT, dest, asm-EQ-OP, x, y))
   defn call-op (x:asm-Imm) :
      emit(asm-Call(x))
   defn return-op () :
      emit(asm-Return())
   ;Reserve registers
   defn reserve-long (n:Int) :
      emit(asm-Label(n))
      emit(asm-DefLong(to-long(0)))
      mem(n)
   defn reserve-long () :
      reserve-long(fresh-id())

   ;     Reserved Space
   ;     ==============
   let :
      emit(asm-DefData())
      emit(asm-Label(ARG-LBL))
      emit(asm-DefSpace(256 * 8))
      emit(asm-Label(SWAP-LBL))
      emit(asm-DefLong(to-long(0)))
      emit(asm-DefText())

   ;     Entry Function
   ;     ==============         
   let :      
      emit(asm-DefData())
      val RSP-SAVE = reserve-long(C-RSP-LBL)
      emit(asm-DefText())

      ;System Parameters
      emit(asm-ExLabel(make-external-symbol(`stanza_stack_size)))
      emit(asm-DefLong(to-long(STACK-SIZE)))

      ;Entry Function
      emit(asm-ExLabel(make-external-symbol(`stanza_entry)))
      
      ;Save C Context
      ;C activation frame looks like:
      ;RET <-- RSP
      ;R1
      ;R6
      ;R11
      ;R12
      ;R13
      ;R14
      store-op(RSP-SAVE, RSP)
      store-op(RSP, R1, -8)
      store-op(RSP, R6, -16)
      store-op(RSP, R11, -24)
      store-op(RSP, R12, -32)
      store-op(RSP, R13, -40)
      store-op(RSP, R14, -48)

      ;Set passed stack pointer as initial stack
      val STK-MEM = R5
      add-op(R0, STK-MEM, int(REF-TAG-BITS))
      store-op(mem(STACK-LBL), R0)
      ;Set stack limit
      add-op(R0, STK-MEM, int(STACK-SIZE))
      store-op(mem(STACK-LIM-LBL), R0)
      ;Set RSP to passed stack pointer
      add-op(RSP, STK-MEM, int(STACK-ITEMS-OFFSET + 8))
      ;Call entry
      call-op(mem(entry(p)))

      ;Transfer return result to C
      set-op(R0, R2)

      ;Restore C context
      load-op(RSP, RSP-SAVE)
      load-op(R1, RSP, -8)
      load-op(R6, RSP, -16)
      load-op(R11, RSP, -24)
      load-op(R12, RSP, -32)
      load-op(R13, RSP, -40)
      load-op(R14, RSP, -48)

      ;Return
      return-op()

   ;     Stack Retraction
   ;     ================
   let :
      emit(asm-DefData())      
      val R2-SAVE = reserve-long()
      val R3-SAVE = reserve-long()
      val R4-SAVE = reserve-long()
      val R5-SAVE = reserve-long()
      emit(asm-DefText())

      ;Header
      emit(asm-Label(RETRACT-STACK-LBL))

      ;0. Save required registers
      store-op(R2-SAVE, R2)
      store-op(R3-SAVE, R3)
      store-op(R4-SAVE, R4)
      store-op(R5-SAVE, R5)

      ;Utilities for temporary
      val TMP = R5
      defn tmp-add (x:asm-Imm, y:asm-Imm) :
         add-op(TMP, x, y)
         TMP
      
      ;1. Increment number of free stacks
      val FREE-STACKS = R5
      ;num-free-stacks += 1
      load-op(TMP, mem(NUM-FREE-STACKS-LBL))
      add-op(TMP, TMP, int(1))
      store-op(mem(NUM-FREE-STACKS-LBL), TMP)
      ;free-stacks -= sizeof(ptr)
      load-op(FREE-STACKS, mem(FREE-STACKS-LBL))
      sub-op(FREE-STACKS, FREE-STACKS, int(8))
      store-op(mem(FREE-STACKS-LBL), FREE-STACKS)

      ;2. Flip positions with active stack
      val SWAP = R0
      val STK = R1
      val SWAP-P = R2
      val STK-P = R3
      val POOL = R4
      val skip-lbl = fresh-id()
      ;val swap = [free-stacks], val stk = current stack
      load-op(SWAP, FREE-STACKS)
      load-op(STK, mem(STACK-LBL))
      je-op(mem(skip-lbl), SWAP, STK)
      ;swap stack-pool[swap.position] with stack-pool[stk.position]
      load-int-op(SWAP-P, SWAP, STACK-POSITION-OFFSET - REF-TAG-BITS)
      int-to-long-op(SWAP-P, SWAP-P)
      load-int-op(STK-P, STK, STACK-POSITION-OFFSET - REF-TAG-BITS)
      int-to-long-op(STK-P, STK-P)      
      load-op(POOL, mem(STACK-POOL-LBL))      
      store-op(tmp-add(POOL, SWAP-P), STK)
      store-op(tmp-add(POOL, STK-P), SWAP)
      ;swap swap.position with stk.position      
      store-op(STK, SWAP-P, STACK-POSITION-OFFSET - REF-TAG-BITS)
      store-op(SWAP, STK-P, STACK-POSITION-OFFSET - REF-TAG-BITS)
      ;end of swap
      emit(asm-Label(skip-lbl))

      ;3. Update stack and limits
      val PARENT = R2
      val LIMIT = R3
      ;current stack = stk.parent
      load-op(PARENT, STK, STACK-PARENT-OFFSET - REF-TAG-BITS)
      store-op(mem(STACK-LBL), PARENT)
      ;rsp = stk.parent.sp
      load-op(RSP, PARENT, STACK-SP-OFFSET - REF-TAG-BITS)
      ;stack limit = parent + stack-size
      add-op(LIMIT, PARENT, int(STACK-SIZE - REF-TAG-BITS))
      store-op(mem(STACK-LIM-LBL), LIMIT)

      ;4. Restore required registers
      load-op(R2, R2-SAVE)
      load-op(R3, R3-SAVE)
      load-op(R4, R4-SAVE)
      load-op(R5, R5-SAVE)

      ;5. Return
      return-op()

   ;     DEBUG: Serialize DefFn
   ;     ======================
   val defns = to-list(filter({_ is DefFn}, ins(p))) as List<DefFn>
   serialize-defns(defns, "defns.dat")

   ;     Compile all constructs
   ;     ======================
   val info-table = Vector<KeyValue<Int,FileInfo>>()
   val fn-counter = to-seq(0 to false)
   val instructions = to-vector<DefIns|False>(ins(p))
   clear(ins(p))
   trim(ins(p))

   for idx in 0 to length(instructions) do :
      match(instructions[idx]) :
         (i:DefFn) :
            if flag-defined?(`VERBOSE) :
               println("Compiling function F%~, number %~ " % [n(i), next(fn-counter)])
            start(bb-timer)   
            bb-compile(i, backend, output, info-table)
            stop(bb-timer)
            flush-output()
         (i:DefData) : emit(asm-DefData())
         (i:DefText) : emit(asm-DefText())
         (i:DefByte) : emit(asm-DefByte(value(i)))
         (i:DefInt) : emit(asm-DefInt(value(i)))
         (i:DefLong) : emit(asm-DefLong(value(i)))
         (i:DefFloat) : emit(asm-DefFloat(value(i)))
         (i:DefDouble) : emit(asm-DefDouble(value(i)))
         (i:DefString) : emit(asm-DefString(value(i)))
         (i:DefSpace) : emit(asm-DefSpace(size(i)))
         (i:DefLabel) : emit(asm-DefLabel(n(i)))
         (i:TLabel) : emit(asm-Label(n(i)))
         (i:TExLabel) : emit(asm-ExLabel(lbl(i)))
      instructions[idx] = false   

   ;     Compile file information table
   ;     ==============================
   ;Track all filenames used
   val filenames = HashTable<String,Int>()
   defn filename-lbl (name:String) :
      if not key?(filenames, name) :
         filenames[name] = fresh-id()
      filenames[name]

   emit(asm-DefData())
   emit(asm-Label(INFO-TABLE-LBL))
   emit(asm-DefLong(to-long(length(info-table))))
   for entry in info-table do :
      val [lbl, info] = [key(entry), value(entry)]
      emit(asm-DefLabel(lbl))
      emit(asm-DefLabel(filename-lbl(filename(info))))
      emit(asm-DefInt(line(info)))
      emit(asm-DefInt(column(info)))
   ;Emit all filenames used
   for entry in filenames do :
      val [name, lbl] = [key(entry), value(entry)]
      emit(asm-Label(lbl))
      emit(asm-DefString(name))
   emit(asm-DefText())

   ;     ;Emit output to file
   ;     -------------------
   flush-output()
   close(output-file)
   println(bb-timer)
   println(asm-timer)
