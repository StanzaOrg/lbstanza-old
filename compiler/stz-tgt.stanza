#include<"core/stringeater.stanza">
#include<"compiler/stz-algorithms.stanza">
#include<"compiler/stz-lexer.stanza">
#include<"compiler/stz-parser.stanza">
#include("compiler/stz-tgt-ir.stanza")
#include("compiler/stz-bb-ir.stanza")
#include("compiler/stz-bb.stanza")
#include("compiler/stz-asm-ir.stanza")
#include("compiler/stz-asm-emitter.stanza")
#include("compiler/stz-utils.stanza")


defpackage stz/tgt :
   import core
   import verse
   import stz/lexer
   import stz/utils   
   import stz/tgt-ir
   import stz/bb with :
      prefix => bb-
   import stz/asm-ir with :
      prefix => asm-
   import stz/asm-emitter with :
      prefix => asm-

;                        Special Labels
;                        ==============

;C Parameter Labels
public val C-RSP-LBL = fresh-id()
public val C-RBX-LBL = fresh-id()
public val C-RBP-LBL = fresh-id()
public val C-R12-LBL = fresh-id()
public val C-R13-LBL = fresh-id()
public val C-R14-LBL = fresh-id()
public val C-R15-LBL = fresh-id()

;Argument Label
public val ARG-LBL = fresh-id()

;                            Parser
;                            ======

defsyntax tgt-ir :
   val ut = unwrap-token

   val sym-table = HashTable<Symbol,Int>(symbol-hash)
   defn sym-num (x:Symbol) :
      match(get?(sym-table, x, false)) :
         (n:Int) :
            n
         (f:False) :
            val n = fresh-id()
            sym-table[x] = n
            n         

   defrule :
      sym = (?x) when ut(x) typeof Symbol : ut(x)
      int = (?x) when ut(x) typeof Int : ut(x)

      imm = (int(?n:#int)) : IntImm(n)
      imm = (mem<?x:#sym>) : Mem(sym-num(x))
      imm = (?x:#sym) : Var(sym-num(x))

      op = (add) : ADD-OP
      op = (sub) : SUB-OP
      op = (mul) : MUL-OP
      op = (div) : DIV-OP
      op = (mod) : MOD-OP
      op = (and) : AND-OP
      op = (or) : OR-OP
      op = (xor) : XOR-OP
      op = (shl) : SHL-OP
      op = (shr) : SHR-OP
      op = (ashr) : ASHR-OP
      op = (eq) : EQ-OP
      op = (ne) : NE-OP
      op = (lt) : LT-OP
      op = (gt) : GT-OP
      op = (le) : LE-OP
      op = (ge) : GE-OP
      op = (ule) : ULE-OP
      op = (ult) : ULT-OP
      op = (ugt) : UGT-OP
      op = (uge) : UGE-OP

      ins = (?x:#imm = ?op:#op(?y:#imm, ?z:#imm)) : BinOp(x, op, y, z)
      ins = ((?xs:#imm ...) = ?f:#imm(?ys:#imm ...) / ?n:#int) : Call(n, xs, f, ys)
      ins = ((?xs:#imm ...) = ?f:#imm(?ys:#imm ...)) : Call(length(ys), xs, f, ys)
      ins = (?x:#imm = ?y:#imm) : SetIns(x, y)
      ins = (return (?xs:#imm ...)) : Return(xs)
      ins = (label<?n:#sym>) : Label(sym-num(n))
      ins = (goto label<?n:#sym>) : Goto(sym-num(n))
      ins = (branch label<?n:#sym> when ?op:#op(?x:#imm, ?y:#imm)) : Branch(sym-num(n), op, x, y)

      type = (byte) : BYTE-TYPE
      type = (int) : INT-TYPE
      type = (long) : LONG-TYPE
      type = (float) : FLOAT-TYPE
      type = (double) : DOUBLE-TYPE
      type = (ref) : REF-TYPE

      defvar = (?x:#sym : ?t:#type) : DefVar(sym-num(x), t)

      defins = (defn ?f:#sym / ?n:#int (?args:#defvar ...) :
                   locals: (?locals:#defvar ...)
                   ?body:#ins ...) :
         DefFn(sym-num(f), n, args, to-vector(locals), to-vector(body))
      defins = (defn ?f:#sym (?args:#defvar ...) :
                   locals: (?locals:#defvar ...)
                   ?body:#ins ...) :
         DefFn(sym-num(f), length(args), args, to-vector(locals), to-vector(body))

      program = (program(?e:#sym) :
                    ?ins:#defins ...) :
         Program(to-vector(ins), sym-num(e))


defn parse-tgt-ir (file:String) :
   val lexed = lex-file(file)
   with-syntax(tgt-ir) :
      match-syntax(lexed) :
         (?p:#program) : p



;                          Compilation
;                          ===========

;x86-64 Register Mapping
;%rax: R0
;%rbx: R1
;%rcx: R2
;%rdx: R3
;%rsi: R4
;%rdi: R5
;%rbp: R6
;%r8: R7
;%r9: R8
;%r10: R9
;%r11: R10
;%r12: R11
;%r13: R12
;%r14: R13
;%r15: R14

defn compile (p:Program, filename:String) :
   ;     Output State
   ;     ------------
   val output = Vector<asm-Ins>()
   defn emit (i:asm-Ins) : add(output, i)


   ;     Entry Function
   ;     --------------
   let :      
      ;Stored C Parameters
      defn deflong (lbl:Int) :
         emit(asm-Label(lbl))
         emit(asm-DefLong(0))
      emit(asm-DefData())
      deflong(C-RSP-LBL)
      deflong(C-RBX-LBL)
      deflong(C-RBP-LBL) 
      deflong(C-R12-LBL)
      deflong(C-R13-LBL)
      deflong(C-R14-LBL)
      deflong(C-R15-LBL)      
      emit(asm-DefText())

      ;Entry Function
      emit(asm-ExLabel(`_stanza_entry))
      
      ;Save C Parameters
      emit(asm-Store(asm-LONG-TYPE, asm-Mem(C-RSP-LBL), asm-RegSP(), 0))
      emit(asm-Store(asm-LONG-TYPE, asm-Mem(C-RBX-LBL), asm-Reg(1), 0))
      emit(asm-Store(asm-LONG-TYPE, asm-Mem(C-RBP-LBL), asm-Reg(6), 0))
      emit(asm-Store(asm-LONG-TYPE, asm-Mem(C-R12-LBL), asm-Reg(11), 0))
      emit(asm-Store(asm-LONG-TYPE, asm-Mem(C-R13-LBL), asm-Reg(12), 0))
      emit(asm-Store(asm-LONG-TYPE, asm-Mem(C-R14-LBL), asm-Reg(13), 0))
      emit(asm-Store(asm-LONG-TYPE, asm-Mem(C-R15-LBL), asm-Reg(14), 0))

      ;Set RSP to passed stack pointer, and call entry
      emit(asm-SetIns(asm-LONG-TYPE, asm-RegSP(), asm-Reg(5)))
      emit(asm-BinOp(asm-LONG-TYPE, asm-RegSP(), asm-ADD-OP, asm-RegSP(), asm-IntImm(8)))
      emit(asm-Call(asm-Mem(entry(p))))

      ;Transfer return result to C
      emit(asm-SetIns(asm-LONG-TYPE, asm-Reg(0), asm-Reg(2)))

      ;Restore C parameters
      emit(asm-Load(asm-LONG-TYPE, asm-RegSP(), asm-Mem(C-RSP-LBL), 0))
      emit(asm-Load(asm-LONG-TYPE, asm-Reg(1), asm-Mem(C-RBX-LBL), 0))
      emit(asm-Load(asm-LONG-TYPE, asm-Reg(6), asm-Mem(C-RBP-LBL), 0))
      emit(asm-Load(asm-LONG-TYPE, asm-Reg(11), asm-Mem(C-R12-LBL), 0))
      emit(asm-Load(asm-LONG-TYPE, asm-Reg(12), asm-Mem(C-R13-LBL), 0))
      emit(asm-Load(asm-LONG-TYPE, asm-Reg(13), asm-Mem(C-R14-LBL), 0))
      emit(asm-Load(asm-LONG-TYPE, asm-Reg(14), asm-Mem(C-R15-LBL), 0))

      ;Return      
      emit(asm-Return())      


   ;     Compile all constructs
   ;     ----------------------
   for i in ins(p) do :
      match(i) :
         (i:DefFn) :
            emit(asm-Label(n(i)))
            bb-compile(i, output)
         (i) :
            error("Not yet implemented.")
            

   ;     ;Emit output to file
   ;     -------------------
   with-output-file(filename, asm-emit{output})

;                          Main Driver
;                          ===========

defn headline (str:String) :
   val n = length(str)
   val m = 30 - n / 2
   println()
   do(print{" "}, 0 to m)
   println(str)
   do(print{" "}, 0 to m)
   do(print{"="}, 0 to n)
   println()
      
defn main () :
   val filename = commandline-arguments()[1]
   val program = parse-tgt-ir(filename)
   
   headline("Program")
   println(program)

   headline("Compilation")
   compile(program, "test.s")   

main()