;See License.txt for details about licensing
#use-added-syntax(stz-serializer-lang)

defpackage stz/pkg :
  import core
  import collections
  import stz/algorithms
  import stz/params
  import stz/serializer
  import stz/utils
  import stz/typeset
  import stz/asm-ir with :
    prefix(AddOp, SubOp, MulOp, DivOp, ModOp, AndOp, OrOp, XorOp, ShlOp,
           ShrOp, AshrOp, EqOp, NeOp, LtOp, GtOp, LeOp, GeOp, UleOp,
           UltOp, UgtOp, UgeOp, NotOp, NegOp, DivModOp, BitSetOp, BitNotSetOp,
           TypeofOp, XchgIns, SetIns, ConvertIns, InterpretIns, UnaOp, BinOp,
           DualOp, Load, Store, Call, Return, Goto, Break, Label, LinkLabel,
           ExLabel, Match, Dispatch, MethodDispatch, DefData, DefText, DefByte,
           DefInt, DefLong, DefFloat, DefDouble, DefString, DefBytes, DefSpace, DefLabel) => asm-
  import stz/visibility
  import stz/dl-ir
  import stz/basic-ops
  import stz/vm-ir
  import stz/el-ir

;<doc>=======================================================
;====================== Interface ===========================
;============================================================

# Fundamental State #

  pkg-table: HashTable<Symbol, Pkg>
  filename-table: HashTable<Symbol,String>

Pkg-table holds all loaded Pkg datastructures, indexed by package
name. The source file that the pkg was loaded from are stored in the
filename-table.

# Load a Pkg file by filename #

  load-pkg (loader:PkgLoader, filename:String) -> Pkg

Load in a package given its filename. Ensures that the loaded Pkg is
of the right type given the PkgLoader.

# Load a Pkg file by package name #

  load-pkg (loader:PkgLoader, name:Symbol) -> Pkg

Load in a package given its package name. Ensures that the loaded Pkg
is of the right type given the PkgLoader.

# Load Dependencies #

  load-dependencies (loader:PkgLoader, already-loaded:Seqable<Symbol>) -> False

For all the loaded pkgs, transitively load the pkgs corresponding to
all of their imported dependencies, excluding the packages that are
given as already loaded in some other form. The packages loaded from
the source files will be typically passed here.

# Return all loaded pkgs #

  pkgs (loader:PkgLoader) -> Tuple<Pkg>

Return all the pkgs loaded through the PkgLoader.

# Return the filename that a specific package was loaded from #

  source-file (loader:PkgLoader, name:Symbol) -> String

Assumes that the package was loaded using the given package loader.

# Save a given package to file #

  save-package (dir:String, p:Pkg)-> False

Saves the given package to the given directory.

;============================================================
;=======================================================<doc>

;============================================================
;====================== PkgLoader ===========================
;============================================================
public deftype PkgLoader
public defmulti load-pkg (loader:PkgLoader, filename:String) -> Pkg
public defmulti load-pkg (loader:PkgLoader, name:Symbol) -> Pkg
public defmulti load-dependencies (loader:PkgLoader, already-loaded:Seqable<Symbol>) -> False
public defmulti pkgs (loader:PkgLoader) -> Tuple<Pkg>
public defmulti source-file (loader:PkgLoader, name:Symbol) -> String

public defn PkgLoader (optimized?:True|False) :
  val pkg-table = HashTable<Symbol,Pkg>()
  val filename-table = HashTable<Symbol,String>()
  defn add-pkg (pkg:Pkg, filename:String) :
    pkg-table[name(pkg)] = pkg
    filename-table[name(pkg)] = filename
  
  new PkgLoader :
    defmethod load-pkg (this, filename:String) :
      val pkg = load-package(filename, false, optimized?)
      add-pkg(pkg, filename)
      pkg
      
    defmethod load-pkg (this, name:Symbol) :
      within update?(pkg-table, name) :
        match(find-pkg(name, optimized?)) :
          (filename:String) :
            val pkg = load-package(filename, name, optimized?)
            add-pkg(pkg, filename)
            pkg
          (_:False) :
            throw(NoPackageException(name))
            
    defmethod source-file (this, name:Symbol) :
      filename-table[name]

    defmethod load-dependencies (this, already-loaded:Seqable<Symbol>) :
      val loadset = to-hashset<Symbol>(already-loaded)    
      defn ensure-loaded (name:Symbol) :
        if not loadset[name] and not key?(pkg-table, name) :
          ensure-dependencies-loaded(load-pkg(this, name))          
      defn ensure-dependencies-loaded (pkg:Pkg) :
        do(ensure-loaded, imported-packages(packageio(pkg)))
      do(ensure-dependencies-loaded, to-tuple(values(pkg-table)))

    defmethod pkgs (this) :
      to-tuple(values(pkg-table))

;============================================================
;=================== Package IO =============================
;============================================================

public defn save-package (dir:String, p:Pkg) -> String :
  val filename = norm-path("%_/%_%_" % [
                   dir,
                   mangle-as-filename(name(p)),
                   extension(p)])
  val f = FileOutputStream(filename)
  try : serialize(f, p)
  catch (e:SerializeException) : throw(PackageWriteException(filename))
  finally : close(f)
  filename

public defn load-package (filename:String, expected-name:Symbol|False, optimized?:True|False) :
  ;Load in the package
  val f = FileInputStream(filename)
  val pkg =
    try : deserialize-pkg(f)
    catch (e:DeserializeException) : throw(PackageReadException(filename))
    finally : close(f)
  ;Ensure that name and optimization levels match expected.
  match(expected-name:Symbol) :
    ensure-expected-name!(pkg, filename, expected-name)
  ensure-expected-optimization!(pkg, filename, optimized?)
  ;Return the pkg
  pkg
  
defn ensure-expected-name! (pkg:Pkg, filename:String, name:Symbol) :
  if /name(pkg) != name :
    throw(WrongPackageNameException(filename, name, /name(pkg)))

defn ensure-expected-optimization! (pkg:Pkg, filename:String, optimized?:True|False) :
  val pkg-optimized? = pkg is FastPkg
  if pkg-optimized? != optimized? :
    throw(WrongPackageOptimization(name(pkg), filename, pkg-optimized?, optimized?))

;============================================================
;===================== Exceptions ===========================
;============================================================

public deftype PkgException <: Exception

;An error when attempting to read a package with a given filename.
public defstruct PackageReadException <: PkgException :
  filename: String
defmethod print (o:OutputStream, e:PackageReadException) :
  print(o, "An error occurred when reading package from %_." % [filename(e)])

;An error when attempting to write a package with a given filename.
public defstruct PackageWriteException <: PkgException :
  filename: String
defmethod print (o:OutputStream, e:PackageWriteException) :
  print(o, "An error occurred when writing package to %_." % [filename(e)])

;An error when no package with the given name is found.
public defstruct NoPackageException <: PkgException :
  name: Symbol
defmethod print (o:OutputStream, e:NoPackageException) :
  print(o, "Could not locate package %_." % [name(e)])

;An error when the loaded package does not have the name that we
;expect, based upon the filename.
public defstruct WrongPackageNameException <: PkgException :
  filename:String
  expected-name:Symbol
  actual-name:Symbol
defmethod print (o:OutputStream, e:WrongPackageNameException) :
  print(o, "The package loaded from %~ was expected to have name %~ but actually has name %~." % [
    filename(e), expected-name(e), actual-name(e)])

;An error when the loaded package does not have the optimization level
;that we expect.
public defstruct WrongPackageOptimization <: PkgException :
  package-name: Symbol
  filename: String
  pkg-optimized?: True|False
  expected-optimized?: True|False
defmethod print (o:OutputStream, e:WrongPackageOptimization) :
  defn opt-str (o:True|False) : "optimized" when o else "unoptimized"
  print(o, "The %~ package, loaded from %~, is an %_ pkg file but it was expected to be %_." % [
    package-name(e), filename(e), opt-str(pkg-optimized?(e)), opt-str(expected-optimized?(e))])

;============================================================
;===================== Pkg Search ===========================
;============================================================

public defn find-pkg! (name:Symbol, optimized?:True|False) -> String :
  val filename = find-pkg(name, optimized?)
  match(filename:String) : filename
  else : throw(NoPackageException(name))

public defn find-pkg (name:Symbol, optimized?:True|False) -> String|False :
  val mangled = mangle-as-filename(name)
  label<String|False> return :
    ;Check functions
    defn check-file (filename:String) :
      return(filename) when file-exists?(filename)
    defn check-dir (dir:String) :
      val extension = ".fpkg" when optimized? else ".pkg"
      val filename = norm-path("%_/%_%_" % [dir, mangle-as-filename(name), extension])
      check-file(filename)
    defn check-dirs (dirs:Seqable<String>) :
      do(check-dir, dirs)
    ;Check normal folders
    check-dirs(STANZA-PKG-DIRS)
    check-dir(append(STANZA-INSTALL-DIR "/pkgs"))

;============================================================
;=================== Pkg Definitions ========================
;============================================================

public deftype Pkg
public defstruct StdPkg <: Pkg :
  vmp: VMPackage
  asm: Tuple<Ins>
  datas: Tuple<VMData>
public defstruct FastPkg <: Pkg :
  packageio: PackageIO with: (as-method => true)
  exps: Tuple<ETExp>

public defmulti packageio (pkg:Pkg) -> PackageIO
defmethod packageio (pkg:StdPkg) :
  packageio(vmp(pkg))

public defn name (pkg:Pkg) :
  package(packageio(pkg))

defn extension (p:Pkg) :
  match(p) :
    (p:StdPkg) : ".pkg"
    (p:FastPkg) : ".fpkg"

defmethod print (o:OutputStream, p:Pkg) :
  match(p) :
    (p:StdPkg) :
      print(o, vmp(p))
      lnprint(o, "Instructions:")
      val o2 = IndentedStream(o)
      do(lnprint{o2, _}, asm(p))
      lnprint(o, "Datas:")
      do(lnprint{o2, _}, datas(p))
    (p:FastPkg) :
      print(o, packageio(p))
      lnprint(o, "Instructions:")
      val o2 = IndentedStream(o)
      do(lnprint{o2, _}, exps(p))

;============================================================
;=================== Serializer =============================
;============================================================

defserializer (out:FileOutputStream, in:FileInputStream) :

  ;=============
  ;==== Pkg ====
  ;=============
  defunion pkg (Pkg) :
    StdPkg: (vmp:vmpackage, asm:tuple(ins), datas:tuple(vmdata))
    FastPkg: (packageio:packageio, exps:tuple(etexp))

  ;==================
  ;==== Literals ====
  ;==================
  defatom lit (x:?) :
    writer :
      match(x) :
        (x:Char) :
          write-byte(0Y)
          write-char(x)
        (x:Byte) :
          write-byte(1Y)
          write-byte(x)
        (x:Int) :
          write-byte(2Y)
          write-int(x)
        (x:Long) :
          write-byte(3Y)
          write-long(x)
        (x:Float) :
          write-byte(4Y)
          write-float(x)
        (x:Double) :
          write-byte(5Y)
          write-double(x)
        (x:String) :
          write-byte(6Y)
          write-string(x)
        (x:Symbol) :
          write-byte(7Y)
          write-symbol(x)
        (x:List) :
          write-byte(8Y)
          write-list(write-lit, x)
        (x:True) :
          write-byte(9Y)
        (x:False) :
          write-byte(10Y)
        (x:VMTypeObject) :
          write-byte(11Y)
          write-vmimm(id(x))
        (x:VMClosure) :
          write-byte(12Y)
          write-vmimm(id(x))
        (x:VMInternedConst) :
          write-byte(13Y)
          write-vmimm(id(x))
    reader :
      defn read-codeid () :
        match(read-vmimm()) :
          (x:CodeId) : x
          (x) : throw(DeserializeException())
      defn read-constid () :
        match(read-vmimm()) :
          (x:ConstId) : x
          (x) : throw(DeserializeException())

      switch(read-byte()) :
        0Y : read-char()
        1Y : read-byte()
        2Y : read-int()
        3Y : read-long()
        4Y : read-float()
        5Y : read-double()
        6Y : read-string()
        7Y : read-symbol()
        8Y : read-list(read-lit)
        9Y : true
        10Y : false
        11Y : VMTypeObject(read-codeid())
        12Y : VMClosure(read-codeid())
        13Y : VMInternedConst(read-constid())
        else : throw(DeserializeException())

  ;===================
  ;==== PackageIO ====
  ;===================
  defunion packageio (PackageIO) :
    PackageIO: (package:symbol, imported-packages:tuple(symbol), imports:tuple(dimport), exports:tuple(dexport))

  defunion dexport (Export) :
    Export: (n:int, visibility:visibility, rec:drec, info:opt<FileInfo>(info))

  defunion dimport (Import) :
    Import: (n:int, rec:drec, transient?:bool)

  defunion visibility (Visibility) :
    Private: ()
    Protected: ()
    Public: ()

  ;================
  ;==== DTypes ====
  ;================
  defunion dtype (DType) :
    DByte: ()
    DInt: ()
    DLong: ()
    DFloat: ()
    DDouble: ()
    DUnknown: ()
    DPtrT: (type:dtype)
    DFnT: (a:tuple(dtype), r:opt<DType>(dtype), b:dtype)
    DStructT: (id:drecid as TypeId, targs:tuple(dtype))
    DOf: (id:drecid as TypeId, targs:tuple(dtype))
    DTVar: (index:int)
    DCap: (tvar:dtype as DTVar)
    DAnd: (types:tuple(dtype))
    DOr: (types:tuple(dtype))
    DTop: ()
    DBot: ()
    DTuple: (types:tuple(dtype))
    DArrow: (a1:tuple(dtype), a2:dtype)

  ;==================
  ;==== DRecords ====
  ;==================
  defunion drecid (RecId) :
    ValId: (package:symbol, name:symbol)
    TypeId: (package:symbol, name:symbol)
    FnId: (package:symbol, name:symbol, ntargs:int, ncargs:int, a1:tuple(dtype))

  defunion drec (Rec) :
    ValRec: (id:drecid as ValId, type:dtype, mutable?:bool, lostanza?:bool)
    FnRec: (id:drecid as FnId, a2:dtype, lostanza?:bool, tail?:bool)
    MultiRec: (id:drecid as FnId, a2:dtype)
    ExternFnRec: (id:drecid as FnId, a2:dtype, lbl:symbol)
    ExternRec: (id:drecid as ValId, type:dtype, lbl:symbol)
    StructRec: (id:drecid as TypeId, ntargs:int, parent:opt<DType>(dtype), base:tuple(structfield), items:opt<StructField>(structfield))
    TypeRec: (id:drecid as TypeId, ntargs:int, parent:opt<DType>(dtype), children:tuple(child))
    TypeDecl: (id:drecid as TypeId, ntargs:int, parent:opt<DType>(dtype))

  defunion structfield (StructField) :
    StructField: (name:symbol, type:dtype)

  defunion child (Child) :
    Child: (id:drecid as TypeId, ntargs:int, parent:dtype as DOf)

  ;==========================
  ;==== EL Datastructure ====
  ;==========================
  defunion etexp (ETExp) :
    EDefGlobal: (n:int, type:etype, mutable?:bool, lostanza?:bool)
    EDefn: (n:int, func:efunction, lostanza?:bool)
    EDefClosure: (n:int, closure:int, ntargs:int, nargs:int, func:efunction)
    EDefmulti: (n:int, targs:tuple(int), a1:tuple(etype), a2:etype, info:opt<FileInfo>(info))
    EDefmethod: (n:int, multi:int, targs:tuple(etype), func:efunction as EFn, lostanza?:bool)
    EDefStruct: (n:int, parent:opt<EType>(etype), base:tuple(etype), items:opt<EType>(etype))
    EExternFn: (n:int, lbl:symbol, func:efunction as EFn)
    EExtern: (n:int, lbl:symbol, type:etype)
    EInit: (n:int, body:ebody, lostanza?:bool)
    EDefType: (n:int, parent:opt<EType>(etype), children:tuple(int))
    EDefObject: (n:int, parent:etype, ntargs:int, nargs:int, methods:tuple(int))
    EDefTypeObject: (n:int, nargs:int, type:etype)
    
  defunion etype (EType) :
    EByte: ()
    EInt: ()
    ELong: ()
    EFloat: ()
    EDouble: ()
    EUnknown: ()
    EPtrT: ()
    EFnT: (a:tuple(etype), r:opt<EType>(etype), b:etype)
    EStructT: (n:int)
    EOf: (n:int)
    ETVar: (n:int)
    EAnd: (a:etype, b:etype)
    EOr: (a:etype, b:etype)
    ETop: ()
    EBot: ()

  defunion efunction (EFunction) :
    EMultifn: (funcs:tuple(efunction as EFn))
    EFn: (tail?:bool, targs:tuple(int), args:tuple(int), a1:tuple(etype), a2:etype, body:ebody, info:opt<FileInfo>(info))

  defunion elocal (ELocal) :
    ELocal: (n:int, type:etype, mutable?:bool)

  defunion elocaltype (ELocalType) :
    ELocalType: (n:int)

  defunion elocalfn (ELocalFn) :
    ELocalFn: (n:int, func:efunction)

  defunion elocalobj (ELocalObj) :
    ELocalObj: (n:int, type:etype, methods:tuple(emethod))

  defunion emethod (EMethod) :
    EMethod: (multi:int, targs:tuple(etype), thisn:int, func:efunction as EFn)

  defunion ebody (EBody) :
    EBody: (locals:tuple(elocal), localtypes:tuple(elocaltype), localfns:tuple(elocalfn), localobjs:tuple(elocalobj), ins:tuple(eins))

  defunion eimm (EImm) :
    ELSLiteral: (value:lit)
    ELiteral: (value:lit)
    EVar: (n:int, info:opt<FileInfo>(info), name:opt<String>(string))
    EMix: (funcs:tuple(eimm as EVar|ECurry))
    ECurry: (x:eimm as EVar, targs:tuple(etype))
    ESizeof: (type:etype)
    ETagof: (n:int)
    EConstClosure: (n:int)
    EConstType: (n:int)

  defunion eloc (ELoc) :
    EVarLoc: (n:int)
    EDeref: (y:eimm)
    EDeptr: (y:eimm)
    EField: (loc:eloc, n:int, index:int)
    ESlot: (loc:eloc, type:etype, index:eimm)

  defunion etvarloc (ETVarLoc) :
    ETVarLoc: (n:int)

  defunion eins (EIns) :
    EDef: (x:eloc as EVarLoc, y:opt<EImm>(eimm), info:opt<FileInfo>(info))
    EInitClosures: (xs:tuple(eloc as EVarLoc), info:opt<FileInfo>(info))
    ENew: (x:eloc as EVarLoc, n:int, info:opt<FileInfo>(info))
    ETuple: (x:eloc as EVarLoc, ys:tuple(eimm), info:opt<FileInfo>(info))
    EVoidTuple: (x:eloc as EVarLoc, length:int, info:opt<FileInfo>(info))
    ETupleGet: (x:eloc as EVarLoc, y:eimm, index:int, info:opt<FileInfo>(info))
    ETupleSet: (y:eimm, index:int, z:eimm)
    EObject: (x:eloc as EVarLoc, n:int, ys:tuple(eimm), info:opt<FileInfo>(info))
    EArray: (x:eloc as EVarLoc, n:int, ys:tuple(eimm), info:opt<FileInfo>(info))
    EStruct: (x:eloc as EVarLoc, n:int, ys:tuple(eimm))
    EPtr: (x:eloc as EVarLoc, loc:eloc)
    ELoad: (x:eloc as EVarLoc, xtype:etype, loc:eloc)
    EStore: (loc:eloc, y:eimm, ytype:etype, info:opt<FileInfo>(info))
    ELabel: (n:int)
    ETCall: (f:eimm, ys:tuple(eimm), calltype:calltype, info:opt<FileInfo>(info))
    ECall: (x:opt<EVarLoc>(eloc as EVarLoc), f:eimm, ys:tuple(eimm), calltype:calltype, info:opt<FileInfo>(info))
    EDump: (ys:tuple(eimm))
    EInterpret: (x:eloc as EVarLoc, y:eimm)
    EConv: (x:eloc as EVarLoc, y:eimm)
    EGoto: (n:int)
    EPrim: (x:eloc as EVarLoc, op:eop, ys:tuple(eimm), info:opt<FileInfo>(info))
    EIf: (n1:int, n2:int, op:opt<EOp>(eop), ys:tuple(eimm))
    EMatch: (ys:tuple(eimm), branches:tuple(ebranch), info:opt<FileInfo>(info))
    EDispatch: (ys:tuple(eimm), branches:tuple(ebranch), info:opt<FileInfo>(info))
    ECheckLength: (y:eimm, length:int, info:opt<FileInfo>(info))
    ECheck: (y:eimm, type:etype, ctxt:error-ctxt, info:opt<FileInfo>(info))
    ECheckSet: (y:eimm, name:opt<String>(string), info:opt<FileInfo>(info))
    EReturn: (y:eimm)
    ETDef: (x:etvarloc, y:eimm)
    EEnd: (info:opt<FileInfo>(info))
    ETypeof: (n1:int, n2:int, type:etype, y:eimm)

  defunion ebranch (EBranch) :
    EBranch: (types:tuple(etype), n:int, info:opt<FileInfo>(info))

  defunion calltype (CallType) :
    CallGuarded: (a1:tuple(etype), a2:etype)
    CallC: ()
    CallStanza: ()
    CallPtr: ()

  defunion eop (EOp) :
    IntAddOp: ()
    IntSubOp: ()
    IntMulOp: ()
    IntDivOp: ()
    IntModOp: ()
    IntAndOp: ()
    IntOrOp: ()
    IntXorOp: ()
    IntNotOp: ()
    IntShlOp: ()
    IntShrOp: ()
    IntAshrOp: ()
    IntLtOp: ()
    IntGtOp: ()
    IntLeOp: ()
    IntGeOp: ()
    IntNegOp: ()
    AddOp: ()
    SubOp: ()
    MulOp: ()
    DivOp: ()
    ModOp: ()
    AndOp: ()
    OrOp: ()
    XorOp: ()
    NotOp: ()
    ShlOp: ()
    ShrOp: ()
    AshrOp: ()
    NegOp: ()
    EqOp: ()
    NeOp: ()
    LtOp: ()
    GtOp: ()
    LeOp: ()
    GeOp: ()
    UleOp: ()
    UltOp: ()
    UgtOp: ()
    UgeOp: ()
    FlushVMOp: ()
    GCOp: ()
    ClassNameOp: ()
    PrintStackTraceOp: ()
    EnterStackOp: ()
    YieldOp: ()
    CRSPOp: ()

  defunion error-ctxt (CastErrorContext) :
    CastContext: ()
    ArgContext: ()
    ReturnContext: ()
    DefContext: ()
    SetContext: ()
    FuncContext: ()
    DetupleContext: ()
    GetVarContext: ()
    BranchContext: ()

  ;==========================
  ;==== VM Datastructure ====
  ;==========================
  defunion vmpackage (VMPackage) :
    VMPackage: (packageio:packageio, init:opt<Int>(int), globals:tuple(vmglobal),
                datas:tuple(vmdata), consts:tuple(vmconst), classes:tuple(vmclass),
                funcs:tuple(vmdefn), methods:tuple(vmmethod), externs:tuple(vmextern),
                extern-defns:tuple(vmexterndefn))

  defunion vmimm (VMImm) :
    Local: (index:int)
    NumConst: (value:lit)
    Marker: (typeid:int)
    Tag: (typeid:int)
    CodeId: (id:int)
    ExternId: (id:int)
    ExternDefnId: (id:int)
    GlobalId: (id:int)
    DataId: (id:int)
    ConstId: (id:int)
    VoidMarker: ()

  defunion vmtype (VMType) :
    VMByte: ()
    VMInt: ()
    VMLong: ()
    VMFloat: ()
    VMDouble: ()
    VMRef: ()

  defunion vmfunc (VMFunction) :
    VMMultifn: (arg:int, funcs:tuple(func-entry), default:vmfunc as VMFunc)
    VMFunc: (args:tuple(func-arg), defs:tuple(vmdef), ins:tuple(vmins))

  defatom func-arg (x:Local|VMType) :
    writer :
      match(x) :
        (x:Local) :
          write-byte(0Y)
          write-vmimm(x)
        (x:VMType) :
          write-byte(1Y)
          write-vmtype(x)
    reader :
      defn read-local () :
        match(read-vmimm()) :
          (x:Local) : x
          (x) : throw(DeserializeException())
      switch(read-byte()) :
        0Y : read-local()
        1Y : read-vmtype()
        else : throw(DeserializeException())

  defatom func-entry (x:KeyValue<Int,VMFunc>) :
    writer :
      write-int(key(x))
      write-vmfunc(value(x))
    reader :
      val k = non-neg!(read-int())
      val f = read-vmfunc()
      throw(DeserializeException()) when f is-not VMFunc
      k => f as VMFunc

  defunion vmextern (VMExtern) :
    VMExtern: (id:int, name:symbol)

  defunion vmglobal (VMGlobal):
    VMGlobal: (id:int, size:int, roots:tuple(int))

  defunion vmdata (VMData):
    VMData: (id:int, data:bytearray)

  defunion vmconst (VMConst):
    VMConst: (id:int, value:lit)

  defunion vmdef (VMDef):
    VMDef: (id:int, type:vmtype, local:int)

  defunion vmdefn (VMDefn):
    VMDefn: (id:int, dependencies:tuple(int), func:vmfunc)

  defunion vmexterndefn (VMExternDefn):
    VMExternDefn: (lbl:symbol, fid:int, a1:tuple(vmtype), a2:vmtype)

  defunion vmmethod (VMMethod):
    VMMethod: (instance?:bool, multi:int, types:tuple(typeset), fid:int)

  defunion vmclass (VMClass) :
    VMArrayClass: (id:int, dependencies:tuple(int), parents:tuple(int),
                   base-size:int, item-size:int, base-roots:tuple(int), item-roots:tuple(int))
    VMLeafClass: (id:int, dependencies:tuple(int), parents:tuple(int), size:int, roots:tuple(int))
    VMAbstractClass: (id:int, parents:tuple(int), children:tuple(int))

  defunion vmins (VMIns) :
    CallIns: (xs:tuple(func-arg), f:vmimm, ys:tuple(vmimm), info:opt<FileInfo>(info))
    CallClosureIns: (xs:tuple(func-arg), f:vmimm, ys:tuple(vmimm), info:opt<FileInfo>(info))
    TCallIns: (f:vmimm, ys:tuple(vmimm))
    TCallClosureIns: (f:vmimm, ys:tuple(vmimm))
    CallCIns: (xs:tuple(func-arg), f:vmimm, ys:tuple(vmimm), info:opt<FileInfo>(info))
    YieldIns: (enter?:bool, xs:tuple(func-arg), f:vmimm, ys:tuple(vmimm), info:opt<FileInfo>(info))
    SetIns: (x:vmimm as Local, y:vmimm)
    Op0Ins: (x:vmimm as Local, op:vmop)
    Op1Ins: (x:vmimm as Local, op:vmop, y:vmimm)
    Op2Ins: (x:vmimm as Local, op:vmop, y:vmimm, z:vmimm)
    LabelIns: (n:int)
    GotoIns: (n:int)
    Branch0Ins: (n1:int, n2:int, op:vmop)
    Branch1Ins: (n1:int, n2:int, op:opt<VMOp>(vmop), x:vmimm)
    Branch2Ins: (n1:int, n2:int, op:vmop, x:vmimm, y:vmimm)
    DispatchIns: (ys:tuple(vmimm), branches:tuple(vmbranch), default:int, amb:int)
    MatchIns: (ys:tuple(vmimm), branches:tuple(vmbranch), default:int)
    MethodDispatchIns: (multi:int, ys:tuple(vmimm), zs:tuple(vmimm), default:int, amb:int)
    AllocIns: (xs:tuple(vmimm as Local), types:tuple(int), sizes:tuple(vmimm), info:opt<FileInfo>(info))
    StoreIns: (x:vmimm, y:opt<VMImm>(vmimm), offset:int, z:vmimm, class:opt<Int>(int))
    LoadIns: (x:vmimm as Local, y:vmimm, z:opt<VMImm>(vmimm), offset:int, class:opt<Int>(int))
    ReturnIns: (xs:tuple(vmimm))
    DumpIns: (xs:tuple(vmimm as Local))
    RecordLiveIns: (live:tuple(vmimm as Local))
    LiveIns: (xs:tuple(vmimm))
    CommentIns: (message:string)
    UnreachableIns: ()

  defunion vmbranch (VMBranch) :
    VMBranch: (types:tuple(typeset), n:int)

  defunion vmop (VMOp) :
    IntAddOp: ()
    IntSubOp: ()
    IntMulOp: ()
    IntDivOp: ()
    IntModOp: ()
    IntAndOp: ()
    IntOrOp: ()
    IntXorOp: ()
    IntNotOp: ()
    IntShlOp: ()
    IntShrOp: ()
    IntAshrOp: ()
    IntLtOp: ()
    IntGtOp: ()
    IntLeOp: ()
    IntGeOp: ()
    IntNegOp: ()
    AddOp: ()
    SubOp: ()
    MulOp: ()
    DivOp: ()
    ModOp: ()
    AndOp: ()
    OrOp: ()
    XorOp: ()
    NotOp: ()
    ShlOp: ()
    ShrOp: ()
    AshrOp: ()
    NegOp: ()
    EqOp: ()
    NeOp: ()
    LtOp: ()
    GtOp: ()
    LeOp: ()
    GeOp: ()
    UleOp: ()
    UltOp: ()
    UgtOp: ()
    UgeOp: ()
    FlushVMOp: ()
    GCOp: ()
    ClassNameOp: ()
    PrintStackTraceOp: ()
    InstanceofOp: (type:typeset)
    TagOp: (type:int)
    DetagOp: (type:int)
    ConvOp: ()
    InterpretOp: ()
    DerefOp: ()
    CRSPOp: ()

  ;========================
  ;==== Assembly Types ====
  ;========================
  defunion asm-type (ASMType) :
    ByteT: ()
    IntT: ()
    LongT: ()
    FloatT: ()
    DoubleT: ()

  ;=============================
  ;==== Assembly Operations ====
  ;=============================
  defunion op (Op) :
    asm-AddOp: ()
    asm-SubOp: ()
    asm-MulOp: ()
    asm-DivOp: ()
    asm-ModOp: ()
    asm-AndOp: ()
    asm-OrOp: ()
    asm-XorOp: ()
    asm-ShlOp: ()
    asm-ShrOp: ()
    asm-AshrOp: ()
    asm-EqOp: ()
    asm-NeOp: ()
    asm-LtOp: ()
    asm-GtOp: ()
    asm-LeOp: ()
    asm-GeOp: ()
    asm-UleOp: ()
    asm-UltOp: ()
    asm-UgtOp: ()
    asm-UgeOp: ()
    asm-NotOp: ()
    asm-NegOp: ()
    asm-DivModOp: ()
    asm-BitSetOp: ()
    asm-BitNotSetOp: ()
    asm-TypeofOp: (tag:typeset)

  ;=============================
  ;==== Assembly Immediates ====
  ;=============================
  defunion imm (Imm) :
    IntImm: (value:lit as Byte|Int|Long)
    Mem: (n:int, offset:int)
    ExMem: (lbl:symbol, offset:int)
    LocalMem: (n:int)
    TagImm: (n:int, marker?:bool)
    LinkId: (id:int)
    StackMap: (size:int, indices:tuple(int))
    RegSP: ()
    Reg: (n:int)
    FReg: (n:int)

  defatom loc (x:Loc) :
    writer :
      write-imm(x)
    reader :
      match(read-imm()) :
        (x:Loc) : x
        (x) : throw(DeserializeException())

  ;===============================
  ;==== Assembly Instructions ====
  ;===============================
  defunion ins (Ins) :
    asm-XchgIns: (x:loc, y:loc)
    asm-SetIns: (type:asm-type, x:loc, y:imm)
    asm-ConvertIns: (xtype:asm-type, x:loc, ytype:asm-type, y:imm)
    asm-InterpretIns: (xtype:asm-type, x:loc, ytype:asm-type, y:imm)
    asm-UnaOp: (type:asm-type, x:loc, op:op, y:imm)
    asm-BinOp: (type:asm-type, x:loc, op:op, y:imm, z:imm)
    asm-DualOp: (type:asm-type, x1:loc, x2:loc, op:op, y:imm, z:imm)
    asm-Load: (type:asm-type, x:loc, y:imm, offset:int)
    asm-Store: (type:asm-type, x:imm, y:imm, offset:int)
    asm-Call: (x:imm)
    asm-Return: ()
    asm-Goto: (x:imm)
    asm-Break: (type:asm-type, x:imm, op:op, y:imm, z:imm)
    asm-Label: (n:int, info:opt<FileInfo>(info))
    asm-LinkLabel: (id:int)
    asm-ExLabel: (name:symbol)
    asm-Match: (xs:list(imm), branches:list(branch), no-branch:imm)
    asm-Dispatch: (xs:list(imm), branches:list(branch), no-branch:imm, amb-branch:imm)
    asm-MethodDispatch: (multi:int, num-header-args:int, no-branch:imm, amb-branch:imm)
    asm-DefData: ()
    asm-DefText: ()
    asm-DefByte: (value:byte)
    asm-DefInt: (value:int)
    asm-DefLong: (value:long)
    asm-DefFloat: (value:float)
    asm-DefDouble: (value:double)
    asm-DefString: (value:string)
    asm-DefBytes: (value:bytearray)
    asm-DefSpace: (size:int)
    asm-DefLabel: (n:int)

  defunion branch (Branch) :
    Branch: (tags:list(typeset), dst:imm)

  ;=================
  ;==== Typeset ====
  ;=================
  defunion typeset (TypeSet) :
    AndType: (types:tuple(typeset))
    OrType: (types:tuple(typeset))
    SingleType: (type:int)
    TopType: ()

  ;=====================
  ;==== Combinators ====
  ;=====================
  reader defn read-vector<?T> (f: () -> ?T) :
    val n = length!(read-int())
    to-vector<T>(repeatedly(f, n))

  writer defn write-vector<?T> (f: T -> False, xs:Vector<?T>) :
    write-int(length(xs))
    do(f, xs)

  reader defn read-tuple<?T> (f: () -> ?T) :
    val n = length!(read-int())
    to-tuple(repeatedly(f, n))

  writer defn write-tuple<?T> (f: T -> False, xs:Tuple<?T>) :
    write-int(length(xs))
    do(f, xs)

  reader defn read-list<?T> (f: () -> ?T) :
    val n = length!(read-int())
    to-list(repeatedly(f, n))

  writer defn write-list<?T> (f: T -> False, xs:List<?T>) :
    write-int(length(xs))
    do(f, xs)

  reader defn read-opt<T> (f: () -> T) :
    val n = read-byte()
    f() when n == 1Y

  writer defn write-opt<T> (f: T -> False, x:T|False) :
    match(x) :
      (x:False) :
        write-byte(0Y)
      (x:T) :
        write-byte(1Y)
        f(x)

  ;===============
  ;==== Atoms ====
  ;===============
  defunion info (FileInfo) :
    FileInfo: (filename:string, line:int, column:int)

  defatom bool (x:True|False) :
    writer :
      match(x) :
        (x:True) : put(out, 1Y)
        (x:False) : put(out, 0Y)
    reader :
      switch(get-byte(in)) :
        1Y : true
        0Y : false
        else : throw(DeserializeException())

  defatom int (x:Int) :
    writer :
      to-var-int(x, put{out, _})
    reader :
      from-var-int(read-byte)

  defatom long (x:Long) :
    writer :
      put(out, x)
    reader :
      match(get-long(in)) :
        (x:Long) : x
        (x:False) : throw(DeserializeException())

  defatom float (x:Float) :
    writer :
      put(out, x)
    reader :
      match(get-float(in)) :
        (x:Float) : x
        (x:False) : throw(DeserializeException())

  defatom double (x:Double) :
    writer :
      put(out, x)
    reader :
      match(get-double(in)) :
        (x:Double) : x
        (x:False) : throw(DeserializeException())

  defatom byte (x:Byte) :
    writer :
      put(out, x)
    reader :
      match(get-byte(in)) :
        (x:Byte) : x
        (x:False) : throw(DeserializeException())

  defatom char (x:Char) :
    writer :
      print(out, x)
    reader :
      match(get-char(in)) :
        (x:Char) : x
        (x:False) : throw(DeserializeException())

  defatom string (x:String) :
    writer :
      write-int(length(x))
      print(out, x)
    reader :
      val n = length!(read-int())
      String(repeatedly(read-char, n))

  defatom symbol (x:Symbol) :
    writer :
      write-string(to-string(x))
    reader :
      to-symbol(read-string())

  defatom bytearray (x:ByteArray) :
    writer :
      write-int(length(x))
      do(write-byte, x)
    reader :
      val n = length!(read-int())
      val x = ByteArray(n)
      for i in 0 to n do : x[i] = read-byte()
      x

defn non-neg! (x:Int) -> Int :
  if x < 0 : throw(DeserializeException())
  else : x

defn length! (x:Int) -> Int :
  if x < 0 : throw(DeserializeException())
  else if x > 8388608 : throw(DeserializeException())
  else : x

;============================================================
;=============== Variable Length Integer ====================
;============================================================

;Variable-Length Integer
;  0 <= x < 250 :             [x]
;  250 <= x < 506 :           [250 | x - 250]
;  506 <= x < 762 :           [251 | x - 506]
;  762 <= x < 1018 :          [252 | x - 762]
;  –32768 <= x < 32768 :      [253 | b1 , b0]
;  -8388608 <= x < 8388608 :  [254 | b2 , b1 , b0]
;  otherwise :                [255 | b3 , b2 , b1, b0]

defn to-var-int (x:Int, Y: Byte -> False) :
  defn B0 (x:Int) : Y(to-byte(x))
  defn B1 (x:Int) : Y(to-byte(x >> 8))
  defn B2 (x:Int) : Y(to-byte(x >> 16))
  defn B3 (x:Int) : Y(to-byte(x >> 24))
  if x >= 0 :
    if x < 250 : B0(x)
    else if x < 506 : (Y(250Y), B0(x - 250))
    else if x < 762 : (Y(251Y), B0(x - 506))
    else if x < 1018 : (Y(252Y), B0(x - 762))
    else if x < 32768 : (Y(253Y), B1(x), B0(x))
    else if x < 8388608 : (Y(254Y), B2(x), B1(x), B0(x))
    else : (Y(255Y), B3(x), B2(x), B1(x), B0(x))
  else :
    if x >= -32768 : (Y(253Y), B1(x), B0(x))
    else if x >= -8388608 : (Y(254Y), B2(x), B1(x), B0(x))
    else : (Y(255Y), B3(x), B2(x), B1(x), B0(x))

defn from-var-int (N: () -> Byte) -> Int :
  defn B0 () : to-int(N())
  defn B1 () : B0() << 8
  defn B2 () : B0() << 16
  defn S1 () : (B0() << 24) >>> 16
  defn S2 () : (B0() << 24) >>> 8
  defn S3 () : (B0() << 24)

  val x = N()
  switch(x) :
    255Y : S3() | B2() | B1() | B0()
    254Y : S2() | B1() | B0()
    253Y : S1() | B0()
    252Y : B0() + 762
    251Y : B0() + 506
    250Y : B0() + 250
    else : to-int(x)
