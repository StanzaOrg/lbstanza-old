defpackage stz/reg-alloc-simple-model-env :
  import core
  import collections
  import stz/reg-alloc-ir
  import stz/reg-alloc-model-env
  import stz/reg-alloc-model-properties
  import stz/reg-alloc-model-analysis

public defn SimpleModelEnv (models:Tuple<OperationModel>,
                            props:Tuple<ModelProperties>) -> ModelEnv :
  SimpleModelEnv(models, One(props))

public defn SimpleModelEnv (models:Tuple<OperationModel>) -> ModelEnv :
  SimpleModelEnv(models, None())

defn SimpleModelEnv (models:Tuple<OperationModel>,
                     props:Maybe<Tuple<ModelProperties>>) -> ModelEnv :
  ;Verify model indexing.
  for (m in models, i in 0 to false) do :
    if id(m) != i :
      fatal("Models are not densely indexed.")

  ;Model analyzer for computing used registers.
  val analyzer = ModelAnalyzer(models)

  new ModelEnv :
    defmethod num-models (this) :
      length(models)
    defmethod model (this, id:Int) :
      models[id]
    defmethod model-properties (this, id:Int) :
      if empty?(props) : fatal("No model properties.")
      else : value!(props)[id]
    defmethod used-registers (this, id:Int, ctxt:UsageContext) :
      used-registers(analyzer, id, ctxt)