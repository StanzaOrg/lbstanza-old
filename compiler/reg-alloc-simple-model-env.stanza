defpackage stz/reg-alloc-simple-model-env :
  import core
  import collections
  import stz/reg-alloc-ir
  import stz/reg-alloc-model-env
  import stz/reg-alloc-model-properties

public defn SimpleModelEnv (models:Tuple<OperationModel>,
                            props:Tuple<ModelProperties>) -> ModelEnv :
  SimpleModelEnv(models, One(props))

public defn SimpleModelEnv (models:Tuple<OperationModel>) -> ModelEnv :
  SimpleModelEnv(models, None())

defn SimpleModelEnv (models:Tuple<OperationModel>,
                     props:Maybe<Tuple<ModelProperties>>) -> ModelEnv :
  ;Verify model indexing.
  for (m in models, i in 0 to false) do :
    if id(m) != i :
      fatal("Models are not densely indexed.")
  new ModelEnv :
    defmethod num-models (this) :
      length(models)
    defmethod model (this, id:Int) :
      models[id]
    defmethod arg-types (this, id:Int) :
      map(type{location(_)}, args(models[id]))
    defmethod result-types (this, id:Int) :
      map(type{location(_)}, results(models[id]))
    defmethod forced-release? (this, op-id:Int, arg-index:Int) :
      if empty?(props) :
        fatal("No model properties.")
      else :
        val prop = value!(props)[op-id]
        forced-release?(prop)[arg-index]
    defmethod forced-release? (this, op-id:Int) :
      if empty?(props) :
        fatal("No model properties.")
      else :
        val prop = value!(props)[op-id]
        any-forced-release?(prop)