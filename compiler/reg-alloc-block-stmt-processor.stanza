defpackage stz/reg-alloc-block-stmt-processor :
  import core
  import collections
  import stz/reg-alloc-ir
  import stz/reg-alloc-ports

;This type is provided to the block processing algorithms (e.g. allocation,
;annotation, assignment) to abstract away storage and retrieval concerns
;for a block.
public deftype BlockStmtProcessor

;Emit a new program statement.
public defmulti emit (p:BlockStmtProcessor, s:ProgramStmt) -> False

;Retrieve the block input ports.
public defmulti inputs (p:BlockStmtProcessor) -> Vector<Port>

;Retrieve the block output ports.
public defmulti outputs (p:BlockStmtProcessor) -> Vector<Port>

;Retrieve the successor ports.
;Used during reverse traversal. Does not include ports of backedges.
public defmulti successor-ports (p:BlockStmtProcessor) -> Tuple<Vector<Port>>

;Retrieve the predecessor ports.
;Used during forward traversal. Does not include ports of backedges.
public defmulti predecessor-ports (p:BlockStmtProcessor) -> Tuple<Vector<Port>>

;Retrieve the statements in forward
public defmulti stmts (return:(Int, ProgramStmt) -> ?, p:BlockStmtProcessor) -> False

;Retrieve the statements in reverse order.
public defmulti stmts-in-reverse (return:(Int, ProgramStmt) -> ?, p:BlockStmtProcessor) -> False

;Retrieve the type of the given variable.
public defmulti vartype (p:BlockStmtProcessor, v:Int) -> RegisterType

;Convenience: Update the input ports.
public defn update-inputs (f:Port -> Port, p:BlockStmtProcessor) -> False :
  val ps = inputs(p)
  for i in 0 to length(ps) do :
    ps[i] = f(ps[i])

;Convenience: Update the output ports.
public defn update-outputs (f:Port -> Port, p:BlockStmtProcessor) -> False :
  val ps = outputs(p)
  for i in 0 to length(ps) do :
    ps[i] = f(ps[i])