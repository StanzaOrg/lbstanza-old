defpackage stz/code-reader :
  import core
  import collections
  import stz/el-ir
  import stz/el-infer-engine

defsyntax el-code-syntax :
  import etype from el-ir
  
  public defproduction code:Code
  defproduction local:Local
  defproduction block:Block
  defproduction ins:Ins
  defproduction branch:Branch
  defproduction cast:Cast
  defproduction other

  defrule code = (code ?n:#int (family = ?family:#int) :
                    freevars: (?freevars:#int ...)
                    initialized?: _
                    ?locals:#local ...
                    ?nested:#code ...
                    ?blocks:#block ...
                    #other) :
    Code(n, family, to-tuple(locals), to-tuple(nested), to-tuple(blocks), to-tuple(freevars))

  defproduction mutable?: True|False
  defrule mutable? = ((mutable)) : true
  defrule mutable? = () : false

  defrule local = (local ?n:#int : ?type:#etype ?mutable?:#mutable?) :
    Local(n, mutable?, type)

  defrule block = (block ?n:#int :
                     predecessors: (?preds:#int ...)
                     ?ins:#ins ...) :
    Block(n, to-tuple(ins), to-tuple(preds))

  defrule ins = (def ?n:#int : ?type:#etype) :
    Def(n, type)
  
  defrule ins = (inherit ?n:#int from ?v:#int) :
    Inherit(n, v)

  defrule ins = (cast ?n:#int to ?type:#etype) :
    Cast(n, type)
    
  defrule ins = (match : (?branches:#branch ...)) :
    Match(to-tuple(branches))

  defrule branch = ((?casts:#cast ...) -> block ?n:#int) :
    Branch(n, to-tuple(casts))

  defrule cast = (?n:#int : ?type:#etype) :
    Cast(n, type)
    
  defrule ins = (use ?n:#int) :
    Use(n)

  defrule ins = (init family ?family:#int) :
    InitCode(family)
  
  defrule ins = (annotate ?n:#int : ?type:#etype) :
    Annotate(n, type)
    
  defrule ins = (wrapped: ?s:#string) :
    Wrapped<String>(s)
  
  defproduction int:Int
  defrule int = (?x) when unwrap-token(x) is Int : unwrap-token(x)

  defproduction string:String
  defrule string = (?x) when unwrap-token(x) is String : unwrap-token(x)

  defrule other = () : true
  defrule other = (?x) : Exception("%_: Unexpected token %_" % [closest-info(), x])

;defn main () :
;  val filename = "debug.txt"
;  val parsed = parse-syntax[el-code-syntax / #code](reader/read-file(filename))
;  infer-types(parsed, true)
;
;main()