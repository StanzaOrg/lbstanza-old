defpackage stz/check-lang :
   import core
   import collections
   import macro-utils
   import stz/core-macros

;Possible checker types
deftype CType
defstruct SymType <: CType :
   type: Symbol
defstruct RestType <: CType :
   type: Symbol
defstruct ListType <: CType :
   types: List<CType>

;Checkers
deftype Checker
defstruct FormChecker <: Checker :
   args: List<Symbol>
   types: List<CType>
defstruct IfChecker <: Checker :
   pred
   conseq: Checker
   alt: Checker
defstruct SwitchChecker <: Checker :
   exp
   clauses: List<KeyValue<?, Checker>>
   else-clause: Checker
defstruct CustomChecker <: Checker :
   exp
defstruct BeginChecker <: Checker :
   checkers: List<Checker>

;Specification
defstruct FormSpec :
   type: Symbol
   description: String
   type-checkers: List<KeyValue<?, Checker>>
   plus-checkers: List<Symbol>
   custom-checkers: List<?>

;General Wrapper
defstruct DefCheck :
   name: Symbol
   exp: Symbol
   type
   specs: List<FormSpec>

;======== Syntax Definition ========
defsyntax stz-check-lang :
   ;=== Symbols ===
   defn sym? (x) : unwrap-token(x) is Symbol
   defproduction sym: Symbol
   defrule sym = (?x) when sym?(x) : unwrap-token(x)  

   ;=== Imported ===
   import (type, exp) from core

   ;Overall Form
   import exp4 from core
   defrule exp4 = (defcheck ?name:#sym (?exp:#sym : ?type:#type) :
                      ?fs:#spec ... ?rest ...) :
      if not empty?(rest) :
         fatal("Invalid syntax: The following forms are not specs: %*" % [join(rest, " ")])
      parse-syntax[core / #exp](compile(DefCheck(name, exp, type, fs)))

   defproduction spec: FormSpec
   defrule spec = (?name:#sym(?desc) :
                      (?ts:#type : ?type-cs:#checker) @...
                      (+ ?plus-cs:#sym) @...
                      (custom{?custom-cs:#exp}) @...) :
      FormSpec(name, unwrap-token(desc),
         map(KeyValue, ts, type-cs),
         plus-cs,
         custom-cs)

   defproduction checker: Checker
   ;Form Checker   
   defrule checker = ({(?ns:#sym : ?ts:#ctype) @...}) :
      FormChecker(ns, ts)
   ;If Checker
   defrule checker = (if ?pred:#exp : ?conseq:#checker else : ?alt:#checker) :
      IfChecker(pred, conseq, alt)
   ;Switch Checker
   defrule checker = (switch ?pred:#exp :
                         ((! else) ?keys:#exp : ?cs:#checker) @...
                         else : ?ec:#checker) :
      SwitchChecker(pred, map(KeyValue, keys, cs), ec)
   ;Custom Checker   
   defrule checker = (custom{?e:#exp}) :
      CustomChecker(e)
   ;Begin Checker
   defrule checker = ((?c0:#checker ?cs:#checker ...)) :
      BeginChecker(cons(c0, cs))
   defrule checker = (()) :
      BeginChecker(List())

   ;Checker Types
   defproduction ctype: CType
   defrule ctype = (?type:#sym ~ ...) :
      RestType(type)
   defrule ctype = (?type:#sym) :
      SymType(type)
   defrule ctype = ((?ts:#ctype ...)) :
      ListType(ts)


;======== Compilation ========
defn fill-each<?T> (f: T -> Collection<KeyValue<Symbol,?>>, xs:Seqable<?T>) :
   nested(to-list(seq(f, xs)))

defn compile (d:DefCheck) :
   ;Create function names
   val #types = map({type(_) => gensym()}, specs(d))
   val #withins = map({type(_) => gensym()}, specs(d))
   defn #type (n:Symbol) : lookup(#types, n)
   defn #type (s:FormSpec) : #type(type(s))
   defn #type (t:SymType|RestType) : #type(type(t))
   defn #within (n:Symbol) : lookup(#withins, n)
   defn #within (s:FormSpec) : #within(type(s))
   defn #within (t:SymType|RestType) : #within(type(t))

   ;Compiling a CType
   defn compile (pos:String, t:CType) :
      match(t) :
         (t:SymType) :
            fill-template(`(stz/check-lang-engine/SymType(#t)), [
               `#t => #type(t)])
         (t:RestType) :
            fill-template(`(stz/check-lang-engine/RestType(#t)), [
               `#t => #type(t)])
         (t:ListType) :
            fill-template(`(stz/check-lang-engine/ListType(e, pos, [ts])), [
               `e => exp(d)
               `pos => pos
               `ts => splice(map(compile{pos, _}, types(t)))])

   ;Compiling a field check against a CType
   defn compile-check (field:Symbol, t:CType) :
      fill-template(`(stz/check-lang-engine/check(field(e), t)), [
         `e => exp(d)
         `field => field
         `t => compile(to-string(field), t)])

   ;Compiling a checker
   defn compile (c:Checker) -> ? :
      match(c) :
         (c:FormChecker) :
            map(compile-check, args(c), types(c))
         (c:IfChecker) :
            fill-template(`(if pred : conseq else : alt), [
               `pred => pred(c)
               `conseq => compile(conseq(c))
               `alt => compile(alt(c))])
         (c:CustomChecker) :
            exp(c)
         (c:SwitchChecker) :
            val template = `(
               switch pred :
                  clauses{key : check}
                  else : else-check)
            fill-template(template, [
               `pred => exp(c)
               `clauses => for c in clauses(c) fill-each : [
                  `key => key(c)
                  `check => compile(value(c))]
               `else-check => compile(else-clause(c))])
         (c:BeginChecker) :
            map(compile, checkers(c))

   ;Compiling a form specification
   defn compile (s:FormSpec) :
      defn compile-match (custom:List, fail) :
         if empty?(type-checkers(s)) :
            fail
         else :   
            val template = `(
               match(e) :
                  clauses{
                     (e:type) :
                        check
                        custom
                        false}
                  (e) :
                     fail)
            fill-template(template, [
               `e => exp(d)
               `clauses => for c in type-checkers(s) fill-each : [
                  `type => key(c)
                  `check => compile(value(c))
                  `custom => splice(custom)]
               `fail => fail])
            
      defn compile-plus (custom:List, fail) :
         defn loop (cs:List<Symbol>) :
            if empty?(cs) :
               fail
            else :
               val template = `(
                  if within(e) :
                     check(e)
                     custom
                     false
                  else :
                     fail)
               fill-template(template, [
                  `within => #within(head(cs))
                  `check => #type(head(cs))
                  `e => exp(d)
                  `custom => splice(custom)
                  `fail => loop(tail(cs))])
         loop(plus-checkers(s))

      defn compile-fail () :
         fill-template(`(stz/check-lang-engine/invalid-form(description, e)), [
            `description => description(s)
            `e => exp(d)])

      val template = `(
         defn name (e:type) : body)
      val fail-body = compile-fail()   
      fill-template(template, [
         `name => #type(s)
         `e => exp(d)
         `type => type(d)
         `body => compile-match(
                     custom-checkers(s)
                     compile-plus(custom-checkers(s), fail-body))])

   ;Compile a within form specification
   defn compile-within (s:FormSpec) :
      var body = false
      for name in plus-checkers(s) do :
         body = fill-template(`(within(e) or body), [
            `within => #within(name)
            `e => exp(d)
            `body => body])
      if not empty?(type-checkers(s)) :
         body = fill-template(`(e is (type) or body), [
            `e => exp(d)
            `type => splice(to-list(join(seq(key, type-checkers(s)), `|)))
            `body => body])
      val template = `(
         defn name (e:type) : body)
      fill-template(`(defn name (e:type) : body), [
         `name => #within(s)
         `e => exp(d)
         `type => type(d),
         `body => body])

   ;Compiling the DefCheck
   val template = `(
      defn check (e:type) :
         checkers
         withiners
         stz/check-lang-engine/run-check(check0, e))
   fill-template(template, [
      `check => name(d)
      `e => exp(d)
      `type => type(d)
      `checkers => splice(map(compile, specs(d)))
      `withiners => splice(to-list(seq(compile-within, specs(d))))
      `check0 => #type(head(specs(d)))])

;============================================================
;===================== Fast Printing ========================
;============================================================

;Adds syntax:
;  #println("my %_ format" % [x])
;Performs static expansion of arguments for speed.
defsyntax stz-fast-print-lang :
  ;Imports
  import (exp4, exp!, id) from core
  
  ;Primitives
  defproduction string: String
  defrule string = (?x) when unwrap-token(x) is String : unwrap-token(x)

  ;#println with no output stream argument.
  defrule exp4 = (~ #println(?o:#output-stream, ?format:#string % [?args:#exp! ...])) :
    val compiled = compile(closest-info(), o, format, args)
    parse-syntax[core / #exp](compiled)

  ;Optional output stream argument
  defproduction output-stream:Maybe
  defrule output-stream = (?e:#id) : One(e)
  defrule output-stream = () : None()

;Compile the given #println(...) macro to a Stanza expression.
defn compile (info:False|FileInfo, os:Maybe, format:String, args:List) :
  ;Break into parts.
  val parts = generate<Char|One> :
    val n = length(format)
    val args-seq = to-seq(args)
    let loop (i:Int = 0) :
      if i < n :
        if format[i] == '%' :
          ;Check Failure
          if i == n - 1 :
            throw(Exception("%_: Unexpected escape character." % [info]))
          switch(format[i + 1]) :
            '%' :
              yield('%')
              loop(i + 2)
            '_' :
              yield(One(next(args-seq)))
              loop(i + 2)
            else :
              throw(Exception("%_: Unexpected escape character." % [info]))
        else :
          yield(format[i])
          loop(i + 1)
    break('\n')
  ;Assemble into pieces.
  val pieces = within repeat-while() :
    if empty?(parts) :
      None()
    else :
      match(peek(parts)) :
        (p:Char) :
          val chars = take-while({_ is Char}, parts)
          One(String(chars as Seq<Char>))
        (p:One) :
          next(parts)
          p
  ;Compile each piece
  val compiled-pieces = nested $ to-tuple $
    for p in pieces seq :
      [`piece => p]
  ;Fill template
  val template = `((
    pieces{print(os?{os}{}, piece)}
  ))
  fill-template(template, [
    `pieces => compiled-pieces
    `os => value?(os)
    `os? => choice(not empty?(os))])
      
    