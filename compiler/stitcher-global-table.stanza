defpackage stz/stitcher-global-table :
  import core
  import collections
  import stz/utils
  import stz/padder
  import stz/vm-ir
  import stz/codegen
  import stz/asm-ir
  import stz/code-emitter

;============================================================
;===================== API ==================================
;============================================================

;Assembly table of globals.
public deftype GlobalTable

;Info provider and retriever for the globals.
public deftype GlobalInfo

;Notify that the global with id 'id' is located at given offset.
public defmulti save-offset (info:GlobalInfo, id:Int, offset:Int) -> False

;Retrieve the description of the global for generating the
;comment.
public defmulti description (info:GlobalInfo, id:Int, offset:Int) -> String

;Load a new set of globals into the table.
;Use this for each new package.
public defmulti load-globals (t:GlobalTable, globals:Collection<VMGlobal>, info:GlobalInfo) -> False

;Emit the global table.
;Finally use this at the end to emit the entire global table.
public defmulti emit (t:GlobalTable, emitter:CodeEmitter) -> False

;============================================================
;=================== Implementation =========================
;============================================================

public defn GlobalTable (stubs:AsmStubs) -> GlobalTable :

  ;Accumulate all the padded globals and their information
  val items = Vector<GlobalInfo|Padding|VMGlobal>()

  ;Overall offset counter.
  val offset-counter = Counter(0)

  ;Load the given globals.
  defn load-globals (gs:Collection<VMGlobal>, info:GlobalInfo) :
    ;Add the info for later usage.
    add(items, info)

    ;Pad the globals and save them.
    for item in pad-globals(gs) do :
      add(items, item)
      match(item) :
        (item:VMGlobal) :
          val offset = next(offset-counter, size(item))
          save-offset(info, id(item), offset)
        (item:Padding) :
          next(offset-counter, size(item))

  ;Emit all the globals
  defn emit-table (emitter:CodeEmitter) -> False :
    defn E (x:Ins) : emit(emitter,x)

    ;Holds the current size of the entire emitted table.
    val counter = Counter(0)

    ;Holds the currently active GlobalInfo
    var info:GlobalInfo

    ;Cache the void-marker.
    val void-marker = DefLong(to-long(-1 << 3 + 2))

    ;Accumulate all roots here.
    val all-roots = Vector<Int>()

    ;Emit DefSpace if sz > 0.
    defn EDefSpace? (sz:Int) :
      E(DefSpace(sz)) when sz > 0
      
    ;Emit the global table itself.
    E(Comment("Global Table"))
    E(DefData())
    E(Label(/globals(stubs)))
    for item in items do :
      match(item) :
        (item:GlobalInfo) :
          info = item
        (item:Padding) :
          E(DefSpace(size(item)))
          next(counter, size(item))
        (item:VMGlobal) :
          E(Comment(description(info, id(item), value(counter))))
          if empty?(roots(item)) :
            E(DefSpace(size(item)))
            next(counter, size(item))
          else :
            ;Retrieve the offset for the global.
            val offset = value(counter)

            ;Sanity check: Ensure that global is 8-byte aligned.
            if offset % 8 != 0 :
              fatal("Global has roots but is not 8-byte aligned.")
              
            for root in roots(item) do :
              val root-offset = offset + 8 * root              
              add(all-roots, root-offset / 8)
              EDefSpace?(advance-to(counter, root-offset))
              E(void-marker)
            val end = offset + size(item)
            EDefSpace?(advance-to(counter, end))         
    E(DefText())
    E(Comment("End of Global Table"))

    ;Emit the roots table.
    E(Comment("Global Root Table"))
    E(DefData())
    E(Label(global-root-table(stubs)))
    E(Comment(to-string("%_ roots in total" % [length(all-roots)])))
    E(DefInt(length(all-roots)))
    E(Comment("Indices of roots"))
    for r in all-roots do :
      E(DefInt(r))
    E(DefText())
    E(Comment("End of Global Root Table"))

  ;Return global table structure
  new GlobalTable :
    defmethod load-globals (this, globals:Collection<VMGlobal>, info:GlobalInfo) :
      load-globals(globals, info)
    defmethod emit (this, emitter:CodeEmitter) :
      emit-table(emitter)

;Advance counter to the given value.
;Returns the increment required to do that.
defn advance-to (c:Counter, v:Int) -> Int :
  fatal("Cannot advance counter backwards.") when v < value(c)
  val cur-v = value(c)  
  set-value(c, v)
  v - cur-v

;Helper: Add padding to the globals to respect 8-byte alignment.
defn pad-globals (globals:Collection<VMGlobal>) -> Seqable<Padding|VMGlobal> :

  ;Retrieve the alignment in bytes for the global.
  defn global-alignment (g:VMGlobal) -> Int :
    min(size(g), 8)

  ;Pad the globals.
  val [padded-globals, _] = pad(global-alignment,
                                size,
                                globals,
                                8)

  ;Return the padded globals.
  padded-globals