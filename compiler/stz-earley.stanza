#use-added-syntax(tests)
defpackage stz/earley :
  import core
  import collections
  import stz/utils

;============================================================
;====================== Definitions =========================
;============================================================

defstruct GRule :
  name: Symbol
  tokens: Tuple<GToken>
  precedence: Int with: (default => 100)
  associativity: Associativity with: (default => RightAssociative)

defenum Associativity :
  LeftAssociative
  RightAssociative

deftype GToken <: Equalable
defstruct GTerminal <: GToken :
  item: Symbol
defstruct GProduction <: GToken :
  name: Symbol

defstruct EItem :
  rule:Int
  num-parsed:Int
  parent:Int
  completion-cache:EItem|False with: (default => false, updater => sub-completion-cache)

defstruct ESet :
  index:Int with: (setter => set-index)
  items: Vector<EItem> with: (init => Vector<EItem>())
  
defstruct EParent :
  rule: Int
  start: Int
  index: Int
  child: ParsedRange
with:
  printer => true
  
defstruct ParsedRange <: Hashable&Equalable :
  rule: Int
  start: Int
  end: Int
with:
  printer => true

defstruct ParseEdge :
  parent: ParsedRange
  index: Int
  child: ParsedRange

;============================================================
;======================== Equalable =========================
;============================================================

defmethod equal? (a:GToken, b:GToken) :
  match(a, b) :
    (a:GTerminal, b:GTerminal) : item(a) == item(b)
    (a:GProduction, b:GProduction) : name(a) == name(b)
    (a, b) : false

defn key (r:ParsedRange) : [rule(r), start(r), end(r)]
defmethod equal? (a:ParsedRange, b:ParsedRange) : key(a) == key(b)
defmethod hash (a:ParsedRange) : hash(key(a))

;============================================================
;======================= Printers ===========================
;============================================================

defmethod print (o:OutputStream, t:GTerminal) :
  print(o, item(t))

defmethod print (o:OutputStream, t:GProduction) :
  print(o, name(t))

defmethod print (o:OutputStream, r:GRule) :
  print(o, "%_ = %s" % [name(r), tokens(r)])

;============================================================
;======================== Utilities =========================
;============================================================

defn length (r:ParsedRange) :
  end(r) - start(r)

defn inc-num-parsed (x:EItem) :
  EItem(rule(x), num-parsed(x) + 1, parent(x))

defn upcoming (grammar:Tuple<GRule>, item:EItem) -> GToken|False :
  val r = grammar[rule(item)]
  val i = num-parsed(item)
  val num-tokens = length(tokens(r))
  tokens(r)[i] when i < num-tokens

defn upcoming-production! (grammar:Tuple<GRule>, item:EItem) :
  name(upcoming(grammar,item) as GProduction)

defn production (grammar:Tuple<GRule>, item:EItem) -> Symbol :
  name(grammar[rule(item)])

defn do (f:EItem -> ?, eset:ESet) :
  val item-index = to-seq(0 to false)
  while peek(item-index) < length(items(eset)) :
    f(items(eset)[next(item-index)])

;============================================================
;====================== Nullable Set ========================
;============================================================

defn compute-nullable-set (grammar:Tuple<GRule>) :
  val null-table = HashTable<Symbol,True|False>()
  val rule-table = group-by(name, grammar)
  defn nullable? (t:GToken) :
    match(t) :
      (t:GTerminal) : false
      (t:GProduction) : nullable?(name(t))
  defn nullable? (name:Symbol) :
    if key?(null-table, name) :
      null-table[name]
    else :
      null-table[name] = false
      null-table[name] = for rule in rule-table[name] any? :
        all?(nullable?, tokens(rule))        
      null-table[name]
  do(nullable?{name(_)}, grammar)
  to-hashset<Symbol>(seq(key, filter(value, null-table)))

;============================================================
;======================== ESetList ==========================
;============================================================

deftype ESetList
defmulti add (l:ESetList, items:Seqable<EItem>) -> False
defmulti clear-markers (l:ESetList) -> False
defmulti items (return:EItem -> ?, l:ESetList, index:Int, production:Symbol) -> False
defmulti first-item (l:ESetList, index:Int, production:Symbol) -> EItem|False
defmulti sets (l:ESetList) -> Seqable<Seqable<EItem>>

defstruct EItemSet :
  start: Int
  length: Int  

defn ESetList (grammar:Tuple<GRule>) :
  val items = Vector<EItem>()
  val markers = Vector<Int>()
  val sets = Vector<EItemSet>()
  val buffer = Vector<EItem>()
  var current-marker:Int = 1
  
  defn production! (item:EItem) :
    upcoming-production!(grammar, item)

  defn productions (return:EItem -> ?, start:Int, end:Int, production:Symbol) :
    let loop (i:Int = start) :
      if i < end :
        val item = items[i]
        if production!(item) == production :
          return(item)
          loop(i + 1)

  new ESetList :
    defmethod add (this, new-items:Seqable<EItem>) :
      add-all(buffer, new-items)
      qsort!(production!, buffer)
      add(sets, EItemSet(length(items), length(buffer)))
      add-all(items, buffer)
      lengthen(markers, length(items), 0)
      clear(buffer)
    defmethod items (return:EItem -> ?, this, index:Int, production:Symbol) :
      val eset = sets[index]
      val i = bsearch(production!, items, start(eset), start(eset) + length(eset), production)
      match(i:Int) :
        if markers[i] != current-marker :
          markers[i] = current-marker
          productions(return, i, start(eset) + length(eset), production)
    defmethod first-item (this, index:Int, production:Symbol) :
      val eset = sets[index]
      val i = bsearch(production!, items, start(eset), start(eset) + length(eset), production)
      match(i:Int) : items[i]
    defmethod clear-markers (this) :
      current-marker = current-marker + 1
    defmethod sets (this) :
      for eset in sets seq :
        for i in 0 to length(eset) seq :
          items[start(eset) + i]

;Binary search:
;It returns i such that all items at index < i satisfy key(xs[i]) < v.
defn bsearch<?T> (key:T -> Comparable, xs:Vector<?T>, start:Int, end:Int, v:Comparable) -> Int|False :
  ;All items with index less than i are known to be smaller than v.
  ;All items with index greater than j are known to be greater or equal to v.
  let loop (i:Int = start, j:Int = end) :
    if i == j :
      i when i < end and compare(key(xs[i]), v) == 0
    else :
      val m = (i + j) / 2
      if key(xs[m]) < v : loop(m + 1, j)
      else : loop(i, m)

;============================================================
;============== ProductionTable/ProductionSet ===============
;============================================================

deftype ProductionTable<T>
defmulti get<?T> (t:ProductionTable<?T>, key:Symbol) -> T
defmulti set<?T> (t:ProductionTable<?T>, key:Symbol, v:T) -> False
defmulti clear (t:ProductionTable) -> False

defn ProductionTable<T> (default:T) :
  val table = HashTable<Symbol,T>(default)
  new ProductionTable<T> :
    defmethod get (this, key:Symbol) : table[key]
    defmethod set (this, key:Symbol, v:T) : table[key] = v
    defmethod clear (this) : clear(table)

deftype ProductionSet
defmulti get (t:ProductionSet, key:Symbol) -> True|False
defmulti add (t:ProductionSet, key:Symbol) -> True|False
defmulti clear (t:ProductionSet) -> False

defn ProductionSet () :
  val keys = HashSet<Symbol>()
  new ProductionSet :
    defmethod get (this, key:Symbol) : keys[key]
    defmethod add (this, key:Symbol) : add(keys,key)
    defmethod clear (this) : clear(keys)

deftype CompletionSet
defmulti add (s:CompletionSet, item:EItem) -> True|False
defmulti get (s:CompletionSet, item:EItem) -> True|False
defmulti clear (s:CompletionSet) -> False

defn CompletionSet () :
  val keys = HashSet<[Int,Int,Int]>()
  new CompletionSet :
    defmethod add (this, item:EItem) :
      add(keys, [rule(item), num-parsed(item), parent(item)])
    defmethod get (this, item:EItem) :
      keys[[rule(item), num-parsed(item), parent(item)]]
    defmethod clear (this) :
      clear(keys)

;============================================================
;====================== Algorithm ===========================
;============================================================

defn parse (grammar:Tuple<GRule>, input:Tuple<Symbol>) :
  val setlist = ESetList(grammar)
  val prediction-set = ProductionSet()
  val completion-set = CompletionSet()
  val production-count = ProductionTable<Int>(0)
  val parents = Vector<EParent>()
  val nullable-set = compute-nullable-set(grammar)
  
  defn format (e:EItem) :
    new Printable :
      defmethod print (o:OutputStream, this) :
        val r = grammar[rule(e)]
        print(o, "[%_ =" % [name(r)])
        for (t in tokens(r), i in 0 to false) do :
          if num-parsed(e) == i :
            print(o, " • ")
            print(o, t)
          else :
            print(o, " ")
            print(o, t)
        if num-parsed(e) == length(tokens(r)) :
          print(o, " •")
        val comp-str = "" when completion-cache(e) is False
                  else " (completed to %_)" % [format(completion-cache(e) as EItem)]
        print(o, ", S%_]%_" % [parent(e), comp-str])

  defn format (r:ParsedRange) :
    new Printable :
      defmethod print (o:OutputStream, this) :
        val rule = grammar[rule(r)]
        print(o, "[%_ to %_: %_]" % [start(r), end(r), rule])

  defn format (e:ParseEdge) :
    "%_ index %_ => %_" % [format(parent(e)), index(e), format(child(e))]
    
  defn format (p:EParent) :
    "%_ from %_ (index %_) => %_" % [grammar[rule(p)], start(p), index(p), format(child(p))]

  defn print-setlist () :
    for (eset in /sets(setlist), i in 0 to false) do :
      println("Set %_:" % [i])
      within indented() :
        do(println{format(_)}, eset)

  defn process-set (current-set:ESet, next-set:ESet) :
    ;Clear state
    clear-markers(setlist)
    clear(prediction-set)
    clear(completion-set)

    ;Iterate through each item
    for item in current-set do :
      match(upcoming(grammar,item)) :
        (t:GTerminal) : upcoming-terminal(item, t)
        (p:GProduction) : upcoming-production(item, p)
        (f:False) : end-of-rule(item)
      where :
        defn upcoming-terminal (item:EItem, t:GTerminal) :
          if index(current-set) < length(input) and
             input[index(current-set)] == /item(t) :
            add(items(next-set), inc-num-parsed(item))
        defn upcoming-production (item:EItem, t:GProduction) :
          if nullable-set[name(t)] and not completion-set[item] :
            add(items(current-set), inc-num-parsed(item))
          if add(prediction-set, name(t)) :
            for (rule in grammar, i in 0 to false) do :
              if name(rule) == name(t) :
                add(items(current-set), EItem(i, 0, index(current-set)))
        defn end-of-rule (completed-item:EItem) :
          val prod = production(grammar,completed-item)
          if parent(completed-item) < index(current-set) :            
            within item = items(setlist, parent(completed-item), prod) :
              add(completion-set, item) when nullable-set[prod]                
              val item* = match(completion-cache(item)) :
                            (item*:EItem) : item*
                            (f:False) : inc-num-parsed(item)
              add(items(current-set), item*)
      
  defn compute-completion-cache (current-set:ESet) :
    ;Compute count table
    clear(production-count)
    for item in items(current-set) do :
      val t = upcoming(grammar,item)
      match(t:GProduction) :
        production-count[name(t)] = production-count[name(t)] + 1
    ;Determine whether deterministic reduction
    defn deterministic-reduction? (item:EItem) :
      val num-tokens = length(tokens(grammar[rule(item)]))
      if num-parsed(item) == num-tokens - 1 :
        val t = upcoming(grammar,item)
        match(t:GProduction) : production-count[name(t)] == 1
    ;Compute completion
    defn complete (item:EItem) :
      if parent(item) < index(current-set) :
        val pitem = first-item(setlist, parent(item), upcoming-production!(grammar,item))
        match(pitem:EItem) : completion-cache(pitem)
    ;Compute completions of all deterministic reductions.
    for item in items(current-set) map! :
      if deterministic-reduction?(item) :
        match(complete(item)) :
          (c:EItem) : sub-completion-cache(item,c)
          (f:False) : sub-completion-cache(item, inc-num-parsed(item))
      else : item

  defn add-current-set (current-set:ESet) :
    println("Set %_" % [index(current-set)])
    for item in items(current-set) do :
      println("  %_" % [format(item)])
    ;Add to setlist
    defn prod? (e:EItem) : upcoming(grammar,e) is GProduction
    add(setlist, filter(prod?, items(current-set)))

  defn* process-until-finished () :
    val current-set = ESet(0)
    val next-set = ESet(1)
    add(items(current-set), EItem(0, 0, 0))
    let loop (current-set:ESet = current-set, next-set:ESet = next-set) :
      if not empty?(items(current-set)) :
        process-set(current-set, next-set)
        compute-completion-cache(current-set)
        add-current-set(current-set)
        clear(items(current-set))
        set-index(current-set, index(next-set) + 1)
        loop(next-set, current-set)
 
  defn* determine-reachable-graph () :
    println("PARENTS:")
    within indented() :
      for p in parents do :
        println(format(p))
    val used-ranges = HashSet<ParsedRange>()
    val edges = Vector<ParseEdge>()
    val children-table = group-by(key, parents) where :
      defn key (p:EParent) : [rule(p), start(p), index(p)]
    defn children (r:ParsedRange, index:Int) :
      val key = [rule(r), start(r), index]
      children-table[key]
    defn mark-used (r:ParsedRange) :
      if add(used-ranges, r) :
        val tokens = tokens(grammar[rule(r)])
        let loop (index:Int = length(tokens) - 1,
                  ends:List<Int> = List(end(r))) :                  
          if index >= 0 :
            match(tokens[index]) :
              (t:GTerminal) :
                loop(index - 1, map({_ - 1}, ends))
              (t:GProduction) :
                val child-relationships = to-list $ 
                  for relation in children(r, index) filter :
                    contains?(ends, end(child(relation)))
                for rel in child-relationships do :
                  add(edges, ParseEdge(r, index, child(rel)))
                  mark-used(child(rel))
                loop(index - 1, map(start{child(_)}, child-relationships))
    mark-used(ParsedRange(0, 0, length(input)))
    to-tuple(edges)

  defn* disambiguate (edges:Tuple<ParseEdge>) :
    println("PARSE EDGES:")
    within indented() :
      for e in edges do :
        println(format(e))
    val candidate-table = group-by(key, edges) where :
      defn key (e:ParseEdge) : [parent(e), index(e)]
    defn candidates (r:ParsedRange, index:Int, position:Int) :
      for c in candidate-table[[r,index]] filter :
        start(child(c)) == position
    defn most-specific (a:ParseEdge, b:ParseEdge) -> Int :
      defn compare-associativity (a:ParseEdge, b:ParseEdge) :
        val parent-rule = grammar[rule(parent(a))]
        switch(associativity(parent-rule)) :
          RightAssociative : compare(length(child(a)), length(child(b)))
          LeftAssociative : compare(length(child(b)), length(child(a)))
      defn compare-precedence (a:ParseEdge, b:ParseEdge) :
        val arule = grammar[rule(child(a))]
        val brule = grammar[rule(child(b))]
        compare(precedence(arule), precedence(brule))
      defn compare-order (a:ParseEdge, b:ParseEdge) :
        compare(rule(child(a)), rule(child(b)))
      val c1 = compare-associativity(a, b)
      if c1 == 0 :
        val c2 = compare-precedence(a, b)
        if c2 == 0 : compare-order(a, b)        
        else : c2
      else : c1

    val kept-edges = Vector<ParseEdge>()
    defn mark-used (r:ParsedRange) :
      val rule = grammar[rule(r)]
      val num-tokens = length(tokens(rule))
      let loop (index:Int = 0, position:Int = start(r)) :
        if index < num-tokens :
          match(tokens(rule)[index]) :
            (t:GProduction) :
              val candidates = candidates(r, index, position)
              val candidate = minimum(candidates, {most-specific(_, _) < 0})
              add(kept-edges, candidate)
              mark-used(child(candidate))
              loop(index + 1, end(child(candidate)))
            (t:GTerminal) :
              loop(index + 1, position + 1)
    mark-used(ParsedRange(0, 0, length(input)))
    to-tuple(kept-edges)

  defn main () :
    process-until-finished()
    print-setlist()
    ;val edges = disambiguate(determine-reachable-graph())
    ;println("Disambiguated:")
    ;do(println{format(_)}, edges)


  main()

;============================================================
;======================= Test Case ==========================
;============================================================

defn example-grammar () :
  val E = GProduction(`E)
  val N = GTerminal(`N)
  val PLUS = GTerminal(`+)
  val TIMES = GTerminal(`x)
  val LPAREN = GTerminal(`L)
  val RPAREN = GTerminal(`R)
  [GRule(`S, [E])
   GRule(`E, [E PLUS E])
   GRule(`E, [E TIMES E], 1, RightAssociative)
   GRule(`E, [LPAREN E RPAREN])
   GRule(`E, [N])]

deftest print-grammar :
  val g = example-grammar()
  do(println, g)

deftest parse :
  val g = example-grammar()
  parse(g, to-tuple $ `(N x N x L N + N R x N x N + N x N x N))

defn example-grammar-2 () :
  val S = GProduction(`S)
  val E = GProduction(`E)
  val F = GProduction(`F)
  val A = GTerminal(`A)
  val B = GTerminal(`B)
  val X = GTerminal(`X)
  val Y = GTerminal(`Y)
  [GRule(`Start, [S])
   GRule(`S, [E E X])
   GRule(`S, [F F Y])
   GRule(`E, [A A B])
   GRule(`F, [A A B])]

deftest parse-2 :
  val g = example-grammar-2()
  parse(g, to-tuple $ `(A A B A A B Y))

defn example-grammar-3 () :
  val S = GProduction(`S)
  val E = GProduction(`E)
  val F = GProduction(`F)
  val A = GTerminal(`A)
  val X = GTerminal(`X)
  val Y = GTerminal(`Y)
  [GRule(`Start, [S])
   GRule(`S, [E F X])
   GRule(`S, [F E X])
   GRule(`S, [F F F Y])
   GRule(`E, [A A])
   GRule(`F, [A])]

deftest parse-3 :
  val g = example-grammar-3()
  parse(g, to-tuple $ `(A A A X))

defn example-grammar-4 () :
  val S = GProduction(`S)
  val E = GProduction(`E)
  val A = GTerminal(`A)
  val X = GTerminal(`X)
  [GRule(`Start, [S])
   GRule(`S, [E E X])
   GRule(`E, [A A])
   GRule(`E, [A])]

deftest parse-4 :
  val g = example-grammar-4()
  parse(g, to-tuple $ `(A A A A X))


defn example-grammar-5 () :
  #for E in [ES, E, IF-E, SCLAUSES, SCLAUSE, ECLAUSE] :
    val E = GProduction(`E)
  #for (X in [PLUS, TIMES, LPAREN, RPAREN, N, EQ, LET, IN, IF, COLON, ELSE, SWITCH],
        x in [+, x, L, R, N, =, let, in, if, :, else, switch]) :
    val X = GTerminal(`x)
  [GRule(`Start, [ES])
   GRule(`ES, [ES E])
   GRule(`ES, [])
   GRule(`E, [E PLUS E], 200, LeftAssociative)
   GRule(`E, [E TIMES E], 210, LeftAssociative)
   GRule(`E, [LPAREN E RPAREN])
   GRule(`E, [N])
   GRule(`E, [E EQ E])
   GRule(`E, [LET E EQ E IN E])
   GRule(`E, [IF-E])
   GRule(`IF-E, [IF E COLON E ELSE IF-E])
   GRule(`IF-E, [IF E COLON E ELSE COLON E])
   GRule(`E, [SWITCH LPAREN SCLAUSES ECLAUSE RPAREN])
   GRule(`E, [SWITCH LPAREN SCLAUSES RPAREN])
   GRule(`SCLAUSES, [SCLAUSES SCLAUSE])
   GRule(`SCLAUSES, [])
   GRule(`SCLAUSE, [E COLON E])
   GRule(`ECLAUSE, [ELSE COLON E])]

let :;deftest parse-5 :
  val g = example-grammar-5()
  parse(g, to-tuple $ `(
    switch L
      N : N x N
      N x N : N
      N + N : N + N
      else : N x N      
    R))

deftest parse-6 :
  val g = example-grammar-5()
  parse(g, to-tuple $ unwrap-all $ reader/read-file("test.txt"))

defn example-grammar-6 () :
  #for E in [ES, E] :
    val E = GProduction(`E)
  #for (X in [A B C],
        x in [a b c]) :
    val X = GTerminal(`x)
  [GRule(`Start, [ES])
   GRule(`ES, [E, ES])
   GRule(`ES, [])
   GRule(`E, [A])
   GRule(`E, [B C])]  

deftest parse-7 :
  val g = example-grammar-6()
  parse(g, to-tuple $ `(a a b c a a b c b c a a a a a a a a a a a a a a a a))

defn example-null-grammar () :
  #for X in [S Ap E] :
    val X = GProduction(`X)
  #for (X in [A],
        x in [a]) :
    val X = GTerminal(`x)
  [GRule(`Start, [S])
   GRule(`S, [Ap Ap Ap Ap])
   GRule(`Ap, [A])
   GRule(`Ap, [E])
   GRule(`E, [])]  

deftest calc-null-set :
  println("Null set = %," % [compute-nullable-set(example-grammar-5())])

deftest parse-null :
  val g = example-null-grammar()
  parse(g, to-tuple $ `(a a a))

defn example-tricky-null-grammar () :
  #for E in [S, A, B] :
    val E = GProduction(`E)
  #for (X in [w, x, d],
        x in [w, x, d]) :
    val X = GTerminal(`x)
  [GRule(`Start, [S])
   GRule(`S, [w A d])
   GRule(`S, [A d])
   GRule(`S, [w B A A A d])
   GRule(`A, [x])
   GRule(`A, [])
   GRule(`B, [x])]  

deftest parse-tricky-null :
  val g = example-tricky-null-grammar()
  parse(g, to-tuple $ `(w x x d))

defn example-tricky-null-grammar-2 () :
  #for E in [B S A] :
    val E = GProduction(`E)
  #for (X in [w, x, d],
        x in [w, x, d]) :
    val X = GTerminal(`x)
  [GRule(`Start, [B])
   GRule(`B, [S])
   GRule(`B, [A])
   GRule(`S, [w x A A A A d])
   GRule(`A, [w x])
   GRule(`A, [])]  

deftest parse-tricky-null-2 :
  val g = example-tricky-null-grammar-2()
  parse(g, to-tuple $ `(w x w x d))