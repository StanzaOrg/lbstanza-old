#use-added-syntax(tests)
defpackage stz/earley :
  import core
  import collections
  import stz/utils

;============================================================
;====================== Definitions =========================
;============================================================

defstruct GRule :
  name: Symbol
  tokens: Tuple<GToken>

deftype GToken <: Equalable
defstruct GTerminal <: GToken :
  item: Symbol
defstruct GProduction <: GToken :
  name: Symbol

defstruct EItem :
  rule:Int
  num-parsed:Int
  parent:Int

defstruct ESet :
  index:Int
  items: Vector<EItem>
  
defstruct EParent :
  rule: Int
  start: Int
  index: Int
  child: ParsedRange
with:
  printer => true
  
defstruct ParsedRange <: Hashable&Equalable :
  rule: Int
  start: Int
  end: Int
with:
  printer => true

defstruct ParseEdge :
  parent: ParsedRange
  index: Int
  child: ParsedRange

;============================================================
;======================== Equalable =========================
;============================================================

defmethod equal? (a:GToken, b:GToken) :
  match(a, b) :
    (a:GTerminal, b:GTerminal) : item(a) == item(b)
    (a:GProduction, b:GProduction) : name(a) == name(b)
    (a, b) : false

defn key (r:ParsedRange) : [rule(r), start(r), end(r)]
defmethod equal? (a:ParsedRange, b:ParsedRange) : key(a) == key(b)
defmethod hash (a:ParsedRange) : hash(key(a))

;============================================================
;======================= Printers ===========================
;============================================================

defmethod print (o:OutputStream, t:GTerminal) :
  print(o, item(t))

defmethod print (o:OutputStream, t:GProduction) :
  print(o, name(t))

defmethod print (o:OutputStream, r:GRule) :
  print(o, "%_ = %s" % [name(r), tokens(r)])

;============================================================
;====================== Algorithm ===========================
;============================================================

defn parse (grammar:Tuple<GRule>, input:Tuple<Symbol>) :
  val sets = Vector<ESet>()
  val parents = Vector<EParent>()
  
  defn make-initial-set () :
    val set0 = ESet(0, Vector<EItem>())
    add(items(set0), EItem(0, 0, 0))
    add(sets, set0)

  defn format (e:EItem) :
    new Printable :
      defmethod print (o:OutputStream, this) :
        val r = grammar[rule(e)]
        print(o, "[%_ =" % [name(r)])
        for (t in tokens(r), i in 0 to false) do :
          if num-parsed(e) == i :
            print(o, " • ")
            print(o, t)
          else :
            print(o, " ")
            print(o, t)
        if num-parsed(e) == length(tokens(r)) :
          print(o, " •")
        print(o, ", S%_]" % [parent(e)])

  defn format (r:ParsedRange) :
    new Printable :
      defmethod print (o:OutputStream, this) :
        val rule = grammar[rule(r)]
        print(o, "[%_ to %_: %_]" % [start(r), end(r), rule])

  defn print-sets () :
    for (s in sets, i in 0 to false) do :
      println("Set %_:" % [i])
      within indented() :
        println("Index = %_" % [index(s)])
        do(println, seq(format, items(s)))

  defn upcoming (item:EItem) :
    val r = grammar[rule(item)]
    if num-parsed(item) < length(tokens(r)) :
      tokens(r)[num-parsed(item)]

  defn process-set (set-index:Int) :
    val eset = sets[set-index]
    val item-index = to-seq(0 to false)
    val prediction-set = HashSet<Symbol>()
    val advance-set = HashSet<[Int,Int,Int]>()
    while peek(item-index) < length(items(eset)) :
      val item = items(eset)[next(item-index)]
      defn dispatch () :
        match(upcoming(item)) :
          (f:False) :
            end-of-rule(item)
          (p:GProduction) :
            upcoming-production(item, p)
          (t:GTerminal) :
            if index(eset) < length(input) and
               input[index(eset)] == /item(t) :
              upcoming-terminal(item)
            else : nonmatched-terminal()            
      defn upcoming-terminal (item:EItem) :
        val item* = EItem(rule(item), num-parsed(item) + 1, parent(item))
        add(items(sets[set-index + 1]), item*)
      defn nonmatched-terminal () :
        false
      defn upcoming-production (item:EItem, t:GProduction) :
        if add(prediction-set, name(t)) :
          for (rule in grammar, i in 0 to false) do :
            if name(rule) == name(t) :
              val item* = EItem(i, 0, set-index)
              add(items(eset), item*)
      defn end-of-rule (completed-item:EItem) :
        val grule = grammar[rule(completed-item)]
        val pset = sets[parent(completed-item)]
        val range = ParsedRange(rule(completed-item), index(pset), index(eset))
        for item in items(pset) do :
          if upcoming(item) == GProduction(name(grule)) :
            val parent-start = index(sets[parent(item)])
            val item* = EItem(rule(item), num-parsed(item) + 1, parent(item))
            add(parents, EParent(rule(item), parent-start, num-parsed(item), range))
            if add(advance-set, [rule(item), num-parsed(item), parent(item)]) :                           add(items(eset), item*)
      dispatch()

  defn* process-until-finished () :
    val set-index = length(sets) - 1
    val eset = sets[set-index]
    if not empty?(items(eset)) :
      add(sets, ESet(index(eset) + 1, Vector<EItem>()))
      process-set(set-index)
      process-until-finished()
 
  defn* determine-reachable-graph () :
    val used-ranges = HashSet<ParsedRange>()
    val edges = Vector<ParseEdge>()
    val children-table = group-by(key, parents) where :
      defn key (p:EParent) : [rule(p), start(p), index(p)]
    defn children (r:ParsedRange, index:Int) :
      val key = [rule(r), start(r), index]
      children-table[key]
    defn mark-used (r:ParsedRange) :
      if add(used-ranges, r) :
        within indented() :
          val tokens = tokens(grammar[rule(r)])
          let loop (index:Int = length(tokens) - 1,
                    ends:List<Int> = List(end(r))) :                  
            if index >= 0 :
              match(tokens[index]) :
                (t:GTerminal) :
                  loop(index - 1, map({_ - 1}, ends))
                (t:GProduction) :
                  val child-relationships = to-list $ 
                    for relation in children(r, index) filter :
                      contains?(ends, end(child(relation)))
                  for rel in child-relationships do :
                    add(edges, ParseEdge(r, index, child(rel)))
                    mark-used(child(rel))
                  loop(index - 1, map(start{child(_)}, child-relationships))
    mark-used(ParsedRange(0, 0, length(input)))
    to-tuple(edges)

  defn main () :
    make-initial-set()
    process-until-finished()
    print-sets()
    println("PARENTS:")
    do(println, parents)
    println("REACHABLE:")
    for r in determine-reachable-graph() do :
      println("%_ index %_  =>  %_" % [format(parent(r)), index(r), format(child(r))])


  main()

;============================================================
;======================= Test Case ==========================
;============================================================

defn example-grammar () :
  val E = GProduction(`E)
  val N = GTerminal(`N)
  val PLUS = GTerminal(`+)
  val TIMES = GTerminal(`x)
  val LPAREN = GTerminal(`L)
  val RPAREN = GTerminal(`R)
  [GRule(`S, [E])
   GRule(`E, [E PLUS E])
   GRule(`E, [E TIMES E])
   GRule(`E, [LPAREN E RPAREN])
   GRule(`E, [N])]

deftest print-grammar :
  val g = example-grammar()
  do(println, g)

deftest parse :
  val g = example-grammar()
  parse(g, to-tuple $ `(N x N x N + N x N x N + N x N x N))

defn example-grammar-2 () :
  val S = GProduction(`S)
  val E = GProduction(`E)
  val F = GProduction(`F)
  val A = GTerminal(`A)
  val B = GTerminal(`B)
  val X = GTerminal(`X)
  val Y = GTerminal(`Y)
  [GRule(`Start, [S])
   GRule(`S, [E E X])
   GRule(`S, [F F Y])
   GRule(`E, [A A B])
   GRule(`F, [A A B])]

deftest parse-2 :
  val g = example-grammar-2()
  parse(g, to-tuple $ `(A A B A A B Y))

defn example-grammar-3 () :
  val S = GProduction(`S)
  val E = GProduction(`E)
  val F = GProduction(`F)
  val A = GTerminal(`A)
  val X = GTerminal(`X)
  val Y = GTerminal(`Y)
  [GRule(`Start, [S])
   GRule(`S, [E F X])
   GRule(`S, [F E X])
   GRule(`S, [F F F Y])
   GRule(`E, [A A])
   GRule(`F, [A])]

deftest parse-3 :
  val g = example-grammar-3()
  parse(g, to-tuple $ `(A A A X))

defn example-grammar-4 () :
  val S = GProduction(`S)
  val E = GProduction(`E)
  val A = GTerminal(`A)
  val X = GTerminal(`X)
  [GRule(`Start, [S])
   GRule(`S, [E E X])
   GRule(`E, [A A])
   GRule(`E, [A])]

deftest parse-4 :
  val g = example-grammar-4()
  parse(g, to-tuple $ `(A A A A X))