defpackage stz/ids :
   import core
   import collections


;                          Id Generation
;                          =============

val ID-COUNTER = to-seq(1000000 to false)
public defn fresh-id () : next(ID-COUNTER)


;                        Special Functions
;                        =================

public val EXTEND-HEAP-ID = fresh-id()
public val EXTEND-STACK-ID = fresh-id()
public val VARIABLE-UNINITIALIZED-ERROR-ID = fresh-id()
public val TUPLE-LENGTH-ERROR-ID = fresh-id()
public val NO-BRANCH-ERROR-ID = fresh-id()
public val AMB-BRANCH-ERROR-ID = fresh-id()
public val CAST-ERROR-ID = fresh-id()
public val ARITY-ERROR-ID = fresh-id()

println("EXTEND-HEAP-ID = %~" % [EXTEND-HEAP-ID])
println("EXTEND-STACK-ID = %~" % [EXTEND-STACK-ID])
println("VARIABLE-UNINITIALIZED-ERROR-ID = %~" % [VARIABLE-UNINITIALIZED-ERROR-ID])
println("TUPLE-LENGTH-ERROR-ID = %~" % [TUPLE-LENGTH-ERROR-ID])
println("NO-BRANCH-ERROR-ID = %~" % [NO-BRANCH-ERROR-ID])
println("AMB-BRANCH-ERROR-ID = %~" % [AMB-BRANCH-ERROR-ID])
println("CAST-ERROR-ID = %~" % [CAST-ERROR-ID])
println("ARITY-ERROR-ID = %~" % [ARITY-ERROR-ID])            

;                         Special Types
;                         =============

public val BYTE-TYPE-ID = fresh-id()
public val CHAR-TYPE-ID = fresh-id()
public val INT-TYPE-ID = fresh-id()
public val LONG-TYPE-ID = fresh-id()
public val FLOAT-TYPE-ID = fresh-id()
public val DOUBLE-TYPE-ID = fresh-id()
public val STRING-TYPE-ID = fresh-id()
public val SYMBOL-TYPE-ID = fresh-id()
public val LIST-TYPE-ID = fresh-id()
public val TRUE-TYPE-ID = fresh-id()
public val FALSE-TYPE-ID = fresh-id()
public val TUPLE-TYPE-ID = fresh-id()
public val FN-TYPE-ID = fresh-id()
public val STACK-TYPE-ID = fresh-id()

public val TYPE-TYPE-ID = fresh-id()
public val BOX-TYPE-ID = fresh-id()


println("FN-TYPE-ID = %~" % [FN-TYPE-ID])
println("TYPE-TYPE-ID = %~" % [TYPE-TYPE-ID])
println("INT-TYPE-ID = %~" % [INT-TYPE-ID])
println("BOX-TYPE-ID = %~" % [BOX-TYPE-ID])
println("TUPLE-TYPE-ID = %~" % [TUPLE-TYPE-ID])
println("FALSE-TYPE-ID = %~" % [FALSE-TYPE-ID])
println("TRUE-TYPE-ID = %~" % [TRUE-TYPE-ID])
println("STRING-TYPE-ID = %~" % [STRING-TYPE-ID])
println("SYMBOL-TYPE-ID = %~" % [SYMBOL-TYPE-ID])
println("LIST-TYPE-ID = %~" % [LIST-TYPE-ID])

;                         Special Fields
;                         ==============

public val BYTE-VALUE-FIELD-ID = fresh-id()
public val CHAR-VALUE-FIELD-ID = fresh-id()
public val INT-VALUE-FIELD-ID = fresh-id()
public val FLOAT-VALUE-FIELD-ID = fresh-id()

println("INT-VALUE-FIELD-ID = %~" % [INT-VALUE-FIELD-ID])
println("FLOAT-VALUE-FIELD-ID = %~" % [FLOAT-VALUE-FIELD-ID])

;                          Constant Tags
;                          =============

public val BYTE-CONST-TAG = 0
public val CHAR-CONST-TAG = 1
public val INT-CONST-TAG = 2
public val LONG-CONST-TAG = 3
public val FLOAT-CONST-TAG = 4
public val DOUBLE-CONST-TAG = 5
public val TRUE-CONST-TAG = 6
public val FALSE-CONST-TAG = 7
public val LIST-CONST-TAG = 8
public val STRING-CONST-TAG = 9
public val SYMBOL-CONST-TAG = 10
public val TYPE-CONST-TAG = 11

;                        Compiled Bit Tags
;                        =================

public val INT-TAG-BITS = 0
public val REF-TAG-BITS = 1
public val MARKER-TAG-BITS = 2
public val BYTE-TAG-BITS = 3
public val CHAR-TAG-BITS = 4
public val FLOAT-TAG-BITS = 5
public val VOID-TAG = (-1 << 3) + MARKER-TAG-BITS

public val TAG-TAG-BITS = 0
public val HEADER-TAG-BITS = 1

;                       Compiled Stack Layout
;                       =====================

var STACK-ACCUM = 0
defn next-stack-offset (sz:Int) :
   val o = STACK-ACCUM
   STACK-ACCUM = STACK-ACCUM + sz
   o

next-stack-offset(8) ;Word for Type Tag
public val STACK-POSITION-OFFSET = next-stack-offset(4)
public val STACK-MARK-OFFSET = next-stack-offset(4)
public val STACK-PARENT-OFFSET = next-stack-offset(8)
public val STACK-SP-OFFSET = next-stack-offset(8)
public val STACK-ITEMS-OFFSET = next-stack-offset(8)
public val STACK-SIZE = 512 * 8


;                     Compiled Program Labels
;                     =======================

;Heaps
public val HEAP-PTR-LBL = fresh-id()
public val HEAP-LIM-LBL = fresh-id()

;Stacks
public val STACK-PTR-LBL = fresh-id()
public val STACK-LIM-LBL = fresh-id()
public val STACK-POOL-LBL = fresh-id()
public val NUM-FREE-STACKS-LBL = fresh-id()
public val FREE-STACKS-LBL = fresh-id()
public val STACK-LBL = fresh-id()
public val RETRACT-STACK-LBL = fresh-id()

;Floating Point Default Values
public val FLOAT-ZERO-LBL = fresh-id()
public val DOUBLE-ZERO-LBL = fresh-id()

;Argument Buffer Label
public val ARG-LBL = fresh-id()

;Swap Label
public val SWAP-LBL = fresh-id()

;C Parameter Labels
public val C-RSP-LBL = fresh-id()

;Object table Labels
public val OBJECT-TABLE-LBL = fresh-id()

;Global table labels
public val GLOBAL-TABLE-LBL = fresh-id()
public val GLOBAL-MAP-LBL = fresh-id()

;Constant table labels
public val CONSTANT-TABLE-LBL = fresh-id()

;Info tables
public val INFO-TABLE-LBL = fresh-id()


println("HEAP-PTR-LBL = %~" % [HEAP-PTR-LBL])
println("HEAP-LIM-LBL = %~" % [HEAP-LIM-LBL])
println("STACK-PTR-LBL = %~" % [STACK-PTR-LBL])
println("STACK-LIM-LBL = %~" % [STACK-LIM-LBL])
println("STACK-POOL-LBL = %~" % [STACK-POOL-LBL])
println("NUM-FREE-STACKS-LBL = %~" % [NUM-FREE-STACKS-LBL])
println("FREE-STACKS-LBL = %~" % [FREE-STACKS-LBL])
println("STACK-LBL = %~" % [STACK-LBL])
println("RETRACT-STACK-LBL = %~" % [RETRACT-STACK-LBL])
println("FLOAT-ZERO-LBL = %~" % [FLOAT-ZERO-LBL])
println("DOUBLE-ZERO-LBL = %~" % [DOUBLE-ZERO-LBL])
println("ARG-LBL = %~" % [ARG-LBL])
println("SWAP-LBL = %~" % [SWAP-LBL])
println("C-RSP-LBL = %~" % [C-RSP-LBL])
println("OBJECT-TABLE-LBL = %~" % [OBJECT-TABLE-LBL])
println("GLOBAL-TABLE-LBL = %~" % [GLOBAL-TABLE-LBL])
println("GLOBAL-MAP-LBL = %~" % [GLOBAL-MAP-LBL])
println("CONSTANT-TABLE-LBL = %~" % [CONSTANT-TABLE-LBL])
println("INFO-TABLE-LBL = %~" % [INFO-TABLE-LBL])