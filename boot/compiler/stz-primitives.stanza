defpackage stz/primitives :
   import core
   import collections
   import stz/tl-ir
   import stz/utils
   import stz/kl-ir
   import stz/ids

;============================================================
;================= HiStanza Primitives ======================
;============================================================

public deftype Primitive <: Equalable
public defmulti name (p:Primitive) -> Symbol

public val PRIMITIVES = Vector<Primitive>()

public defn primitive? (primname:Symbol) :
   primitive(primname) not-typeof False

public defn primitive (primname:Symbol) :
   for p in PRIMITIVES find :
      primname == name(p)

public defn primitive! (primname:Symbol) :
   primitive(primname) as Primitive

defmethod core/is-equal? (a:Primitive, b:Primitive) :
   name(a) == name(b)

defmethod print (o:OutputStream, p:Primitive) :
   print(o, name(p))

defn register (p:Primitive) :
   add(PRIMITIVES, p)
   p   

defn make-primitive (name:Symbol) :
   register $ new Primitive :
      defmethod name (this) : name
   
public val ADD-OP = make-primitive(`add)
public val SUB-OP = make-primitive(`sub)
public val MUL-OP = make-primitive(`mul)
public val DIV-OP = make-primitive(`div)
public val MOD-OP = make-primitive(`mod)
public val AND-OP = make-primitive(`and)
public val OR-OP = make-primitive(`or)
public val XOR-OP = make-primitive(`xor)
public val SHL-OP = make-primitive(`shl)
public val SHR-OP = make-primitive(`shr)
public val ASHR-OP = make-primitive(`ashr)
public val EQ-OP = make-primitive(`eq)
public val NE-OP = make-primitive(`ne)
public val LT-OP = make-primitive(`lt)
public val GT-OP = make-primitive(`gt)
public val LE-OP = make-primitive(`le)
public val GE-OP = make-primitive(`ge)
public val NOT-OP = make-primitive(`not)
public val NEG-OP = make-primitive(`neg)


;============================================================
;================= LoStanza Primitives ======================
;============================================================

public deftype LSPrimitive <: Equalable
public defmulti name (p:LSPrimitive) -> Symbol
   
public val LS-PRIMITIVES = Vector<LSPrimitive>()

defmethod core/is-equal? (a:LSPrimitive, b:LSPrimitive) :
   name(a) == name(b)

defmethod print (o:OutputStream, p:LSPrimitive) :
   print(o, name(p))

public defn ls-primitive? (primname:Symbol) :
   ls-primitive(primname) not-typeof False

public defn ls-primitive (primname:Symbol) :
   for p in LS-PRIMITIVES find :
      primname == name(p)

public defn ls-primitive! (primname:Symbol) :
   ls-primitive(primname) as LSPrimitive

public deftype GetterPrimitive <: LSPrimitive
public defmulti type (p:GetterPrimitive) -> LSType
public defmulti op (p:GetterPrimitive) -> KLSOp

public defstruct #GetterPrimitive <: GetterPrimitive :
   name: Symbol with: (as-method => true)
   type: LSType with: (as-method => true)
   op: KLSOp with: (as-method => true)
with :
   constructor => GetterPrimitive
   
public defstruct SetterPrimitive <: LSPrimitive :
   name: Symbol with: (as-method => true)
   type: LSType
   op: KLSOp

defn register (p:LSPrimitive) :
   add(LS-PRIMITIVES, p)
   p   
defn make-getaddr (name:Symbol, type:LSType, lbl:Int) :
   register(GetterPrimitive(name, type, GetAddrOp(name, lbl)))
defn make-getter (name:Symbol, type:LSType, lbl:Int) :
   register(GetterPrimitive(name, type, GetterOp(name, lbl)))
defn make-setter (name:Symbol, type:LSType, lbl:Int) :
   register(SetterPrimitive(name, type, SetterOp(name, lbl)))

val STACK-TYPE = RefT(TOf(STACK-TYPE-ID, TTuple(List())))
public val GET-HEAP-OP = make-getter(`heap, PtrT(UnknownT()), HEAP-PTR-LBL)
public val SET-HEAP-OP = make-setter(`set-heap, PtrT(UnknownT()), HEAP-PTR-LBL)
public val GET-HEAP-LIM-OP = make-getter(`heap-limit, PtrT(UnknownT()), HEAP-LIM-LBL)
public val SET-HEAP-LIM-OP = make-setter(`set-heap-limit, PtrT(UnknownT()), HEAP-LIM-LBL)
public val GET-NUM-FREE-STACKS-OP = make-getter(`num-free-stacks, LongT(), NUM-FREE-STACKS-LBL)
public val SET-NUM-FREE-STACKS-OP = make-setter(`set-num-free-stacks, LongT(), NUM-FREE-STACKS-LBL)
public val GET-FREE-STACKS-OP = make-getter(`free-stacks, PtrT(STACK-TYPE), FREE-STACKS-LBL)
public val SET-FREE-STACKS-OP = make-setter(`set-free-stacks, PtrT(STACK-TYPE), FREE-STACKS-LBL)
public val GET-STACK-OP = make-getter(`stack, STACK-TYPE, STACK-LBL)
public val SET-STACK-OP = make-setter(`set-stack, STACK-TYPE, STACK-LBL)
public val GET-STACK-POOL-OP = make-getter(`stack-pool, PtrT(STACK-TYPE), STACK-POOL-LBL)
public val SET-STACK-POOL-OP = make-setter(`set-stack-pool, PtrT(STACK-TYPE), STACK-POOL-LBL)
public val GET-GLOBAL-TABLE-OP = make-getaddr(`globals, PtrT(UnknownT()), GLOBAL-TABLE-LBL)
public val GET-GLOBAL-MAP-OP = make-getaddr(`global-map, PtrT(UnknownT()), GLOBAL-MAP-LBL)
public val GET-OBJECT-TABLE-OP = make-getaddr(`object-table, PtrT(UnknownT()), OBJECT-TABLE-LBL)
public val GET-CONSTANT-TABLE-OP = make-getaddr(`constant-table, PtrT(UnknownT()), CONSTANT-TABLE-LBL)
public val GET-INFO-TABLE-OP = make-getaddr(`info-table, PtrT(UnknownT()), INFO-TABLE-LBL)
public val GET-SP-OP = register $ new GetterPrimitive :
   defmethod name (this) : `sp
   defmethod type (this) : PtrT(UnknownT())
   defmethod op (this) : SP-OP

defn make-ls-primitive (name:Symbol) :
   register $ new LSPrimitive :
      defmethod name (this) : name
   
public val LS-ADD-OP = make-ls-primitive(`add)
public val LS-SUB-OP = make-ls-primitive(`sub)
public val LS-MUL-OP = make-ls-primitive(`mul)
public val LS-DIV-OP = make-ls-primitive(`div)
public val LS-MOD-OP = make-ls-primitive(`mod)
public val LS-AND-OP = make-ls-primitive(`and)
public val LS-OR-OP = make-ls-primitive(`or)
public val LS-XOR-OP = make-ls-primitive(`xor)
public val LS-SHL-OP = make-ls-primitive(`shl)
public val LS-SHR-OP = make-ls-primitive(`shr)
public val LS-ASHR-OP = make-ls-primitive(`ashr)
public val LS-EQ-OP = make-ls-primitive(`eq)
public val LS-NE-OP = make-ls-primitive(`ne)
public val LS-LT-OP = make-ls-primitive(`lt)
public val LS-GT-OP = make-ls-primitive(`gt)
public val LS-LE-OP = make-ls-primitive(`le)
public val LS-GE-OP = make-ls-primitive(`ge)
public val LS-ULT-OP = make-ls-primitive(`ult)
public val LS-UGT-OP = make-ls-primitive(`ugt)
public val LS-ULE-OP = make-ls-primitive(`ule)
public val LS-UGE-OP = make-ls-primitive(`uge)
public val LS-NOT-OP = make-ls-primitive(`not)
public val LS-NEG-OP = make-ls-primitive(`neg)
public val LS-BITS-OP = make-ls-primitive(`bits)
public val LS-FNUM-OP = make-ls-primitive(`fnum)