defpackage stz/arg-parser :
   import core
   import collections

;============================================================
;=============== Public Interface ===========================
;============================================================

public defstruct Command :
   name: String
   flags: Many<Flag>

public defn MarkerFlag (name:String) :
   Flag(name, 0, 0, true)
   
public defn SingleFlag (name:String, optional?:True|False) :
   Flag(name, 1, 1, optional?)

public defn SingleFlag (name:String) :
   SingleFlag(name, false)

public defn MultipleFlag (name:String, min:Int, max:Int, optional?:True|False) :
   Flag(name, min, max, optional?)

public defn MultipleFlag (name:String, min:Int, optional?:True|False) :
   Flag(name, min, INT-MAX, optional?)

public defn MultipleFlag (name:String, min:Int) :
   Flag(name, min, INT-MAX, false)

public defn MultipleFlag (name:String, optional?:True|False) :
   Flag(name, 0, INT-MAX, optional?)

public defn MultipleFlag (name:String) :
   Flag(name, 0, INT-MAX, false)

public deftype ParseResult
public defmulti command (r:ParseResult) -> String
public defmulti args (r:ParseResult) -> List<String>
public defmulti flag? (r:ParseResult, flag:String) -> True|False
public defmulti flag (r:ParseResult, flag:String) -> String|List<String>|False|True

;============================================================
;============= Internal Flag Representation =================
;============================================================

defstruct Flag :
   name: String
   min-arity: Int
   max-arity: Int
   optional?: True|False

defn marker? (f:Flag) :
   max-arity(f) == 0

defn single? (f:Flag) :
   min-arity(f) == 1 and max-arity(f) == 1

;============================================================
;====================== Engine ==============================
;============================================================

public defn parse-args (comms:Many<Command>, default-comm:False|Command, args:Seqable<String>) -> ParseResult :
   ;Get sequence of arguments
   val args-seq = to-seq(args)
   throw(NoCommand()) when empty?(args-seq)

   ;Parse command name
   defn parse-command () :
      val cname = peek(args-seq)
      val c = for c in comms find :
         name(c) == cname
      match(c) :
         (c:False) :
            throw(NoSuchCommand(cname)) when default-comm typeof False
            default-comm as Command
         (c:Command) :
            next(args-seq)
            c
   val command = parse-command()

   ;Parse command arguments and flag arguments
   val command-args = Vector<String>()
   val flag-args = HashTable<String,List<String>>()

   defn flag? (str:String) :
      prefix?(str, "-")
   
   defn* parse-args () :
      if not empty?(args-seq) :
         val arg = peek(args-seq)         
         if flag?(arg) :
            parse-flag-args("")
         else :
            add(command-args, next(args-seq))
            parse-args()            
            
   defn* parse-flag-args (flag:String) :
      if not empty?(args-seq) :
         val arg = next(args-seq)
         if flag?(arg) :
            val flag = arg[1 to false]
            throw(DuplicateFlag(flag)) when key?(flag-args, flag)
            flag-args[flag] = List()
            parse-flag-args(flag)
         else :
            flag-args[flag] = cons(arg, flag-args[flag])
            parse-flag-args(flag)
            
   parse-args()

   ;Verify flags
   val accepted-args = HashTable<String,List<String>>()
   for flag in flags(command) do :
      match(get?(flag-args, name(flag))) :
         (args:List<String>) :
            val arity = length(args)
            if arity < min-arity(flag) or arity > max-arity(flag) :
               throw(WrongArityFlag(flag, args))
            accepted-args[name(flag)] = args
            remove(flag-args, name(flag))
         (args:False) :
            throw(MissingFlag(command, flag)) when not optional?(flag)

   ;Extraneous flags
   for entry in flag-args do :
      throw(NoSuchFlag(command, key(entry)))
      
   ;Return result
   new ParseResult :
      defmethod command (this) -> String :
         name(command)
      defmethod args (this) -> List<String> :
         to-list(command-args)
      defmethod flag? (this, flag:String) -> True|False :
         key?(accepted-args, flag)
      defmethod flag (this, flag:String) :
         val f = for f in flags(command) find :
            name(f) == flag
         match(f) :
            (f:Flag) :
               match(get?(accepted-args, flag)) :
                  (args:List<String>) :
                     if marker?(f) : true
                     else if single?(f) : head(args)
                     else : args
                  (args:False) :
                     false
            (f:False) :
               throw(NoSuchFlag(command, flag))

;============================================================
;====================== Errors ==============================
;============================================================

deftype ArgParserException <: Exception

defn ArgParserException (msg) :
   new ArgParserException :
      defmethod print (o:OutputStream, this) :
         print(o, msg)

defn NoCommand () :
   ArgParserException("No command given.")

defn NoSuchCommand (name:String) :
   ArgParserException("%_ is not a recognized command." % [name])

defn DuplicateFlag (flag:String) :
   ArgParserException("Duplicate flag -%_ given." % [flag])

defn WrongArityFlag (flag:Flag, args:List<String>) :
   if marker?(flag) :
      ArgParserException("Flag -%_ does not accept arguments, but received (%,)." % [name(flag), args])
   else if single?(flag) :
      ArgParserException("Flag -%_ requires single argument, but received (%,)." % [name(flag), args])
   else :
      ArgParserException("Flag -%_ requires at least %_ arguments, but received (%,)." % [name(flag), args])

defn MissingFlag (c:Command, flag:Flag) :
   ArgParserException("Command %_ requires flag -%_." % [name(c), name(flag)])

defn NoSuchFlag (c:Command, flag:String) :
   ArgParserException("Command %_ does not recognize flag -%_." % [name(c), flag])