defpackage user :
   import core
   import reader
   import macro-utils
   import stz/utils
   import stz/algorithms
   import stz/parser
   import stz/input
   import stz/renamer
   import stz/resolver
   import stz/type
   import stz/kform
   import stz/tgt
   import stz/asm-emitter

defn test-reader () :
   header("Form")
   val form = read-file("data.txt")   
   println(form)

   header("Expanded")
   val expanded = with-syntax(core) :
      match-syntax(List(form)) :
         (?e:#exp) : e
   println(expanded)      

   header("Input")
   val input = read-prog(expanded)
   println(input)

   header("Check")
   check(input)

   header("Renamer")
   val [namemap, renamed] = rename(input)
   println(renamed)

   header("Resolver")
   val resolved = resolve(namemap, renamed)
   println(resolved)

   header("Type System")
   val typed = type-program(namemap, resolved)
   println(typed)

   header("Compiled")
   val compiled = compile(typed, namemap)
   println(compiled)

   header("Assembled")
   val assembled = compile(compiled)
   do(println, assembled)

   header("Emission")
   with-output-file{FileOutputStream("boot.s"), _} $ fn () :
      emit(assembled)

test-reader()