defpackage user :
   import core
   import reader
   import macro-utils

   import stz/algorithms
   import stz/parser
   ;import stz/input

defsyntax mylang :
   defrule :
      exp = (?f:#factor ?es:#exp-suffix ...) :
         cons(f, es)
      f = (?x) :
         x
      es = (+ ?y) : qquote($plus ~ y)
      es = (- ?y) : qquote($minus ~ y)

defn test-parser () :
   with-syntax(mylang) :
      match-syntax(read-file("data.txt")) :
         (?e:#exp) :
            println(e)

test-parser()

;defn test-algorithms () :
;   val cs1 = strong-components $ [
;      1 => `(1 3 5)
;      2 => `(4)
;      3 => `(6)
;      4 => `(5)
;      5 => `(2)
;      6 => `()]
;   println(cs1)
;
;   val cs2 = strong-components $ [
;      `a => `(`a `d `e)
;      `b => `(`c)
;      `c => `(`f)
;      `d => `(`e)
;      `e => `(`b)
;      `f => `()]
;   println(cs2)
;
;test-algorithms()

;defn test-reader () :
;   val form = read-file("data.txt")   
;   println("============================================================")
;   println("====================== Form ================================")
;   println("============================================================")
;   println(form)
;
;   val input = read(form)
;   println("============================================================")
;   println("====================== Input ===============================")
;   println("============================================================")
;   println(input)
;
;test-reader()