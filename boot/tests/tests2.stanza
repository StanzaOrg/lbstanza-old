defpackage user :
   import core
   import collections
   import reader
   import macro-utils
   import stz/parser

deftype Arg
defstruct SimpleArg <: Arg :
   ;x:t
   name: Symbol
   type: Symbol
defstruct BeginArg <: Arg :
   ;( ... )
   args: List<Arg>
defstruct ScopeArg <: Arg :
   ;{ ... }
   arg: Arg   
defstruct GroupArg <: Arg :
   ;group{ ... }
   arg: Arg
defstruct PublicArg <: Arg :
   ;public{ ... }
   arg: Arg
defstruct ProtectedArg <: Arg :
   ;protected{ ... }
   arg: Arg

deftype Action
defstruct ArgAction <: Action :
   arg: Arg
defstruct MapAction <: Action :
   type: Symbol
defstruct RegisterAction <: Action :
   type: Symbol
defstruct CustomAction <: Action :
   body

defstruct Clause :
   node: Symbol
   action: Action

defstruct Renamer :
   name: Symbol
   clauses: List<Clause>

defstruct DefRenamer :
   name: Symbol
   exp: Symbol
   type: Symbol
   eng: Symbol
   engtype
   renamers: List<Renamer>

;======== Syntax Definition ========
defsyntax stz/renamer-lang :
   defn sym? (x) :
      match(unwrap-token(x)) :
         (x:Symbol) : x != `...
         (x) : false

   defrule :
      sym = (?x) when sym?(x) : unwrap-token(x)
      prefix-op = (defrenamer ?name:#sym (?exp:#sym : ?exptype:#sym, ?eng:#sym : ?engtype:#type) :
                      ?rs:#renamer ... ?rest ...) :
         if not empty?(rest) :
            fatal("Not a renamer: %_" % [rest])
         DefRenamer(name, exp, exptype, eng, engtype, rs)

      renamer = (?name:#sym : (?cs:#clause ...)) :
         for c in cs do :
            println("c is Clause?: %_" % [c typeof Clause])
         Renamer(name, cs)
      clause = (?node:#sym : ?act:#action) : Clause(node, act)
      
      action = ((~ _ : ?type:#sym)) : MapAction(type)
      action = (register ?type:#sym) : RegisterAction(type)
      action = (custom{?e0:#exp ?es:#exp ...}) : CustomAction(cons(e0, es))
      action = (?arg:#arg) : ArgAction(arg)
      
      arg = (group{?args:#arg ...}) : GroupArg(BeginArg(args))
      arg = (public{?args:#arg ...}) : PublicArg(BeginArg(args))
      arg = (protected{?args:#arg ...}) : ProtectedArg(BeginArg(args))
      arg = ({?args:#arg ...}) : ScopeArg(BeginArg(args))
      arg = ((?args:#arg ...)) : BeginArg(args)
      arg = (?name:#sym : ?type:#sym) : SimpleArg(name, type)
      
      exp = (?x) : x
      type = (?x) : x

defn main () :
   with-syntax(stz/renamer-lang) :
      match-syntax(read-file("data.txt")) :
         (?e:#prefix-op ?rest ...) :
            println("rest:")
            println(rest)
            
main()