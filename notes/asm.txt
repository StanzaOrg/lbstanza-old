=== Assembly Level Types ===

   ByteType
   IntType
   LongType
   FloatType
   DoubleType
   RefType

=== Top Level Constructs ===

The defstruct and defarray constructs declare the name of objects that
may be allocated on the heap. Note the following rules regarding
alignment. For a DefStruct, the total size of all types must be a
multiple of 8. All types must be aligned to a multiple of its type
size. For a DefArray, all types and rtypes must be aligned to a
multiple of their type size. The total size of rtype must be a
multiple of its largest size.

   ADefStruct :
      n: Int
      types: List<AType>

   ADefArray :
      n: Int
      types: List<AType>
      rtype: List<AType>

=== Expression Level Constructs ===

   ALoad :
      addr: Imm      

The ref and array constructs create objects on the heap. Given the
integer corresponding to either the declared struct (in the case of
Ref) or the declared array (in the chase of Array), and the
initializing arguments, a heap object is allocated and the pointer is
returned. Note that the rest fields of the array are not initialized.

   ARef:
      n: Int
      args: List<Imm>

   AArray:
      n: Int
      length: Imm
      args: List<Imm>

The tag and untag constructs create tagged versions or remove tags
from values with primitive tags.

   ATag :
      tag: Tag
      imm: Imm

   AUntag :
      tag: Tag
      imm: Imm

The match construct matches against a list of arguments, and jumps to
the corresponding label if it's tag matches the given
specification. If no clause matches, then it jumps to the given
alternate label. Tags can be either primitive tags, or a reference tag
which refers to a defined heap object type. (See ADefStruct, ADefArray). 

   AMatch :
      args: List<Imm>
      branches: KeyValue<List<Tag>,Int>
      alt:n

   where :
      Tag =
         | ByteTag
         | CharTag
         | IntTag
         | FloatTag
         | TrueTag
         | FalseTag
         | RefTag: (n:Int)







