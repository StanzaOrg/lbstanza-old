============================================================
==================== Specification =========================
============================================================

Locations are used to store the results of operations.

Locations :
   Integer Registers: R0 through R14
   Floating Point Registers: F0 through F15
   Stack Register: RSP

Values are used to indicate operands of operations. Because all
locations can be used as operands, values include locations.

Immediates :
   Mem[n] : Labeled memory location
   Mem[name] : External labeled memory location
   IntImm : Immediate integer literal
   + Locations

Data Instructions :
   DefData : Indicates the start of a data section
   DefText : Indicates the start of a text section
   DefByte : Defines a byte value.
   DefInt : Defines a int value.
   DefLong : Defines a long value.
   DefFloat : Defines a float value.
   DefDouble : Defines a double value.
   DefString : Defines a zero-terminated string value.
   DefSpace : Reserves a given number of empty bytes.
   DefLabel : Defines a long value which is the address of the given label.

Set Instruction : Assigns the value in operand y to location x.
   T: x = y

Data Conversion Instruction : Converts a value from one type to
another. (S) indicates that the source type is signed, whereas (U)
indicates that the source type is unsigned. The signedness has an
effect when smaller integral types are converted to larger integral
types. If the source operand is unsigned then it is zero extended,
otherwise it is sign extended.

   x:type = y:type (S)

Binary Operations : Assigns the result of applying a binary operation
to operands y and z to the location x.

   T: x = y + z

Dual Operations : Assigns the result of applying a dual operation to
operands y and z to the locations x1 and x2.

   T: (x1, x2) = y + z

Memory Operations :
   Load: Assigns the value stored at the address denoted by y plus a
   given offset to x.

      T: x = [y + offset]

   Store: Stores the value in y inside the address denoted by x plus a
   given offset.

      T: [x + offset] = y

   Addr: Computes the address denoted by y plus a given offset and
   stores the computed address in x.

      x = addr(y + offset)

Control Flow Instructions :

   Call : Jumps to the address denoted by the given operand. Places
   the return address at RSP - 8, and sets RSP to RSP - 8.

   Return : Jumps to the address stored at RSP + 8, and sets RSP to
   RSP + 8.

   Goto : Jumps to the address denoted by the given operand.

   T: Branch x when y < z : Jumps to the address denoted by operand x,
   when the binary predicate evaluates to non-zero.

   L<n> : Marks the following instruction as memory location n.

   L<name> : Marks the following instruction as an externally visible
   location with the given name.

============================================================
=================== Operators ==============================
============================================================
       Shf  Div  Comm  NComm  Cmp  FComm  FNComm  FCmp
ADD  :           x                 x
SUB  :                 x                  x
MUL  :           x                 x
DIV  :      x                             x
MOD  :      x
AND  :           x
OR   :           x
XOR  :           x
SHL  : x
SHR  : x
ASHR : x
EQ   :                        x                   x
NE   :                        x                   x
LT   :                        x                   x
GT   :                        x                   x
LE   :                        x                   x
GE   :                        x                   x
ULE  :                        x              
ULT  :                        x
UGT  :                        x
UGE  :                        x

============================================================
================= Register Names ===========================
============================================================

Register Names :
   R0 : rax (CResult Reg)
   R1 : rbx
   R2 : rcx (CArg 3)
   R3 : rdx (CArg 2)
   R4 : rsi (CArg 1)
   R5 : rdi (CArg 0)
   R6 : rbp
   R7 : r8 (CArg 4)
   R8 : r9 (CArg 5)
   R9 : r10
   R10 : r11
   R11 : r12
   R12 : r13
   R13 : r14
   R14 : r15
   F0 : xmm0
   F1 : xmm1
   F2 : xmm2
   F3 : xmm3
   F4 : xmm4
   F5 : xmm5
   F6 : xmm6
   F7 : xmm7
   F8 : xmm8
   F9 : xmm9
   F10 : xmm10
   F11 : xmm11
   F12 : xmm12
   F13 : xmm13
   F14 : xmm14
   F15 : xmm15

============================================================
=================== Restrictions ===========================
============================================================

Legend:
   i for a type indicates integral type.
   f for a type indicates floating point type.
   R for a value indicates an integer register.
   S for a value indicates the stack register.
   F for a value indicates a floating point register.
   I for a value indicates an integer immediate.
   M for a value indicates a label.

Set Instruction : T: x = y
   i: R = RI
   f: F = F
   L: SR = SRI

Data Conversion Instruction : x:type = y:type (S)
   R:i = R:i (SU) (xtype != ytype)
   R:i = F:f (S)
   F:f = R:BI (SU)
   F:f = R:L (S)
   F:f = F:f (S) (xtype != ytype)

Binary Operations : T: x = y + z
   i:R = RI Comm RI
   L:RS = RSI Comm RSI

   IL:R = RI Mul RI
   
   i:R = RI NComm RI (x != z)
   L:RS = RSI NComm RSI (x != z)
   
   i:R = RI Shf IR2 (x != z)
   L:RS = RSI Shf IR2 (x != z)
   
   B:R0 = R Div R (x != z)
   
   i:R = RI Cmp RI (except I Cmp I)
   L:R = RSI Cmp RSI (except I Cmp I)

   f:F = F FComm F

   f:F = F FNComm F (x != z)

   f:R = F FCmp F

Dual Operations : T: (x1, x2) = y + z

   IL: (R0, R3) = R Div R (x1 != z, x2 != z)

Memory Operations :
   Load: T: x = [y + offset]

      i: R = [RSM + offset]
      L: RS = [RSM + offset]
      f: F = [RSM + offset]

   Store: T: [x + offset] = y

      i: [RSM + offset] = RI
      L: [RSM + offset] = SRI
      f: [RSM + offset] = F

   Addr: x = addr(y + offset)

      RS = addr(RSM + offset)

Control Flow Instructions :

   Call : Call x

      Call RM

   Goto : Goto x

      Goto RM

   Branch: T: branch x when y < z

      i: branch M when RI Cmp RI (except I Cmp I)
      L: branch M when RSI Cmp RSI (except I Cmp I)
      f: branch M when F Cmp F

============================================================
================== Implementation ==========================
============================================================

Size Suffix :
   Byte : "b"
   Int : "l"
   Long : "q"
   Float : "s"
   Double : "d"

Generating Float Set Operations :
   Emit: movs y, x

Generating Float Load Instructions :
   Form: T: x = [y:reg/rsp + o]
   Emit: movs o(y), x

   Form: T: x = [y:mem + o]
   Emit: movs (L<n> + o)(%rip), x

   Form: T: x = [y:exmem + o]
   Emit: movs (L<name> + o)(%rip), x

Generating Float Store Instructions :
   Assume: y:reg
   Form: T: [x:reg/rsp + o] = y
   Emit: movs y, o(x)

   Form: T: [x:mem + o] = y
   Emit: movs y, (L<n> + o)(%rip)

   Form: T: [x:exmem + o] = y
   Emit: movs y, (L<name> + o)(%rip)

Generating Set Operations :
   Emit: mov y, x

Generating Float Binary Operations :
   Command for :
      add : "adds"
      sub : "subs"
      mul : "muls"
      div : "divs"
      le : "be"
      lt : "b"
      ge : "ae"
      gt : "a"
      eq : "e"
      ne : "ne"

   Generating Comparative Ops:
      Form: x = y < z
      Assume: y, z:flo-reg
              x:int-reg
      Emit: cmps z, y
            movq $0, x
            setop x(byte)

   Generating Commutative Ops:
      Assume: x, y, z: flo-reg

      Form: x = x + z
      Emit: op z, x

      Form: x = y + x
      Emit: op y, x

      Form: x = y + z
      Emit: movs y, x
            op z, x

   Generating Non-commutative Ops:
      Assume: x, y, z: flo-reg

      Form: x = x - z
      Emit: op z, x

      Form: x = y - x
      Error!

      Form: x = y - z
      Emit: movs y, x
            op z, x

Generating Binary Operations :
   Command for :
      add : "add"
      sub : "sub"
      mul : "imul"
      and : "and"
      or : "or"
      xor : "xor"
      shl : "shl"
      shr : "shr"
      ashr : "sar"
      le : "le"
      lt : "l"
      ge : "ge"
      gt : "g"
      eq : "e"
      ne : "ne"
      ule : "be"
      ult : "b"
      uge : "ae"
      ugt : "a"

   Generating Comparative Ops:
      Form: x = y < z
      Emit: cmp z, y
            movq $0, x
            setop x(byte)

   Generating Commutative Ops:
      Form: x = x + z
      Emit: op z, x

      Form: x = y + x
      Emit: op y, x

      Form: x = y + z
      Emit: mov y, x
            op z, x

   Generating Non-Commutative Ops:
      Form: x = x - z
      Emit: op z, x

      Form: x = y - x
      Error!

      Form: x = y - z
      Emit: mov y, x
            op z, x

   Generating Shift Ops :
      Form: x = x >> 8
      Emit: op 8, x

      Form: x = x >> cl
      Emit: op cl, x

      Form: x = y >> 8
      Emit: mov y, x
            op 8, x

      Form: x = y >> cl
      Emit: mov y, x
            op cl, x

   Generating Div Op:
      Form: al = y / al
      Error!

      Form: al = y % al
      Error!

      Form: al = al / z
      Emit: movz al, ax
            idivb z

      Form: al = y / z
      Emit: movz y, ax
            idivb z

      Form: al = al % z
      Emit: movz al, ax
            idivb z
            shrw $8, ax

      Form: al = y % z
      Emit: movz y, ax
            idivb z
            shrw $8, ax

Generating Dual Operations :
   Form: (eax, edx) = eax /% y
   Emit: cdq
         idivl y

   Form: (rax, rdx) = rax /% y
   Emit: cqo
         idivq y

Generating Zero Extend :
   Byte => Int :
      Emit: movzbl
   Byte => Long
      Emit: movzbq
   Int => Long
      Emit: movzlq

Generating Sign Extend :
   Byte => Int :
      Emit: movsbl
   Byte => Long :
      Emit: movsbq
   Int => Long :
      Emit: movslq

Generating Goto Instructions :
   Form: goto L<n> :
   Emit: jmp L<n>

   Form: goto L<name> :
   Emit: jmp L<name>

   Form: goto reg :
   Emit: jmp *reg

Generating Value Definition :
   DefByte : .byte value
   DefInt : .long value
   DefLong : .quad value
   DefString : .byte char1 char2 char3 ... 0
   DefSpace : .space size
   DefLabel : .quad name
   DefData : .data
   DefText : .text
