Size Suffix :
   Byte : "b"
   Int : "l"
   Long : "q"

Generating Binary Operations :
   Command for :
      add : "add"
      sub : "sub"
      mul : "imul"
      and : "and"
      or : "or"
      xor : "xor"
      shl : "shl" 
      shr : "shr" 
      ashr : "sar"
      le : "le"
      lt : "l"
      ge : "ge"
      gt : "l"
      eq : "e"
      ne : "ne"
      ule : "be"
      ult : "b"
      uge : "ae"
      ugt : "a"
      
   Generating Comparative Ops:
      Form: x = y < z
      Emit: cmp z, y
            movq $0, x
            setop x(byte)
            
   Generating Commutative Ops:
      Form: x = x + z
      Emit: op z, x

      Form: x = y + x
      Emit: op y, x

      Form: x = y + z
      Emit: mov y, x
            op z, x

   Generating Non-Commutative Ops:
      Form: x = x - z
      Emit: op z, x

      Form: x = y - x
      Error!

      Form: x = y - z
      Emit: mov y, x
            op z, x

   Generating Div Op:
      Form: al = al / y
      Emit: movz al, ax
            idivb y

      Form: al = al % y
      Emit: movq al, ax
            idivb y
            shrq $8, ax
            
      Form: (eax, edx) = eax / y
      Emit: cdq
            idivl y

      Form: (rax, rdx) = rax / y
      Emit: cqo
            idivq y
            
Generating Zero Extend :
   Byte => Int :
      Emit: movzbl
   Byte => Long
      Emit: movzbq
   Int => Long
      Emit: movzlq

Generating Sign Extend :
   Byte => Int :
      Emit: movsbl
   Byte => Long :
      Emit: movsbq
   Int => Long :
      Emit: movslq

Generating Value Definition :
   DefByte : .byte value
   DefInt : .long value
   DefLong : .quad value
   DefString : .byte char1 char2 char3 ... 0
   DefSpace : .space size
   DefLabel : .quad name
   DefData : .data
   DefText : .text

