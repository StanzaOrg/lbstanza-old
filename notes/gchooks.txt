Garbage collection in the VM
============================

In the virtual machine, the opcode RESERVE_OPCODE is executed in order
to ensure that there is enough space on the heap for the upcoming allocations.

This opcode calls the special EXTEND_HEAP_FN hook, which will check
whether there is enough space on the heap. If there isn't then we jump
to the following function in core.

  lostanza defn extend-heap (size:long) -> long

This is the standard hook that is called when we need to extend the
heap, and is what happens in compiled mode as well.

This function is responsible for:
1) running the garbage collector.
2) checking whether enough space has been freed.
3) issuing the out-of-memory error if appropriate.
4) running the GC Notifiers when appropriate.

As part of its operation, it calls the primitive:

  val remaining = call-prim collect-garbage(size)

In compiled mode, this primitive compiles down into a straight-forward
function call to this core function:

  lostanza defn collect-garbage (size:long) -> long

This function is responsible for returning the new number of bytes
remaining in the heap after garbage collection.

When executed in the virtual machine, this primitives compiles down to
the GC_OPCODE. In the implementation of the virtual machine, this
opcode is implemented by calling the extern function:

  extern defn call_garbage_collector (vms:ptr<VMState>, size:long) -> long

This function is responsible for returning the new number of bytes
remaining in the heap after garbage collection.
