                    The KForm IR
                    ============

The KForm IR represents the intermediate stage of the program after
all macro-expansion, identifier resolution, syntax checking, and type
checking has taken place. It serves the purpose as both an
intermediate IR for separate compilation, and a distribution format.

K-Level Types
-------------

The following represents types that remain after erasure. 

   KType =
      | KOf: (n:Int)
      | KVar: (n:Int)
      | KAnd: (a:KType, b:KType)
      | KOr: (a:KType, b:KType)
      | KBot
      | KTop

K-Level Top Level Expressions
-----------------------------

Define a global value using KDef, KDefVar.

   KDef :
      n: Int
      value: KExp

   KDefVar :
      n: Int
      value: False|KExp

Defining a function. The input argument types are given, and it is
assumed during code generation that the appropriate checks will be
inserted for ensuring arguments satisfy their contract. There is a
field for the return type which is used during type inference and cast
elision.

   KDefn :
      n: Int
      func: Func

   where :
      Func =
         | KFn :
              tail?: True|False
              targs: List<Int>
              a1: List<KType>
              args: List<Int>
              body: KExp
         | Multifn :
              funcs: List<KFn>
         

Defining a multi to which methods will be attached to.

   KDefmulti :
      n: Int
      a1: List<KType>

Defining a method. The rules apply as for functions. The extra fields
multi and thisn are used for specifying the multi to attach to, and
the indicator of the environment variable "this" respectively.

   KDefmethod :
      n: Int 
      multi: Int
      thisn: False|Int
      func: KFn

Defining an abstract type.

   KDefType :
      n: Int
      parent: False|KType

Defining a concrete type.
   
   KDefStruct :
      n: Int
      parent: False|KType
      fields: List<StructField>
      rfield: False|StructField

   where StructField :
      n: Int
      type: KLSType      

Defining a low Stanza value.

   KDefLSVal :
      n: Int
      type: KLSType
      value: KLSExp

Defining a low Stanza variable.
      
   KDefLSVar :
      n: Int
      type: KLSType
      value: False|KLSExp

Defining a low Stanza function.
      
   KDefLSFn :
      n: Int
      a1: List<KLSType>
      a2: KLSType
      args: List<Int>
      body: KLSComm

Defining an externally defined value.
      
   KDefExtern :
      n: Int
      type: KLSType
      name: Symbol

Defining an externally defined function.
      
   KDefExternFn :
      n: Int
      type: KLSType
      name: Symbol

K-Level Expressions
-------------------

Assign to a global or local variable.

   KSet :
      n: Int
      value: KVar

Check that a value is a given type, and error if otherwise.

   KCast :
      exp: KVar
      type: KType

Check that a value exists, and error if otherwise.

   KCheckVoid :
      exp: KVar

Check the length of a tuple.

   KCheckLength :
      exp: KVar
      length: Int

Create a local binding. Anonymous functions are encoded using this
form.

   KLet :
      def: KDef|KDefVar|KDefn
      body: KExp

Create mutually recursive functions.

   KLetRec :
      defns: List<KDefn>
      body: KExp

Sequentially executes two expressions, discarding the result of the
first one.

   KSeq :
      a: KExp
      b: KExp

Matches a list of arguments against a list of branches. Dispatch works
similarly to match except that branches will be ordered according to
specificity and error branches will be inserted for overlapping
branches.

   KDispatch :
      args: List<KVar>
      branches: List<KBranch>

   KMatch :
      args: List<KVar>
      branches: List<KBranch>
      
   KBranch :
      args: List<Int>
      types: List<KType>
      body: KExp

Create a new object.

   KNew :
      class: KType
      methods: List<KDefmethod>

Call a function.

   KDo :
      func: KVar
      targs: List<KType>
      args: List<KVar>

Call a LS function.

   KCallLS :
      func: KVar
      targs: List<KType>
      args: List<KVar>

Refer to a declared binder.

   KVar :
      n: Int

Perform a primitive operation on arguments.

   KPrim :
      op: Op
      args: List<KVar>

Create a literal value.

   KLiteral :
      value

Create a tuple.

   KTupleExp :
      exps: List<KVar>

Retrieve a specific element in a tuple.

   KTupleGet :
      exp: KVar
      index: Int


KForm LoStanza Types
--------------------

Primitive types for referring to integers of 8, 32, and 64 bits. 

   ByteT
   IntT
   LongT
   FloatT
   DoubleT

Pointer type of 64 bits for pointing to a value of the given type.

   PtrT :
      type: KLSType

Unknown type use for generic pointers, and rest fields.

   UnknownT

Heap allocated reference type for pointing to a Stanza value allocated
on the heap. Notice that the given type is a general Stanza type, not
a LoStanza type.
      
   RefT :
      type: KType

A function type with an optional rest argument.

   FnT :
      a: List<KLSType>
      r: False|KLSType
      b: KLSType

A raw structure type, referred to by name.

   StructT :
      n: Int

KForm Location
--------------

A location is used as lvalues for assigning to, and also as values to
read from.

Binder allows us to refer to the locations of a local or a global.

   Binder :
      exp: KLSVar

Derefs and Deptrs refers to the location pointed to either by a
heap-allocated reference or a pointer.

   Deref :
      exp: KLSVar
      
   Deptr :
      exp: KLSVar

Slot refers to a variable offset from a pointer.

   Slot :
      exp: KLSVar
      type: KLSType
      index: KLSVar

Field refers to a named offset from a pointer or local.

   Field :
      base: KLoc
      n: Int

KForm LoStanza Commands
-----------------------

A command for a call and discarding the result.

   KLSCall :
      exp: KLSExp

A command for a tailcall, returning the called function's result.
      
   KLSTCall :
      exp: KLSExp

Assign a value to an lvalue expression.
      
   KLSSet :
      exp: KLoc
      value: KLSVar

Label a position in the statement stream.

   KLSLabel :
      n: Int

Goto a specific position in the statement stream.

   KLSGoto :
      n: Int

Return a value in the current function.

   KLSReturn :
      exp: KLSVar

Introduce a new local binding in the current function.

   KLSLet :
      def: KLSDefVar|KLSDefVal
      body: KLSComm

First perform one then the other statement.

   KLSSeq :
      a: KLSComm
      b: KLSComm

Test the result of a predicate, and execute the consequent if it is
non-zero.

   KLSIf :
      pred: KLSVar
      conseq: KLSComm
      alt: KLSComm

Match against the type of a ref-typed expression, and branch to an
appropriate branch.
      
   KLSMatch:
      args:List<LSVar>
      branches:List<KLSBranch>

   where KLSBranch :
      args: List<Int>
      types: List<RefT>
      body: KLSComm

KForm LoStanza Expressions
--------------------------

Refer to a named local, variable, global, function, or extern.

   KLSVar :
      n: Int

Create a heap-allocated reference to a struct.

   KLSRef :
      n: Int
      args: List<KLSVar>

Create a heap-allocated reference to a struct array.
      
   KLSRefArray :
      n: Int
      length: KLSVar
      args: List<KLSVar>

Create a stack allocated struct.
      
   KLSStruct :
      n: Int
      args: List<KLSVar>

Retrieve the address of a location.
      
   KLSPtr :
      exp: KLoc

Read the contents of a location.

   KLSRead :
      exp: KLoc

Call a function expecting the given return type.
      
   KLSDo :
      func: KLSVar
      args: List<KLSVar>
      type: KLSType

Call a C function expecting the given return type.
      
   KLSCallC :
      func: KLSVar
      args: List<KLSVar>
      type: KLSType

Call a Stanza function expecting the given return type.

   KLSCallS :
      func: KLSVar
      args: List<KLSVar>
      type: KLSType

Retrieve the size in bytes of a type.

   KLSSizeof :
      type: KLSType

Retrieve the integer tag for a struct.
      
   KLSTagof :
      n:Int

Convert a value from type to another.

   KLSConv :
      exp: KLSVar
      src: KLSType
      dst: KLSType

Construct a literal value.
      
   KLSValue:
      value:?
      
