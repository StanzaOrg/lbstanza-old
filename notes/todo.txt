Bugs
  - The following is not inferable.

     f: (x:A, y:B) -> C
     map: <?T,?S> (f:T -> ?S, x:?T) -> S
     map: <?T,?S> (f:T -> ?S, x:List<?T>) -> List<S>
     x: A
     y: List<B>
     map(f{x, _}, y)

  - defmulti followed by superfluous colon gives strange error
    message.
  - switch with single else clause gives bad parser error.
  - Inference bug:
  
      val flag = get(BLOCK-DEFS, new Int{b.value * v.value})
      println(modulo(BLOCK-DEF-MSG, new Tuple{3, b, v, flag}))
        
    works, but:

      println(modulo(BLOCK-DEF-MSG,
              new Tuple{3, b, v,
                get(BLOCK-DEFS, new Int{b.value * v.value})}))
    gives:
    
      compiler/stz-bb.stanza:937.55: Could not capture type argument T
      for function get of type
        <?T> . (ref<IndexedCollection<?T>>, ref<Int>) -> ref<T>.
      Called with arguments of type (ref<BitArray>, ref<Int>).
      
  - The following gives a bad error message.
  
      println(~0)

  - The following fails to infer.
  
      val t:LSType = ...
      map(ls-rename{pkg, _:LSType},
        map(rename{pkg, _:Type}, t))

  - The following fails to mix:
  
    defn f (x, y) :
      minimum(x, y)

    Throws error:

    minimum: <?T> . (Seqable<?T>, (T, T) -> True|False) -> T at core/core.stanza:4808.12
    minimum: <?T> . (Comparable&T, Seqable<?T&Comparable>) -> T at core/core.stanza:4831.12
    minimum: <?T> . (T -> Comparable, Seqable<?T>) -> T at core/core.stanza:4834.12

  - Given the following overloaded functions:

    defn f (x:Int) : x
    defn f (x:String) : x
    val y:Void|Int = 3
    f(y)

    f should not resolve to include the String version.

  - In KForm to Tgt2: what happens when we assign bottom to something?
    i.e. val x = f() where f returns Void.

  - The following does not typecheck:
    compiler/stz-utils.stanza:42.19: No appropriate function sorted-merge for
    arguments of type (List<T&Comparable<T>>, List<T>). Possibilities are:
       sorted-merge: <?T> . (?T&Comparable<T>, List<T>) -> List<T> 
       sorted-merge: <?T> . (List<?T&Comparable<T>>, List<T>) -> List<T>   

  - Simple inline should not inline anonymous functions. This may
    break array initialization code that relies upon no GC code
    happening. 

  - Simple inline should account val declarations as well.

  - Simple inline should be rewritten to not require unreachable-error.

  - exit(n) should run finalizers and wind-outs.

  - Rewrite map(List) and reverse() to not use recursion.

  - The type of the flag variable in the following is not correctly
    inferred. The assignment statements from LoStanza are not properly
    considered.
    
    var flag = false
    extern defn tick () -> int :
      match(flag) :
        (f:ref<True>) :
          println(String("Tick"))
          flag = false
        (f:ref<False>) :
          println(String("Tock"))
          flag = true
      return 0

  - The (=|at) pattern in the following rule definition doesn't work.

    fail-if inst-property! = (?k:#symbol! (=|at) _) :
      RTME(closest-info(), "Unrecognized instance property: '%~'." % [k])

  - See if there's anything that can be done about this bug
    not being caught by the Stanza compiler.
    
    val wt = to-float(cdp-id - id1)/to-float(id2 - id1)

  - The following gives a mutual left recursion error:

    defrule exp4 = (?e:#exp4 . ?f:#id) :
      body
    fail-if exp4 = (?e:#exp4 . ?rest) :
      Exception("Failure")

  - Importing a production that does not exist issues a "Variable Not
    Initialized" error instead of throwing a properly formed message.
    For example, if the user accidentally types the following:

      import (exp4) from core
      import (evar!, pcblayer, exp!) from ir-gen-utils
      
    instead of:
  
      import (exp4, exp!) from core
      import (evar!, pcblayer) from ir-gen-utils
      
  - The following incorrectly reports the following an ambiguity error:

      tests/test-amb.stanza:6.2: Ambiguous call to overloaded function f with arguments of type (?). Possibilities are:
         f: <?T> . ?T&String -> String&T at tests/test-amb.stanza:2.5
         f: Int -> Int at tests/test-amb.stanza:1.5

    The code is:

      defn f (a:Int) : a
      defn f<?T> (b:String&?T) : b

      let :
        var x:? = 3
        f(x)

  - The following type argument could not be inferred:

    defn mysort (x:Seqable) :
      qsort(id, x) 

    src/schematic/main.stanza:473.12: Could not capture type argument S
    for function qsort of type <?T, ?S> . (T -> ?S&Comparable<S>,
    Seqable<?T>) -> Tuple<T>. Called with arguments of type (?, Seqable).

    src/schematic/main.stanza:473.18: Ambiguous reference to overloaded
    function id for expected type ? -> Comparable<?>&?. Possibilities are:
    
       id: GenSymbol -> Int at core/core.stanza:6342.16
       id: Region -> Int at src/schematic/main.stanza:320.2
       id: Vertex -> Int at src/schematic/main.stanza:315.2
       id: Hole -> Int at src/schematic/main.stanza:11.2

  - The Stanza compiler chooses a temporary name for a file but does
    not immediately create the file. This causes other instances of
    Stanza to choose the same file, and cause a conflict.

  - The match-syntax statement does not seem to respect the order of
    clauses properly for a NoMatch statement. The following code
    results in a NoMatch error.

      match-syntax[test-spec](read-file(filename)) :
        (?x:#test-spec!) : println(x)                  ;<-- Error goes away if this line is commented out.
        (?x:#test-spec! ?rest ...) : fatal("Rest = %_" % [rest])
        (?rest ...) : fatal("2. Rest = %_" % [rest])

  - The following incorrectly runs without throwing an error:

      defn dev3 () :
        val entries:List<String> = `(0)
        val e = head(entries) as String
        println(e)
        
      dev3()

  - The following :

      defpackage parent :
        import core

      protected deftype MyStruct
      protected val mystruct = new MyStruct

      defpackage child :
        import core
        import parent

      deftype MyStruct
      val mystruct = new MyStruct

      defn main () :
        val x = mystruct
        println(x)

      main()

    incorrectly throws the following ambiguity error:

      tests/parent.stanza:12.19: Ambiguous reference to MyStruct. Possibilities include:
         tests/parent.stanza:4.18: MyStruct defined in package parent.
         tests/parent.stanza:11.8: MyStruct defined in package child.
      tests/parent.stanza:15.10: Ambiguous reference to mystruct. Possibilities include:
         tests/parent.stanza:5.14: mystruct defined in package parent.
         tests/parent.stanza:12.4: mystruct defined in package child.

  - The following is a type inference stress test:

      defn group-by<?T,?K,?V> (xkey:T -> ?K&Comparable<K>, xval:T -> ?V, xs:Seqable<?T>) :
        ;Construct sorted entries
        val entries = to-seq(lazy-qsort(key, for x in xs seq : xkey(x) => xval(x)))

  - Another type inference stress test:

      to-hashtable<[Symbol,Int,Ref], Tuple<[Symbol,Int,Ref]>> $
        for refs in entries seq-cat :
          val canon-refs = qsort(refs)

    Currently returns:

      Cannot call function qsort of type Seqable<Comparable<[Symbol,
      Int, Ref]>&[Symbol, Int, Ref]> -> Tuple<[Symbol, Int, Ref]> with
      arguments of type (List<[Symbol, Int, Ref]>).

  - The following fails with:

      val gs = [List(1), List(2, 3), List(4, 5, 1)]
      val result = seq(qsort, gs)
      println(qsort(result))

    fails with the error:

      FATAL ERROR: No appropriate method for arguments of type (Int, Tuple).
         at core/core.stanza:4144.20
         at core/core.stanza:4167.3
         at core/core.stanza:4170.3
         at core/core.stanza:4196.2
         at tests/sort.stanza:4.10

  - The following reports a duplicate definition error.

      match(pg-name:Symbol) :
        pg-name
      else :
        val pg-name = gen-name(package(pg))      <---------- Duplicate definition
        update(package-groups, cons{pg-name,_}, package(pg))
        copy-indices(pg-name, package(pg))

  - The following command:
  
      kvs(mycoll as Collection<KeyValue<Ref,Int>>&Lengthable)

    throws this error:
    
      Could not capture type arguments K, V for function kvs of type
      <?K, ?V> . Seqable<KeyValue<?K, ?V>> -> Seq<[K, V]>.
      Called with arguments of type (Collection<KeyValue<Ref,
      Int>>&Lengthable).

    However this following command:

      kvs(mycoll as Collection<KeyValue<Ref,Int>>)

    compiles just fine.

  - The following does not work:
  
    defpackage mypackage :
      import core
    val myvalue = "Hello"
    println(mypackage/myvalue)


  - The following:

      addr(a.b.c)

    fails with an incorrect error:
    
      Cannot retrieve address of unstable location using addr operator.
      
    Here are the types:

      a: ref<A>
      a.b : ptr<B>
      a.b.c : int      

  - The argument types for 'defmethod' definitions are not inferred from
    the matching multis.

    In the following definition:

      defmethod store (c, this, xs:Tuple<Local>) :

    the type of c is considered ?. 

  - The following call to closure:

      [params.enter](params.coroutine, x0)

    where params is of type:

      lostanza deftype CoroutineParams :
        parent-stack: ref<Stack>
        coroutine: ref<RawCoroutine>
        enter: ref<((RawCoroutine, ?) -> ?)>

    doesn't work, because the field is not properly dereferenced. Here is the KForm:

      ($do ($read ($field ($deref $v1000205) 1000193) ($of 1000027)) ($v1000498 $v1000206) $top)

  - The following overloaded definitions:

      defn h (x:False) : x
      defn h<?T> (x:ELItem&?T) : f(x) as ELItem&T
      
    are not supposed to conflict, but will give the following error:

      Ambiguous call to overloaded function h with arguments of type (False|EImm). Possibilities are:
        h: <?T> . ?T&ELItem -> ?
        h: False -> ?

  - Special floating point numbers print as
      +inf.0
      nan.0
  
  - The arguments to goto labels are not checked for arity

      goto mylabel(42, 43, 44)

    throws no error even if mylabel only accepts one argument.

  - The 'return' statement checker for LoStanza should account for
    calls to void functions. These calls should mark the end of a function.

  - The following:

      lostanza defn non-negative? (xs:ref<IntArray>, i:ref<Int>) -> long :
        val l = length(xs).value
        if i.value < l :
          return get(xs,i).value >= 0
        else :
          return 0L

    causes the compiler to crash with error:

      FATAL ERROR: Invalid KOr between $int and $long
         at compiler/stz-kform.stanza:1461.18
         at compiler/stz-kform.stanza:1376.25
         at compiler/stz-kform.stanza:1351.31
         at compiler/stz-kform.stanza:1351.31
         at compiler/stz-kform.stanza:1351.31
         at compiler/stz-kform.stanza:1351.31

  - If the corresponding .pkg file for a source file is deleted, but the source file is never touched,
    then 'stanza build' will return bad error messages. 

  - The following causes the Stanza compiler to crash:

    lostanza defn f () -> int :
      if 0 < 3 :
        val success = 3
      return 3

  - The following does not work. Nans should not be equal.

    val x = 0.0f / 0.0f
    println(x == x)

  - The following is allowed, but it shouldn't be:

    val x:True|False = true
    match(x) :
      (x:True) : 10
      (x:False|String) : 11

  - The following incorrect expression is not caught by the
    typechecker. Given the following definition of Buffer:

      public lostanza deftype Buffer :
        size:long
        capacity:long
        mem:ptr<?>

    The following is not caught as an error:
    
      val buffer:ref<Buffer> = ...
      val a = addr!(buffer.mem[42])

    But it should be since we don't know the item type of the pointer.
      
  - The following causes an error:

    public deftype Streamable :
      Array<Streamable> <: Streamable

  - Bug when executing the following:
    load "src/lib/darpa-fpga-generator.stanza"
    reload

  - Typechecking bug for the following:

    patricksli:bug patricksli$ jstanza repl
    stanza> load ir/reader
    Could not locate package ir/reader.
    stanza> load rtm/ir-reader
    stanza> val stmts = parse-rtm("myproject-3.prune-lower.esir")
    NoFile:0.0: Could not resolve parse-rtm.
    stanza> import rtm/ir-reader
    stanza> val stmts = parse-rtm("myproject-3.prune-lower.esir")
    stanza> import rtm/ir-utils
    stanza> val irtable = IRTable(stmts)
    stanza> println(makeboards(irtable))
    [make-board(darpa-fpga) :
      board = B
      rules = bay-area-circuits-conservative-rules]
    stanza> val mtable = mtable(irtable, `darpa-fpga)
    FATAL ERROR: No appropriate branch for arguments of type (TUVar).
      at core/core.stanza:271.2
      at core/core.stanza:211.2
      at compiler/stz-tl-to-dl.stanza:62.12
      at compiler/stz-tl-to-dl.stanza:61.8
      at compiler/stz-tl-to-dl.stanza:95.27
      at core/core.stanza:6023.9
      at compiler/stz-tl-to-dl.stanza:112.20
      at compiler/stz-tl-to-dl.stanza:20.28
      at compiler/stz-tl-to-dl.stanza:15.22
      at core/core.stanza:6042.15
      at core/core.stanza:6524.25
      at core/core.stanza:6031.30
      at core/core.stanza:5986.20
      at core/core.stanza:1976.15
      at core/core.stanza:5985.23
      at core/core.stanza:5984.20
      at core/core.stanza:5928.36
      at core/core.stanza:3935.3
      at compiler/stz-tl-to-dl.stanza:15.18
      at compiler/stz-type.stanza:44.6
      at core/core.stanza:3719.22
      at core/core.stanza:1976.15
      at core/core.stanza:3718.14
      at core/core.stanza:2087.20
      at core/core.stanza:3717.17
      at compiler/stz-dl-ir.stanza:1029.4
      at core/core.stanza:1976.15
      at compiler/stz-dl-ir.stanza:1028.10
      at compiler/stz-type.stanza:38.9
      at compiler/stz-repl.stanza:453.22
      at compiler/stz-repl.stanza:354.22
      at compiler/stz-repl.stanza:537.10
      at core/core.stanza:3719.22
      at core/core.stanza:1976.15
      at core/core.stanza:3718.14
      at core/core.stanza:2087.20
      at core/core.stanza:3717.17
      at compiler/stz-repl.stanza:537.10
      at compiler/stz-repl.stanza:351.11
      at compiler/stz-repl.stanza:925.17
      at compiler/stz-repl.stanza:954.10
      at core/core.stanza:3719.22
      at core/core.stanza:1976.15
      at core/core.stanza:3718.14
      at core/core.stanza:2087.20
      at core/core.stanza:3717.17
      at compiler/stz-repl.stanza:952.12
      at compiler/stz-main.stanza:406.2
      at compiler/stz-arg-parser.stanza:178.2
      at compiler/stz-main.stanza:498.4
      at core/core.stanza:3719.22
      at core/core.stanza:1976.15
      at core/core.stanza:3718.14
      at core/core.stanza:2087.20
      at core/core.stanza:3717.17
      at compiler/stz-main.stanza:498.4
      at compiler/stz-main.stanza:506.2
      at compiler/stz-driver.stanza:7.0

  - The following fails with a segfault instead of OutOfMemory in unoptimized mode.
    Tuple(1143957868, false)

  - The following commented code produces errors in the lexer:

    ;val QUERY = \<S>
    ;query {
    ;  multi_match(
    ;    queries: [
    ;      { seller: "Digi-Key", sku:"PCE4413CT-ND", limit:1, start:0}
    ;      { seller: "TTI", sku:"12089040", limit:1, start:0}
    ;      { seller: "Digi-Key", sku:"513-1528-1-ND", limit:1, start:0}
    ;      { seller: "Digi-Key", sku:"YAG3916CT-ND", limit:1, start:0}
    ;    ]
    ;  ) {
    ;    hits
    ;    parts {
    ;      mpn
    ;      short_description
    ;      specs {
    ;        attribute {
    ;          name
    ;        }
    ;        display_value
    ;      }
    ;      best_datasheet {
    ;        url
    ;      }
    ;      manufacturer {
    ;        name
    ;      }
    ;      category {
    ;        name
    ;      }
    ;      sellers(include_brokers:false) {
    ;        company {
    ;          name
    ;        }
    ;        offers {
    ;          sku
    ;          moq
    ;          inventory_level
    ;          prices {
    ;            quantity
    ;            converted_price
    ;          }
    ;        }
    ;      }
    ;    }
    ;  }
    ;}
    ;<S>
    ;
    ;let :
    ;  val curl = Curl()
    ;  val query-string = to-string(\<S>{"query":%~}<S> % [QUERY])
    ;  println(query-string)
    ;  val result =  read-post(curl,
    ;            ["Content-Type: application/json"
    ;             "Accept: application/json"
    ;             "DNT: 1"
    ;             "Origin: https://octopart.com"
    ;             "token: 2CA79E20-6B17-417F-AC07-3AFE93AF42DE"]
    ;            "https://octopart.com/api/v4/endpoint",
    ;            query-string)
    ;  spit("myfile.txt", result)
    ;  println(result)

Checks
  - Check for overflow for integer operations.
  - Package qualified symbols cannot be used as binders.
  - Public/Protected global variables must have a type.
  - Arguments should not be declared with Void types.
  - LoStanza assignments to HiStanza variables should be checked.
  - NoMatch parsing error should have causes listed for every case.
  - What is the point of RestT?

Ecosystem
  - Next Chapter links in Stanza By Example.
  - Separate scroll bar in Stanza.
  - Document development process.
  - Document LoStanza
  - Document exceptions thrown by core functions
  - Document new syntax system
  - Document the multi line comments
  - Document Float limits and nan
  - Document #for

Small Feature Requests
  - Defstruct: Don't gen symbols for parameterized types.
  - Defstruct: Allow for uninitialized fields.
  - Option to retrieve the stanza installation directory.
  - Option to stanza extend with macros.
  - equal? for Arrays and other fundamental mutable types.
  - Underscore in binders means to ignore them. (Avoid redundant
    definitions.)
  - Conversion to hex/octal/binary strings.
  - Tuple/String should be Indexable.
  - Make sure STANDARD-OUTPUT-STREAM and STANDARD-INPUT-STREAM are not
    actually FileOutputStreams.
  - Ability to read STANDARD-INPUT-STREAM until EOF.
  - let-var with multiple bindings.
  - stanza help option.
  - Range for Long.
  - Directory Handling.
  - Floating point format specifiers.
  - Provide seed function for rand.
  - Function for creating a directory.
  - proper categorization of exceptions.
  - No-method and Amb-method errors should indicate the name of the multi.
  - Expressions in function-call position should be automatically dereferenced similar to field expressions.
  - generate<T> should allow user-provided name for yield.
  - Have the number of stacks dynamically extend to fill the heap.
  - Have a better error report for when the .stanza configuration file cannot be found.
    Report the locations that we tried looking for it.
  - Check for STANZA_CONFIG or HOME environment variable before creating .stanza file during stanza install.
  - stanza build doesn't rebuild files whose source changes due to different flags during macro expansion.
    Most evident during #if-defined.
  - Implement for block-copy methods for primitive arrays.
  
Big Feature Requests
  - Type aliases.
  - Bools instead of True|False.
  - Proper support for finalizers. on-finalize for Hi and Lo deftype
    constructs.
  - Weak Arrays and Tables.
  - ($if) and ($typeof) expressions. Use it to give some path
    sensitivity.
  - ($ls-not) form. And Compile it appropriately.
  - #include statements that are relative to the file that contains
    it.
  - Address of stack allocated locals.
  - Deconstructors.
  - Do not allow calling of extern functions without call-c.
  - Conditional subtyping:
      Tuple<T> <: Equalable if T <: Equalable
  - Fancy conditional subtyping:
      Maybe<T> <: Comparable<Maybe<S>> if T <: Comparable<?S>
  - Fixed point variable type inference.
  - Tuple<T> should be a subtype of [T, T]
  - Say which argument is the wrong type when calling function with
    wrong arguments.
  - ($let-var) form that works on uninitialized variables and is
    efficient and is tail-call optimized.
  - Implement more of the C calling convention.
  - GDB support.
  - Locally declared defmulti and deftype.
  - Bounded type parameters.
  - Keyword arguments.
  - Captured arguments in contravariant return types for currying.
  - Syntax for creating tuple: new [e1, e2, ...]
  - more complete build feature that computes and walks up the
    dependency graph.
  - hierarchical project build support.

Optimizations
  - Reimplement parser using type aliases.
  - VList
  - LoStanza struct const fields.
  - GC Optimization: Remove need for stack clearing instructions.
    Build a path dependent stack map.
  - Eliminate quadratic ambiguity-list algorithm.
  - Optimize equal? implementation to use machine instruction.
  - Tree shaker.
  - Better inlining transform.
  - Method resolution.
  - Efficient compilation of if/typeof expressions.

Cleanups
  - Macro support functions should be protected.
  - Function preludes are currently repeated in many places. Either
    create an abstract instruction or move to utility function.
  - Closure creation creates small forwarding functions when top-level
    functions are used in first-class positions. This is exactly what
    the defmulti code generator does. Merge these two functions.
  - Move stz/padder to better location. Probably stz/utils.

Environment
  - QT Main Application + Menubar
  - Example for lexing and writing data file
  - Interpreter inside QT window
  - Geolang parallel loops and ranges

Verify
  - How much are we suffering from unbounded growth of type union
    objects? Do we need to limit this using a counter?
  - Double check that [] collapses to Tuple<Void>
  - printf variable arguments should have byte, float upcasted
    appropriately automatically.
