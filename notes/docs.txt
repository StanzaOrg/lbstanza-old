### Basic System Description ###
@@[Comment System Tags]<71ABD315>

There are two halves to the system. When the documentation is written, it needs to refer to specific code snippets that it should stay up to date with. And it needs a way to notate whether it is up-to-date and for this to be automatically tracked. The second half is that the code needs to be marked up in order for the documentation to refer to it. 

Let's first consider the markup for the code. The following is the code for the structure defining a Box and Port in Stanza. And let's add the markup to it.

```
;@[Ray Partition Graph Box Definition]
public defstruct Box :
  id: Int
  x: Int with: (updater => sub-x)
  y: Int with: (updater => sub-y)
  width: Int
  height: Int
  up-ports: Tuple<Port>
  down-ports: Tuple<Port>
  left-ports: Tuple<Port>
  right-ports: Tuple<Port>
with:
  printer => true

;@[Ray Partition Port]
public defstruct Port :
  id: Int
  x: Int
  y: Int
with:
  printer => true
```

We can use the following shorthand to determine how far the extents of the annotated block goes. If an explicit ending tag is provided, then that determines the extent of the block. If an explicit end is not provided, then the following algorithm is used:

Every empty line is a candidate for the end of the block. However, it only marks the end of the block if the next non-empty line starts at the same or lesser indentation level than the starting tag. 

So the entire code base will be annotated with these documentation tags, so that the documentation can track them explicitly for when it goes stale. 

Now, note that the tags on the code are also valid comments in the respective programming language. This means that they do not need to go through a separate extraction/compilation stage to be valid input for the compiler.

Now let's look at how the documentation references a code section.

Here is an example:

```
@[Ray Partition Graph Box Definition]
The Box constructor takes in the coordinates of the bottom-left corner, the dimensions of the box, and the locations of all the boxes. 

@[Ray Partition Port]
Each of the ports are represented using their id, and their coordinates *relative* to the box. 
```

When ran through the doc consistency checker, the above references will be marked as stale because they do contain an up-to-date hash of the code block. The consistency checker will itself report the hash to use if the code block is indeed up-to-date. Here is an example of updating the hash:

```
@[Ray Partition Graph Box Definition]<AFADE99099>
The Box constructor takes in the coordinates of the bottom-left corner, the dimensions of the box, and the locations of all the boxes. 

@[Ray Partition Port]<AFDEE91023>
Each of the ports are represented using their id, and their coordinates *relative* to the box. 
```

A piece of documentation can refer to multiple sections by using the '|' character to join them. Here is an example:
```
@[Ray Partition Port | Ray Partition Graph Box Definition]<AFADE88192>
Both the port and box definitions require that the comments be updated properly since they were last written. 
```

There are a few consistency checks to ensure that the documentation is in a good state:
- In all the existing documentation, all the referenced sections have a hash annotation, and the annotations is up-to-date with the annotated code.
- All the referenced sections exist in the annotated code.
- The code contains no duplicated annotated blocks.
- All annotated blocks in the code have corresponding documentation.

The above annotation system is only for separate notes. An additional consistency check is useful for in-code comments, which requires different syntax.

The following means that the code block is tracked by the staleness detection:

```
;@[Node IR Datastructures]<AFADE121323>
;The code below implements datastructures supporting the Node intermediate language.
defstruct ANode :
  x: Int

defstruct BNode :
  y: Int

defstruct CNode :
  z: Int
;/[Node IR Datastructures]
```

To use the implicit block rules, the following syntax is used:
```
;+<AFADE119039>
;The algorithm below implements the Bresenheimer algorithm:
defn myalgorithm (x:Int) -> String :
  do stuff...
```

### Document Organization ###

The other large concern is for document organization. How do we ensure that the documents on a whole are well-organized and not lost? 

Here are the things that mess up an organization:
- An overcrowding of files with vague names, similar names, or adhoc versioning. E.g. proposal.txt, proposal_v2.txt, new_proposal.txt, old_proposal.txt, new_proposal.txt.bak. 
- Extraneous files without a clear explanation of how they relate to the rest of the system.

Note that missing documentation is not actually harmful. It is simply "undocumented", which is a well-understood phenomenon with a straightforward solution. 

Here is how those concerns are addressed:

All files that exist in the documentation folder must be explicitly mentioned by the root note. It is the hope that the root note will contain good explanations for the purpose of each of the files. 

Syntax for addressing a file:
```
@[file:proposal.txt] This file describes the organization of the repository.
```

For consistency, all referenced files must exist, and all files must be referenced by the root note. It is expected that the forcing of files to be mentioned explicitly by the root note will add sufficient pressure to keep the files named properly. Even if they are not named properly, at least the root document will describe them in enough detail for them to be useful.

The following annotation is useful for gradually updating the documentation of a repository:
```
@[file:proposal.txt]<outdated> This file describes an earlier version of the repository. 
```

By default, all files are considered document files, and the comment system will scan it. To annotate a file as being a binary file, and hence not to be read by the comment system, use the following syntax:
```
@[file:proposal.pdf]<binary> This is a diagram showing the proposal. 
```

As mentioned before, all files in the folder must be explicitly mentioned by the root note. All files that are traversed through up-to-date file links are considered up-to-date and must satisfy the staleness consistency checks. All other files are considered out-of-date, and do not need to satisfy the consistency checks. 


### System Abilities ###

Some file formats directly support a comment character that makes it easy for the annotation tags to coexist alongside the original document without affecting the validity or behaviour of the document. But some file formats do not.

To support these file formats, the documentation staleness detection has an output feature for accepting an entire folder, and producing an output folder containing the same files and hierarchical structure but with the annotations stripped from it.

Many files also are not text-based, and so should not be scanned by the utility. The staleness detection algorithm allows files to be excluded from scanning using their extensions.

### System Driver ###

To derive the required controls on the system, let's first study the desired organization of a user project.

Let's suppose that the user's project is contained in a single root project folder:

  myproject

And now suppose that the user's project contains a separate folder for notes and source code:

  myproject/notes
  myproject/src

Enforce the following intent on these folders:

  'src' contains only source code files. And all files must be explained and described.
  'notes' contains only note files. All files must be explained and described.

It is natural to place the root document in the notes folder:

  myproject/notes/index.txt

To describe the structure of this project, we can use the following document:

  myproject/structure.stzdoc

And it will contain the following information:

  root:
    "notes/index.txt"
  files:
    "notes"
    "src"
  syntax for "*.txt" :
    tag-start: "+"
    tag-end: "/"
    reference: "@"

@@[check-docs command line interface]<BDC2BF8E>
To drive the system, we use the following command:

  stanza check-docs structure.stzdoc -accept "Node IR Datastructures"

which marks all references to "Node IR Datastructures" as up-to-date. 
