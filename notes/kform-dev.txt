                Required Transformations for Compilation
                ========================================

Void Check Insertion :
   - Appropriate references are wrapped in a KCheckVoid node.
      - Global Values and Variables
      - Non-initialized Local Variables
   - TupleGet operations are wrapped in a KCheckVoid node.  

Mutable Variable Boxing :
   - DefVars are converted to KBox nodes.
   - Sets are converted to KBoxSet nodes.
   - References are converted to KBoxGet nodes.

Callsite Normalization :
   - Calls to expressions are attempted to be normalized such that we
     branch to different calls, rather than create a closure through a branch.

Global Closure Conversion :
   - References to global functions are converted to references to
     their closures.

KMix/KCurry Conversion :
   - KMix/KCurry expressions are re-expressed as Dispatch expressions.

Method Type Argument Mapping :
   - Type arguments of multis are mapped appropriately to method type
     arguments.

Boundary Guarding :
   - Argument and Return types are enforced through casts.
   - Calling LoStanza functions from HiStanza need casts for enforcing
     argument and return types.
   - Calling closures from HiStanza needs casts for enforcing
     call-site argument and return types.  

Type Reification :
   - Type arguments to polymorphic functions become KTypeObject
     expressions.
   - KFn and KLSDefn nodes are converted to code definitions.
   - Tailcalls are appropriately tagged in the body of the code.

Object Lifting :
   - KNew expressions are converted to KObject expressions.
   - References to free variables are converted to KObjectGet
     expressions.

Multi Conversion :
   - Methods are combined into single functions under a dispatch
     expression.

Closure Lifting :
   - Local Defn functions are converted to KClosure expressions.
   
Call Conversion :
   - KDo nodes are converted to Call nodes with known arity, and
     direct names for global functions.

Rest Field Pointer Conversion :
   - Reads from KField locations of a rest field are converted to
     pointer expressions to the field.

Cast Conversion :
   - Conv expressions with reference target types are converted to
     Cast expressions to enforce tag match.


                     Transformation Ordering
                     =======================

Global Closure Conversion < KMix/KMurry Conversion :
   Global closure conversion is a special case of KMix/KCurry
   conversion where we curry with zero arguments.

Void Check Insertion < Mutable Variable Boxing :
   Only references to non-initialized variables need to be
   checked. But this information is lost after boxing.

Mutable Variable Boxing < Object Lifting &
Mutable Variable Boxing < Closure Lifting :
   Objects and Closures require their free variables to be known which
   includes mutable variables.

Multi/Method Type Mapping < Multi Conversion :
   Multi conversions require all the type mapping to be done so that
   assembling all methods do not require type substitution
   calculations.

Multi/Method Type Mapping < Boundary Guarding :
   Boundary guards require the full type of the method arguments and
   return (including the inherited guards from its multi). 

Type Reification < Object Lifting & Closure Lifting :
   Objects and Closures require their free variables to be known which
   includes first-class type guards.

Type Reification < Call Conversion :
   Converted calls no longer have fields for type arguments. Assumed
   for all type arguments to be first-class by this point.

KMix/KCurry Conversion < Closure Lifting :
   KMix/KCurry may mix locally defined functions. Thus they may
   require local functions to be part of the curried object.

Object Lifting < Closure Lifting :
   Closures require all of its free variables to be known which may
   include objects. 

KMix/KCurry Conversion & Method Type Argument Mapping & Boundary
Guards < Type Reification :
   These transformations require knowing the type argument information
   of functions and function calls which is lost after type
   reification. 

Object Lifting < Multi Conversion :
   Objects must be lifted for all methods to be defined. Multis cannot
   be converted before all methods are discovered.

Closure Lifting < Call Conversion :
   Call conversion requires identifying calls to direct functions. If
   a local function is called, then that is transformed into a call to
   a direct function with the closure as the first argument. This
   cannot be done before closures are identified.

KMix/KCurry Conversion < Boundary Guards :
   KMix/KCurry resolves to calls to functions, some of which may
   require bound guards inserted before and after their calls.

Callsite Normalization < Global Closure Conversion :
   Global closure conversion treats expressions in function calling
   position differently than otherwise. Best results follow from
   ensuring as many global functions are in calling positions as possible.

Multi Conversion < Code Conversion :
   Multis are not full functions yet. Code conversion expects
   everything to be expressed in simple function form.

                    Philosophy of Boundary Checks
                    =============================

Code within LoStanza is considered trusted, and no implicit checks are
ever added. Tag checks are only done through explicit conversion
operations. To maintain the semantics required by HiStanza, we instead
enforce possible boundary crossings between HiStanza and
LoStanza. Whenever HiStanza calls a LoStanza function, the arguments
are checked before entering the call, and the return value is checked
after exiting the call. Similarly, whenever a closure is formed from a
LoStanza function, the arguments are checked before entering the call
and the return value is checked after exiting the call.


                   Input Language to Compilation
                   =============================

Summary
-------

Top Level HiStanza Commands :
   KDef(n, value)
   KDefVar(n, value)
   KDefn(n, value)
   KDefType(n, parent)
   KDefTypeObject(n, args, type)
   KDefConst(n, value)
   KInit(exp)

KDefn Function :
   KCode(arity, args, body)
   KMultifn(codes ...)

Top Level LoStanza Commands :
   KLSDef(n, type)
   KLSDefCode(n, arity, args, types, body)
   KLSDefType(n, parent, fields, rfield)
   KExtern(n, type, lbl)
   KLSInit(comm)

HiStanza Expressions :
   KSet(n, value)
   KCast(exp, targ)
   KCheckVoid(exp)
   KCheckLength(exp, length)
   KLet(KDef(n, value), body)
   KLetRec(KDef(n, KClosure(code, args)) ..., body)
   KSeq(a, b)
   KDispatch(args, KBranch(args, types, body) ...)
   KMatch(args, KBranch(args, types, body) ...)
   KObject(n, args)
   KObjectGet(object, index)
   KTypeObject(n, args)
   KCall(tail?, arity, func, args)
   KVar(n)
   KPrim(op, args)
   KLiteral(value)
   KTuple(exps)
   KTupleGet(exps, i)
   KBox(value)
   KBoxGet(box)
   KBoxSet(box, value)
   KClosure(n, args)
   KClosureGet(exp, i)
   KBranchError()

LoStanza Commands :
   KLSCall(exp)
   KLSTCall(exp)
   KLSSet(exp, value)
   KLSLabel(n)
   KLSGoto(n)
   KLSReturn(exp)
   KLSLet(n, value, body)
   KLSLetVar(n, type, body)
   KLSSeq(a, b)
   KLSIf(pred, conseq, alt)
   KLSMatch(args, KLSBranch(args, types, body) ...)
   KLSDispatch(args, KLSBranch(args, types, body) ...)
   KLSPrimComm(op, args)
   KLSSkip

LoStanza Expressions :
   KLSVar(n)
   KLSRef(n, args)
   KLSRefArray(n, length, args)
   KLSStruct(n, args)
   KLSPtr(exp)
   KLSRead(exp)
   KLSPrim(op, args, type)
   KLSWCall(arity, func, args, type)
   KLSWCallClosure(arity, func, args, type)
   KLSCallC(func, args, type)
   KLSSizeof(type)
   KLSTagof(n)
   KLSConv(exp, type)
   KLSLitByte(value)
   KLSLitInt(value)
   KLSLitLong(value)
   KLSLitFloat(value)
   KLSLitDouble(value)
   KLSLitString(value)
   KLSCast(exp, type)
   KLSTypeObject(n, args)


HiStanza Top Level Commands
---------------------------

The root set -- These commands comprise the root set for
HiStanza. Consts are stored in a separate area for initialization
purposes. Any global functions referenced directly have been converted
to closures and defined using KDef.

   KDef(n, value)
   KDefVar(n, value)
   KDefConst(n, value)

Defining functions -- Functions are defined using KDefn. The bodies
must indicate the number of free variables for referenced by this
function, the arity of the function (not including the type
arguments), all the arguments, and the body. Entry type checks are
assumed to be in the body.

   KDefn(n, value)
   KCode(numfree, arity, args, body)
   KMultifn(codes ...)

Defining types -- Types are defined using KDefType. When types become
first-class and are passed as arguments, they are referenced through a
KDefTypeObject command.

   KDefType(n, parent)
   KDefTypeObject(n, args, type)

Initializing expressions -- Expressions that must be run in order for
the top-level is given by these commands.

   KInit(exp)


LoStanza Top Level Commands
---------------------------

The root set -- The root set is entirely defined by the KLSDef
command. There is no value given, it is assumed to be initialized
using a KLSInit command.

   KLSDef(n, type)

Defining functions -- The arity of the function does not include
reified type arguments. Entry type checks are assumed to be in the
body. Only arguments types are needed. 

   KLSDefCode(n, arity, args, types, body)

Defining types -- LoStanza structs are defined using this.

   KLSDefType(n, parent, fields, rfield)

External definitions -- This command defines external variables and
functions.

   KExtern(n, type, lbl)

Initializing commands -- Commands that must be run in order for
the top-level is given by these commands.

   KLSInit(comm)
   

HiStanza Expressions
--------------------

References -- May be used to refer to global or local
variables/values. Note that a global function (Hi or Lo Stanza) cannot
be referenced directly using KVar. They must be converted to closures.

   KVar(n)

Creating Type Arguments -- Create type objects given the label of
their type definition, and their closed over arguments.

   KTypeObject(n, args)

Calling Functions -- Functions may either be a direct label in which
case it is a simple call, or an expression in which case it is a
closure call.
   
   KCall(tail?, arity, func, args)

Creating Closures -- Given its code definition, and its closed over
variables.

   KClosure(n, args)


LoStanza Expressions
--------------------

References -- May be used to refer to global or local
variables/values. Note that a global function (Hi or Lo Stanza) cannot
be referenced directly using KVar. They must be converted to closures.

   KLSVar(n)

Pointers -- May be used to refer to global/local variables or
functions. Functions may be referred to directly here.

   KLSPtr(exp)

Calling Functions -- Functions may be either a direct label for a
simple call. Or it may be an expression in which case it is an
indirect call.

   KLSWCall(arity, func, args, type)
   KLSCallC(func, args, type)

Calling Closures -- The argument is always given as an
expression. Stanza calls the closure using the appropriate calling
convention.

   KLSWCallClosure(arity, func, args, type)



                     Conversion into KForm
                     =====================

Mix Call Conversion
-------------------

Convert a call to a mixture of functions into a Stanza expression.

   defn to-ls-exp (fs: List<TCurry>, args: List<TExp>) -> KExp

Convert a call to a mixture of functions into a LoStanza command.

   defn to-ls-comm (
      fs: List<LSCurry>
      args: List<LSExp>
      Call: (Int, List<KType>, List<KLSExp>, KLSType) -> KLSExp 
      return: KLSExp -> KLSComm) -> KLSComm

Convert a call to a mixture of functions into a LoStanza expression.

   defn to-ls-exp (
      fs: List<LSCurry>
      args: List<LSExp>
      Call: (Int, List<KType>, List<KLSExp>, KLSType) -> KLSExp) -> KLSExp




                     Automatic Stack Extension
                     =========================

Stack Layout
------------

  +---------------------------------+
  | INDEX | PARENT | SP | ITEMS ... |
  +---------------------------------+
  
Stacks Layout
-------------

  +------------------------------------------+
  | FREE FRAMES ...    | ACTIVE FRAMES ...   |
  +------------------------------------------+

Function prelude
----------------

  SMax = RSP + Frame Size + 8
  If SMax > SLim :
     Switch to Free Stack
     (xs ...) = Args
     If number of free stacks < 1 :
        extend-stack()
  else :
     (xs ...) = Args
  function body

Switching to Free Stack
-----------------------
  1. Cap the current stack.
     stack.rsp = rsp
  2. Retrieve the next free stack.
     s = Stacks[num-free - 1]
     num-free = num-free - 1
  3. Link it to the current stack.
     s.parent = stack
  4. Update the stack pointer, limits, and current stack
     rsp = ptr(s.items)
     slim = s + stack-size - REF-TAG
     stack = s

Assembly Code
-------------

  Registers:
     s0 = R0
     i = R1
     s1 = R2
     ss = R3
     lim = R3

  1. Cap the current stack
  s0 = [stack]
  [s0.rsp] = RSP

  2. Retrieve the next free stack
  i = [num-free]
  i = i - 1  
  s1 = i << 3
  ss = [stacks]
  s1 = s1 + ss
  s1 = [s1]
  [num-free] = i

  3. Link it to the current stack
  [s1.parent] = s0
  
  4. Update the stack pointer and limits
  RSP = ptr(s1.items)
  lim = s1 + stack-size - REF-TAG
  [stack-lim] = lim  
  [stack] = s1



   
            Testing Syntax for Input Language
            =================================

Types
-----

   ($of 42)
   ($var 42)
   ($and a b)
   ($or a b)
   top
   bot

KLSTypes
--------

   byte
   int
   long
   float
   double
   ?
   ($ptr lstype)
   ($ref type)
   ($fn (a1 ...) [ar] a2)
   ($struct 42)


Top Level Commands
------------------

   ($def 42 exp)
   ($defvar 42 [exp])
   ($defn[*] 42 (targs ...) (args:a1 ...) a2 body ...)
   ($defmultifn[*] 42 ((args:a1 ...) a2 body ...)...)
   ($defmulti 42 (targs ...) (a1 ...) a2)
   ($defmethod[*] 10 (targs ...) this (targs ...) (args:a1 ...) a2 body ...)
   ($deftype 42 [parent])

HiStanza Expressions
--------------------

   ($set 42 exp)
   ($cast exp type)
   ($checklength exp 7)
   ($let ($def/$defvar/$defn/$defmultifn ...) body ...)
   ($letrec (($defn ...) ...) body ...)
   ($begin body)
   ($dispatch (exps ...) ((args:types ...) body ...) ...)
   ($match (exps ...) ((args:types ...) body ...) ...)   
   ($new type ($defmethod ...) ...)
   ($do a2 func (targs ...) args:a1 ...)
   ($var 42)
   ($op args ...)
   ($value 42)
   ($tuple exps ...)
   ($tuple-get exp i)
   ($curry 42 types ...)
   ($mix ($curry ...) ...)
   
LoStanza Commands
-----------------

   ($call ...)
   ($set loc exp)
   ($label 42)
   ($goto 42)
   ($return exp)
   ($deflocal 42 exp)
   ($deflocalvar 42 lstype [exp])
   ($begin lscomm ...)
   ($if exp conseq alt)
   ($match (args ...) ((arg:type ...) body ...) ...)
   ($dispatch (args ...) ((arg:type ...) body ...) ...)
   ($op args ...)

LoStanza Expressions
--------------------

   ($let comm ... exp)
   ($var 42)
   ($ref 42 args ...)
   ($refarray 42 len args ...)
   ($struct 42 args ...)
   ($ptr loc)
   ($read loc)
   ($op args ...)
   ($call type func (targs ...) args ...)
   ($call-closure type func (targs ...) args ...)
   ($call-c type func args ...)
   ($sizeof lstype)
   ($tagof 42)
   ($conv exp lstype)
   ($byte/int/long/float/double/string 42)
   ($curry 42 types ...)
   ($mix ($curry ...) ...)



                 KForm Type Inference
                 ====================

State:
   env: IntTable<IType>
      Holds the types for all binders that has a HiStanza type.
   constraints: Queue<IConstraint>
      Holds all generated constraints to be solved.

Helper Functions:
   fn-type: (c:KDefn|KDefmulti|KLSDefn) -> IType
      Returns the type of the given function with generated
      unification variables.

   lit-type: (v) -> KType
      Returns the KType representing the given literal value.

   fresh-uvar: () -> KUVar
      Creates a fresh unification variable.

   hs-type?: (t:KLSType) -> True|False
      Returns true if t can be represented as a HiStanza type (i.e. it
      is a KRefT)

   type!: (e:KExp) -> KType
      Assumes the given expression has an associated type and returns
      it.

   env-type?: (f:KExp) -> IType|False
   env-type?: (f:KLSExp) -> IType|False
      If the expression refers to a variable, then retrieve its type
      in the environment.

   to-ktype: (t:IType) -> KType
      Converts a given InferredType to a KType.

   prim-type: (op:KOp) -> KType
      Returns the return type of a given KOp.

Constraint Construction Functions:
   #equal: (a:KType, b:KType) -> False
      If a is a unification variable, creates an equality constraint
      setting a to b.
   #super: (a:KType, b:KType) -> False
      If a is a unification variable, creates a super constraint
      setting a to be at least a supertype of b.
   #sub: (a:KType, env:List<KeyValue<Int,KType>>) -> KUVar
      Creates a unification variable representing the result of
      substituting the given environment into a.

Functions:
   build-environment: (c:KComm) -> False
   build-environment: (prog:KProg) -> False
      Populates env with generated unification variables for recursive top-level.

   gen-exp: (e:KExp) -> KExp
      Returns a new expression with its inferred (but unsolved) types.
      Recursively calls constraint construction functions, gen-exp, gen-comm.

   gen-branch: (e:KBranch) -> KBranch
      Returns a new branch with its inferred (but unsolved) types.
      TODO: Assumes that the branch types have their variables
      removed.

   gen-call: (ft:IType, func:KExp, num-args:Int) -> KType
   gen-call: (ft:IType, func:KLSExp, num-args:Int) -> KType
      Returns the result of calling the given function type, and
      number of arguments. The function expression is given in order
      to extract type arguments.

   gen-comm: (c:KComm) -> KComm :
      Returns a new command with its inferred (but unsolved) types.

   gen-func: (f:Func) -> Func
      Returns a new function with its inferred (but unsolved) types.
      TODO: Assumes that function arguments have KTop() as their input
      argument.

   gen-ls-exp: (e:KLSExp) -> False :
      Generates constraints for all subexpressions and commands.
      Recursively calls gen-ls-exp, and gen-ls-comm.

   gen-ls-comm: (c:KLSComm) -> False :
      Generates constraints for all subexpressions and commands.
      Recursively calls gen-ls-exp, and gen-ls-comm.

   ls-exp-type: (e:LSExp) -> KType|False
      Returns the HiStanza type associated with the given LoStanza
      expression if there is one.

   ls-exp-type!: (e:LSExp) -> KType
      Assumes there is a HiStanza type associated with the given
      LoStanza expression and returns it.
      
   ls-loc-type: (e:KLoc) -> KType|False
      Returns the HiStanza type associated with a location if there is
      one.

   
TODO: Casts do not actually error in LoStanza. No point since no other
expression actually enforces correct ref types. (eg. Derefs/Deptrs. etc...)
