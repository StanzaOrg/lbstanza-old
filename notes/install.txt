               Stanza System Configuration
               ===========================

Stanza Installation Directory: Directory that contains the stanza
compiler executable and support files. Necessary for including
implicit files.

Platform: Indicates which system to generate code for. Supported
platforms are currently os-x, or linux.

              Configuration File Resolution
              =============================

Look for a .stanza file in the current working directory. If found
then extract Stanza system configuration parameters.

Otherwise, look for a .stanza file in STANZA_CONFIG directory. If
found then extract Stanza system configuration parameters.

Otherwise, look for a .stanza file in current home directory. If found
then extract Stanza system configuration parameters.

               Compilation with CC
               ===================

Look in the Stanza Installation Directory to find the appropriate
directory to load support files from.

Necessary support files include:
   - core.stanza
   - collections.stanza
   - driver.c

Read the implicit stanza files. Produce the generated assembly
file. Compile the entire program using CC along with driver.c

Changes to compile-time flags:
   - flag -s is now optional. If the name of an assembly file is not
     given, then just use a random one.
   - flag -o is optional. Calls cc with the assembly file if
     an output name is given.
   - flag -ccflags is optional. Forwards all given flags to the C
     compiler. The immediate string following this flag is the
     argument.
   - flag -platform is optional. Overrides the default platform
     setting if given.

                Installation
                ============

The command "stanza install -platform linux" will create the .stanza
file in the user's HOME directory.

If the flag -path is used, then the installer will create the .stanza
file in the given path. It will print out a message to include that
path in the STANZA_DIR environment variable.

               Unstable Pointers
               =================

Goal: Control access to the heap. All assignments and reads from the
heap should be completely determinable statically. This means that we
cannot create pointers to the heap.

Problems:
   1. How do we call printf on ref<String> types?
   2. What about global variables? Can we take their address?
      e.g. DOUBLE_BUFFER
   3. What about stack allocated variables? And specifically stack
      allocated structures, or stack allocated structures with ref types
      in them.
   4. Are their any guaranteed layouts of the objects in memory, if we
      *do* take their address?   
   
Solution:
   1. References to rest fields do not automatically take their
      address. str.chars has type "byte ..." which means open
      array. You may index into it but it is unbounded and thus cannot
      be passed around freely. To get its address you must use
      addr(str.chars).
   2. The address of operator is now qualified into addr(_) and
      addr!(_) operators. The two work identically except that the
      addr(_) operator does not allow users to take the address of
      heap objects, and thus create unstable pointers.
   3. Neither addr(_) nor addr!(_) may create pointers containing
      internal ref types.
   3. External variables cannot contain ref types.
   4. Additional rules apply when creating a ref object of a given
      LoStanza type. If the type is unbounded and contains a rest
      field, then the first field in the type *must* be a long that
      specifies the number of occurrences of the rest field. This
      field is typically called "length".

             LoStanza Label Form
             ===================

The labels command has this structure:

   labels :
      begin :
         goto loop-start(0, 1, 2)
      loop-start (args ...) :
         body ...
      loop-continue (args ...) :
         body ...
      loop-end (args ...) :
         body ...

The goto command has this structure:

   goto loop-start(args ...)
   
If no arguments are given to label or goto, then it is assumed that
they take no arguments. Simply a much easier form of looping to
use. The first label block cannot take any arguments.

All label names are simultaneously defined upon entry of the labels
form. The body of each label block exists within its own scope and
definitions cannot be referred to outside of that scope.

For example, this following loop structure:

   for (var i:long = 0, i < n, i = i + 1) :
      body

is encoded as:

   var i:long = 0
   labels :
      loop :
         if i < n :
            body
            i = i + 1
            goto loop


            Rename Many<T> to Collection<T>
            ===============================

We are already using the name IndexedCollection<T>. This just makes it
consistent.

                Rename typeof to is
                ===================

Commonly used operator. Should be made easier to type.

            Remove extraneous debug print messages
            ======================================

Introduce a verbosity flag for choosing whether to print debug error
messages in compiler.

         Reducing Compilation Memory Consumption
         =======================================

stz/tgt/Program should be refactored to accept a lazy collection for
top level forms. The tgt compilation sequence should also produce a
sequence of assembly instructions to be emitted on the fly.

               Calling Stanza from C
               =====================

Goal: Support the following function definition:

   extern defn f (x:int, y:int) -> int :
      body

Creates an external function f that may be called from a C
context.

Issues that needs to be addressed:
   1. There is a Stanza stack and a C stack. How do they interact?
   2. Certain values are needed for tracking the state of the C
      stack. How are they saved?
   3. Certain values are needed for tracking the state of the Stanza
      stack. How are they saved?
   4. How do you save these contexts such that C can recursively call
      Stanza and vice versa?
   5. How do we start up and initialize Stanza? How do we ensure
      Stanza has been properly initialized before external code starts
      calling extern functions?

When C calls Stanza for the entry function:
   1. The C program starts in its stack.
   2. It allocates memory for a single Stanza stack segment, and calls
      the entry function with this stack segment.
   3. The stack segment saves the C context, sets the stack pointer to
      the provided stack segment and the jumps to the top level
      function. The top level function then initializes the rest of the
      heap and stack segments.

When Stanza calls C:
   1. We move the arguments into the appropriate registers for the C
      calling convention. Extra arguments are moved to the C stack in
      their desired location.
   2. We save the current Stanza context, restore the C context that
      was saved upon beginning the entry function, and then call the C
      function. From the point of view of C, it behaves exactly as if C
      had directly called the given function.   

C Context:
   - Stack pointer: RSP
   - Preserved registers: R1, R6, R11, R12, R13, R14

Stanza Context:
   - Stack pointer: RSP
   - Current stack
