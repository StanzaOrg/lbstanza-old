============================================================
========== Designing the Stanza Virtual Machine ============
============================================================

First of all, stop. Breathe. Don't panic.

A virtual machine is not conceptually difficult. We've done it before, and the principles are clean. What *is* hard is projecting out all the possible constraints and features that we will need to support to support all of Stanza, and all the dynamic features that we want. So let's ignore that for now, and just stage it. The features that we need will become obvious once we can examine the structure of the code. 

============================================================
============= Designing the Register Machine ===============
============================================================

The first step is to design the "local" instructions of the machine. So let us start there. We've decided that it will be a register machine because, due to the presence of short-circuiting operators like OR and AND, most of the analysis is already done in register form.

The first decision to make is in how to represent types for the registers. Possible designs:
- We can assign a type to a register. So a register will take on different types across its execution.
- We can separate registers into different families of types. For example, there can be LONG Registers, INT Registers, SHORT Registers, BYTE Registers, FLOAT Registers, DOUBLE Registers, REF Registers, POINTER Registers. 
  - The opcode then determines what type of registers we are looking at. That may keep things small.
  - How will we map these onto real registers? Since the LONG registers and the INT registers are aliased?
  - This is probably not a concern since there will be more VM registers than there are real registers anyway.
  - One problem with this is the CALL instruction. In this case, it is not easy to encode the types of all the arguments in just the opcode. 
- The bigger question is the scope of the registers. Are they global registers? Just like the registers in real processors? This will allow for them to be used for passing arguments during function calls. Or are they restricted to within the function? This seems, on the surface, to be much cleaner, but we'll have to come up with some solution for handling the calling convention. 
- The solution used in the Lua VM seems pretty good actually. 

============================================================
================ How do we handle Types ====================
============================================================

First, what is it needed for?
  - It's definitely needed for the garbage collector.
  - An additional thing is in figuring out how to translate the VM instructions to x64 instructions. (If we want to go that route for the JIT.)

Okay, let's come up with some basic instructions to help think:

  X = Y op Z
  X = Y[Z]
  X[Y] = Z
  CALL X Y Z

We can add annotation instructions, which are skipped by the loader if appropriate:

  X is Byte
  X is Long
  X is Ref
  X is Short
  X is Dead

These will be enough to calculate the liveness map for the garbage collector.

============================================================
============ How are Closures/Object Handled? ==============
============================================================

We do not want the garbage collector to be interpreted by the VM.

============================================================
======================== Layout ============================
============================================================

Our goal is to create a VM with the same semantics as Stanza. Currently, that means that objects in the heap must have a specific memory layout (it must match C). And also that objects must have a specific memory layout on the stack (it must match C).

Question: What would the representation of pointers be? I.e. what would the addressof operator return? Theoretically, I guess it shouldn't matter. As these things should all be abstracted away by the VM. Should not be user visible. 

============================================================
============================================================
============================================================

- Objects / Types
- Functions/Closures
- Globals
- Addressof
- Coroutines
- Multis / Methods
- Garbage Collection
- C FFI
- Reloading
- Packages
- Stack Trace
- Liveness Annotations (Needed much later for JIT)
- Invalid number of arguments check (dispatch function)
- Stack Allocation (skip)

============================================================
================ Instructions Thus Far =====================
============================================================
R0 = call 34
call-closure R0
R0 = alloc<13> 16
R0 = int R1[8]
R0[8] = int R2
R0 = int neg R1
R0 = int add R1 R2
R0 = R2
label 23
goto 23
goto 23 when int gt R0 R1
goto 23 when instanceof<3> R0
reserve 1, 16
return

============================================================
=========== Function Addresses and Reloading ===============
============================================================

Tricky Reloading Question
=========================

    1. Package C imports packages A and B.
    2. Within C:
         - Takes address of function f1 in A, and creates a pointer p.
         - Pushes this pointer p to an array in B.
    3. We reload package A and C:
         - The new package A no longer has a function f1.
    4. What happens to that pointer p in B?     


Perspective: Forget pointers, what would happen in HiStanza?
============================================================

    1. Package C imports packages A and B.
    2. Within C:
         - We grab function f1 in A, and push it to an array in B.
    3. We reload package A and C:
         - The new package A no longer has a function f1.
    4. What happens to that closure in B?

Answer: It does what it used to, but with stale bindings.

    1. Essentially it's like we reanalyze all of the code.
    2. But leave the existing objects in the heap the same. (and still
       functional with the stale bindings).

Applying the new perspective back
=================================

    - We keep the code of the old function intact,
    - So that pointer p stays the same, and it just calls the old bindings.
    - The old code can only be deleted once we are sure there are no pointers back to it.
      - Use the garbage collector for that. 

Good. Settled. 

============================================================
============ Garbage Collection and Liveness Maps ==========
============================================================

Which instructions require saving live values?

  CallIns
  CallClosureIns
  CallCIns
  YieldIns
  
  NewStackIns <-- Performs allocation
  ReserveIns <-- Performs allocation

============================================================
========================= Eternal ==========================
============================================================

We need to update the VM to be a persistent thing that we can load
code into, and poke.

- So we need to be able to load new globals, change old globals
- Add new datas.
- Add new consts. (How do we initialize the constants?)
- Add new classes, change old classes.
- Add new functions, change old functions.
- Add new externs, change old externs.

- Given a new set of constants.
- I know how to encode them into bits.
- So I can produce a table somewhere, with them encoded.
- Who takes the table and initializes them?
  - I can call update-constants, with the new table pointer.
  - And then we delete the table, after they are loaded.
  - That would work. 

============================================================
======================== VMTable ===========================
============================================================

API:
  - Assume that ids are dense.
  - Load a bunch of new globals. (may overwrite old globals).
  - Retrieve the roots of the globals.
  - Retrieve the position of a global given its ID.

  - DO WE ALLOW PULLING CLOSURES/TYPES TO CONSTS?
    - But they would stay live?
    - That seems bad.

[0 1 4 7 8 10 11 13 17 19 21 42 44 20]
Delete: 11, 13, 17
Add: 11, 14, 19
Can be done.
- Use naive algorithm to start.

============================================================
========================== TODO ============================
============================================================

- Change NewStack to accept an allocated stack instead of creating one.

LATER
- 

FINE REFINEMENTS
- Stack and RawCoroutine should be merged into the same thing, to increase speed.

LATER LATER
- How to generate native code for garbage collector.
- And stack extender.

============================================================
====================== System Parts ========================
============================================================

DL-IR:
  Represents exported and imported identifiers within package, and their definitions.
  It is the definition of the package interfaces.

EL-IR:
  Represents the abstract form (from the typechecker) of the package definitions.

VM-IR:
  Represents the execution form in the virtual machine.

DEnv:
  Represents the state of the loaded environment.
  After the typechecker, we can create a list of DL-IR interfaces that we wish to load into the
  running environment.
  DEnv will detect whether that is possible, or whether it introduces
  a mismatch. If the DEnv says that it can be loaded, then the
  following parts are ensured to work.  

LoadedIds:
  Used to assign an virtual integer id during compilation to VM-IR so
  that the VM can load it into the proper place.

EL-TO-VM:
  Stateless compiler to convert EL commands to VM commands.

VM:
  Contains the currently loaded code in the Stanza environment.
