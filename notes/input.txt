=== The Stanza Language ===

Package Forms:
   ($defpackage name imports ...)
   ($import name prefixes ...)
   ($prefix-of (names ...) p)
   ($prefix p)
   ($public e)
   ($protected e)

HiStanza Forms:
   Types:
      ($of name args ...)
      ($and a b)
      ($or a b)
      ($-> (a1 ...) a2)
      ($cap x)
      ($void)
      ($?)
      x
   Expressions:
      ($fn* (a1 ...) a2 (args ...) body)
         a1 can be none if no type given.
         a2 can be none if no type given.
      ($multi fs ...)
      ($begin es ...)
      ($match (es ...) bs ...)
      ($branch (ts ...) (args ...) body)
      ($new type methods ...)
      ($as exp type)
      ($set name exp)
      ($do f args ...)
         Function may be either an expression or ($of exp targs ...)
         for polymorphic calls.
      ($prim f args ...)
      ($tuple es ...)
      ($none)
      x
      42
   Declarations:   
      ($deftype name (args ...) parent)
         Parent can be none if no parent given.
      ($def name type value)
         Type can be either a type or none if no type given.
      ($defvar name type value)
         Type can be either a type or none if no type given.
      ($defn* name (targs ...) (a1 ...) a2 (args ...) body)
         a1 can be none if no type given.
         a2 can be none if no type given.
      ($defmulti name (targs ...) (a1 ...) a2)
         a1 can be none if no type given.
         a2 can be none if no type given.
      ($defmethod* name (targs ...) (a1 ...) a2 (args ...) body)
         a1 can be none if no type given.
         a2 can be none if no type given.      
      ($lostanza e)

LoStanza Forms:
   Types:
      ($byte)
      ($int)
      ($long)
      ($float)
      ($double)
      ($?)
      ($ptr t)
      ($ref t)
      ($-> (a1 ...) ar a2)
      x
   Expressions:
      ($ref type args ...)
      ($refarray type (args ...) length)
      ($struct type args ...)
      ($ptr exp)
      ($deref exp)
      ($slot exp i)
      ($field exp name)
      ($do f args ...)
         Function may be either an expression or ($of f targs ...) for
         a polymorphic call.
      ($call-c f args ...)
      ($prim f exp ...)
      ($sizeof type)
      ($tagof name)
      ($as exp type)
      ($value v type)
      ($let-exp c e)
      ($and a b)
      ($or a b)
      x
      42
   Commands:
      ($set exp exp)
      ($label name)
      ($goto name)
      ($return exp)
      ($let c)
      ($if p c a)
      ($begin c ...)
      ($match e bs ...)
      ($branch (ts ...) (args ...) body)
      exp
         Command level expressions include calls and primitive
         operations.
   Declarations:
      ($def name type exp)
         Type can be either a type or none.
      ($defvar name type exp)
         Type can be either a type or none.
         Expression can be either an expression or none.
      ($defstruct name (args ...) parent
         (name type) ...)
         Fields may end with ellipsis to indicate a rest field.
         Parent may be none if no parent given.
      ($extern name type)
      ($externfn name type)
      ($defn* name (targs ...) (a1 ...) a2 (args ...) body)

LoStanza Compiler Intrinsics :
   ($special new-stack type f args ...)
   ($special switch-stack type f args ...)
   ($special exit arg)
   ($special heap-ptr)
   ($special heap-top)
   ($special stack-mem)
   ($special heap-mem)
   ($special free-mem)
   ($special stanza-main)
   etc...
