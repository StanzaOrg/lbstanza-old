State of the Virtual Machine

  registers: ptr<long>
  heap: ptr<long>                ;[semi-variable]
  heap-top: ptr<long>            ;[variable]
  heap-limit: ptr<long>          ;[semi-variable]
  free: ptr<long>                ;[semi-variable]
  free-limit: ptr<long>          ;[semi-variable]
  current-stack: long            ;[variable]
  stack-pointer: ptr<StackFrame> ;[variable]
  pc: int                        ;[variable]

State of the Virtual Machine while a C-call is executing:

  heap is normal. heap points to the beginning of the heap space.
  
  heap-top is normal. heap-top points to the top of the heap. Allocations start from here.
  
  heap-limit is normal. heap-limit points to the end of the heap space.
  
  free is normal. free points to the beginning of the free space that will be used during gc.
  
  free-limit is normal. free-limit points to the end of the free space.
  
  current-stack is normal. current-stack points to the stack that the current coroutine is running inside. 

  stack-pointer points to the beginning of a blank frame. The return address has not been written. The liveness map has not been written. The frame of the function that called the C function is directly below this blank frame.

  pc points to the instruction after the CALLC_OPCODE. 

Adjustments to be made:

  Fixing the compiler to generate new instructions for dealing with externdefns:
    Generation of instructions for dealing with ExternDefnId
  Passing the new tables into the CVM.
  Implementation of the new ExternDefnId instructions in CVM.


================================================================================

- Pull things out to VMState
- Create a function to update the VMState from VirtualMachine
- VMState should be allocated as a pointer.
- Stack allocation should be done just once before launching.
- CVM should receive VMState pointer
- CVM should pass VMState pointer to callbacks
- callbacks should be written to only require VMState

- What about linker tables?

================================================================================
