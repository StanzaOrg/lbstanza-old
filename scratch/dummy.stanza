defpackage dummy :
  import core
  import collections
  import reader
  import core/debug/read-stack-trace
  import core/debug-table
  import core/dynamic-library
  import core/parsed-path
  import core/safepoints
  import core/sighandler
  import core/stack-trace
  import stz/absolute-info

defn load-program (filename:String) -> DynamicLibrary :
  val lib = dynamic-library-open(filename)
  unprotect-extents(lib)
  println("Load program succeeded.")
  lib
  ;set-sighandler(command-loop{lib, true})
  ;try :
  ;  command-loop(lib, false)
  ;catch (e:Exception) :
  ;  println(e)

;<comment>
defn* command-loop (lib:DynamicLibrary,
                    running?:True|False) -> False :
  let loop () :
    val tokens = read-line(LineNoisePrompter("debug> ", "     > "))
    match(tokens:List<Token>) :
      match-syntax(tokens) :
        (safepoints) :
          print-safepoints(lib)
          loop()
        (break ?filename ?line) :
          set-safepoint(lib, unwrap-token(filename) as String, unwrap-token(line) as Int)
          loop()
        (run) :
          if running? :
            println("Program is already running.")
            loop()
          else :
            run-main(lib)
            println("debug> Program finished.")
        (continue) :
          if running? :
            false
          else :
            println("Program is not yet running.")
            loop()
        (stop) :
          println("Stopping the program.")
          throw(Exception("Program Stopped."))
        (_ ...) :
          println("Unrecognized command.")
          loop()
    else :
      println("No command entered.")
      loop()
;<comment>

lostanza val PAGE-SIZE:long = 4096
lostanza defn align-down-to-page-size (p:ptr<?>) -> ptr<?> :
  val x = p as long
  val y = x & (- PAGE-SIZE)
  return y as ptr<?>
lostanza defn align-up-to-page-size (p:ptr<?>) -> ptr<?> :
  return align-down-to-page-size(p + (PAGE-SIZE - 1))
extern mprotect: (ptr<?>, long, int) -> int
lostanza defn unprotect-extents (lib:ref<DynamicLibrary>) -> ref<False> :
  val start = dynamic-library-symbol(lib, String("stanza_text_section_start"))
  val end = dynamic-library-symbol(lib, String("stanza_text_section_end"))
  val start-address = align-down-to-page-size(start.address)
  val end-address = align-up-to-page-size(end.address)
  call-c mprotect(start-address, end-address - start-address, 0x7)
  return false

lostanza defn get-safepoint-table (lib:ref<DynamicLibrary>) -> ptr<SafepointTable> :
  val safepoint-sym = dynamic-library-symbol(lib, String("stanza_safepoint_table"))
  return safepoint-sym.address as ptr<SafepointTable>

lostanza defn print-safepoints (lib:ref<DynamicLibrary>) -> ref<False> :
  dump-safepoint-table(get-safepoint-table(lib))
  return false

lostanza defn write-int3 (p:ptr<byte>) -> ref<False> :
  call-c clib/printf("Set breakpoint at %p\n", p)
  [p] = 0xCCY
  return false
lostanza defn write-noop (p:ptr<byte>) -> ref<False> :
  [p] = 0x90Y
  return false
lostanza defn write-int3s (address-list:ptr<AddressList>) -> ref<False> :
  for (var i:long = 0, i < address-list.length, i = i + 1) :
    write-int3(address-list.addresses[i].address)
  return false
lostanza defn write-noops (address-list:ptr<AddressList>) -> ref<False> :
  for (var i:long = 0, i < address-list.length, i = i + 1) :
    write-noop(address-list.addresses[i].address)
  return false

lostanza defn set-safepoint (lib:ref<DynamicLibrary>, filename:ref<String>, line:ref<Int>) -> ref<False> :
  val table = get-safepoint-table(lib)
  val address-list = safepoint-addresses(table, addr!(filename.chars), line.value)
  if address-list == null :
    call-c clib/printf("No safepoint at %s:%ld\n", addr!(filename.chars), line.value)
  else :
    write-int3s(address-list)
  return false

lostanza deftype SourceBreakpoint :
  line:long    ; 1-based
  column:long  ; 1-based, 0 denotes undefined column
extern defn set_safepoints (filename:ptr<byte>, breakpoints:ptr<SourceBreakpoint>, length:long, out:ptr<?>) -> int :
  val table = get-safepoint-table(LOADED-PROGRAM)
  val safepoints = file-safepoints(table, filename)
  if safepoints != null :
    ;Clear all safeponts in the file
    for (var i:long = 0, i < safepoints.num-entries, i = i + 1) :
      write-noops(safepoints.entries[i].address-list)
    for (var i:long = 0, i < length, i = i + 1) :
      val desired-line = breakpoints[i].line
      val entry = closest-safepoint-entry(safepoints, desired-line)
      if (entry == null) :
        call-c append_breakpoint(out, entry, desired-line, 0L, 0Y) ;0L is for undefined column
      else :
        call-c append_breakpoint(out, entry, entry.line, 0L, 1Y) ;0L is for undefined column
        write-int3s(entry.address-list)
  return 0

lostanza defn to-bool (x:long) -> ref<True|False> :
  if x : return true
  else : return false

defn absolute-file-path (base:String, file:String) -> String :
  to-string(relative-to-dir(parse-path(base), file))

lostanza val STACK-FRAME-FORMAT-HEX               : long = 1L << 0
lostanza val STACK-FRAME-FORMAT-PARAMETERS        : long = 1L << 1
lostanza val STACK-FRAME-FORMAT-PARAMETER-TYPES   : long = 1L << 2
lostanza val STACK-FRAME-FORMAT-PARAMETER-NAMES   : long = 1L << 3
lostanza val STACK-FRAME-FORMAT-PARAMETER-VALUES  : long = 1L << 4
lostanza val STACK-FRAME-FORMAT-LINE              : long = 1L << 5
lostanza val STACK-FRAME-FORMAT-MODULE            : long = 1L << 6
lostanza val STACK-FRAME-FORMAT-INCLUDE-ALL       : long = 1L << 7

lostanza defn include-all? (builder:ref<ExtStackTraceBuilder>) -> ref<True|False> :
  return to-bool(builder.format & STACK-FRAME-FORMAT-INCLUDE-ALL)

lostanza deftype ExtStackTraceBuilder :
  buffer:ptr<?>
  format:long
extern append_stack_frame: (ptr<?>, long, ptr<?>, ptr<?>, long, long) -> int
lostanza defn append (builder:ref<ExtStackTraceBuilder>, address:ref<Long>, function:ref<String>,
                      path:ref<String>, line:ref<Int>, column:ref<Int>) -> ref<False> :
  call-c append_stack_frame(builder.buffer, address.value, addr!(function.chars), addr!(path.chars), line.value, column.value)
  return false
defn create-stack-trace (b:ExtStackTraceBuilder) :
  val stack-trace = read-stack-trace(LOADED-PROGRAM)
  for entry in entries(stack-trace) do :
    if include-all?(b) or package(entry) != `core :
      match(signature(entry), info(entry)) :
        (function:String, info:AbsoluteFileInfo) :
          append(b, address(entry), function, absolute-file-path(base(info), filename(info)), line(info), column(info))
        (function, info) : false
extern defn create_stack_trace (st:ptr<?>, format:long) -> int :
  create-stack-trace(new ExtStackTraceBuilder{st, format})
  return 0

lostanza val PARAMETERS-SCOPE : int = 1
lostanza val LOCALS-SCOPE     : int = 2
lostanza val GLOBALS-SCOPE    : int = 3
extern defn number_of_variables_in_scope (scope-id:int) -> int :
  if scope-id == GLOBALS-SCOPE :
    return count-globals().value
  ;TODO: read actual count from tables
  return 10
defn count-globals () -> Int :
  var count:Int = 0
  defn inc (DebugEntry) : count = count + 1
  for-all-globals(inc)
  count

;Variable visibility and const attributes
lostanza val VARIABLE_PUBLIC    : byte = 1Y
lostanza val VARIABLE_PRIVATE   : byte = 2Y
lostanza val VARIABLE_PROTECTED : byte = 3Y
lostanza val VARIABLE_CONSTANT  : byte = 4Y

extern append_variable: (ptr<?>, ptr<byte>, ptr<byte>, ptr<byte>long, byte) -> int
lostanza defn append-variable (ref:ptr<?>, name:ref<String>, type:ref<String>, value:ref<String>) -> ref<False> :
  call-c append_variable(ref, addr!(name.chars), addr!(type.chars), addr!(value.chars), 0L, 0Y)
  return false
lostanza defn append-variable (name:ref<String>, type:ref<String>, value:ref<String>) -> ref<False>:
  return append-variable(null, name, type, value)
lostanza defn append-variable (name:ref<Symbol>, p:ptr<long>) -> ref<False> :
  val v = [p]
  return append-variable(p, to-string(name), type-of(v), string-of(v))
lostanza defn append-variable (name:ref<Symbol>, offset:ref<Int>) -> ref<False> :
  return append-variable(name, offset-to-address(offset))
lostanza defn offset-to-address (offset:ref<Int>) -> ptr<long> :
  return addr(app-vms.global-mem[offset.value]) as ptr<long>

var hex:True|False = false
defn append-local (i:Long) :
  append-variable(to-string("var%_" % [i]), "Int", to-string("%_" % [i]))

extern defn create_fields (ref:ptr<?>, name:ptr<byte>, fields-count:long, hex:long) -> int :
  /hex = to-bool(hex)
  if ref as long == GLOBALS-SCOPE as long :
    append-global-variables()
    return 0
  ; TODO: handle scope refs here
  for (var i:long = 0L, i < fields-count, i = i + 1L) :
    append-local(new Long{i})
  return 0
defn append-global-variables () :
  for-all-globals(append-variable)
defn append-variable (entry:DebugEntry) :
  append-variable(name(entry), offset(entry))
defn for-all-globals (f: (DebugEntry)-> False) :
  val table = get-debug-table(LOADED-PROGRAM)
  for i in 0 to num-packages(table) do :
    val package-table = table[i]
    if name(package-table) != `core :
      for i in 0 to num-entries(package-table) do :
        f(package-table[i])
lostanza defn get-debug-table (lib:ref<DynamicLibrary>) -> ref<DebugTable> :
  val debug-table-sym = dynamic-library-symbol(lib, String("stanza_debug_table"))
  return DebugTable(debug-table-sym.address as ptr<DebugTableLayout>)
lostanza defn type-of (v:long) -> ref<String> :
  val type-id = type-id(v)
  if type-id < 0 : return String(0)
  return String(app-class-name(type-id))
lostanza defn app-class-name (x:long) -> ptr<byte> :
  val record = app-vms.class-table[x].record
  return (record + record.num-bytes) as ptr<byte>

lostanza val INT-TAG-BITS:long = 0L
lostanza val REF-TAG-BITS:long = 1L
lostanza val MARKER-TAG-BITS:long = 2L
lostanza val BYTE-TAG-BITS:long = 3L
lostanza val CHAR-TAG-BITS:long = 4L
lostanza val FLOAT-TAG-BITS:long = 5L

lostanza defn type-id (ref:long) -> long :
  val tagbits = ref & 0x7L
  if tagbits == INT-TAG-BITS : return tagof(Int)
  if tagbits == BYTE-TAG-BITS : return tagof(Byte)
  if tagbits == CHAR-TAG-BITS : return tagof(Char)
  if tagbits == FLOAT-TAG-BITS : return tagof(Float)
  if tagbits == MARKER-TAG-BITS : return ref >> 3L
  if tagbits == REF-TAG-BITS : return [(ref - REF-TAG-BITS) as ptr<long>]
  return -1L

lostanza defn untag (x:long) -> ptr<?> :
  #if-not-defined(OPTIMIZE) :
    val tagbits = x & 7L
    if tagbits != 1 : fatal("Not a heap-allocated object!")
  return (x - 1 + 8) as ptr<?>

deftype RecognizedTypes :
  True <: RecognizedTypes
  False <: RecognizedTypes
  Byte <: RecognizedTypes
  Char <: RecognizedTypes
  Int <: RecognizedTypes
  Float <: RecognizedTypes
  Long <: RecognizedTypes
  Double <: RecognizedTypes
  String <: RecognizedTypes
  AppByteArray <: RecognizedTypes
  AppCharArray <: RecognizedTypes
  AppIntArray <: RecognizedTypes
  AppLongArray <: RecognizedTypes
  AppFloatArray <: RecognizedTypes
  AppDoubleArray <: RecognizedTypes
  AppTuple <: RecognizedTypes
  AppObject <: RecognizedTypes

lostanza defn value-of (v:long) -> ref<RecognizedTypes> :
  val type-id = type-id(v)
  if type-id == tagof(False) :
    return v as ref<False>
  if type-id == tagof(True) :
    return v as ref<True>
  if type-id == tagof(Byte) :
    return v as ref<Byte>
  if type-id == tagof(Char) :
    return v as ref<Char>
  if type-id == tagof(Int) :
    return v as ref<Int>
  if type-id == tagof(Float) :
    return v as ref<Float>
  if type-id == tagof(Long) :
    return Long(untag(v) as ptr<Long>)
  if type-id == tagof(Double) :
    return Double(untag(v) as ptr<Double>)
  if type-id == tagof(String) :
    return String(untag(v) as ptr<String>)
  if type-id == tagof(StringSymbol) :
    return String(untag(v) as ptr<StringSymbol>)
  if type-id == tagof(ByteArray) :
    return AppByteArray(v)
  if type-id == tagof(CharArray) :
    return AppCharArray(v)
  if type-id == tagof(IntArray) :
    return AppIntArray(v)
  if type-id == tagof(LongArray) :
    return AppLongArray(v)
  if type-id == tagof(FloatArray) :
    return AppFloatArray(v)
  if type-id == tagof(DoubleArray) :
    return AppDoubleArray(v)
  return new AppObject{v}
;<comment>
  if type-id == tagof(Tuple) :
    return to-string(untag(v) as ptr<Tuple>)
;<comment>

lostanza defn string-of (v:long) -> ref<String> :
  val type-id = type-id(v)
  if type-id == tagof(False) :
    return to-string(v as ref<False>)
  if type-id == tagof(True) :
    return to-string(v as ref<True>)
  if type-id == tagof(Byte) :
    return to-string(v as ref<Byte>)
  if type-id == tagof(Char) :
    return to-string(v as ref<Char>)
  if type-id == tagof(Int) :
    return to-string(v as ref<Int>)
  if type-id == tagof(Float) :
    return to-string(v as ref<Float>)
  if type-id == tagof(Long) :
    return to-string(Long(untag(v) as ptr<Long>))
  if type-id == tagof(Double) :
    return to-string(Double(untag(v) as ptr<Double>))
  if type-id == tagof(String) :
    return String(untag(v) as ptr<String>)
  if type-id == tagof(StringSymbol) :
    return String(untag(v) as ptr<StringSymbol>)
  if type-id == tagof(ByteArray) :
    return to-string(AppByteArray(v))
  if type-id == tagof(CharArray) :
    return to-string(AppCharArray(v))
  if type-id == tagof(IntArray) :
    return to-string(AppIntArray(v))
  if type-id == tagof(LongArray) :
    return to-string(AppLongArray(v))
  if type-id == tagof(FloatArray) :
    return to-string(AppFloatArray(v))
  if type-id == tagof(DoubleArray) :
    return to-string(AppDoubleArray(v))
  if type-id == tagof(Tuple) :
    return to-string(AppTuple(v))
  return to-string(new AppObject{v})

;Here ptr<t> is always a pointer to the app heap,
;so no allocations in the debugger heap can change it.
lostanza defn Long (p:ptr<Long>) -> ref<Long> :
  return new Long{p.value}
lostanza defn Double (p:ptr<Double>) -> ref<Double> :
  return new Double{p.value}
lostanza defn String (p:ptr<String>) -> ref<String> :
  return String(p.length - 1, addr!(p.chars))
lostanza defn String (p:ptr<StringSymbol>) -> ref<String> :
  return String(untag(p.name as long) as ptr<String>)

lostanza deftype AppByteArray <: IndexedCollection<Byte> & Unique :
  p:ptr<ByteArray>
lostanza defmethod length (a:ref<AppByteArray>) -> ref<Int> :
  return new Int{a.p.length as int}
lostanza defmethod get (a:ref<AppByteArray>, i:ref<Int>) -> ref<Byte> :
  core/ensure-index-in-bounds(a, i)
  return new Byte{a.p.data[i.value]}
lostanza defn AppByteArray (v:long) -> ref<AppByteArray> :
  val p = untag(v) as ptr<ByteArray>
  return new AppByteArray{p}

lostanza deftype AppCharArray <: IndexedCollection<Char> & Unique :
  p:ptr<CharArray>
lostanza defmethod length (a:ref<AppCharArray>) -> ref<Int> :
  return new Int{a.p.length as int}
lostanza defmethod get (a:ref<AppCharArray>, i:ref<Int>) -> ref<Char> :
  core/ensure-index-in-bounds(a, i)
  return new Char{a.p.chars[i.value]}
lostanza defn AppCharArray (v:long) -> ref<AppCharArray> :
  val p = untag(v) as ptr<CharArray>
  return new AppCharArray{p}

lostanza deftype AppIntArray <: IndexedCollection<Int> & Unique :
  p:ptr<IntArray>
lostanza defmethod length (a:ref<AppIntArray>) -> ref<Int> :
  return new Int{a.p.length as int}
lostanza defmethod get (a:ref<AppIntArray>, i:ref<Int>) -> ref<Int> :
  core/ensure-index-in-bounds(a, i)
  return new Int{a.p.data[i.value]}
lostanza defn AppIntArray (v:long) -> ref<AppIntArray> :
  val p = untag(v) as ptr<IntArray>
  return new AppIntArray{p}

lostanza deftype AppLongArray <: IndexedCollection<Long> & Unique :
  p:ptr<LongArray>
lostanza defmethod length (a:ref<AppLongArray>) -> ref<Int> :
  return new Int{a.p.length as int}
lostanza defmethod get (a:ref<AppLongArray>, i:ref<Int>) -> ref<Long> :
  core/ensure-index-in-bounds(a, i)
  return new Long{a.p.data[i.value]}
lostanza defn AppLongArray (v:long) -> ref<AppLongArray> :
  val p = untag(v) as ptr<LongArray>
  return new AppLongArray{p}

lostanza deftype AppFloatArray <: IndexedCollection<Float> & Unique :
  p:ptr<FloatArray>
lostanza defmethod length (a:ref<AppFloatArray>) -> ref<Int> :
  return new Int{a.p.length as int}
lostanza defmethod get (a:ref<AppFloatArray>, i:ref<Int>) -> ref<Float> :
  core/ensure-index-in-bounds(a, i)
  return new Float{a.p.data[i.value]}
lostanza defn AppFloatArray (v:long) -> ref<AppFloatArray> :
  val p = untag(v) as ptr<FloatArray>
  return new AppFloatArray{p}

lostanza deftype AppDoubleArray <: IndexedCollection<Double> & Unique :
  p:ptr<DoubleArray>
lostanza defmethod length (a:ref<AppDoubleArray>) -> ref<Int> :
  return new Int{a.p.length as int}
lostanza defmethod get (a:ref<AppDoubleArray>, i:ref<Int>) -> ref<Double> :
  core/ensure-index-in-bounds(a, i)
  return new Double{a.p.data[i.value]}
lostanza defn AppDoubleArray (v:long) -> ref<AppDoubleArray> :
  val p = untag(v) as ptr<DoubleArray>
  return new AppDoubleArray{p}

lostanza deftype AppTuple <: IndexedCollection<RecognizedTypes> & Unique :
  p:ptr<Tuple>
defn empty? (t:AppTuple) :
  length(t) == 0
lostanza defmethod length (t:ref<AppTuple>) -> ref<Int> :
  return new Int{t.p.length as int}
lostanza defmethod get (a:ref<AppTuple>, i:ref<Int>) -> ref<RecognizedTypes> :
  core/ensure-index-in-bounds(a, i)
  return value-of(a.p.items[i.value] as long)
lostanza defn AppTuple (v:long) -> ref<AppTuple> :
  val p = untag(v) as ptr<Tuple>
  return new AppTuple{p}

lostanza deftype AppObject :
  p:long
lostanza defn type-of (o:ref<AppObject>) -> ref<String> :
  return type-of(o.p)
defmethod print (o:OutputStream, x:AppObject) :
  print(o, "[%_ app object]" % [type-of(x)])

lostanza var app-vms:ptr<core/VMState> = null
lostanza defn run-main (lib:ref<DynamicLibrary>) -> ref<Int> :
  app-vms = dynamic-library-symbol(lib, String("stanza_vmstate")).address as ptr<core/VMState>
  val main-sym = dynamic-library-symbol(lib, String("main"))
  val main = main-sym.address as ptr<( (int, ptr<ptr<byte>>) -> int )>
  val result = call-c [main](0, null)
  return new Int{result}

extern stop_at_entry: () -> int
extern next_debug_event: () -> int
extern append_breakpoint: (ptr<?>, ptr<?>, long, long, byte) -> int
extern send_thread_stopped_at_breakpoint: (long) -> int

lostanza defn stop-at-entry () -> ref<False> :
  call-c stop_at_entry()
  return false

lostanza defn next-debug-event () -> ref<False> :
  call-c next_debug_event()
  return false

extern defn stanza_debugger_pause () -> int :
  dummy-pause()
  return 0

var LOADED-PROGRAM:DynamicLibrary
extern defn stanza_debugger_continue () -> int :
  dummy-continue()
  return 0

;<comment>
;That's a useful function, may need it later
extern defn stanza_debugger_current_source_position (ip:ptr<?>, file:ptr<ptr<byte>>) -> long :
  if (ip != null) :
    val safepoints = get-safepoint-table(LOADED-PROGRAM)
    for (var i:long = 0, i < safepoints.num-files, i = i + 1) :
      val file-safepoints = safepoints.files[i]
      for (var j:long = 0, j < file-safepoints.num-entries, j = j + 1) :
        val entry = file-safepoints.entries[j]
        val address-list = entry.address-list
        for (var k:long = 0, k < address-list.length, k = k + 1) :
          if address-list.addresses[k].address == ip :
            [file] = file-safepoints.filename
            return entry.line
  [file] = null
  return 0L
;<comment>

lostanza defn send-thread-stopped-at-breakpoint (id:ref<Long>) -> ref<False> :
  call-c send_thread_stopped_at_breakpoint(id.value)
  return false

defn hit-breakpoint () :
  send-thread-stopped-at-breakpoint(get-sighandler-instruction-address())
  next-debug-event()

defn dummy-pause () :
  println("Stanza: Simulate a pause")

defn dummy-continue () :
  println("Stanza: Simulate continue")

defn main () :
  val cmd-args = command-line-arguments()
  println("Stanza: Command line arguments = %_" % [cmd-args])

  val program-filename = cmd-args[1]
  LOADED-PROGRAM = load-program(program-filename)

  set-sighandler(hit-breakpoint)

  println("Stanza: Stopping at entry")
  stop-at-entry()

  println("Running main")
  run-main(LOADED-PROGRAM)
  println("run-main has finished")


main()