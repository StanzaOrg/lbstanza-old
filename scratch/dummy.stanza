defpackage dummy :
  import core
  import collections
  import reader
  import core/dynamic-library
  import core/safepoints
  import line-noise/prompter
  import core/sighandler

defn load-program (filename:String) -> DynamicLibrary :
  val lib = dynamic-library-open(filename)
  unprotect-extents(lib)
  println("Load program succeeded.")
  lib
  ;set-sighandler(command-loop{lib, true})
  ;try :
  ;  command-loop(lib, false)
  ;catch (e:Exception) :
  ;  println(e)

;<comment>
defn* command-loop (lib:DynamicLibrary,
                    running?:True|False) -> False :
  let loop () :
    val tokens = read-line(LineNoisePrompter("debug> ", "     > "))
    match(tokens:List<Token>) :
      match-syntax(tokens) :
        (safepoints) :
          print-safepoints(lib)
          loop()
        (break ?filename ?line) :
          set-safepoint(lib, unwrap-token(filename) as String, unwrap-token(line) as Int)
          loop()
        (run) :
          if running? :
            println("Program is already running.")
            loop()
          else :
            run-main(lib)
            println("debug> Program finished.")
        (continue) :
          if running? :
            false
          else :
            println("Program is not yet running.")
            loop()
        (stop) :
          println("Stopping the program.")
          throw(Exception("Program Stopped."))
        (_ ...) :
          println("Unrecognized command.")
          loop()
    else :
      println("No command entered.")
      loop()
;<comment>

lostanza val PAGE-SIZE:long = 4096
lostanza defn align-to-page-size (p:ptr<?>) -> ptr<?> :
  val x = p as long
  val y = x & (- PAGE-SIZE)
  return y as ptr<?>

extern mprotect: (ptr<?>, long, int) -> int
lostanza defn unprotect-region (p1:ptr<?>, p2:ptr<?>) -> ref<False> :
  var p:ptr<?> = p1
  while p <= p2 :
    val result = call-c mprotect(p, PAGE-SIZE, 0x7)
    p = p + PAGE-SIZE
  return false

lostanza defn unprotect-extents (lib:ref<DynamicLibrary>) -> ref<False> :
  val start = dynamic-library-symbol(lib, String("stanza_text_section_start"))
  val end = dynamic-library-symbol(lib, String("stanza_text_section_end"))
  val start-address = align-to-page-size(start.address)
  val end-address = align-to-page-size(end.address)
  unprotect-region(start-address, end-address)
  return false

lostanza defn get-safepoint-table (lib:ref<DynamicLibrary>) -> ptr<SafepointTable> :
  val safepoint-sym = dynamic-library-symbol(lib, String("stanza_safepoint_table"))
  return safepoint-sym.address as ptr<SafepointTable>

lostanza defn print-safepoints (lib:ref<DynamicLibrary>) -> ref<False> :
  dump-safepoint-table(get-safepoint-table(lib))
  return false

lostanza defn set-safepoint (lib:ref<DynamicLibrary>, filename:ref<String>, line:ref<Int>) -> ref<False> :
  val table = get-safepoint-table(lib)
  val address-list = safepoint-addresses(table, addr!(filename.chars), line.value)
  if address-list == null :
    call-c clib/printf("No safepoint at %s:%ld\n", addr!(filename.chars), line.value)
  else :
    for (var i:long = 0, i < address-list.length, i = i + 1) :
      write-int3(address-list.addresses[i].address)
  return false

lostanza defn write-int3 (p:ptr<byte>) -> ref<False> :
  call-c clib/printf("Set breakpoint at %p\n", p)
  [p] = 0xCCY
  return false

lostanza defn run-main (lib:ref<DynamicLibrary>) -> ref<Int> :
  val main-sym = dynamic-library-symbol(lib, String("main"))
  val main = main-sym.address as ptr<( (int, ptr<ptr<byte>>) -> int )>
  val result = call-c [main](0, null)
  return new Int{result}

extern stop_at_entry: () -> int
extern next_debug_event: () -> int

lostanza defn stop-at-entry () -> ref<False> :
  call-c stop_at_entry()
  return false

lostanza defn next-debug-event () -> ref<False> :
  call-c next_debug_event()
  return false

extern defn stanza_debugger_pause () -> int :
  dummy-pause()
  return 0

var LOADED-PROGRAM:DynamicLibrary
extern defn stanza_debugger_continue () -> int :
  dummy-continue()
; run-main(LOADED-PROGRAM)
  return 0

defn dummy-pause () :
  println("Stanza: Simulate a pause")

defn dummy-continue () :
  println("Stanza: Simulate continue")

defn main () :
  val cmd-args = command-line-arguments()
  println("Stanza: Command line arguments = %_" % [cmd-args])

  val program-filename = cmd-args[1]
  LOADED-PROGRAM = load-program(program-filename)

  println("Stanza: Stopping at entry")
  stop-at-entry()

  for i in 0 to 10000 do :
    next-debug-event()
    println("Stanza: Finished iteration %_" % [i])

main()