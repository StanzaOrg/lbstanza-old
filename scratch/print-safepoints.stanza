;  Agenda:
;- run an app under debugger
;- set breakpoints at source lines
;- view stack trace
;- view global and local variables
;- view locals in selected stack frame
;- structural inspection of variables
;- application output redirection
;- step in and over global variable initializations
;- step in, over and out function calls and coroutines
;- step over loops
;- pause and continue infinite loop
;- restart debugging session

defpackage print-safepoints :
  import core
  import collections

;Expand 'Globals' and step over the initializations.
;Pay attention to value changes.
val GLOBAL-A = "Hello world"
var GLOBAL-B:Int = 23
val GLOBAL-C = [23, "Hello"]
val GLOBAL-D = CharArray(3, 'A')
val GLOBAL-E = ByteArray(3, 5Y)
val GLOBAL-F = IntArray(3, 1)
val GLOBAL-G = Array<Int>(3, 1)
var GLOBAL-H:List = List(42, "Timon")
val GLOBAL-I = `core
val GLOBAL-J = to-char(0x07Y)
val GLOBAL-K = CharArray(3, to-char(0x0AY))

defn test (i:Int) :
  println("=== test started %_ ===" % [i])
  for j in 0 to 10 do :
    println("=== test iteration %_ ===" % [j])
  println("=== test finished %_ ===" % [i])

defn f0 (a:Int) :
  println("f0(%_)" % [a])
  f1(a + a)
  f1(a + a)
  println(a)

defn f1 (b:Int) :
  println("f1(%_)" % [b])
  f2(b + b)
  f2(b + b)
  println(b)

defn f2 (c:Int) :
  ;Select caller's frames in stack trace to see their locals in 'Locals' view
  println("f2(%_)" % [c])
  println(c)

defn my-process (co:Coroutine<Int,String>, a:Int) -> String :
  ;Step in or over suspends
   println("Came in a = %_" % [a])
   println("Passing out Timon")
   val b = suspend(co, "Timon")

   println("Came in b = %_" % [b])
   println("Passing out and")
   val c = suspend(co, "and")

   println("Came in c = %_" % [c])
   println("Passing out Pumbaa")
   val d = suspend(co, "Pumbaa")

   println("Came in d = %_" % [d])
   println("Coroutine is done")
   "Done"

defn coroutine-test () :
  println("Create coroutine")
  val co = Coroutine<Int,String>(my-process)

  ;Step in or over resumes
  println("\nResume with 42")
  val x = resume(co, 42)
  println("Got back x = %_" % [x])

  println("\nResume with 43")
  val y = resume(co, 43)
  println("Got back y = %_" % [y])

  println("\nResume with 44")
  val z = resume(co, 44)
  println("Got back z = %_" % [z])

  println("\nResume with 45")
  val w = resume(co, 45)
  println("Got back w = %_" % [w])

defn random-selection-test () :
  ;Step in or over here. Pay attention to locals.
  val items = ["Hello", 0, 'X']
  val x = items[rand(3)]
  val y = items[rand(3)]
  match(x, y) :
    (x:Int, y:Int) :
      println("Both integers")
    (x:String, y:String) :
      println("Both strings")
    (x:Char, y:Char) :
      println("Both chars")
    (x:Int, y:String) :
      println("Int and String")
    (x:Char, y:Int) :
      println("Char and Int")
    (x:String, y:Char) :
      println("String and Char")
    (x:Int, y:Char) :
      println("Int and Char")
    (x, y) :
      println("Default case")
      println("x is %_" % [object-type(x)])
      println("y is %_" % [object-type(y)])

defn infinite-loop () -> False :
  println("=== Infinite loop ===")
  for i in 0 to false do :
    println("=== Infinite Loop Iteration %_ ===" % [i])
  false

defn main () :
  ;Step over these to lines to show stdout and stderr redirection
  println("=== Hello world ===")
  println(STANDARD-ERROR-STREAM, "Hello from error stream");

  ;Step in this function call
  f0(10)
  ;Step over this function call
  f0(11)

  ;Step over this line to skip the loop
  for i in 0 to 5 do :
    println("=== Iteration %_ ===" % [i])
    test(i)
    GLOBAL-B = GLOBAL-B * 10
    GLOBAL-H = cons(GLOBAL-B, GLOBAL-H)
  ;Inspect GLOBAL-H linked list here

  ;Step in this coroutine test
  coroutine-test()

  ;Set a breakpoint at 'match' and continue
  for i in 0 to 20 do :
    random-selection-test()

  ;Continue, let this loop run for a while, then pause.
  infinite-loop()
  println("=== FINISHED ===")

main()
