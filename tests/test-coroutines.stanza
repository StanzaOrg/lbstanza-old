#use-added-syntax(tests)
defpackage stz/test-coroutines :
  import core
  import collections

;Let-var needs to restore current value of variable.
deftest coroutine-01 :
  var x:String = "Default X"

  val gen = generate<String> :
    let-var x = "Generator X" :
      #ASSERT(x == "Generator X")
      yield("Hello")
      #ASSERT(x == "Generator X")
      yield("My")
      #ASSERT(x == "Generator X")
      yield("World")

  #ASSERT(x == "Default X")
  #ASSERT(next(gen) == "Hello")
  #ASSERT(x == "Default X")
  x = "Changed X"
  #ASSERT(x == "Changed X")
  #ASSERT(next(gen) == "My")
  #ASSERT(x == "Changed X")
  #ASSERT(next(gen) == "World")
  #ASSERT(x == "Changed X")

;Finally needs to execute.
deftest coroutine-02 :
  val out = Vector<String>()
  
  val co = Coroutine<False,Int> $ fn (co, x0) :
    try :
      try :
        try :
          suspend(co, 0)
          suspend(co, 1)
          suspend(co, 2)
          3
        finally :
          add(out, "A")
      finally :
        add(out, "B")
    finally :
      add(out, "C")
    
  #ASSERT(empty?(out))
  #ASSERT(resume(co,false) == 0)
  #ASSERT(empty?(out))
  #ASSERT(resume(co,false) == 1)
  #ASSERT(empty?(out))
  #ASSERT(resume(co,false) == 2)
  #ASSERT(empty?(out))
  #ASSERT(resume(co,false) == 3)
  #ASSERT(to-tuple(out) == ["A" "B" "C"] )

;Finally needs to execute.
deftest coroutine-03 :
  val out = Vector<String>()
  
  val co = Coroutine<False,Int> $ fn (co, x0) :
    try :
      try :
        try :
          suspend(co, 0)
          suspend(co, 1)
          suspend(co, 2)
          3
        finally :
          add(out, "A")
      finally :
        add(out, "B")
    finally :
      add(out, "C")
    
  #ASSERT(empty?(out))
  #ASSERT(resume(co,false) == 0)
  #ASSERT(empty?(out))
  #ASSERT(resume(co,false) == 1)
  #ASSERT(empty?(out))
  close(co)
  #ASSERT(to-tuple(out) == ["A" "B" "C"] )

;Finally needs to execute.
deftest coroutine-04 :
  val out = Vector<String>()
  
  val co = Coroutine<False,Int> $ fn (co, x0) :
    try :
      try :
        try :
          suspend(co, 0)
          suspend(co, 1)
          suspend(co, 2)
          3
        finally :
          add(out, "A")
          throw(Exception("Exception in Finally"))
      finally :
        add(out, "B")
    finally :
      add(out, "C")
    
  #ASSERT(empty?(out))
  #ASSERT(resume(co,false) == 0)
  #ASSERT(empty?(out))
  #ASSERT(resume(co,false) == 1)
  #ASSERT(empty?(out))
  try :
    close(co)
  catch (e) :
    false
  #ASSERT(to-tuple(out) == ["A" "B" "C"] )

deftest coroutine-05 :

  defn wrap (body:() -> ?, name:String, exit?:True|False) :
    dynamic-wind(
      fn () :
        println("%_-enter" % [name])
      body
      fn () :
        println("%_-exit" % [name])
        if exit? :
          println("EXITING OUT %_-exit" % [name])
          throw(Exception("EXIT")))

  val gen = generate<String> :
    try :
      yield("Hello")
      yield("This")
      yield("Is")
      yield("Dog")      
    catch (e) :
      false

  try :
    #ASSERT(next(gen) == "Hello")
  catch (e) :
    false

  try :
    within wrap("D", true) :
      #ASSERT(next(gen) == "This")
  catch (e) :
    false

  #ASSERT(next(gen) == "Is")
  #ASSERT(next(gen) == "Dog")

deftest coroutine-06 :
  defn func () :
    try :
      try :
        throw(Exception("Exception A"))
      finally :
        throw(Exception("Exception B"))
    catch (e) :
      #ASSERT(to-string(e) == "Exception B")
      throw(Exception("Exception C: %_" % [e]))

  try :
    func()
  catch (e) :
    #ASSERT(to-string(e) == "Exception C: Exception B")
  
deftest coroutine-07 :
  var x:String = "Default X"

  val gen = generate<String> :
    let-var x = "Generator X" :
      yield(x)
    yield(x)
    let-var x = "Generator X" :
      yield(x)

  #ASSERT(x == "Default X")
  #ASSERT(next(gen) == "Generator X")
  #ASSERT(x == "Default X")
  #ASSERT(next(gen) == "Default X")
  #ASSERT(x == "Default X")
  #ASSERT(next(gen) == "Generator X")
  #ASSERT(x == "Default X")

deftest coroutine-08 :

  var STEPS:Seq<String>
  
  defn step (s:String) :
    println(s)
    #ASSERT(s == next(STEPS))

  val cpu = generate<String> :
  
    defn main () :
      ;Layer 1
      dynamic-wind(
        fn () :
          step("L1: IN")
        fn () :
          ;Layer 2
          dynamic-wind(
            fn () :
              step("L2: IN")
            fn () :
              ;Layer 3
              step("L2: A")
              yield("A")
              step("L2: B")
              yield("B")
              step("L2: C")
              yield("C")
              step("L2: D")
            fn () :
              step("L2: OUT"))
        fn () :
          step("L1: OUT"))

    main()

  STEPS = to-seq $ [
    "L1: IN"
    "L2: IN"
    "L2: A"
    "L2: OUT"
    "L1: OUT"
    "A"
    "L1: IN"
    "L2: IN"
    "L2: B"
    "L2: OUT"
    "L1: OUT"
    "B"
    "L1: IN"
    "L2: IN"
    "L2: C"
    "L2: OUT"
    "L1: OUT"
    "C"
    "L1: IN"
    "L2: IN"
    "L2: D"
    "L2: OUT"
    "L1: OUT"]
  do(step, cpu)


deftest coroutine-09 :
  var STEPS:Seq<String>
  
  defn step (s:String) :
    println(s)
    #ASSERT(s == next(STEPS))

  val cpu = generate<String> :

    defn main () :

      ;Layer 1
      dynamic-wind(
        fn () :
          step("L1: IN")
        fn () :
          ;Layer 2
          dynamic-wind(
            fn () :
              step("L2: IN")
            fn () :          
              ;Layer 3
              dynamic-wind(
                fn () :
                  step("L3: IN")
                  subroutine()
                fn () :          
                  ;Layer 4
                  dynamic-wind(
                    fn () :
                      step("L4: IN")
                    fn () :          
                      step("L4: A")
                      yield("> MAIN A")
                      step("L4: B")
                      yield("> MAIN B")
                      step("L4: C")
                      yield("> MAIN C")
                      step("L4: D")
                    fn () :
                      step("L4: OUT"))
                fn () :
                  step("L3: OUT")
                  subroutine())
            fn () :
              step("L2: OUT"))
        fn () :
          step("L1: OUT"))

    defn subroutine () :
      dynamic-wind(
        fn () :
          step("  SR L1: IN")
        fn () :
          dynamic-wind(
            fn () :
              step("  SR L2: IN")
            fn () :
              step("  SR: A")
              yield("> SR A")
              step("  SR: B")
              yield("> SR B")
              step("  SR: C")
            fn () :
              step("  SR L2: OUT"))          
        fn () :
          step("  SR L1: OUT"))

    main()

  STEPS = to-seq $ [
    "L1: IN"
    "L2: IN"
    "L3: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: A"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR A"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: B"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR B"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: C"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L4: IN"
    "L4: A"
    "L4: OUT"
    "L3: OUT"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: A"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR A"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: B"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR B"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: C"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> MAIN A"
    "L1: IN"
    "L2: IN"
    "L3: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: A"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR A"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: B"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR B"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: C"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L4: IN"
    "L4: B"
    "L4: OUT"
    "L3: OUT"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: A"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR A"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: B"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR B"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: C"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> MAIN B"
    "L1: IN"
    "L2: IN"
    "L3: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: A"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR A"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: B"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR B"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: C"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L4: IN"
    "L4: C"
    "L4: OUT"
    "L3: OUT"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: A"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR A"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: B"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR B"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: C"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> MAIN C"
    "L1: IN"
    "L2: IN"
    "L3: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: A"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR A"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: B"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR B"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: C"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L4: IN"
    "L4: D"
    "L4: OUT"
    "L3: OUT"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: A"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR A"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: B"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"
    "> SR B"
    "L1: IN"
    "L2: IN"
    "  SR L1: IN"
    "  SR L2: IN"
    "  SR: C"
    "  SR L2: OUT"
    "  SR L1: OUT"
    "L2: OUT"
    "L1: OUT"]
  do(step, cpu)

;Does a finally block execute in the right dynamic environment?
deftest coroutine-10 :

  var X:String = "Default X"

  val gen = generate<Int> :
    let-var X = "Generator X" :
      try :
        yield(0)
        yield(1)
        yield(2)
      finally :
        println("Executing finally")
        #ASSERT(X == "Generator X")

  #ASSERT(next(gen) == 0)
  #ASSERT(next(gen) == 1)
  free(gen)
  #ASSERT(X == "Default X")