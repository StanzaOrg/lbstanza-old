defpackage test-db :
  import core
  import collections
  import stz/defs-db
  import stz/defs-db-serializer

let :
  val filename = command-line-arguments()[1]
  val db = deserialize-definitions-database(FileInputStream(filename))
  defn print-list (name:String, list:Collection):
    println("===== %_ =====" % [name])
    within indented() :
      do(println, list)

  print-list("Reserved Words", reserved-words $ db)
  val defs = definitions(db) ; HashTable<String, List<IDefinitionsRecord>>
  defn items-of (src-kind:SrcDefinitionKind): 
    to-hashtable<String, Tuple<FileInfo>> $ 
      for kv in defs seq? : 
        val defs = 
          to-tuple $ 
            seq(file-info, filter({kind(_) == src-kind}, value(kv)))
        if empty?(defs) : 
          None()
        else : One $
          to-string(key(kv)) => defs 
        
  val possible-kinds = [
    SrcDefUnknown, 
    SrcDefMulti, 
    SrcDefMethod, 
    SrcDefFunction, 
    SrcDefType, 
    SrcDefPackage,
    SrcDefVariable,
  ]

  for kind in  possible-kinds do : 
    print-list(to-string $ "%_" % [kind], items-of(kind))