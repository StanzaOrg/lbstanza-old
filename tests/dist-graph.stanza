defpackage dist-graph :
   import core
   import collections
   import reader
   import stz/parser

;============================================================
;================ Structure Definition ======================
;============================================================

deftype GraphComm
defstruct DefComm <: GraphComm :
   n: Int
defstruct EdgeComm <: GraphComm :
   src: Int
   dst: Int

defstruct Import :
   name: Symbol
   bindings: List<KeyValue<Int,Int>>

defstruct GraphPkg :
   name: Symbol
   imports: List<Import>
   comms: List<GraphComm>

defstruct GraphProg :
   comms: List<GraphComm>

;============================================================
;===================== Printing =============================
;============================================================

defmethod print (o:OutputStream, c:GraphComm) :
   print{o, _} $ match(c) :
      (c:DefComm) : "def %_" % [n(c)]
      (c:EdgeComm) : "%_ => %_" % [src(c), dst(c)]

defmethod print (o:OutputStream, p:GraphProg) :
   print(o, "prog:")
   for o in o do-indented :
      for c in comms(p) do :
         print(o, "\n%_" % [c])

defmethod print (o:OutputStream, i:Import) :
   print(o, "import %_:" % [name(i)])
   for o in o do-indented :
      for e in bindings(i) do :
         val [k, v] = [key(e), value(e)]
         print(o, "\n%_ as %_" % [k, v])

defmethod print (o:OutputStream, p:GraphPkg) :
   print(o, "pkg:")
   for o in o do-indented :
      for i in imports(p) do :
         print(o, "\n%_" % [i])
      for c in comms(p) do :
         print(o, "\n%_" % [c])

;============================================================
;===================== Flattening ===========================
;============================================================

val ID-COUNTER = to-seq(0 to false)
val RENAME-TABLE = HashTable<[Symbol,Int], Int>()

defn rename (p:GraphPkg) :
   ;Rename imports
   for i in imports(p) do :
      for e in bindings(i) do :
         val [k,v] = [key(e), value(e)]
         val id = RENAME-TABLE[[name(i), k]]
         RENAME-TABLE[[name(p), v]] = id
   ;Rename commands
   defn rename (n:Int) :
      if not key?(RENAME-TABLE, [name(p), n]) :
         RENAME-TABLE[[name(p), n]] = next(ID-COUNTER)
      RENAME-TABLE[[name(p), n]]
   for c in comms(p) map :
      match(c) :
         (c:DefComm) : DefComm(rename(n(c)))
         (c:EdgeComm) : EdgeComm(rename(src(c)), rename(dst(c)))
         
defn flatten (pkgs:List<GraphPkg>) -> GraphProg :
   GraphProg(seq-append(rename, pkgs))

;============================================================
;================== Serialization ===========================
;============================================================

defn save-pkg (p:GraphPkg) :
   val file = FileOutputStream(to-string("%_.pkg" % [name(p)]))
   try : serialize(file, p)
   catch (e:Exception) : close(file)

defn load-pkg (name:Symbol) :
   val file = FileInputStream(to-string("%_.pkg" % [name]))
   try :
      deserialize-pkg(file)
   catch (e:Exception) :
      close(file)
      fatal("Could not load %_." % [file])

#with-overlay(stz/serializer-lang) :
   defserializer (out:FileOutputStream, in:FileInputStream) :
      defunion pkg (GraphPkg) :
         GraphPkg: (name:symbol, imports:list(import), comms:list(comm))

      defunion import (Import) :
         Import: (name:symbol, bindings:list(kv))
         
      defunion kv (KeyValue<Int,Int>) :
         KeyValue : (key:int, value:int)
         
      defunion comm (GraphComm) :
         DefComm: (n:int)
         EdgeComm: (src:int, dst:int)

      reader defn read-list<?T> (f: () -> ?T) :
         val n = read-int()
         to-list(repeatedly(f, n))
         
      writer defn write-list<?T> (f: T -> False, xs:List<?T>) :
         write-int(length(xs))
         do(f, xs)

      defatom int (x:Int) :
         writer :
            put(out, x)
         reader :
            match(get-int(in)) :
               (x:Int) : x
               (x:False) : throw(FileReadException())      

      defatom char (x:Char) :
         writer :
            print(out, x)
         reader :
            match(get-char(in)) :
               (x:Char) : x
               (x:False) : throw(FileReadException())

      defatom string (x:String) :
         writer :
            write-int(length(x))
            print(out, x)
         reader :
            val n = read-int()
            String(repeatedly(read-char, n))

      defatom symbol (x:Symbol) :
         writer : write-string(to-string(x))
         reader : to-symbol(read-string())
         
;============================================================
;==================== Parser ================================
;============================================================

defsyntax graph :
   defn uw (x) : unwrap-token(x)

   defrule :
      sym = (?x) when uw(x) is Symbol : uw(x)
      int = (?x) when uw(x) is Int : uw(x)

      comm = (?s:#int => ?d:#int) : EdgeComm(s,d)
      comm = (def ?x:#int) : DefComm(x)
      
      import = (import ?name:#sym :
                  (?ks:#int as ?vs:#int) @...) :
         Import(name, map(KeyValue, ks, vs))
      
      pkg = (pkg ?name:#sym :
                ?imports:#import ...
                ?comms:#comm ...) :
         GraphPkg(name, imports, comms)

defn parse-pkgs (filename:String) -> List<GraphPkg> :
   with-syntax(graph) :
      match-syntax(read-file(filename)) :
         (?pkgs:#pkg ...) : pkgs

;============================================================
;====================== Driver ==============================
;============================================================

defn main () :
   val cargs = command-line-arguments()
   switch {cargs[1] == _} :
      "write" :
         val pkgs = parse-pkgs(cargs[2])
         do(save-pkg, pkgs)
      "read" :
         val names = seq(to-symbol, cargs[2 to false])
         
         println("===== Input =====")
         val pkgs = to-list(seq(load-pkg, names))
         println(pkgs)

         println("===== Flattened =====")
         val flattened = flatten(pkgs)
         println(flattened)

main()