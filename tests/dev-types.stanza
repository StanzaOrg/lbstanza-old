defpackage stz-test-suite/dev-types :
  import core
  import collections
  import stz/type-solver
  import stz/type-hierarchy
  import stz/types
  import stz-test-suite/test-tools
  import stz-test-suite/type-reader

;============================================================
;=================== Execution ==============================
;============================================================

public defn execute (prog:TestTypeProgram) :
  val hier = make-hierarchy(prog)
  for stmt in stmts(prog) do :
    match(stmt) :
      (stmt:Capture) :
        println("Capture Test: %_" % [stmt])
        for arg in args(stmt) do :
          val sresult = capture-search(arg as Int, CapRight, a(stmt), b(stmt), hier)
          val simp = simplify(sresult, true)
          println("Capturing V%_" % [arg])
          println(Indented(sresult))
          println("Simplifies to:")
          println(Indented(simp))
          println("")        
      (stmt:Subtype) :
        val sresult = subtype-search(a(stmt), b(stmt), hier)
        val simp = simplify(sresult, false)
        println("Subtype Test: %_" % [stmt])
        println(Indented(sresult))
        println("Simplifies to:")
        println(Indented(simp))
        println("")

;Create the hierarchy of the program.
defn make-hierarchy (prog:TestTypeProgram) -> TypeHierarchy :
  ;Populate special table.
  val special-table = IntTable<SpecialType>()
  for r in hierarchy(prog) do :
    val name = table(names(prog))[n(r)]
    switch(name) :
      `Tuple : special-table[n(r)] = CoreTuple
      else : false
      
  ;Create the type relations.
  val relations = for r in hierarchy(prog) map :
    val child = child(r) as TOf
    val child-args = map(n, args(child) as Tuple<TVar>)
    TypeRelation(n(child), get?(special-table,n(child)), child-args, parent(r))

  ;Return the hierarchy.
  TypeHierarchy(relations)

;============================================================
;==================== Main Launcher =========================
;============================================================
  
public defn main () :
  val file = data-file("type1.txt")
  val prog = read-test-type-program(file)
  println(prog)
  execute(prog)

within (package,sig) = set-stack-trace-filter() :
  package != `core
main()