;============================================================
;===================== Mini Core ============================
;============================================================

defpackage core

public deftype Byte
public deftype Char
public deftype Int
public deftype Long
public deftype Float
public deftype Double
public deftype String
public deftype Symbol
public deftype List
public deftype True
public deftype False

public deftype Seqable<T>

public deftype Tuple<T> <: Seqable<T>

public deftype Array<T> <: Seqable<T>

public defn Array<T> () -> Array<T> :
  fatal()

public defn plus (a:Int, b:Int) -> Int :
  fatal()

public defn fatal () -> Void :
  3 as Void

public defn get<?T> (a:Array<?T>, i:Int) -> T :
  fatal()

;============================================================
;===================== Mini Prog ============================
;============================================================

defpackage myprog :
  import core  

defn myfunction (x:Int) -> String :
  val xs = Array<Int>(10,x)
  xs[0] + 1

defn myfunc (x, y) :
  x + y

myfunction(7)