;============================================================
;===================== Mini Core ============================
;============================================================

defpackage core

public deftype Byte
public deftype Char
public deftype Int
public deftype Long
public deftype Float
public deftype Double
public deftype String
public deftype Symbol
public deftype List<T>
public deftype True
public deftype False
public deftype Maybe<T>
public deftype None <: Maybe<Void>
public deftype One<T> <: Maybe<T>
public deftype Stack
public deftype Fn
public deftype Type
public deftype Box
public deftype StackFrame
public deftype Unique

public defn fatal () -> Void :
  3 as Void

public deftype Seqable<T>

public deftype Seq<T> <: Seqable<T>

public deftype Tuple<T> <: Seqable<T>

public deftype Array<T> <: Seqable<T>

public defmulti Array<T> (n:Int) -> Array<T>

public defmulti Array<T> (n:Int, x0:T) -> Array<T>

public defmulti plus (a:Int, b:Int) -> Int

public defmulti plus (a:Double, b:Double) -> Double

public defmulti plus (a:String, b:String) -> String

public defmulti plus (a:Int, b:Double) -> Double

public defmulti get<?T> (a:Array<?T>, i:Int) -> T

public defmulti seq<?T,?S> (f:T -> ?S, xs:Seqable<?T>) -> Seq<S>

public defmulti length (s:String) -> Int

public defmulti length (s:Array) -> Int

public defmulti length (s:Symbol) -> Int

public defmulti reduce<?T,?S,?U> (f:(S|U,T) -> ?U, x0:?S, xs:Seqable<?T>) -> S|U

public defmulti reduce<?T,?U> (f:(T|U,T) -> ?U, xs:Seqable<?T>) -> T|U

public defmulti do<?T> (f:T -> ?, xs:Seqable<?T>) -> False

public defmulti println (x) -> False

public defmulti LabeledScope<T> (thunk: (T -> Void) -> T) -> T

;============================================================
;===================== Mini Prog ============================
;============================================================

defpackage myprog :
  import core  

defn f<?T> (x:?T) : x
  
defn main () :
  val h = f
  h("String")
  val x:(Int -> Int)|(String -> String) = fn (y) : y
  x as Char
  x("String")