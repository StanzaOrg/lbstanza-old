deftype Num
deftype Int <: Num
deftype String
deftype Seqable<T>
deftype Collection<T> <: Seqable<T>
deftype Tuple<T> <: Collection<T>
deftype Array<T> <: Collection<T>

subtype Int <: Int

subtype Array<Int> <: Array<Int>

subtype Array<Int> & String <: Array<Int>

subtype Array<Int> <: Seqable<Int|String>

subtype Int -> Num <: Int -> Int

subtype Int -> Num <: Int -> Num

subtype Int -> Num <: ?

subtype [Int, Int] <: String

subtype [Int, Num] <: Seqable<Num>

subtype [Int, Num] <: Seqable<Int>

subtype [Int, Int] <: Seqable<String>

subtype Int <: $a

subtype Int <: Array<$a>

subtype Int <: $a | Int

capture(X) $a <: Array<?X> | ?

capture(X) $a&Num <: Array<?X> | Num

;capture(U) Int <: Array<?U>
;
;capture(T) Array<Int> <: Seqable<?T>
;
;capture(T) ? <: Int|?T
;
;capture(T) ? <: ?|?T
;
;capture(T) Int <: Num|?T
;
;capture(T) Array<Int> <: Seqable<Num>|?T
;
;capture(T) Array<Int> <: Seqable<String>|?T
;
;capture(T) [Int, String] <: Seqable<?T>
;
;capture(T) [Int, Int, String] <: Seqable<?T>
;
;capture(T) Array<Int> <: Seqable<?T&Num>
;
;capture(T) Array<Int> <: Seqable<?T&String>

