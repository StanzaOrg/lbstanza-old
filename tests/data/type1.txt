deftype Num
deftype Int <: Num
deftype Double <: Num
deftype String
deftype Seqable<T>
deftype Collection<T> <: Seqable<T>
deftype Tuple<T> <: Collection<T>
deftype Array<T> <: Collection<T>
deftype Exp<T>

subtype Int <: Int

subtype Array<Int> <: Array<Int>

subtype Array<Int> & String <: Array<Int>

subtype Array<Int> <: Seqable<Int|String>

subtype Int -> Num <: Int -> Int

subtype Int -> Num <: Int -> Num

subtype Int -> Num <: ?

subtype [Int, Int] <: String

subtype [Int, Num] <: Seqable<Num>

subtype [Int, Num] <: Seqable<Int>

subtype [Int, Int] <: Seqable<String>

;subtype Int <: $a
;
;subtype Int <: Array<$a>
;
;subtype Int <: $a | Int
;
;capture(X) $a <: Array<?X> | ?
;
;capture(X) $a&Num <: Array<?X> | Num

capture(U) Int <: Array<?U>

capture(T) Array<Int> <: Seqable<?T>

capture(T) ? <: Int|?T

capture(T) ? <: ?|?T

capture(T) Int <: Num|?T

capture(T) Array<Int> <: Seqable<Num>|?T

capture(T) Array<Int> <: Seqable<String>|?T

capture(T) [Int, String] <: Seqable<?T>

capture(T) [Int, Int, String] <: Seqable<?T>

capture(T) Array<Int> <: Seqable<?T&Num>

capture(T) Array<Int> <: Seqable<?T&String>

infer [Int, Num, String] <: tuple-slot(0 of 3)

infer [Int, Num, String] <: tuple-slot(1 of 3)

infer [Int, Num, String] <: tuple-slot(2 of 3)

infer [Int, Num, String] <: tuple-slot(1 of 2)

infer [Int, Num]|[String, Num] <: tuple-slot(0 of 2)

infer [Int, Num]&[String, Num] <: tuple-slot(0 of 2)

infer [Int, Num]|? <: tuple-slot(1 of 2)

infer ? <: tuple-slot(1 of 2)

infer Int -> Int <: arg(0 of 1)

infer (Int -> Int) | (String -> Int) <: arg(0 of 1)

infer Int|String -> Int <: arg(0 of 1)

infer (Int -> Int) & ((String, String) -> Int) <: arg(0 of 1)

infer (Int -> Int) & ((String, String) -> Int) <: arg(0 of 2)

infer arg(0 of 1) <: Int -> Int

infer arg(0 of 1) <: (Int -> Int) | (String -> Int)

infer arg(0 of 1) <: (Int -> Int) & ((String, String) -> Int)

infer arg(0 of 1) <: (Int -> Int) & ((String, String) -> Int)

infer arg(0 of 2) <: (Int -> Int)

infer arg(0 of 1) <: (Int -> Int) | ((String, String) -> Int)

infer arg(0 of 2) <: (Int -> Int) | ((String, String) -> Int)

;Capture from tuple.
solve :
  capture($T) [Int,Int] <: Seqable<?$T>

;seq(to-string, int-tuple)
solve :
  capture($T,$S) [Int -> String, [Int,Int]] <: [$T -> ?$S, Seqable<?$T>]


;val xs = seq(to-string, int-tuple)
;seq(to-int, xs)
solve :
  capture($T,$S) [Int -> String, [Int,Int]] <: [$T -> ?$S, Seqable<?$T>]
  var $XS = Seqable<$S>
  capture($T2,$S2) [String -> Int, $XS] <: [$T2 -> ?$S2, Seqable<?$T2>]
  var $YS = Seqable<$S2>

;TRY:
;  map(fn (x) : make-tuple(x), make-tuple(int))
;ADDED VARIABLES:
;  map<$T,$S>(fn (x:$X) -> $Y : make-tuple(x) (EXP: $Z), make-tuple(int))
solve :
  ;Call to map
  capture($T,$S) [$X -> $Y, Tuple<Int>] <: [$T -> ?$S, Seqable<?$T>]
  ;Inference of X
  infer $X arg(0 of 1) <: $Z
  ;Return type of closure
  var $Y = Tuple<$X>
  ;Expected type Z (first argument of map function)
  infer $Z ($T -> $S, Seqable<$T>) -> Seqable<$S>  <:  arg(0 of 2)

;TRY:
;  map(plus, array(int))
;    plus: int -> int
;    plus: double -> double
;ADDED VARIABLES:
;  map<$T,$S>(plus:$P (EXP: $EP), array(int))
;    plus: int -> int
;    plus: double -> double
solve :
  ;Call to map
  capture($T,$S) [$P, Tuple<Int>] <: [$T -> ?$S, Seqable<?$T>]
  ;Select overload
  overload($P, sel: $Sel) (Int -> Int, Double -> Double) <: $EP
  ;Expected type EP (first argument of map function)
  infer $EP ($T -> $S, Seqable<$T>) -> Seqable<$S> <: arg(0 of 2)

;TRY:
;  map(plus, array(int|double))
;    plus: int -> int
;    plus: double -> double
;ADDED VARIABLES:
;  map<$T,$S>(plus:$P (EXP: $EP), array(int|double))
;    plus: int -> int
;    plus: double -> double
solve :
  ;Call to map
  capture($T,$S) [$P, Tuple<Int|Double>] <: [$T -> ?$S, Seqable<?$T>]
  ;Select overload
  overload($P, sel: $Sel) (Int -> Int, Double -> Double) <: $EP
  ;Expected type EP (first argument of map function)
  infer $EP ($T -> $S, Seqable<$T>) -> Seqable<$S> <: arg(0 of 2)

;TRY:
;  map(plus, tuple(int|double))
;    plus: int -> int
;    plus: double -> double
;    map: <T,S> (T -> S, Seqable<T>)
;    map: <T,S> (T -> S, Exp<T>)
;ADDED VARIABLES:
;  $M(plus:$P (EXP: $EP), tuple(int|double))
;    plus: int -> int
;    plus: double -> double
;    map: <$T1,$S1> ($T1 -> $S1, Seqable<$T1>)
;    map: <$T2,$S2> ($T2 -> $S2, Exp<$T2>)
solve :
  ;Call to map1
  capture($T1,$S1) [$P, Tuple<Int|Double>] <: [$T1 -> ?$S1, Seqable<?$T1>]
  ;Call to map2
  capture($T2,$S2) [$P, Tuple<Int|Double>] <: [$T2 -> ?$S2, Exp<?$T2>]
  ;Select overload
  overload($M, sel: $O1) (
    ($T1 -> $S1, Seqable<$T1>) -> Seqable<$S1>
    ($T2 -> $S2, Exp<$T2>) -> Exp<$S2>) <:
    ($P, Tuple<Int|Double>) -> $R
  infer $R $M <: ret(2)
  ;Expected type EP (first argument of map function)
  infer $EP $M <: arg(0 of 2)
  ;Select overload
  overload($P, sel: $O2) (Int -> Int, Double -> Double) <: $EP


;TRICKY CASE: X cannot be inferred because it is the argument type
;of an overloaded function. The overload cannot be resolved because
;the argument type is needed.
;TRY:
;     f: (x:A, y:B) -> C
;     map: <?T,?S> (f:T -> ?S, x:?T) -> S
;     map: <?T,?S> (f:T -> ?S, x:Seqable<?T>) -> Seqable<S>
;     x: A
;     y: List<B>
;     map(f{x, _}, y)
;ADDED VARIABLES:
;    f: (STRING, INT) -> NUM
;    map1: <$T1,$S1> ($T1 -> $S1, Seqable<$T1>) -> Seqable<$S1>
;    map2: <$T2,$S2> ($T2 -> $S2, $T2) -> $S2
;    map(f{STRING, _:$X} -> $XR (EXP: $EF), y:Tuple<INT>)

solve :
  ;Call to map1
  capture($T1,$S1) [$X -> $XR, Tuple<Int>] <: [$T1 -> ?$S1, Seqable<?$T1>]
  ;Call to map2
  capture($T2,$S2) [$X -> $XR, Tuple<Int>] <: [$T2 -> ?$S2, ?$T2]
  ;Mix M
  overload($M, sel: $O1) (
    ($T1 -> $S1, Seqable<$T1>) -> Seqable<$S1>
    ($T2 -> $S2, $T2) -> $S2) <:
    ($X -> $XR, Tuple<Int>) -> $MR
  infer $MR $M <: ret(2)
  ;Expected type EF
  infer $EF $M <: arg(0 of 2)
  ;Infer X
  infer $X arg(0 of 1) <: $EF
  infer $EXR ret(1) <: $EF
  ;Output of function.
  var $XR = Num
