deftype Num
deftype Int <: Num
deftype String
deftype Seqable<T>
deftype Collection<T> <: Seqable<T>
deftype Tuple<T> <: Collection<T>
deftype Array<T> <: Collection<T>

subtype Int <: Int

subtype Array<Int> <: Array<Int>

subtype Array<Int> & String <: Array<Int>

subtype Array<Int> <: Seqable<Int|String>

subtype Int -> Num <: Int -> Int

subtype Int -> Num <: Int -> Num

subtype Int -> Num <: ?

subtype [Int, Int] <: String

subtype [Int, Num] <: Seqable<Num>

subtype [Int, Num] <: Seqable<Int>

subtype [Int, Int] <: Seqable<String>

;capture(S, U) Int <: MyStruct<U>



;subtype Int <: MyStruct
