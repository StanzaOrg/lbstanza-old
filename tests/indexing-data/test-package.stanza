defpackage test-package :
  import core
  import collections

public defn public-fn () -> Int : 0
protected defn protected-fn () -> Int : 0
defn private-fn () -> Int : 0

public deftype PublicType
protected deftype ProtectedType
deftype PrivateType

defn takes-fn-as-arg<?T> (body: (False) -> ?T, not-named) -> T : 
  body()

defmulti my-multi (arg) -> False
defmethod my-multi (arg:Int) : 
  println("Arg is an Int")

public defn to-chunks<?T> (s:Seqable<?T>, chunk-sz:Int) -> Seq<Tuple<T>> : 
  val s* = to-seq(s)
  generate :
    while not empty?(s*) : 
      yield $ to-tuple $ 
        for (e in s*, n in 0 to chunk-sz) seq : 
          e

defn maps-equal?<?T> (lhs:?T, rhs:?T, map-functions:Tuple<(T -> Equalable)>) -> True|False :
  all?({_0(lhs) == _0(rhs)}, map-functions)

defn memoize*<T,?S> (f: (T, ((T, ?) -> S)) -> ?S) -> (T -> S) :
  val table = HashTable<T,S>()
  defn recurse (key:T, rec:((T, ?) -> S)) :
    if not key?(table, key) :
      val result = f(key, rec)
      table[key] = result
      result
    else :
      table[key]
  fn (key:T) :
    recurse(key, recurse)

defn apply<?T0, ?T1, ?T2, ?R> (f: (T0, T1, T2) -> ?R, args:[?T0, ?T1, ?T2]) -> R :
  val [a0, a1, a2] = args
  f(a0, a1, a2)
  
defn tuple-zip<?A0, ?R0, ?A1, ?R1> (f:[A0 -> ?R0, A1 -> ?R1], args:[?A0, ?A1]) -> [R0, R1] :
  val [f0, f1] = f
  val [a0, a1] = args
  [f0(a0), f1(a1)]

doc: "A public struct."
public defstruct PublicStruct