defpackage stz/test-constant-fold-gen :
  import core
  import collections

;============================================================
;================= Expression Structure =====================
;============================================================

defenum Operand :
  RegularNum
  Variable
  ZeroNum
  OneNum
  NanNum

defenum OperandType :
  LSByteType
  LSIntType
  LSLongType
  LSFloatType
  LSDoubleType
  IntType

deftype Op <: Hashable&Equalable
defenum HiOp <: Op :
  IntAddOp
  IntSubOp
  IntMulOp
  IntDivOp
  IntModOp
  IntAndOp
  IntOrOp
  IntXorOp
  IntShlOp
  IntShrOp
  IntAshrOp
  IntLtOp
  IntGtOp
  IntLeOp
  IntGeOp
  RefEqOp
  RefNeOp
  IntNotOp
  IntNegOp
defenum LoOp <: Op :
  AddOp
  SubOp
  MulOp
  DivOp
  ModOp
  AndOp
  OrOp
  XorOp
  ShlOp
  ShrOp
  AshrOp
  EqOp
  NeOp
  LtOp
  GtOp
  LeOp
  GeOp
  NotOp
  NegOp

deftype Case
defmulti prevent-run? (c:Case) -> True|False
defmulti sub-prevent-run? (c:Case, r:True|False) -> Case

defstruct BinaryCase <: Case :
  op:Op
  a:Operand
  atype:OperandType
  b:Operand
  btype:OperandType
  prevent-run?:True|False with: (as-method => true, updater => sub-prevent-run?)

defstruct UnaryCase <: Case :
  op:Op
  a:Operand
  atype:OperandType
  prevent-run?:True|False with: (as-method => true, updater => sub-prevent-run?)

;============================================================
;==================== Case Generation =======================
;============================================================

defn generate-cases () -> Vector<Case> :
  val cases = Vector<Case>()
  defn emit (c:Case) : add(cases,c)

  for op in [IntAddOp, IntSubOp, IntMulOp, IntDivOp, IntModOp, IntAndOp,
             IntOrOp, IntXorOp, IntShlOp, IntShrOp, IntAshrOp,
             IntLtOp, IntGtOp, IntLeOp, IntGeOp, RefEqOp, RefNeOp] do :
    emit $ BinaryCase(op, RegularNum, IntType, RegularNum, IntType, false)
    emit $ BinaryCase(op, Variable, IntType, Variable, IntType, false)
    emit $ BinaryCase(op, Variable, IntType, RegularNum, IntType, false)
    emit $ BinaryCase(op, RegularNum, IntType, Variable, IntType, false)
    emit $ BinaryCase(op, ZeroNum, IntType, Variable, IntType, false)
    emit $ BinaryCase(op, OneNum, IntType, Variable, IntType, false)
    emit $ BinaryCase(op, Variable, IntType, ZeroNum, IntType, op is IntDivOp|IntModOp)
    emit $ BinaryCase(op, Variable, IntType, OneNum, IntType, false)

  for op in [AddOp, SubOp, MulOp, DivOp, ModOp, AndOp, OrOp, XorOp, ShlOp,
             ShrOp, AshrOp, EqOp, NeOp, LtOp, GtOp, LeOp, GeOp] do :
    val types = match(op) :
      (op:AddOp|SubOp|MulOp|EqOp|NeOp|LtOp|GtOp|LeOp|GeOp) : "BILFD"
      (op:DivOp) : "ILFD"
      (op:AndOp|OrOp|XorOp|ShlOp|ShrOp) : "BIL"
      (op:ModOp|AshrOp) : "IL"
    for letter in types do :
      val type = letter-to-type(letter)
      emit $ BinaryCase(op, RegularNum, type, RegularNum, type, false)
      emit $ BinaryCase(op, Variable, type, Variable, type, false)
      emit $ BinaryCase(op, Variable, type, RegularNum, type, false)
      emit $ BinaryCase(op, RegularNum, type, Variable, type, false)
      emit $ BinaryCase(op, ZeroNum, type, Variable, type, false)
      emit $ BinaryCase(op, OneNum, type, Variable, type, false)
      emit $ BinaryCase(op, Variable, type, ZeroNum, type, op is DivOp|ModOp)
      emit $ BinaryCase(op, Variable, type, OneNum, type, false)
      if type is LSFloatType|LSDoubleType :
        emit $ BinaryCase(op, ZeroNum, type, NanNum, type, false)
        emit $ BinaryCase(op, OneNum, type, NanNum, type, false)
        emit $ BinaryCase(op, NanNum, type, ZeroNum, type, op is DivOp|ModOp)
        emit $ BinaryCase(op, NanNum, type, OneNum, type, false)

  for op in [IntNotOp, IntNegOp] do :
    emit $ UnaryCase(op, RegularNum, IntType, false)
    emit $ UnaryCase(op, Variable, IntType, false)

  for op in [NotOp, NegOp] do :
    val types = match(op) :
      (op:NotOp) : "BIL"
      (op:NegOp) : "ILFD"
    for letter in types do :
      val type = letter-to-type(letter)
      emit $ UnaryCase(op, RegularNum, type, false)
      emit $ UnaryCase(op, Variable, type, false)

  cases

;============================================================
;===================== Code Generation ======================
;============================================================

val PREAMBLE = trim $ \<S>
defpackage stz/test-constant-fold :
  import core
  import collections
<S>

defn generate-code (cases:Vector<Case>) :
  defn op-str (op:Op) :
    switch(op) :
      IntAddOp: "add"
      IntSubOp: "sub"
      IntMulOp: "mul"
      IntDivOp: "div"
      IntModOp: "mod"
      IntAndOp: "and"
      IntOrOp: "or"
      IntXorOp: "xor"
      IntShlOp: "shl"
      IntShrOp: "shr"
      IntAshrOp: "ashr"
      IntLtOp: "lt"
      IntGtOp: "gt"
      IntLeOp: "le"
      IntGeOp: "ge"
      RefEqOp: "eq"
      RefNeOp: "ne"
      AddOp: "add"
      SubOp: "sub"
      MulOp: "mul"
      DivOp: "div"
      ModOp: "mod"
      AndOp: "and"
      OrOp: "or"
      XorOp: "xor"
      ShlOp: "shl"
      ShrOp: "shr"
      AshrOp: "ashr"
      EqOp: "eq"
      NeOp: "ne"
      LtOp: "lt"
      GtOp: "gt"
      LeOp: "le"
      GeOp: "ge"
      IntNotOp: "not"
      IntNegOp: "neg"
      NotOp: "not"
      NegOp: "neg"

  defn gen-operand (index:Int, x:Operand, t:OperandType) :
    match(x, t) :
      ;Regular numbers
      (x:RegularNum, t:LSByteType) : "7Y" when index == 0 else "3Y"
      (x:RegularNum, t:LSIntType) : "7" when index == 0 else "3"
      (x:RegularNum, t:LSLongType) : "7L" when index == 0 else "3L"
      (x:RegularNum, t:LSFloatType) : "7.7f" when index == 0 else "3.7f"
      (x:RegularNum, t:LSDoubleType) : "7.7" when index == 0 else "3.7"
      (x:RegularNum, t:IntType) : "7" when index == 0 else "3"
      ;Zeroes
      (x:ZeroNum, t:LSByteType) : "0Y"
      (x:ZeroNum, t:LSIntType) : "0"
      (x:ZeroNum, t:LSLongType) : "0L"
      (x:ZeroNum, t:LSFloatType) : "0.0f"
      (x:ZeroNum, t:LSDoubleType) : "0.0"
      (x:ZeroNum, t:IntType) : "0"
      ;Ones
      (x:OneNum, t:LSByteType) : "1Y"
      (x:OneNum, t:LSIntType) : "1"
      (x:OneNum, t:LSLongType) : "1L"
      (x:OneNum, t:LSFloatType) : "1.0f"
      (x:OneNum, t:LSDoubleType) : "1.0"
      (x:OneNum, t:IntType) : "1"
      ;Variables
      (x:Variable, t:LSByteType) : "xbyte" when index == 0 else "ybyte"
      (x:Variable, t:LSIntType) : "xint" when index == 0 else "yint"
      (x:Variable, t:LSLongType) : "xlong" when index == 0 else "ylong"
      (x:Variable, t:LSFloatType) : "xfloat" when index == 0 else "yfloat"
      (x:Variable, t:LSDoubleType) : "xdouble" when index == 0 else "ydouble"
      (x:Variable, t:IntType) : "x" when index == 0 else "y"
      ;Nans
      (x:NanNum, t:LSFloatType) : "nanfloat"
      (x:NanNum, t:LSDoubleType) : "nandouble"

  defn gen-histanza-case (o:OutputStream, c:Case) :
    if prevent-run?(c) :
      lnprint(o, "if false :")
      gen-histanza-case(IndentedStream(o), sub-prevent-run?(c,false))
    else :
      match(c) :
        (c:BinaryCase) :
          val a-str = gen-operand(0, a(c), atype(c))
          val b-str = gen-operand(1, b(c), btype(c))
          val str = "($prim %_ %_ %_)" % [op-str(op(c)), a-str, b-str]
          lnprint(o, "println(\"%_ = %%_\" %% [%_])" % [str, str])
        (c:UnaryCase) :
          val a-str = gen-operand(0, a(c), atype(c))
          val str = "($prim %_ %_)" % [op-str(op(c)), a-str]
          lnprint(o, "println(\"%_ = %%_\" %% [%_])" % [str, str])

  defn gen-histanza-if (o:OutputStream, c:Case) :
    if prevent-run?(c) :
      lnprint(o, "if false :")
      gen-histanza-if(IndentedStream(o), sub-prevent-run?(c,false))    
    else :
      val c = c as BinaryCase
      val a-str = gen-operand(0, a(c), atype(c))
      val b-str = gen-operand(1, b(c), btype(c))
      val str = "($prim %_ %_ %_)" % [op-str(op(c)), a-str, b-str]
      lnprint(o, "println(\"IF %_\")" % [str])
      lnprint(o, "if %_ :" % [str])
      lnprint(o, "  println(true)")
      lnprint(o, "else :")
      lnprint(o, "  println(false)")        

  defn gen-lostanza-case (o:OutputStream, c:Case) :
    if prevent-run?(c) :
      lnprint(o, "if 0 :")
      gen-lostanza-case(IndentedStream(o), sub-prevent-run?(c,false))
    else :
      match(c) :
        (c:BinaryCase) :
          val a-str = gen-operand(0, a(c), atype(c))
          val b-str = gen-operand(1, b(c), btype(c))
          val str = "($ls-prim %_ %_ %_)" % [op-str(op(c)), a-str, b-str]
          val spec = printf-specifier(op(c) as LoOp, atype(c))
          lnprint(o, "call-c clib/printf(\"%_ = %_\\n\", %_)" % [str, spec, str])
        (c:UnaryCase) :
          val a-str = gen-operand(0, a(c), atype(c))
          val str = "($ls-prim %_ %_)" % [op-str(op(c)), a-str]
          val spec = printf-specifier(op(c) as LoOp, atype(c))
          lnprint(o, "call-c clib/printf(\"%_ = %_\\n\", %_)" % [str, spec, str])

  defn gen-lostanza-if (o:OutputStream, c:Case) :
    if prevent-run?(c) :
      lnprint(o, "if 0 :")
      gen-lostanza-if(IndentedStream(o), sub-prevent-run?(c,false))
    else :
      val str = match(c) :
        (c:BinaryCase) :
          val a-str = gen-operand(0, a(c), atype(c))
          val b-str = gen-operand(1, b(c), btype(c))
          "($ls-prim %_ %_ %_)" % [op-str(op(c)), a-str, b-str]
        (c:UnaryCase) :
          val a-str = gen-operand(0, a(c), atype(c))
          "($ls-prim %_ %_)" % [op-str(op(c)), a-str]
      lnprint(o, "call-c clib/printf(\"IF %_\\n\")" % [str])
      lnprint(o, "if %_ :" % [str])
      lnprint(o, "  println(true)")
      lnprint(o, "else :")
      lnprint(o, "  println(false)")
    

  new Printable :
    defmethod print (o:OutputStream, this) :
      val o2 = IndentedStream(o)
      print(o, PREAMBLE)

      ;HiStanza testing function
      lnprint(o, "defn histanza-main (x:Int, y:Int) :")
      for c in filter(histanza?,cases) do :
        gen-histanza-case(o2, c)
      for c in filter(histanza?,cases) do :
        if if-arg?(c) :
          gen-histanza-if(o2, c)
      lnprint(o2, "false")

      ;LoStanza testing function
      lnprint(o, "lostanza defn lostanza-main (xbyte:byte, xint:int, xlong:long, xfloat:float, xdouble:double,")
      lnprint(o, "                             ybyte:byte, yint:int, ylong:long, yfloat:float, ydouble:double,")
      lnprint(o, "                             nanfloat:float, nandouble:double) -> ref<False> :")
      for c in filter(lostanza?,cases) do :
        gen-lostanza-case(o2, c)
      for c in filter(lostanza?,cases) do :
        if if-arg?(c) :
          gen-lostanza-if(o2, c)
      lnprint(o2, "return false")

      ;Launch HiStanza function
      lnprint(o, "let :")
      lnprint(o2, "histanza-main(17, 3)")

      ;Launch LoStanza function
      lnprint(o, "lostanza let :")
      lnprint(o2, "val nanf = 0.0f / 0.0f")
      lnprint(o2, "val nand = 0.0 / 0.0")
      lnprint(o2, "lostanza-main(17Y, 17, 17L, 17.0f, 17.0,")
      lnprint(o2, "              3Y, 3, 3L, 3.0f, 3.0,")
      lnprint(o2, "              nanf, nand)")

;============================================================
;====================== Utilities ===========================
;============================================================

defn letter-to-type (c:Char) :
  switch(c) :
    'B' : LSByteType
    'I' : LSIntType
    'L' : LSLongType
    'F' : LSFloatType
    'D' : LSDoubleType

defn printf-specifier (op:LoOp, atype:OperandType) :
  match(op, atype) :
    (op:AddOp|SubOp|MulOp|DivOp|ModOp|AndOp|OrOp|XorOp|ShlOp|ShrOp|AshrOp|NotOp|NegOp,
     atype:LSByteType|LSIntType|LSLongType) : "%lld"
    (op:AddOp|SubOp|MulOp|DivOp|ModOp|AndOp|OrOp|XorOp|ShlOp|ShrOp|AshrOp|NegOp,
     atype:LSFloatType|LSDoubleType) : "%f"
    (op:EqOp|NeOp|LtOp|GtOp|LeOp|GeOp,
     atype:LSByteType|LSIntType|LSLongType|LSFloatType|LSDoubleType) : "%lld"

defn lostanza? (c:Case) :
  op(c as BinaryCase|UnaryCase) is LoOp

defn histanza? (c:Case) :
  op(c as BinaryCase|UnaryCase) is HiOp

defn if-arg? (c:Case) :
  match(op(c as BinaryCase|UnaryCase)) :
    (op:IntLtOp|IntGtOp|IntLeOp|IntGeOp|RefEqOp|RefNeOp|
        EqOp|NeOp|LtOp|GtOp|LeOp|GeOp) : true
    (op:AddOp|SubOp|MulOp|DivOp|ModOp|AndOp|OrOp|XorOp|
        ShlOp|ShrOp|AshrOp|NotOp|NegOp) :
      atype(c as BinaryCase|UnaryCase) is LSByteType|LSIntType|LSLongType
    (op) : false  

;============================================================
;======================= Launch =============================
;============================================================

defn main () :
  val filename = command-line-arguments()[1]
  val code = generate-code(generate-cases())
  spit(filename, code)

main()

;============================================================
;======================== Testing ===========================
;============================================================

;println(generate-code(generate-cases()))