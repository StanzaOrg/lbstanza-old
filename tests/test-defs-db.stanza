#use-added-syntax(tests)
defpackage stz/test-defs-db : 
  import core
  import collections
  import stz/defs-db
  import stz/defs-db-serializer

defn extract (db:DefinitionsDatabase, package-name:Symbol) -> Tuple<Definition> : 
  to-tuple $ 
    for kv in definitions(db) seq-cat : 
      for def in value(kv) filter : 
        pkg-name(def) == package-name

deftest(defsdb) single-proj-file : 
  val filename = "test-defs.db"
  val input = DefsDbInput(["tests/defs-db-data/stanza.proj"], false, [], false)
  defs-db(input, "test-defs.db")
  val istream = FileInputStream(filename)
  val defs-db = deserialize-definitions-database(istream)
  close(istream)
  for package in ["package1", "package2"] do : 
    val defs = extract(defs-db, to-symbol(package))
    #EXPECT(length(defs) != 0)
    val expected-items = [
      "function" => SrcDefFunction
      "multi"    => SrcDefMulti
      "Type"     => SrcDefType
      ; TODO : 
      ; SrcDefVariable
      ; SrcDefMethod
      ; SrcDefPackage
      ; SrcDefUnknown
    ]
    for expected in expected-items do : 
      val sym = to-symbol $ "%_-%_" % [package, key(expected)]
      val found? = find({name(_) == sym}, defs)
      #EXPECT(found? is-not False)
      match(found?:Definition):
        #EXPECT(kind(found?) == value(expected))
