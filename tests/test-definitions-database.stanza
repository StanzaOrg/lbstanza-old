#use-added-syntax(tests)
defpackage stz/test-definitions-database : 
  import core
  import collections
  import stz/defs-db
  import stz/defs-db-ir
  import stz/defs-db-serializer
  import stz/dl-ir
  import stz/il-ir
  import stz/pkg
  import stz/visibility
  import stz/front-end
  import stz/package-stamps

; Helper function to compile a test file into IL-IR
defn input-dep-result () :
  stz/defs-db/analyze-input $
    DefsDbInput(proj-files, platform, flags, optimize?, merge-db?) where : 
      val proj-files = ["tests/indexing-data/stanza.proj"]
      val platform   = `linux
      val flags      = []
      val optimize?  = false
      val merge-db?  = false
      
defn input-ir () : 
  val result = input-dep-result()
  [namemap(result), packages(result)]

; Helper fucntion to create a FileInfo for the test source file.
defn test-info (line:Int, column:Int) : 
  FileInfo("tests/indexing-data/test-package.stanza", line, column)

; Here, we test to make sure the indexing algorithm works as expected 
; on the test input data. 
deftest test-indexing-of-iexps : 
  val [namemap, packages] = input-ir()
  val ipackages = filter-by<IPackage>(packages)
  val test-package = 
    for pkg in ipackages find! : 
      name(pkg) == `test-package
  
  val indexed = to-tuple $ stz/defs-db/index-expressions(exps(test-package), namemap)
  defn lookup? (name:Symbol) : 
    find({stz/defs-db/name(_) == name}, indexed)
  
  #EXPECT(lookup?(`public-fn)     == stz/defs-db/Indexed(SrcDefFunction, Public,    `public-fn,     test-info(5, 12),  DefnAnnotation([], [], `Int), false))
  #EXPECT(lookup?(`protected-fn)  == stz/defs-db/Indexed(SrcDefFunction, Protected, `protected-fn,  test-info(6, 15),  DefnAnnotation([], [], `Int), false))
  #EXPECT(lookup?(`private-fn)    == stz/defs-db/Indexed(SrcDefFunction, Private,   `private-fn,    test-info(7, 5),   DefnAnnotation([], [], `Int), false))
  #EXPECT(lookup?(`PublicType)    == stz/defs-db/Indexed(SrcDefType,     Public,    `PublicType,    test-info(9, 15),  false, false))
  #EXPECT(lookup?(`ProtectedType) == stz/defs-db/Indexed(SrcDefType,     Protected, `ProtectedType, test-info(10, 18), false, false))
  #EXPECT(lookup?(`PrivateType)   == stz/defs-db/Indexed(SrcDefType,     Private,   `PrivateType,   test-info(11, 8),  false, false))

; Here, we test that the indexing algorithm correctly associates definitions with their source package.
deftest test-indexing-to-definitions : 
  val [namemap, packages] = input-ir()
  val ipackages = filter-by<IPackage>(packages)
  val test-package = 
    for pkg in ipackages find! : 
      name(pkg) == `test-package

  val dummy-stamp = PackageStamp(PkgLocation(`test-package, "myfile.stanza", false, false), false, false)
  val pkg-definitions = stz/defs-db/build-package-defs(test-package, dummy-stamp, namemap)
  defn test (name:Symbol) : 
    val def = find({/name(_) == name}, definitions(pkg-definitions))
    match(def:Definition) :
      #EXPECT(/name(def) == name)
    else : 
      println("Could not lookup %_ in indexed definitions." % [name])
      #EXPECT(false)
  
  val symbols = [
    `public-fn
    `protected-fn
    `private-fn
    `PublicType
    `ProtectedType
    `PrivateType
  ]

  do(test, symbols)

; A test to check if the serializer and deserializer for the DefinitionsDatabase
; object runs correctly and returns a table of definitions which match the 
; definitions we provide.
deftest test-serde-of-definitions-database : 
  val deps = input-dep-result()  
  val database = stz/defs-db/gen-defs-db(deps)

  let : 
    val file = FileOutputStream("test-ddb.dat")
    try : serialize(file, database)
    finally : close(file)
  
  let : 
    val file = FileInputStream("test-ddb.dat")
    val deserialized = try : read-definitions-database(file)
                       finally : close(file)

    for (deser-pkg in packages(deserialized), ser-pkg in packages(database)) do :
      for (deser in definitions(deser-pkg), ser in definitions(ser-pkg)) do :
        #EXPECT(deser == ser)
  
  if file-exists?("test-ddb.dat") : 
    delete-file("test-ddb.dat")


; This tests a non-trivial annotation lookup, a function
; with type parameters, a captured type argument, unnamed argument, 
; function as an argument, and return type.
deftest test-lookup-of-annotations :
  val deps = input-dep-result()  
  val database = stz/defs-db/gen-defs-db(deps)
  
  val all-defs = seq-cat(definitions, packages(database))
  val takes-fn-as-arg = find!({name(_) == `takes-fn-as-arg}, all-defs)

  val annotation = annotation?(takes-fn-as-arg) as DefnAnnotation
  defn has-arg? (def:Definition, arg:FnArgAnnotation) -> True|False : 
    contains?(args(annotation), arg)

  #EXPECT(has-arg?(takes-fn-as-arg, FnArgAnnotation(`body, `\|(False) -> ?T|)))
  #EXPECT(has-arg?(takes-fn-as-arg, FnArgAnnotation(`not-named, false)))
  #EXPECT(return-type?(annotation) == `T)


; A larger test on a large stanza codebase to check that the indexing 
; algorithms and serializers do not crash.
deftest(long) index-stanza-repository : 
  val input = DefsDbInput(proj-files, platform, flags, optimize?, merge-db?) where : 
    val proj-files = ["tests/stanza.proj", "core/stanza.proj", "compiler/stanza.proj"]
    val platform   = `linux
    val flags      = []
    val optimize?  = false
    val merge-db?  = false
  defs-db(input, "stanza.defs.dat")


; This test compiles the test package and checks that some functions defined
; in core.pkg and test-package.stanza have correctly inferred function 
; signature annotations once indexed in the DefinitionsDatabase.
deftest(long) test-annotated-pkg-defs :
  val input = DefsDbInput(proj-files, platform, flags, optimize?, merge-db?) where : 
    val proj-files = ["tests/indexing-data/stanza.proj"]
    val platform   = `linux
    val flags      = []
    val optimize?  = false
    val merge-db?  = false

  val deps = stz/defs-db/analyze-input(input)
  val database = stz/defs-db/gen-defs-db(deps)  
  val all-defs = to-tuple(seq-cat(definitions, packages(database)))

  defn test-annotation (name:Symbol, annotation:String) : 
    val function = find({/name(_) == name}, all-defs)
    #EXPECT(function is Definition)
    match(function:Definition) :
      #EXPECT(to-string(annotation?(function)) == annotation)

  test-annotation(`with-output-stream, "<?TV0>(_0:OutputStream, _1:() -> ?TV0) -> TV0")
  test-annotation(`to-chunks, "<?T>(s:Seqable<?T>, chunk-sz:Int) -> Seq<Tuple<T>>")
  test-annotation(`memoize*, "<T, ?S>(f:(T, (T, ?) -> S) -> ?S) -> (T) -> S")
  test-annotation(`maps-equal?, "<?T>(lhs:?T, rhs:?T, map-functions:Tuple<(T) -> Equalable>) -> True|False")
  test-annotation(`apply, "<?T0, ?T1, ?T2, ?R>(f:(T0, T1, T2) -> ?R, args:[?T0, ?T1, ?T2]) -> R")
  test-annotation(`tuple-zip, "<?A0, ?R0, ?A1, ?R1>(f:[(A0) -> ?R0, (A1) -> ?R1], args:[?A0, ?A1]) -> [R0, R1]")

deftest test-doc-strings : 
  val input = DefsDbInput(proj-files, platform, flags, optimize?, merge-db?) where : 
    val proj-files = ["tests/indexing-data/stanza.proj"]
    val platform   = `linux
    val flags      = []
    val optimize?  = false
    val merge-db?  = false
  
  val deps     = stz/defs-db/analyze-input(input)
  val database = stz/defs-db/gen-defs-db(deps)  
  val all-defs = to-tuple(seq-cat(definitions, packages(database)))

  defn has-doc-string? (name:Symbol, documentation?:False|String) -> True|False : 
    for def in all-defs any? :
      /name(def) == name and 
      /documentation?(def) == documentation?

  #EXPECT(has-doc-string?(`PublicStruct, "A public struct."))
  #EXPECT(has-doc-string?(`PublicStruct, false))
