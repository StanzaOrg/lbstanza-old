defpackage stz-test-suite/type-test-ir :
  import core
  import collections
  import stz/types
  import stz/type-locs
  import stz/printing-utils
  import stz/type-equations
  import stz/type-formatter

;============================================================
;====================== Testing Program =====================
;============================================================

;Holds the test type program.
;names? is filled in during resolution.
public defstruct TestTypeProgram :
  hierarchy: Tuple<TRelation>
  names?: TypeNames|False
  stmts:Tuple<TypeStmt>

;Force retrieve the TypeNames.
public defn names (p:TestTypeProgram) -> TypeNames :
  names?(p) as TypeNames

;Type hierarchy relation.
public defstruct TRelation :
  child:Type
  parent:Type|False

;Force retrieve the child id after resolution.
public defn n (r:TRelation) -> Int :
  n(child(r) as TOf)

;Retrieve the type formatter
public defn type-formatter (prog:TestTypeProgram) -> TypeFormatter :
  TypeFormatter({names(prog)[_]})

;============================================================
;===================== Names ================================
;============================================================

;Hold the total set of names.
public defstruct TypeNames :
  table:IntTable<Symbol> with:
    init => IntTable<Symbol>()

;Generate a new integer id for the given name.
public defn make-id (names:TypeNames, name:Symbol) -> Int :
  val id = length(table(names))
  table(names)[id] = name
  id

;Retrieve name of a given identifier.
public defn get (names:TypeNames, id:Int) -> Symbol :
  table(names)[id]

;============================================================
;====================== Testing Statements ==================
;============================================================

public deftype TypeStmt

public defstruct Capture <: TypeStmt :
  args:Tuple<Symbol|Int>
  a:Type
  b:Type

public defstruct Subtype <: TypeStmt :
  a:Type
  b:Type

public defstruct Infer <: TypeStmt :
  a:InferLoc|Type
  b:InferLoc|Type  

public defstruct Solve <: TypeStmt :
  eqns:Tuple<TypeEqn>

;============================================================
;=================== Types with Names =======================
;============================================================

public defstruct TNamedOf <: Type :
  name:Symbol
  args:Tuple<Type>
with:
  printer => true

;============================================================
;=================== Equations with Names ===================
;============================================================

public deftype NamedTypeEqn <: TypeEqn

;Capture all the given variables to satisfy a <: b.
public defstruct NamedCaptureAllEqn <: NamedTypeEqn :
  ns:Tuple<Symbol>
  a:Type
  b:Type

;Infer a specific set of variables ns.
public defstruct NamedInferEqn <: NamedTypeEqn :
  n:Symbol
  a:Type|InferLoc
  b:Type|InferLoc

;Infer the type of an overloaded function in expression
;position.
public defstruct NamedOverloadExpEqn <: NamedTypeEqn :
  n:Symbol
  sel:Symbol
  xs:Tuple<TFunction>
  y:Type

;Infer the type of an overloaded function in call
;position.
public defstruct NamedOverloadCallEqn <: NamedTypeEqn :
  n:Symbol
  sel:Symbol
  xs:Tuple<TFunction>
  args:Tuple<FArg>

;Perform the given substitutions in the given
;type. 
public defstruct NamedSubEqn <: NamedTypeEqn :
  n:Symbol
  x:Type
  ys:Tuple<KeyValue<Symbol,Type>>

;Indicate that n :> x.
public defstruct NamedSuperEqn <: NamedTypeEqn :
  n:Symbol
  x:Type

;Directly indicate the type of a variable.
public defstruct NamedEqualEqn <: NamedTypeEqn :
  n:Symbol
  type:Type

;============================================================
;==================== Mappers ===============================
;============================================================

;Call f on all types in NamedTypeEqn.
public defn map (f:Type -> Type, e:NamedTypeEqn) -> NamedTypeEqn :
  defn g (x:Type) -> Type : f(x)
  defn g (x:Tuple<Type>) : map(g,x)
  defn g (x:FArg) : map(f{_ as Type},x)
  defn g (x:Tuple<FArg>) : map(g,x)
  defn g (x:InferLoc) : x
  defn g (e:KeyValue<Symbol,Type>) : key(e) => f(value(e))
  defn g (e:Tuple<KeyValue<Symbol,Type>>) : map(g,e)
  defn g2 (x:TFunction) : f(x) as TFunction
  defn g2 (x:Tuple<TFunction>) : map(g2,x)
  match(e) :
    (e:NamedCaptureAllEqn) : NamedCaptureAllEqn(ns(e), g(a(e)), g(b(e)))
    (e:NamedInferEqn) : NamedInferEqn(n(e), g(a(e)), g(b(e)))
    (e:NamedOverloadExpEqn) : NamedOverloadExpEqn(n(e), sel(e), g2(xs(e)), g(y(e)))
    (e:NamedOverloadCallEqn) : NamedOverloadCallEqn(n(e), sel(e), g2(xs(e)), g(args(e)))
    (e:NamedSubEqn) : NamedSubEqn(n(e), g(x(e)), g(ys(e)))
    (e:NamedSuperEqn) : NamedSuperEqn(n(e), g(x(e)))
    (e:NamedEqualEqn) : NamedEqualEqn(n(e), g(type(e)))

;Call f on all defined variables in the equation.
public defn do-named-vars (f:Symbol -> False, e:NamedTypeEqn) :
  match(e) :
    (e:NamedCaptureAllEqn) : do(f,ns(e))
    (e:NamedInferEqn) : f(n(e))
    (e:NamedOverloadExpEqn) : (f(n(e)), f(sel(e)))
    (e:NamedOverloadCallEqn) : (f(n(e)), f(sel(e)))
    (e:NamedSubEqn) : f(n(e))
    (e:NamedSuperEqn) : f(n(e))
    (e:NamedEqualEqn) : f(n(e))

;Replace the names with their ids in the given equation.
public defn replace-names (f:Symbol -> Int, e:NamedTypeEqn) -> TypeEqn :
  match(e) :
    (e:NamedCaptureAllEqn) : CaptureAllEqn(map(f,ns(e)), a(e), b(e))
    (e:NamedInferEqn) : InferEqn(f(n(e)), a(e), b(e))
    (e:NamedOverloadExpEqn) : OverloadExpEqn(f(n(e)), f(sel(e)), xs(e), y(e))
    (e:NamedOverloadCallEqn) : OverloadCallEqn(f(n(e)), f(sel(e)), xs(e), args(e))
    (e:NamedSubEqn) :
      val new-ys = for y in ys(e) map :
        f(key(y)) => value(y)
      SubEqn(f(n(e)), x(e), new-ys)
    (e:NamedSuperEqn) : SuperEqn(f(n(e)), x(e))
    (e:NamedEqualEqn) : EqualEqn(f(n(e)), type(e))

;============================================================
;==================== Printers ==============================
;============================================================

defmethod print (o:OutputStream, p:TestTypeProgram) :
  val items = cat(hierarchy(p), stmts(p))
  print(o, "TestTypeProgram%_" % [colon-field-list(items)])

defmethod print (o:OutputStream, s:TRelation) :
  val parent-str = "" when parent(s) is False
              else " <: %_" % [parent(s)]
  print(o, "deftype %_%_" % [child(s), parent-str])

defmethod print (o:OutputStream, s:Capture) :
  print(o, "capture(%,) %_ <: %_" % [args(s), a(s), b(s)])

defmethod print (o:OutputStream, s:Subtype) :
  print(o, "subtype %_ <: %_" % [a(s), b(s)])

defmethod print (o:OutputStream, s:Infer) :
  print(o, "infer %_ <: %_" % [a(s), b(s)])

;============================================================
;==================== Formatters ============================
;============================================================

public defn format (p:TestTypeProgram) :
  val fmt = type-formatter(p)
  val items = cat(
    seq(format{fmt, _}, hierarchy(p))
    seq(format{fmt, _}, stmts(p)))
  "TestTypeProgram%_" % [colon-field-list(items)]

public defn format (f:TypeFormatter, r:TRelation) :
  val parent-str = "" when parent(r) is False
              else " <: %_" % [format(f,parent(r) as Type)]
  "deftype %_%_" % [format(f,child(r)), parent-str]  

public defn format (f:TypeFormatter, s:TypeStmt) :
  defn format? (t:Type) : format(f,t)
  defn format? (l:InferLoc) : l
  match(s) :
    (s:Capture) : "capture(%,) %_ <: %_" % [args(s), format(f,a(s)), format(f,b(s))]
    (s:Subtype) : "subtype %_ <: %_" % [format(f,a(s)), format(f,b(s))]
    (s:Infer) : "infer %_ <: %_" % [format?(a(s)), format?(b(s))]
    (s) : s

defn wrap-printable (f:OutputStream -> False) :
  new Printable :
    defmethod print (o:OutputStream, this) :
      f(o)