defpackage stz-test-suite/dev-tl :
  import core
  import collections
  import reader
  import parser/macroexpander
  import stz/il-ir
  import stz/input
  import stz/renamer
  import stz/resolver
  import stz-test-suite/test-tools
  import stz/core-macros
  import stz/type2

;============================================================
;=================== Read an Input IR =======================
;============================================================

;Read in the files and convert to IPackage.
public defn read-input-ir (filenames:Tuple<String>) -> Tuple<IPackage> :
  ;Read, macroexpand, and convert to input IR.
  val ipackages = to-tuple $ for filename in filenames seq-cat :
    val form = read-file(filename)
    val expanded = macroexpand(SimpleMacroexpander(), form, List())
    val default-imports = [IImport(`core), IImport(`collections)]
    to-ipackages(expanded, default-imports)
    
  ;Rename
  val rename-result = rename-il(ipackages)
  if errors(rename-result) is-not False :
    throw(errors(rename-result) as RenameErrors)
  val renamed = packages(rename-result)
  
  ;Resolve
  val resolve-env = new stz/resolver/Env :
    defmethod imported-package (this, package:Symbol) : false
  val resolve-result = resolve-il(renamed, resolve-env)
  if errors(resolve-result) is-not False :
    throw(errors(resolve-result) as ResolveErrors)
  val resolved = /ipackages(resolve-result)

  ;Return resolved ipackages.
  resolved

;============================================================
;============= Attempt Typing the Program ===================
;============================================================

;Run the type inferencer and type checker on the given packages.
defn add-types (packages:Tuple<IPackage>) :
  val env = new stz/type2/Env :
    defmethod exports (this, package:Symbol) :
      fatal("Package '%~' not provided from environment." % [package])
  type-program(packages, env)

;============================================================
;======================= Launch! ============================
;============================================================

public defn main () :
  within (package,sig) = set-stack-trace-filter() :
    package != `core
  val ipackages = read-input-ir(map(data-file,["tl1.stanza"]))
  do(println, ipackages)
  add-types(ipackages)

main()