defpackage stz-test-suite/dev-tl :
  import core
  import collections
  import reader
  import parser/macroexpander
  import stz/il-ir
  import stz/input
  import stz/renamer
  import stz/resolver
  import stz-test-suite/test-tools
  import stz/core-macros
  import stz/type2
  import stz/type-instantiation
  import stz/type-errors
  import stz/tl-to-el2
  import stz/el
  import stz/tl-ir2

;============================================================
;=================== Read an Input IR =======================
;============================================================

;Read in the files and convert to IPackage.
public defn read-input-ir (filenames:Tuple<String>) -> Tuple<IPackage> :
  ;Read, macroexpand, and convert to input IR.
  val ipackages = to-tuple $ for filename in filenames seq-cat :
    val form = read-file(filename)
    val expanded = macroexpand(SimpleMacroexpander(), form, List())
    val default-imports = [IImport(`core), IImport(`collections)]
    to-ipackages(expanded, default-imports)
    
  ;Rename
  val rename-result = rename-il(ipackages)
  if errors(rename-result) is-not False :
    throw(errors(rename-result) as RenameErrors)
  val renamed = packages(rename-result)
  
  ;Resolve
  val resolve-env = new stz/resolver/Env :
    defmethod imported-package (this, package:Symbol) : false
  val resolve-result = resolve-il(renamed, resolve-env)
  if errors(resolve-result) is-not False :
    throw(errors(resolve-result) as ResolveErrors)
  val resolved = /ipackages(resolve-result)

  ;Return resolved ipackages.
  resolved

;============================================================
;============= Attempt Typing the Program ===================
;============================================================

;Run the type inferencer and type checker on the given packages.
defn add-types (packages:Tuple<IPackage>) :
  val env = new stz/type2/Env :
    defmethod exports (this, package:Symbol) :
      fatal("Package '%~' not provided from environment." % [package])
  val tprog = type-program(packages, env)
  match(tprog) :
    (tprog:TProg) :
      val epackages = to-el(tprog, false)
      for package in epackages do :
        lower-unoptimized(package)
      do(println, epackages)
    (er:TypeErrors) :
      println(er)

;============================================================
;================= Read and Type a Program ==================
;============================================================

defn read-and-type (filenames:Tuple<String>) :
  val ipackages = read-input-ir(filenames)
  do(println, ipackages)
  add-types(ipackages)

;============================================================
;================== Try out Instantiation ===================
;============================================================

;defn try-instantiation (functions:Tuple<KeyValue<Int,TLSFunction>>,
;                        targs:Tuple<Type>,
;                        args:Tuple<LSFArg>) -> False :
;  
;defn try-instantiations () :
;  val f1 = TLSFunction(
;             []
;             []
;             [LSFArg(LSPositionalArg(false, IntT()))]
;             [IntT()])
;  try-instantiation(f1, )

;============================================================
;======================= Launch! ============================
;============================================================

within (package,sig) = set-stack-trace-filter() :
  package != `core
  
read-and-type([data-file("tl1.stanza")])

;read-and-type $ [
;  "../core/core.stanza"
;  "../core/collections.stanza"
;  "../core/stack-trace.stanza"
;  "../core/parsed-path.stanza"
;  "../scratch/overload.stanza"
;]
