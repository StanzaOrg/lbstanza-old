defserializer (out:FileOutputStream, in:FileInputStream) :
   defunion pkg (Pkg) :
      Pkg: (name:symbol, comms:list(pkgcomm))
      
   defunion type (Type) :
      TMixed: (types:slist(arrow))
      TPoly: (targs:slist(int), cargs:slist(int), func:arrow)
      TCap: (n:int)
      TOf: (n:int, type:type)
      TTuple: (types:slist(type))
      TOr: (a:type, b:type)
      TAnd: (a:type, b:type)
      TVar: (n:int)
      TArrow: (a:type, b:type)
      TGradual: ()
      TBot: ()

   defunion lstype (LSType) :
      ByteT: ()
      IntT: ()
      LongT: ()
      FloatT: ()
      DoubleT: ()
      UnknownT: ()
      PolyT: (targs:slist(int), cargs:slist(int), func:fnt)
      RestT: (type:lstype)
      PtrT: (type:lstype)
      RefT: (type:type)
      FnT: (a:slist(lstype), r:opt<LSType>(lstype), b:lstype)
      StructT: (n:int, type:type)

   defunion pkgcomm (PkgComm) :
      DefInfo : (n:int, name:symbol, package:symbol, visibility:vis, category:category, info:info)
      DefVal : (n:int, type:opt<Type>(type), ls-type:opt<LSType>(lstype))
      DefType : (n:int, args:slist(int), parent:opt<Type>(type), children:slist(child))
      DefLSType : (n:int, args:slist(int), parent:opt<Type>(type), fields:slist(field))

   defunion vis (Vis) :
      Private: ()
      Protected: ()
      Public: ()
      Local: ()

   defunion category (EType) :
      ValE: ()
      VarE: ()
      TVarE: ()
      CapVarE: ()
      TypeE: ()
      MultiE: ()
      FnE: ()
      LValE: ()
      LVarE: ()
      LFnE: ()
      LTypeE: ()
      FieldE: ()
      LabelE: ()

   defunion field (Field) :
      Field: (n:int, name:symbol, type:lstype)

   defunion child (Child) :
      Child: (n:int, args:slist(int), parent:type)

   defunion info (FileInfo) :
      FileInfo: (filename:string, line:int, column:int)

   defatom arrow (t:TArrow) :
      writer : write-type(t)
      reader : ensure<TArrow>({_ is TArrow}, read-type())

   defatom fnt (t:FnT) :
      writer : write-lstype(t)
      reader : ensure<FnT>({_ is FnT}, read-lstype())

   reader defn read-slist<?T> (f: () -> ?T) :
      val n = read-byte()
      to-list(repeatedly(f, to-int(n)))
      
   writer defn write-slist<?T> (f: T -> False, xs:List<?T>) :
      write-byte(to-byte(length(xs)))
      do(f, xs)

   reader defn read-list<?T> (f: () -> ?T) :
      val n = read-int()
      to-list(repeatedly(f, n))
      
   writer defn write-list<?T> (f: T -> False, xs:List<?T>) :
      write-int(length(xs))
      do(f, xs)

   reader defn read-opt<T> (f: () -> T) :
      val n = read-byte()
      f() when n == 1Y

   writer defn write-opt<T> (f: T -> False, x:T|False) :
      if x is False :
         write-byte(0Y)
      else :
         write-byte(1Y)
         f(x as T)

   defatom int (x:Int) :
      writer :
         put(out, x)
      reader :
         match(get-int(in)) :
            (x:Int) : x
            (x:False) : throw(FileReadException())

   defatom byte (x:Byte) :
      writer :
         put(out, x)
      reader :
         match(get-byte(in)) :
            (x:Byte) : x
            (x:False) : throw(FileReadException())

   defatom char (x:Char) :
      writer :
         print(out, x)
      reader :
         match(get-char(in)) :
            (x:Char) : x
            (x:False) : throw(FileReadException())

   defatom string (x:String) :
      writer :
         write-int(length(x))
         print(out, x)
      reader :
         val n = read-int()
         String(repeatedly(read-char, n))

   defatom symbol (x:Symbol) :
      writer : write-string(to-string(x))
      reader : to-symbol(read-string())

   defn ensure<T> (f: ? -> True|False, x) :
      if f(x) : x as T
      else : throw(FileReadException())

;defserializer (out:FileOutputStream, in:FileInputStream) :
;   defunion mystruct (MyStruct) :
;      MyA : (a:int, b:int)
;      MyB : (a:int, b:opt<Int>(int), c:list(int))
;      MyC : (a:mystruct, b:mystruct)
;   with :
;      append-args => (false)
;
;   defatom int (x:Int) :
;      writer :
;         put(out, x)
;      reader :
;         match(get-int(in)) :
;            (i:Int) : i
;            (i:False) : fatal("Unexpected end of file.")
;
;   reader defn read-list<?T> (f: () -> ?T) :
;      val n = read-int()
;      to-list(repeatedly(f, n))
;      
;   writer defn write-list<?T> (f: T -> False, xs:List<?T>) :
;      put(out, length(xs))
;      do(f, xs)
;
;   reader defn read-opt<T> (f: () -> T) :
;      val n = read-int()
;      f() when n == 1
;
;   writer defn write-opt<T> (f: T -> False, x:T|False) :
;      if x is False :
;         write-int(0)
;      else :
;         write-int(1)
;         f(x as T)
