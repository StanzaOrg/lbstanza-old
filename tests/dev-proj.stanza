defpackage stz-test-suite/dev-proj :
  import core
  import collections
  import arg-parser
  import stz/proj
  import stz/proj-ir
  import stz/proj-env
  import stz/proj-value-types
  import stz-test-suite/test-tools

;============================================================
;================= Development Code =========================
;============================================================

;;Make the stack trace cleaner.
;within (package,sig) = set-stack-trace-filter() :
;  package != `core

;;Uncomment these lines to force a particular action.
;set-command-line-arguments $ ["dev-proj"
;                              data-file("ex6.proj")
;                              data-file("ex7.proj")
;                              "-package-managers"
;                              "conan"]

;============================================================
;============================================================
;============================================================

;Dummy package manager for Conan.
defn conan-manager-info () -> ForeignPackageManagerInfo :
  ForeignPackageManagerInfo(
    `conan,
    [TableEntry(`build-dir
                SINGLE-PATH,
                false)
     TableEntry(`config-file
                SINGLE-PATH,
                true,
                One("{.}/config"))
     TableEntry(`commands,
                MULTIPLE-STRINGS
                true)
     TableEntry(`servers,
                MultipleType $ TableType([
                  TableEntry(`name,
                             SINGLE-STRING,
                             false)
                  TableEntry(`localfile,
                             SINGLE-PATH,
                             true,
                             One("{HOME}/.localcache"))
                  TableEntry(`url,
                             SINGLE-STRING,
                             true,
                             One("server.default@main"))
                  TableEntry(`flags,
                             MULTIPLE-STRINGS,
                             true)])
                true)])

;Get the conan variables.
defn conan-vars (platform:Symbol,
                 stmt:ForeignPackageParamsStmt)
              -> Tuple<KeyValue<Symbol, ?>> :
  val build-dir = lookup(entries(stmt), `build-dir)
  val system-dir = to-string("%_/system" % [build-dir])
  val conan-root = to-string("%_/.conan" % [projdir(stmt)])
  [`conan-system-includes => system-dir
   `conan-root => conan-root]  

;Retrieve a bunch of dummy package managers for testing.
defn manager-infos (names:Tuple<String>) -> Tuple<ForeignPackageManagerInfo> :
  for name in names map :
    switch(name) :
      "conan" : conan-manager-info()
      else : fatal("No dummy package manager called %~." % [name])

;Read the proj file in the filenames and print it out.
defn read-proj-action (cmdargs:CommandArgs) :
  val filenames = args(cmdargs)
  println("Read %@" % [filenames])
  val platform = to-symbol(get?(cmdargs, "platform", "os-x"))
  val workdir = resolve-path!(".")
  val env = new ProjEnv :
    defmethod workdir (this) :
      workdir
    defmethod foreign-package-managers (this) :
      manager-infos(get?(cmdargs, "package-managers", []))
    defmethod package-manager-variables (this, params:ForeignPackageParamsStmt, platform:Symbol) :
      switch(package-manager(params)) :
        `conan : conan-vars(platform, params)        
  val proj = read-proj-files(filenames, platform, env)
  println(proj)

;Launch!
simple-command-line-cli(false, commands, "read", false, false) where :
  val commands = [
    Command(
      "read", AtLeastOneArg, "the .proj file to read",
      [Flag(
        "platform"
        OneFlag
        OptionalFlag
        "the platform. Either os-x, linux, or windows.")
       Flag(
        "package-managers"
        AtLeastOneFlag
        OptionalFlag
        "the list of dummy package managers.")],
      "Read a .proj file and normalize it.",
      read-proj-action)]