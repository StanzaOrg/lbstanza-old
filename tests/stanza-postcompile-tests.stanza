#use-added-syntax(tests)
defpackage stz/stanza-postcompile-tests :
  import core
  import collections
  import stz/test-multis
  import stz/test-heap
  import stz/test-infer
  import stz/test-utils

;============================================================
;================ Compilation Errors Tests ==================
;============================================================

defn stanza-compiler () :
  val stanza = get-env("STANZA_COMPILER")
  match(stanza:String) : stanza
  else : fatal("The Stanza compiler needs to be set in the STANZA_COMPILER environment variable.")

deftest compile-test-lostanza :
  val stanza = stanza-compiler()
  val output = call-system-and-get-output(stanza, [stanza, "tests/stanza.proj" "stz/test-lostanza" "-s" "temp.s"])
  println(output)
  val MSG = \<S>tests/test-lostanza.stanza:7.14: Cannot access indexed slot in expression of type ptr<?>.<S>
  #ASSERT(trim(output) == MSG)

deftest test-constant-fold :
  val stanza = stanza-compiler()
  call-system(stanza, [stanza "tests/stanza.proj" "stz/test-constant-fold-gen" "-o" "build/gen-constant-fold"])
  cmd $ "build/gen-constant-fold build/test-constant-fold.stanza"
  call-system(stanza, [stanza "build/test-constant-fold.stanza" "-o" "build/test-constant-fold"])
  call-system(stanza, [stanza "build/test-constant-fold.stanza" "-o" "build/test-constant-fold-optimized" "-optimize"])
  val output1 = call-system-and-get-output("build/test-constant-fold", ["build/test-constant-fold"])
  val output2 = call-system-and-get-output("build/test-constant-fold-optimized", ["build/test-constant-fold-optimized"])
  #ASSERT(output1 == output2)