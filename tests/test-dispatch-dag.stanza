#use-added-syntax(tests)
defpackage stz/test-dispatch-dag :
  import core
  import collections
  import stz/dispatch-dag
  import stz/test-utils

val DISPATCH-DAG-1 = \<S>
Dag:
  depth: 2
  0) DagEntry:
    depth: 0
    case (7) : 1
    case (4, 6) : 2
    case (5) : 3
  1) DagEntry:
    depth: 1
    case (5) : AmbSoln(1, 2)
    case (7) : UniqueSoln(4)
    case (6) : UniqueSoln(3)
    case (4) : UniqueSoln(2)
  2) DagEntry:
    depth: 1
    case (4, 6) : UniqueSoln(0)
    case (5, 7) : UniqueSoln(1)
  3) DagEntry:
    depth: 1
    case (5, 7) : AmbSoln(1, 2)
    case (4, 6) : UniqueSoln(2)
<S>

deftest dispatch-dag-1 :
  val a = 0
  val b = 1
  val c = 2
  val d = 3
  val ax = 4
  val bx = 5
  val cx = 6
  val dx = 7
  val A = Nums(qsort([a ax b bx c cx d dx]))
  val B = Nums(qsort([b bx d dx]))
  val C = Nums(qsort([c cx d dx]))
  val D = Nums(qsort([d dx]))
  val btable = BranchTable(
    [Branch([A A])
     Branch([A B])
     Branch([B A])
     Branch([D C])
     Branch([D D])]
    to-intset([a b c d]))
  within assert-printout(DISPATCH-DAG-1) :
    println(compute-dispatch-dag(btable, true))

val DISPATCH-DAG-2 = \<S>
Dag:
  depth: 2
  0) DagEntry:
    depth: 0
    case (6) : 1
    case (4) : 2
    case (2, 3) : 3
  1) DagEntry:
    depth: 1
    case (2, 3, 4, 6) : UniqueSoln(0)
  2) DagEntry:
    depth: 1
    case (6) : UniqueSoln(0)
    case (2, 3, 4) : UniqueSoln(2)
  3) DagEntry:
    depth: 1
    case (2, 4, 6) : UniqueSoln(0)
    case (3) : UniqueSoln(1)
<S>

deftest dispatch-dag-2 :
  val A = 0
  val B = 1
  val a = 2
  val b = 3
  val c = 4
  val X = 5
  val x = 6
  val TX = Nums(qsort([X x A a c B b]))
  val TA = Nums(qsort([A a c B b]))
  val TB = Nums(qsort([B b]))
  val Tc = Nums(qsort([c]))
  val btable = BranchTable(
    [Branch([TX TX])
     Branch([TA TB])
     Branch([Tc TA])]
    to-intset([A B X]))
  within assert-printout(DISPATCH-DAG-2) :
    println(compute-dispatch-dag(btable, true))

val DISPATCH-DAG-3 = \<S>
Dag:
  depth: 2
  0) DagEntry:
    depth: 0
    case (7) : 1
    case (8) : 2
    case (6) : 3
    case (4, 5) : 4
  1) DagEntry:
    depth: 1
    case (6) : AmbSoln(1, 2)
    case (7) : UniqueSoln(3)
    case (4, 5, 8) : UniqueSoln(2)
  2) DagEntry:
    depth: 1
    case (4, 8) : UniqueSoln(0)
    case (6) : UniqueSoln(5)
    case (5) : UniqueSoln(4)
    case (7) : AmbSoln(4, 5)
  3) DagEntry:
    depth: 1
    case (6, 7) : AmbSoln(1, 2)
    case (4, 5, 8) : UniqueSoln(2)
  4) DagEntry:
    depth: 1
    case (4, 5, 8) : UniqueSoln(0)
    case (6, 7) : UniqueSoln(1)
<S>

deftest dispatch-dag-3 :
  val A = 0
  val B = 1
  val C = 2
  val D = 3
  val a = 4
  val b = 5
  val c = 6
  val d = 7
  val a2 = 8
  val TA = Nums(qsort([A B C D a a2 b c d]))
  val TB = Nums(qsort([B D b d]))
  val TC = Nums(qsort([C D c d]))
  val TD = Nums(qsort([D d]))
  val Ta2 = Nums(qsort([a2]))
  val btable = BranchTable(
    [Branch([TA TA])
     Branch([TA TC])
     Branch([TC TA])
     Branch([TD TD])
     Branch([Ta2 TB])
     Branch([Ta2 TC])]
    to-intset([A B C D]))
  within assert-printout(DISPATCH-DAG-3) :
    println(compute-dispatch-dag(btable, true))