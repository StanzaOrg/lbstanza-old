defpackage stz-test-suite/dev-package-manager :
  import core
  import collections
  import stz/proj-ir
  import stz/proj-env
  import stz/external-dependencies
  import stz/foreign-package-manager
  import stz/conan-package-manager
  import stz/printing-utils

;============================================================
;===================== Verbose System =======================
;============================================================

;Simple System implementation that just echoes the input
;arguments.
;Pass true to have System actually execute the commands.
defn VerboseSystem (actually-execute?:True|False) -> System :
  new System :
    defmethod read-file (this, filename:String) :
      println("SYSTEM: read-file(%~)" % [filename])
      if actually-execute?: slurp(filename)
      else : "Dummy contents"

    defmethod write-file (this, filename:String, contents) :
      println("SYSTEM: write-file?(%~)" % [filename])
      if actually-execute?: spit(filename, contents)

    defmethod file-exists? (this, filename:String) :
      println("SYSTEM: file-exists?(%~)" % [filename])
      if actually-execute?: file-exists?(filename)
      else : true

    defmethod call-system (this,
                           prog:String,
                           args:Tuple<String>,
                           workdir:String|False,
                           env-vars:Tuple<KeyValue<String,String>>|False) :
      val items = [
        simple-field("prog", written(prog))
        named-list-fields("args", seq(written, args))
        falseable-field("workdir", workdir)
        falseable-list-fields("env-vars", env-vars)]
      println("SYSTEM: call-system(%~)%_" % [prog, colon-field-list(items)])
      if actually-execute? : call-system(prog, args, workdir, env-vars)
      else : 0

    defmethod call-system-and-get-output (this,
                                          prog:String,
                                          args:Tuple<String>,
                                          workdir:String|False,
                                          env-vars:Tuple<KeyValue<String,String>>|False) :
      val items = [
        simple-field("prog", written(prog))
        named-list-fields("args", seq(written, args))
        falseable-field("workdir", workdir)
        falseable-list-fields("env-vars", env-vars)]
      println("SYSTEM: call-system-and-get-output(%~)%_" % [prog, colon-field-list(items)])
      if actually-execute? : call-system-and-get-output(prog, args, workdir, env-vars)
      else : ""

    defmethod ensure-directory-exists (this, filepath:String) :
      println("SYSTEM: ensure-directory-exists(%~)" % [filepath])
      if actually-execute? : create-dir-recursive(filepath)

;============================================================
;=================== Testing Utilities ======================
;============================================================

;Convert the given key-value entries into a list of ProjTable with
;'name' and 'value' entries.
defn to-list-of-tables (entries:Tuple<KeyValue<String,String>>) -> List<ProjTable> :
  to-list $ for e in entries seq :
    ProjTable $ [
      `name => key(e)
      `value => value(e)]

defn header (msg) :
  println("\n\n===== %_ =====" % [msg])

;============================================================
;================== Test a Package Manager ==================
;============================================================

defn test-package-manager (pm:ForeignPackageManager) -> False :
  header("Begin test of package manager")

  header("Retrieve the configuration parameters")
  val params = configuration-params(pm)
  
  println("Retrieved params:")
  do(println{Indented(_)}, params)

  ;As an example, suppose that the following params were computed
  ;from the user's .proj file.
  val example-params = PackageManagerParams(
    "/Users/patricksli/Docs/Programming/stanzadev/tests"
    `linux
    [`conan-command => "conan"
     `conan-install-extra-args => List(["--build" "never"])
     `conan-build-dir => "/Users/patricksli/Docs/Programming/stanzadev/tests/conanbuild"
     `conan-cache-dir => "/Users/patricksli/Docs/Programming/stanzadev/tests/conancache"
     `conan-environment => to-list-of-tables $ [
       "CONAN_LOGGING_LEVEL" => "info"
       "CONAN_PRINT_RUN_COMMANDS" => "1"
       "CONAN_SYSREQUIRES_MODE" => "verify"]
     `conan-config => to-list-of-tables $ [
       "general.non-interactive" => "1"
       "general.read_only_cache" => "1"
       "general.revisions_enabled" => "1"]
     `conan-remotes => to-list-of-tables $ [
       "jitx-conan-remote" => "http://ec2-44-226-24-141.us-west-2.compute.amazonaws.com:9300"
       "conancenter" => "https://center.conan.io"]])

  header("Retrieve the .proj variables that the package manager \
          supplies")
  val proj-vars = proj-variables(pm, example-params, `linux)

  println("The package manager provides these variables:")
  within indented() :
    for entry in proj-vars do :
      println("%_: %~" % [key(entry), value(entry)])

  header("Based upon the params retrieve the additional dependencies \
          from the package manager")
  val deps = system-dependencies(pm, example-params)
  println("The package manager introduces dependencies:")
  println("  ccfiles: %~" % [ccfiles(deps)])
  println("  ccflags: %~" % [ccflags(deps)])

  header("Request the package manager to satisfy the following dependencies")
  val packages = ["asmjit/cci.20220210"]
  println("packages = %_" % [packages])

  header("Call satisfy dependencies")
  satisfy-dependencies(pm,
                       packages,
                       example-params,
                       VerboseSystem(false))

  false

;============================================================
;============== Test the ConanPackageManager ================
;============================================================

test-package-manager(ConanPackageManager())