defpackage user :
   import core
   import collections

extern silly_add: (long, long) -> long

extern defn silly_inc (x:long) -> long :
   throw(IncException(new Long{x}))
   return 0

lostanza defn silly_add (x:ref<Long>, y:ref<Long>) -> ref<Long> :
   val r = call-c silly_add(x.value, y.value)
   return new Long{r}

defn try-add () :
   try :
      silly_add(1L, 1L)
   catch (e:Exception) :
      println(e)
      
try-add()

defn IncException (x:Long) :
   Exception("%_ is too large for inc." % [x])
   
;
;defn print-x (x:Long) :
;   println("silly_inc(%_)" % [x])
;   
;extern defn silly_inc (x:long) -> long :
;   if x > 10 : throw(IncException(new Long{x}))
;   print-x(new Long{x})
;   return x + 1
;
;lostanza defn silly_add (x:ref<Long>, y:ref<Long>) -> ref<Long> :
;   val r = call-c silly_add(x.value, y.value)
;   return new Long{r}
;   
;defn silly_times (x:Long, y:Long) :
;   println("silly_times(%_, %_)" % [x, y])
;   if y == 1L : x
;   else : silly_times(silly_add(x, y), y - 1L)
;
;defn try-times (x:Long) :
;   try :
;      println(silly_times(x, x))
;   catch (e:Exception) :
;      println(e)
;
;println("Perform 5x5")
;try-times(2L)
;try-times(3L)
;try-times(4L)
;try-times(5L)
;try-times(6L)