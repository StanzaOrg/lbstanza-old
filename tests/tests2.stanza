defpackage user :
   import core
   import collections

defn main () :
   val t = HashTable<[Int,Int], Int>()
   for i in 1 through 10 do :
      for j in 1 through 10 do :
         t[[i,j]] = i * j
   do(println, t)

main()      

;deftype Sentinel
;
;defn parallel-seq (xs:Seqable<Int>, f1: Seqable<Int> -> Int, f2: Seqable<Int> -> Int) :
;   defn f1* () :
;      Coroutine<Int,Maybe<Int>> $ fn (co, x0:Int) :
;         var item = x0
;         val xs* = repeatedly $ fn () :
;            ;Fill item
;            if item is Sentinel :
;               item = suspend(co, None())
;            item as Int
;         One(f(xs*))
;            
;   f1 $ new Seq<Int> :
      

;extern defn f (x:int) -> int :
;   return x + 42