#use-added-syntax(tests)
defpackage stz-test-suite/test-reg-alloc-datastructures :
  import core
  import collections
  import stz/reg-alloc-datastructures
  import stz/reg-alloc-assignment-table
  import stz/reg-alloc-ir

deftest bitset :
  val s = BitSet(256)
  for x in [0, 3, 7, 11, 34, 31, 64, 65, 66, 100, 101, 127, 129, 130, 156, 2, 1, 1, 1, 167, 138] do :
    add(s, x)
  println(s)

;DEBUGGING
within (package,sig) = set-stack-trace-filter() :
  package != `core

let :
  val table = AssignmentTable(ResourceProvider(8, 8, 20))

  ;Save a bunch of variables.
  set-saved(table, 0, true)
  set-saved(table, 2, true)
  set-saved(table, 7, true)
  set-saved(table, 2, false)
  set-saved(table, 17, true)

  ;Print out whether a bunch of variables are saved.
  println("What variables are saved?")
  for v in 0 to 20 do :
    if saved?(table, v) :
      println("  V%_ is saved." % [v])

  ;Assign a bunch of variables to registers.
  assign(table, 0, Reg(0))
  assign(table, 2, Reg(1))
  assign(table, 7, FReg(0))
  assign(table, 9, FReg(1))

  ;Unassign V2
  unassign(table, 2)

  ;Print out the assigned registers for a bunch of variables.
  println("\nWhat register is each variable assigned to?")
  for v in 0 through 10 do :
    println("  V%_ assigned to %_" % [v, get?(table,v)])

  ;Print out the variables in some registers.
  println("\nWhat do the registers contain?")
  for r in [Reg(0), Reg(1), FReg(0), FReg(1), FReg(2)] do :
    println("  %_ contains %_" % [r, get?(table,r)])

  ;Reserve a bunch of registers (both output and input)
  clear-reserved(table)
  clear-reserved-input(table)
  mark-reserved(table, Reg(0))
  mark-reserved(table, Reg(3))
  mark-reserved(table, Reg(7))
  mark-reserved-input(table, Reg(2))
  mark-reserved-input(table, Reg(1))
  mark-reserved-input(table, Reg(4))

  println("\nPrint the VarTable:")
  println(Indented(table))

  ;Clear the reserved registers, and add some different ones.
  clear-reserved(table)
  clear-reserved-input(table)
  mark-reserved(table, Reg(3))
  mark-reserved(table, FReg(0))
  mark-reserved(table, FReg(3))
  mark-reserved-input(table, FReg(2))
  mark-reserved-input(table, FReg(1))

  println("\nPrint the VarTable:")
  println(Indented(table))

  println("\nFind free registers.")
  println("  Free Reg: %_" % [free-register(table, AnyReg(), true, true, false)])
  println("  Free FReg: %_" % [free-register(table, AnyFReg(), true, true, false)])
  println("  Free Reg prefer R6: %_" % [free-register(table, AnyReg(), true, true, Reg(6))])
  println("  Free Reg prefer R0: %_" % [free-register(table, AnyReg(), true, true, Reg(0))])
  println("  Free Reg prefer F0: %_" % [free-register(table, AnyFReg(), true, true, FReg(0))])
  println("  Free Reg prefer F6: %_" % [free-register(table, AnyFReg(), true, true, FReg(6))])
  println("  Non-reserved Reg prefer R3: %_" % [free-register(table, AnyReg(), false, true, Reg(3))])
  println("  Non-reserved-input Reg prefer F2: %_" % [free-register(table, AnyFReg(), true, false, FReg(2))])
  
