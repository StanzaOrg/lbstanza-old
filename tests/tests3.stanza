defpackage user :
   import core
   import collections

deftype PArray
defmulti array (a:PArray) -> VArray
defmulti version (a:PArray) -> Int

deftype PUpdatedArray <: PArray
defmulti i (a:PUpdatedArray) -> Int
defmulti old-v (a:PUpdatedArray) -> Int
defmulti new-v (a:PUpdatedArray) -> Int
defmulti parent (a:PUpdatedArray) -> PArray

deftype VArray
defmulti get (a:VArray, i:Int) -> Int
defmulti set (a:VArray, i:Int, v:Int) -> False
defmulti path (a:VArray) -> PArray
defmulti set-path (a:VArray, p:PArray) -> False
defmulti inc-time (a:VArray) -> Int

defn VArray (n:Int, v:Int) :
   val array = Array<Int>(n, v)
   var path:PArray
   var time = 0
   new VArray :
      defmethod get (this, i:Int) : array[i]
      defmethod set (this, i:Int, v:Int) : array[i] = v
      defmethod path (this) : path
      defmethod set-path (this, p:PArray) : path = p
      defmethod inc-time (this) : (time = time + 1, time)
      defmethod print (o:OutputStream, this) : print(o, array)
   
defn PArray (n:Int, v:Int) :
   val array = VArray(n, v)
   val ret = new PArray :
      defmethod array (this) : array
      defmethod version (this) : 0
   set-path(array, ret)   
   ret

defn update (p:PArray, i:Int, new-v:Int) :
   val old-v = p[i]
   val version = inc-time(array(p))
   new PUpdatedArray :
      defmethod array (this) : array(p)
      defmethod version (this) : version
      defmethod i (this) : i
      defmethod old-v (this) : old-v
      defmethod new-v (this) : new-v
      defmethod parent (this) : p

defn revert (v:VArray) :
   val p = path(v) as PUpdatedArray
   v[i(p)] = old-v(p)
   set-path(v, parent(p))

defn version (v:VArray) :
   version(path(v))

defn* ensure-updated (p:PArray) :
   val a = array(p)
   if version(a) > version(p) :
      revert(a)
      ensure-updated(p)
   else if version(a) < version(p) :
      val p = p as PUpdatedArray
      ensure-updated(parent(p))
      a[i(p)] = new-v(p)
      set-path(a, p)

defn get (p:PArray, i:Int) :
   ensure-updated(p)
   array(p)[i]

defmethod print (o:OutputStream, p:PArray) :
   ensure-updated(p)
   print(o, array(p))

defn main () :
   val a = PArray(10, 5)
   val b = update(a, 0, 0)
   val d = update(b, 1, -42)
   val f = update(d, 2, 13)
   val h = update(f, 9, 0)
   val i = update(f, 9, 1)
   val j = update(i, 9, 2)
   val c = update(a, 1, 10)
   val e = update(c, 1, 42)
   val g = update(e, 2, 10)
   val k = update(c, 8, 14)

   defn print-out () :
      println("a = %_" % [a])
      println("b = %_" % [b])
      println("d = %_" % [d])
      println("f = %_" % [f])
      println("h = %_" % [h])
      println("i = %_" % [i])
      println("j = %_" % [j])
      println("c = %_" % [c])
      println("e = %_" % [e])
      println("g = %_" % [g])
      println("k = %_" % [k])

   print-out()
   print-out()
   print-out()

main()