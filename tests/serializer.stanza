defpackage user :
   import core

deftype MyStruct
defstruct MyA <: MyStruct :
   a: Int
   b: Int
defstruct MyB <: MyStruct :
   a: Int
   b: Int
   c: List<Int>
defstruct MyC <: MyStruct :
   a: MyStruct
   b: MyStruct

defn serialize (out : FileOutputStream x9 : MyStruct) : ((defn write-mystruct (x10 : MyStruct) : (match (@do x10) : ((x11 : MyA) : (core/put (@do out 0Y) write-int (@do a (@do x11)) write-int (@do b (@do x11))) (x12 : MyB) : (core/put (@do out 1Y) write-int (@do a (@do x12)) write-int (@do b (@do x12)) write-ints (@do c (@do x12))) (x13 : MyC) : (core/put (@do out 2Y) write-mystruct (@do a (@do x13)) write-mystruct (@do b (@do x13)))))) (defn write-int (x : Int) : ($do put out x)) (defn write-ints (xs : ($of List Int)) : ($begin ($do put out ($do length xs)) ($do do write-int xs))) write-mystruct (@do x9))

defn main () :
   val x = MyC(MyC(MyA(5, 25), MyB(5, 25, `(1 2 3))),
               MyC(MyA(1, 1), MyB(5, 10, `(3 2 1))))
   val o = FileOutputStream("mystruct.dat")
   try : serialize(o, x)
   finally : close(o)

main()