defpackage user :
   import core

deftype MyStruct
defstruct MyA <: MyStruct :
   a: Int
   b: Int
defstruct MyB <: MyStruct :
   a: Int
   b: Int
   c: List<Int>
defstruct MyC <: MyStruct :
   a: MyStruct
   b: MyStruct

defmethod print (o:OutputStream, x:MyStruct) :
   print{o, _} $ match(x) :
      (x:MyA) : "MyA(%_, %_)" % [a(x), b(x)]
      (x:MyB) : "MyB(%_, %_, %_)" % [a(x), b(x), c(x)]
      (x:MyC) : "MyC(%_, %_)" % [a(x), b(x)]   

((defn serialize (out : FileOutputStream x8 : MyStruct) : ((defn write-mystruct (x9 : MyStruct) : (match (@do x9) : ((x10 : MyA) : (core/put (@do out 0Y) write-int (@do a (@do x10)) write-int (@do b (@do x10))) (x11 : MyB) : (core/put (@do out 1Y) write-int (@do a (@do x11)) write-int (@do b (@do x11)) write-ints (@do c (@do x11))) (x12 : MyC) : (core/put (@do out 2Y) write-mystruct (@do a (@do x12)) write-mystruct (@do b (@do x12)))))) () ($defn ($of write-list ($cap T)) (f xs) (($-> (T) False) ($of List ($cap T))) ($none) ($begin ($do put out ($do length xs)) ($do do f xs))) (defn write-int (x : Int) : ($do put out x)) (defn write-ints (xs : ($of List Int)) : ($do write-list write-int xs)) write-mystruct (@do x8))) (defn deserialize-mystruct (in : FileInputStream) -> MyStruct : (defn read-tag13 () : (match (@do core/get-byte (@do in)) : ((b : Byte) : b (b : False) : core/throw (@do core/FileReadException (@do)))) (defn read-mystruct () -> MyStruct : (val tag14 = read-tag13 (@do) switch (@afn tag14 == _) : (0Y : MyA (@do read-int (@do) read-int (@do)) 1Y : MyB (@do read-int (@do) read-int (@do) read-ints (@do)) 2Y : MyC (@do read-mystruct (@do) read-mystruct (@do))))) ($defn ($of read-list ($cap T)) (f) (($-> () ($cap T))) ($none) ($begin ($def n ($none) ($do read-int)) ($do to-list ($do repeatedly f n)))) () (defn read-int () -> Int : ($match (($do get-int in)) ($branch (i) (Int) i) ($branch (i) (False) ($do fatal "Unexpected end of file.")))) (defn read-ints () -> ($of List Int) : ($do read-list read-int)) read-mystruct (@do))))

defn main () :
   val x = MyC(MyC(MyA(5, 25), MyB(5, 25, `(1 2 3))),
               MyC(MyA(1, 1), MyB(5, 10, `(3 2 1))))
   val o = FileOutputStream("mystruct.dat")
   try : serialize(o, x)
   finally : close(o)

   val i = FileInputStream("mystruct.dat")
   try :
      val y = deserialize-mystruct(i)
      println(y)
   finally : close(i)

main()