defpackage user :
   import core

deftype MyStruct
defstruct MyA <: MyStruct :
   a: Int
   b: Int
   c: False
defstruct MyB <: MyStruct :
   a: Int
   b: Int
   c: List<Int>
   d: False
defstruct MyC <: MyStruct :
   a: MyStruct
   b: MyStruct
   c: False

defmethod print (o:OutputStream, x:MyStruct) :
   print{o, _} $ match(x) :
      (x:MyA) : "MyA(%_, %_)" % [a(x), b(x)]
      (x:MyB) : "MyB(%_, %_, %_)" % [a(x), b(x), c(x)]
      (x:MyC) : "MyC(%_, %_)" % [a(x), b(x)]   

(($begin ($defn serialize (out x1) (FileOutputStream MyStruct) ($none) ($begin ($defn write-mystruct (x2) (MyStruct) ($none) ($match (x2) ($branch (x3) (MyA) ($begin ($do core/put out 0Y) ($do write-int ($do a x3)) ($do write-int ($do b x3)))) ($branch (x4) (MyB) ($begin ($do core/put out 1Y) ($do write-int ($do a x4)) ($do write-int ($do b x4)) ($do write-ints ($do c x4)))) ($branch (x5) (MyC) ($begin ($do core/put out 2Y) ($do write-mystruct ($do a x5)) ($do write-mystruct ($do b x5)))))) ($begin) ($defn ($of write-list ($cap T)) (f xs) (($-> (T) False) ($of List ($cap T))) ($none) ($begin ($do put out ($do length xs)) ($do do f xs))) ($defn write-int (x) (Int) ($none) ($do put out x)) ($defn write-ints (xs) (($of List Int)) ($none) ($do write-list write-int xs)) ($do write-mystruct x1))) ($defn deserialize-mystruct (in) (FileInputStream) MyStruct ($begin ($defn read-tag6 () () ($none) ($match (($do core/get-byte in)) ($branch (b) (Byte) b) ($branch (b) (False) ($do core/throw ($do core/FileReadException))))) ($defn read-mystruct () () MyStruct ($begin ($def tag7 ($none) ($do read-tag6)) ($match (($as? ($do ($fn (arg8) (($none)) ($none) ($do equal? tag7 arg8)) 0Y) ($or core/True core/False))) ($branch (x11) (core/True) ($do MyA ($do read-int) ($do read-int) false)) ($branch (x11) (core/False) ($match (($as? ($do ($fn (arg8) (($none)) ($none) ($do equal? tag7 arg8)) 1Y) ($or core/True core/False))) ($branch (x10) (core/True) ($do MyB ($do read-int) ($do read-int) ($do read-ints) false)) ($branch (x10) (core/False) ($match (($as? ($do ($fn (arg8) (($none)) ($none) ($do equal? tag7 arg8)) 2Y) ($or core/True core/False))) ($branch (x9) (core/True) ($do MyC ($do read-mystruct) ($do read-mystruct) false)) ($branch (x9) (core/False) ($do core/throw ($do core/FileReadException)))))))))) ($defn ($of read-list ($cap T)) (f) (($-> () ($cap T))) ($none) ($begin ($def n ($none) ($do read-int)) ($do to-list ($do repeatedly f n)))) ($begin) ($defn read-int () () Int ($match (($do get-int in)) ($branch (i) (Int) i) ($branch (i) (False) ($do fatal "Unexpected end of file.")))) ($defn read-ints () () ($of List Int) ($do read-list read-int)) ($do read-mystruct)))))


defn main () :
   val x = MyC(MyC(MyA(5, 25, false), MyB(5, 25, `(1 2 3), false), false),
               MyC(MyA(1, 1, false), MyB(5, 10, `(3 2 1), false), false),
               false)
   val o = FileOutputStream("mystruct.dat")
   try : serialize(o, x)
   finally : close(o)

   val i = FileInputStream("mystruct.dat")
   try :
      val y = deserialize-mystruct(i)
      println(y)
   finally : close(i)

main()