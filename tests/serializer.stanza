defpackage user :
   import core

deftype MyStruct
defstruct MyA <: MyStruct :
   a: Int
   b: Int
   c: False
defstruct MyB <: MyStruct :
   a: Int
   b: False|Int
   c: List<Int>
   d: False
defstruct MyC <: MyStruct :
   a: MyStruct
   b: MyStruct
   c: False

defmethod print (o:OutputStream, x:MyStruct) :
   print{o, _} $ match(x) :
      (x:MyA) : "MyA(%_, %_)" % [a(x), b(x)]
      (x:MyB) : "MyB(%_, %_, %_)" % [a(x), b(x), c(x)]
      (x:MyC) : "MyC(%_, %_)" % [a(x), b(x)]   

((defn serialize (out : FileOutputStream x3 : MyStruct) : ((defn write-mystruct (x4 : MyStruct) : (match (@do x4) : ((x5 : MyA) : (core/put (@do out 0Y) write-int (@do a (@do x5)) write-int (@do b (@do x5))) (x6 : MyB) : (core/put (@do out 1Y) write-int (@do a (@do x6)) (write-opt (@of Int) (@do-afn write-int _)) (@do b (@do x6)) (write-list (@do-afn write-int _)) (@do c (@do x6))) (x7 : MyC) : (core/put (@do out 2Y) write-mystruct (@do a (@do x7)) write-mystruct (@do b (@do x7)))))) (defn write-int (x : Int) : ($do put out x)) () ($defn ($of write-list ($cap T)) (f xs) (($-> (T) False) ($of List ($cap T))) ($none) ($begin ($do put out ($do length xs)) ($do do f xs))) () ($defn ($of write-opt T) (f x) (($-> (T) False) ($or T False)) ($none) ($match (($as? ($match (x) ($branch (x) (False) true) ($branch (x) (($none)) false)) ($or core/True core/False))) ($branch (x2) (core/True) ($do write-int 0)) ($branch (x2) (core/False) ($begin ($do write-int 1) ($do f ($as x T)))))) write-mystruct (@do x3))) (defn deserialize-mystruct (in : FileInputStream) -> MyStruct : (defn read-tag8 () : (match (@do core/get-byte (@do in)) : ((b : Byte) : b (b : False) : core/throw (@do core/FileReadException (@do)))) (defn read-mystruct () -> MyStruct : (val tag9 = read-tag8 (@do) switch (@afn tag9 == _) : (0Y : MyA (@do read-int (@do) read-int (@do) false) 1Y : MyB (@do read-int (@do) (read-opt (@of Int) (@do-afn read-int)) (@do) (read-list (@do-afn read-int)) (@do) false) 2Y : MyC (@do read-mystruct (@do) read-mystruct (@do) false) else : core/throw (@do core/FileReadException (@do))))) (defn read-int () -> Int : ($match (($do get-int in)) ($branch (i) (Int) i) ($branch (i) (False) ($do fatal "Unexpected end of file.")))) ($defn ($of read-list ($cap T)) (f) (($-> () ($cap T))) ($none) ($begin ($def n ($none) ($do read-int)) ($do to-list ($do repeatedly f n)))) () ($defn ($of read-opt T) (f) (($-> () T)) ($none) ($begin ($def n ($none) ($do read-int)) ($match (($as? ($do equal? n 1) ($or core/True core/False))) ($branch (x1) (core/True) ($do f)) ($branch (x1) (core/False) false)))) () read-mystruct (@do))))


defn main () :
   val x = MyC(MyC(MyA(5, 25, false), MyB(5, 25, `(1 2 3), false), false),
               MyC(MyA(1, 1, false), MyB(5, 10, `(3 2 1), false), false),
               false)
   val o = FileOutputStream("mystruct.dat")
   try : serialize(o, x)
   finally : close(o)

   val i = FileInputStream("mystruct.dat")
   try :
      val y = deserialize-mystruct(i)
      println(y)
   finally : close(i)

main()