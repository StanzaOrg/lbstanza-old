############################################################
################## Core Library ############################
############################################################

The core library consists of the functions and types defined in the
"core" package.

============================================================
================== Number Types ============================
============================================================

The following types make up Stanza's basic numerical types.

   deftype Byte <: Equalable & Hashable & Comparable<Byte>
   deftype Char <: Equalable & Hashable & Comparable<Char>
   deftype Int <: Equalable & Hashable & Comparable<Int>
   deftype Long <: Equalable & Hashable & Comparable<Long>
   deftype Float <: Equalable & Hashable & Comparable<Float>
   deftype Double <: Equalable & Hashable & Comparable<Double>
   
A Byte represents an 8-bit unsigned integer between 0 and 255
(inclusive). A Char represents a single byte ascii character. An Int
represents a 32-bit signed integer. A Long represents a 64-bit signed
integer. A Float represents a 32-bit real number in IEEE 754
encoding. A Double represents a 64-bit real number in IEEE 754
encoding.

Note that the numerical types are each subtypes of Equalable,
Hashable, and Comparable. This means that they support the equality
operator, implements an appropriate method for the hash multi, and can
be compared against themselves.

                  Equality
                  ========

Each of the numerical types are subtypes of Equalable, and hence
implements an appropriate method for the equal? multi. Note that
numerical values of different types are never defined to be equal to
one another. Thus the Int, 0, is not equal to the Long, 0L. 

   defmethod equal? (x:Byte, y:Byte) -> True|False
   defmethod equal? (x:Char, y:Char) -> True|False
   defmethod equal? (x:Int, y:Int) -> True|False
   defmethod equal? (x:Long, y:Long) -> True|False
   defmethod equal? (x:Float, y:Float) -> True|False
   defmethod equal? (x:Double, y:Double) -> True|False

                 Comparable
                 ==========

Each of the numerical types are subtypes of Comparable, and hence
implements an appropriate methods for comparison operations: less?,
less-eq?, greater?, greater-eq?. 

   defmethod less? (x:Byte, y:Byte) -> True|False
   defmethod less? (x:Char, y:Char) -> True|False
   defmethod less? (x:Int, y:Int) -> True|False
   defmethod less? (x:Long, y:Long) -> True|False
   defmethod less? (x:Float, y:Float) -> True|False
   defmethod less? (x:Double, y:Double) -> True|False

   defmethod less-eq? (x:Byte, y:Byte) -> True|False
   defmethod less-eq? (x:Char, y:Char) -> True|False
   defmethod less-eq? (x:Int, y:Int) -> True|False
   defmethod less-eq? (x:Long, y:Long) -> True|False
   defmethod less-eq? (x:Float, y:Float) -> True|False
   defmethod less-eq? (x:Double, y:Double) -> True|False

   defmethod greater? (x:Byte, y:Byte) -> True|False
   defmethod greater? (x:Char, y:Char) -> True|False
   defmethod greater? (x:Int, y:Int) -> True|False
   defmethod greater? (x:Long, y:Long) -> True|False
   defmethod greater? (x:Float, y:Float) -> True|False
   defmethod greater? (x:Double, y:Double) -> True|False

   defmethod greater-eq? (x:Byte, y:Byte) -> True|False
   defmethod greater-eq? (x:Char, y:Char) -> True|False
   defmethod greater-eq? (x:Int, y:Int) -> True|False
   defmethod greater-eq? (x:Long, y:Long) -> True|False
   defmethod greater-eq? (x:Float, y:Float) -> True|False
   defmethod greater-eq? (x:Double, y:Double) -> True|False

                Hashable
                ========

Each of the numerical types are subtypes of Hashable, and hence
implements an appropriate method for the hash multi. They can hence be
used as keys for a HashTable.

   defmethod hash (x:Byte) -> Int
   defmethod hash (x:Char) -> Int
   defmethod hash (x:Int) -> Int
   defmethod hash (x:Long) -> Int
   defmethod hash (x:Float) -> Int
   defmethod hash (x:Double) -> Int